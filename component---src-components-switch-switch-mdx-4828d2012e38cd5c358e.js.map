{"version":3,"sources":["webpack:///../src/components/Switch/Switch.tsx","webpack:///../src/components/Switch/Switch.mdx","webpack:///../src/components/Helpers/Toggle.tsx"],"names":["AnimatedView","animated","View","Switch","props","size","value","isDisabled","onValueChange","overrides","theme","useTheme","getOverrides","StyledTouchable","onPress","dlv","Touchable","touchableProps","StyledBackground","Background","backgroundProps","StyledCircle","Circle","circleProps","children","style","TouchableOpacity","activeOpacity","disabled","alignSelf","flexDirection","flexWrap","getCircleSize","isControlSize","controlHeights","getContainerSize","viewProps","backgroundColor","useSpring","config","springDefaultConfig","colors","background","greyDefault","primaryDefault","circleSize","containerSize","alignItems","greyLight","borderRadius","height","padding","width","circleColor","content","circlePosition","display","justifyContent","transform","translateX","name","color","text","white","primary","default","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Box","Toggle","initial","on","set","toggle","of","isMDXComponent","React","useState","isOn","setIsOn","handleToggle","useCallback","handleSet"],"mappings":"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","file":"component---src-components-switch-switch-mdx-4828d2012e38cd5c358e.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { Icon } from '../Icon';\n\nconst AnimatedView = animated(View);\n\ninterface SwitchBaseProps {\n  /**\n   * The size of the switch.\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as switched on.\n   * @default false\n   */\n  value?: boolean;\n\n  /**\n   * When true, the switch is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface SwitchOverrides {\n  Touchable: TouchableProps;\n  Background: BackgroundProps;\n  Circle: CircleProps;\n}\n\nexport interface SwitchProps\n  extends WithOverrides<SwitchBaseProps, SwitchOverrides> {}\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    size = 'medium',\n    value = false,\n    isDisabled = false,\n    onValueChange = () => {\n      return;\n    },\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      isDisabled,\n      size,\n      onPress: () => onValueChange(!value),\n    },\n    dlv(theme, 'overrides.Switch.Touchable'),\n    overrides.Touchable,\n  );\n  const [Background, backgroundProps] = getOverrides(\n    StyledBackground,\n    props,\n    {\n      isDisabled,\n      size,\n      value,\n    },\n    dlv(theme, 'overrides.Switch.Background'),\n    overrides.Background,\n  );\n  const [Circle, circleProps] = getOverrides(\n    StyledCircle,\n    props,\n    {\n      isDisabled,\n      size,\n      value,\n    },\n    dlv(theme, 'overrides.Switch.Circle'),\n    overrides.Circle,\n  );\n\n  return (\n    <Touchable {...touchableProps}>\n      <Background {...backgroundProps}>\n        <Circle {...circleProps} />\n      </Background>\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { size, isDisabled, children, style, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      disabled={isDisabled}\n      style={[\n        {\n          alignSelf: 'flex-start',\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface BackgroundProps extends ViewProps {\n  children?: React.ReactNode;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  value: boolean;\n}\n\nconst getCircleSize = (size: ControlSize | number, theme: Theme) => {\n  return isControlSize(size) ? theme.controlHeights[size] - 8 : size;\n};\n\nconst getContainerSize = (size: ControlSize | number, theme: Theme) => {\n  return getCircleSize(size, theme) * 2;\n};\n\nconst StyledBackground = (props: BackgroundProps) => {\n  const { size, isDisabled, children, value, style, ...viewProps } = props;\n  const theme = useTheme();\n  const { backgroundColor } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: value\n      ? isDisabled\n        ? theme.colors.background.greyDefault\n        : theme.colors.background.primaryDefault\n      : theme.colors.background.greyDefault,\n  });\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  return (\n    <AnimatedView\n      // @ts-ignore\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.greyLight,\n          borderRadius: 24,\n          flexDirection: 'row',\n          height: circleSize + 8,\n          padding: 3,\n          width: containerSize,\n        },\n        { backgroundColor },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </AnimatedView>\n  );\n};\n\ninterface CircleProps extends ViewProps {\n  size: ControlSize | number;\n  isDisabled: boolean;\n  value: boolean;\n}\n\nconst StyledCircle = (props: CircleProps) => {\n  const { size, isDisabled, value, style, ...viewProps } = props;\n  const theme = useTheme();\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  const { circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    circleColor: theme.colors.background.content,\n    circlePosition: value ? containerSize - (circleSize + 6) : 0,\n  });\n\n  return (\n    <AnimatedView\n      // @ts-ignore\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderRadius: 24,\n          display: 'flex',\n          height: circleSize,\n          justifyContent: 'center',\n          padding: 0,\n          width: circleSize,\n        },\n        { backgroundColor: circleColor },\n        { transform: [{ translateX: circlePosition }] },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon\n          name=\"check\"\n          size=\"xsmall\"\n          color={\n            isDisabled ? theme.colors.text.white : theme.colors.text.primary\n          }\n        />\n      ) : (\n        <Icon\n          name=\"x\"\n          size=\"xsmall\"\n          color={\n            isDisabled ? theme.colors.text.white : theme.colors.text.default\n          }\n        />\n      )}\n    </AnimatedView>\n  );\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Switch } from './Switch';\nimport { Box } from '../Box';\nimport { Toggle } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle, set }) => <Switch value={on} onValueChange={set} />}\\n  </Toggle>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Switch,\n      Box,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle,\n            set\n          }) => <Switch value={on} onValueChange={set} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n"],"sourceRoot":""}