{"version":3,"sources":["webpack:///../src/components/Divider/Divider.tsx","webpack:///../src/components/Divider/Divider.mdx"],"names":["Divider","props","size","color","orientation","style","viewProps","theme","useTheme","backgroundColor","getDividerColor","colors","border","default","dividerSize","isControlSize","dividerScale","styleMap","horizontal","height","width","vertical","View","getStyle","dlv","borderColors","borderColor","large","medium","small","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Box","paddingVertical","of","isMDXComponent"],"mappings":"8iCAqCO,IAAMA,EAAU,SAACC,GAAwB,MAO1CA,EALFC,YAF4C,MAErC,QAFqC,IAO1CD,EAJFE,aAH4C,MAGpC,UAHoC,IAO1CF,EAHFG,mBAJ4C,MAI9B,aAJ8B,EAK5CC,EAEEJ,EAFFI,MACGC,E,oIANyC,CAO1CL,EAP0C,wCAQxCM,EAAQC,cAERC,EAAkBC,EAAgBH,EAAMI,OAAOC,OAA7BF,CACtBP,GAASI,EAAMI,OAAOC,OAAOC,SAGzBC,EAAcC,YAAcb,GAAQc,EAAad,GAAQA,EAEzDe,EAAW,CACfC,WAAY,CACVT,kBACAU,OAAQL,EACRM,MAAO,QAETC,SAAU,CACRZ,kBACAU,OAAQ,OACRC,MAAON,IAIX,OACE,YAACQ,EAAA,EAAD,GACEjB,MAAO,CACLD,EAAca,EAASb,GAAea,EAASC,WAC/CK,YAAStB,EAAOI,GAChBkB,YAAStB,EAAOuB,IAAIjB,EAAO,8BAEzBD,U,+MAKV,IAAMI,EAAkB,SAACe,GAAD,OAAgC,SACtDC,GAKA,OAFoBD,EAAaC,IAEXA,IAGlBV,EAAkD,CACtDW,MAAO,EACPC,OAAQ,EACRC,MAAO,G,8SCjFF,IAAMC,EAAe,Q,oNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGlC,E,oIACF,mBACD,OAAO,YAAC+B,EAAD,KAAeD,EAAiB9B,EAAhC,CAAuCkC,WAAYA,EAAYC,QAAQ,cAK5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oDAAqDC,QAAS,CAC/FtC,QACAgC,kBACAO,eACAC,UACAzC,UACA0C,SACCN,QAAQ,cACb,YAACM,EAAA,EAAD,CAAKC,gBAAiB,GAAIP,QAAQ,OAChC,YAAC,EAAD,CAASA,QAAQ,cAGjB,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOQ,GAAI5C,EAASoC,QAAQ,W,2MAKhCF,EAAWW,gBAAiB","file":"component---src-components-divider-divider-mdx-5aa0ba72fc15804c5723.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { BorderColor, BorderColors, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getStyle, OverrideStyle, Style } from '../../utils/Overrides';\n\ntype DividerOrientation = 'horizontal' | 'vertical';\n\nexport interface DividerProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the divider.\n   * @default small\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Color of the divider.\n   * @default colors.border.default\n   */\n  color?: BorderColor | string;\n\n  /**\n   * Orientation of the divier\n   * @default \"horizontal\"\n   */\n  orientation?: DividerOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<DividerProps, ViewStyle>;\n}\n\nexport type DividerOverride = OverrideStyle<DividerProps, ViewStyle>;\n\nexport const Divider = (props: DividerProps) => {\n  const {\n    size = 'small',\n    color = 'default',\n    orientation = 'horizontal',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const backgroundColor = getDividerColor(theme.colors.border)(\n    color || theme.colors.border.default,\n  );\n\n  const dividerSize = isControlSize(size) ? dividerScale[size] : size;\n\n  const styleMap = {\n    horizontal: {\n      backgroundColor,\n      height: dividerSize,\n      width: '100%',\n    },\n    vertical: {\n      backgroundColor,\n      height: '100%',\n      width: dividerSize,\n    },\n  };\n\n  return (\n    <View\n      style={[\n        orientation ? styleMap[orientation] : styleMap.horizontal,\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Divider.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\nconst getDividerColor = (borderColors: BorderColors) => (\n  borderColor: BorderColor,\n) => {\n  // @ts-ignore\n  const presetColor = borderColors[borderColor] as string | undefined;\n\n  return presetColor || borderColor;\n};\n\nconst dividerScale: { [size in ControlSize]: number } = {\n  large: 3,\n  medium: 2,\n  small: 1,\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Divider } from './Divider';\nimport { Box } from '../Box';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"divider\"\n    }}>{`Divider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box paddingVertical={40}>\\n  <Divider />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Divider,\n      Box\n    }} mdxType=\"Playground\">\n  <Box paddingVertical={40} mdxType=\"Box\">\n    <Divider mdxType=\"Divider\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Divider} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}