{"version":3,"sources":["webpack:///../src/components/Modal/Modal.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Modal","Box","Text","Button","Toggle","initial","on","set","toggle","visible","animationType","onRequestClose","height","onPress","title","outerOn","outerSet","innerOn","innerSet","useHistory","of","isMDXComponent"],"mappings":"qfAYO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,SADR,SAGA,+FAA8E,0BAAYC,WAAW,KAAvB,WAC9E,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,8hBAAuiBC,QAAS,CACjlBL,QACAH,kBACAS,eACAC,UACAC,UACAC,QACAC,SACAC,WACAC,YACCX,QAAQ,cACb,YAAC,IAAD,CAAQY,SAAS,EAAOZ,QAAQ,WAC7B,gBACKa,EADL,EACKA,GAEAC,GAHL,EAEKC,OAFL,EAGKD,KAHL,OAIS,YAAC,IAAD,CAAKd,QAAQ,OACnB,YAAC,IAAD,CAAOgB,QAASH,EAAII,cAAc,QAAQC,eAAgB,kBAAMJ,GAAI,IAAQd,QAAQ,SAClF,YAAC,IAAD,CAAKmB,OAAQ,KAAMnB,QAAQ,OACzB,YAAC,IAAD,CAAMA,QAAQ,QAAd,gCACA,YAAC,IAAD,CAAQoB,QAAS,kBAAMN,GAAI,IAAQO,MAAM,mBAAmBrB,QAAQ,WACpE,YAAC,IAAD,CAAQoB,QAAS,kBAAMN,GAAI,IAAQO,MAAM,mBAAmBrB,QAAQ,aAGxE,YAAC,IAAD,CAAQoB,QAAS,kBAAMN,GAAI,IAAOO,MAAM,aAAarB,QAAQ,gBAIjE,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,ulDAAwmDC,QAAS,CAClpDL,QACAH,kBACAS,eACAC,UACAC,UACAC,QACAC,SACAC,WACAC,YACCX,QAAQ,cACb,YAAC,IAAD,CAAQY,SAAS,EAAOZ,QAAQ,WAC7B,gBACSsB,EADT,EACKT,GACKU,EAFV,EAEKT,IAFL,OAGS,YAAC,IAAD,CAAKd,QAAQ,OACnB,YAAC,IAAD,CAAOgB,QAASM,EAASL,cAAc,OAAOC,eAAgB,kBAAMK,GAAS,IAAQvB,QAAQ,SAC3F,YAAC,IAAD,CAAKmB,OAAQ,KAAMnB,QAAQ,OACzB,YAAC,IAAD,CAAMA,QAAQ,QAAd,eACA,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAQF,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAQF,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQY,SAAS,EAAOZ,QAAQ,WAC7B,gBACOwB,EADP,EACGX,GACKY,EAFR,EAEGX,IAFH,OAGO,YAAC,IAAD,CAAKd,QAAQ,OACjB,YAAC,IAAD,CAAOgB,QAASQ,EAASP,cAAc,QAAQC,eAAgB,kBAAMO,GAAS,IAAQzB,QAAQ,SAC5F,YAAC,IAAD,CAAKmB,OAAQ,KAAMnB,QAAQ,OACzB,YAAC,IAAD,CAAMA,QAAQ,QAAd,eACA,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAQJ,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAQJ,MAAM,+BAA+BrB,QAAQ,aAGzF,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAOJ,MAAM,mBAAmBrB,QAAQ,iBAKlF,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAOF,MAAM,mBAAmBrB,QAAQ,gBAI5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,iCAAgB,0BAAYC,WAAW,KAAvB,cAAhB,yIAAgN,0BAAYA,WAAW,KAAvB,SAAhN,qCACA,2CAA0B,0BAAYA,WAAW,KAAvB,SAA1B,8BACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kkDAA+kDC,QAAS,CACznDL,QACAH,kBACAS,eACAC,UACAC,UACAC,QACAC,SACAC,WACAC,YACCX,QAAQ,cACb,YAAC,IAAD,CAAQY,SAAS,EAAOZ,QAAQ,WAC7B,gBACSsB,EADT,EACKT,GACKU,EAFV,EAEKT,IAFL,OAGS,YAAC,IAAD,CAAKd,QAAQ,OACnB,YAAC,IAAD,CAAO0B,YAAU,EAACV,QAASM,EAASJ,eAAgB,kBAAMK,GAAS,IAAQvB,QAAQ,SACjF,YAAC,IAAD,CAAKmB,OAAQ,KAAMnB,QAAQ,OACzB,YAAC,IAAD,CAAMA,QAAQ,QAAd,eACA,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAQF,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAQF,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQY,SAAS,EAAOZ,QAAQ,WAC7B,gBACOwB,EADP,EACGX,GACKY,EAFR,EAEGX,IAFH,OAGO,YAAC,IAAD,CAAKd,QAAQ,OACjB,YAAC,IAAD,CAAOgB,QAASQ,EAASE,YAAU,EAACR,eAAgB,kBAAMO,GAAS,IAAQzB,QAAQ,SACjF,YAAC,IAAD,CAAKmB,OAAQ,KAAMnB,QAAQ,OACzB,YAAC,IAAD,CAAMA,QAAQ,QAAd,eACA,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAQJ,MAAM,+BAA+BrB,QAAQ,WACrF,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAQJ,MAAM,+BAA+BrB,QAAQ,aAGzF,YAAC,IAAD,CAAQoB,QAAS,kBAAMK,GAAS,IAAOJ,MAAM,mBAAmBrB,QAAQ,iBAKlF,YAAC,IAAD,CAAQoB,QAAS,kBAAMG,GAAS,IAAOF,MAAM,mBAAmBrB,QAAQ,gBAI5E,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAO2B,GAAIpB,IAAOP,QAAQ,W,uMAK9BH,EAAW+B,gBAAiB","file":"component---src-components-modal-modal-mdx-76e54e9c4f3aac737ea3.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/paramount/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Modal } from './Modal';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\nimport { Button } from '../Button';\nimport { Toggle } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`Modal covers the full screen. For a prompt/small version of modal, use `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle, set }) => (\\n    <Box>\\n      <Modal\\n        visible={on}\\n        animationType=\\\"slide\\\"\\n        onRequestClose={() => set(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Put any content in the modal</Text>\\n          <Button onPress={() => set(false)} title=\\\"Close button one\\\" />\\n          <Button onPress={() => set(false)} title=\\\"Close button two\\\" />\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => set(true)} title=\\\"Open modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Box,\n      Text,\n      Button,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle,\n          set\n        }) => <Box mdxType=\"Box\">\n        <Modal visible={on} animationType=\"slide\" onRequestClose={() => set(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Put any content in the modal</Text>\n            <Button onPress={() => set(false)} title=\"Close button one\" mdxType=\"Button\" />\n            <Button onPress={() => set(false)} title=\"Close button two\" mdxType=\"Button\" />\n          </Box>\n        </Modal>\n        <Button onPress={() => set(true)} title=\"Open modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"nested\"\n    }}>{`Nested`}</h3>\n    <Playground __position={1} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal\\n        visible={outerOn}\\n        animationType=\\\"fade\\\"\\n        onRequestClose={() => outerSet(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  animationType=\\\"slide\\\"\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Box,\n      Text,\n      Button,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on: outerOn,\n          set: outerSet\n        }) => <Box mdxType=\"Box\">\n        <Modal visible={outerOn} animationType=\"fade\" onRequestClose={() => outerSet(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Outer modal</Text>\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button one\" mdxType=\"Button\" />\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button two\" mdxType=\"Button\" />\n            <Toggle initial={false} mdxType=\"Toggle\">\n              {({\n                  on: innerOn,\n                  set: innerSet\n                }) => <Box mdxType=\"Box\">\n                  <Modal visible={innerOn} animationType=\"slide\" onRequestClose={() => innerSet(false)} mdxType=\"Modal\">\n                    <Box height={1800} mdxType=\"Box\">\n                      <Text mdxType=\"Text\">Inner modal</Text>\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button one\" mdxType=\"Button\" />\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button two\" mdxType=\"Button\" />\n                    </Box>\n                  </Modal>\n                  <Button onPress={() => innerSet(true)} title=\"Open inner modal\" mdxType=\"Button\" />\n                </Box>}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"using-browser-history\"\n    }}>{`Using browser history`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`useHistory`}</inlineCode>{` prop it will mimic Android's back button behavior on web which closes modals. On RN, this will have no effect and will use a regular `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`. Works in nested modals as well.`}</p>\n    <p>{`Note: Uses history `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` to manipulate modal state`}</p>\n    <Playground __position={2} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal\\n        useHistory\\n        visible={outerOn}\\n        onRequestClose={() => outerSet(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  useHistory\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Box,\n      Text,\n      Button,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on: outerOn,\n          set: outerSet\n        }) => <Box mdxType=\"Box\">\n        <Modal useHistory visible={outerOn} onRequestClose={() => outerSet(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Outer modal</Text>\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button one\" mdxType=\"Button\" />\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button two\" mdxType=\"Button\" />\n            <Toggle initial={false} mdxType=\"Toggle\">\n              {({\n                  on: innerOn,\n                  set: innerSet\n                }) => <Box mdxType=\"Box\">\n                  <Modal visible={innerOn} useHistory onRequestClose={() => innerSet(false)} mdxType=\"Modal\">\n                    <Box height={1800} mdxType=\"Box\">\n                      <Text mdxType=\"Text\">Inner modal</Text>\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button one\" mdxType=\"Button\" />\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button two\" mdxType=\"Button\" />\n                    </Box>\n                  </Modal>\n                  <Button onPress={() => innerSet(true)} title=\"Open inner modal\" mdxType=\"Button\" />\n                </Box>}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}