{"version":3,"sources":["webpack:///../src/components/Badge/Badge.tsx","webpack:///../src/components/Badge/Badge.mdx"],"names":["Badge","props","size","color","isSolid","shape","title","testID","overrides","theme","useTheme","getOverrides","StyledRoot","dlv","Root","rootProps","StyledTitle","Title","titleProps","children","style","viewProps","shapeStyles","containerShapes","colors","fills","solid","subtle","isControlSize","small","minHeight","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","View","alignItems","alignSelf","backgroundColor","display","flexDirection","justifyContent","textProps","Text","weight","textTransform","getStyle","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Box","of","isMDXComponent"],"mappings":"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","file":"component---src-components-badge-badge-mdx-b99275b482892182e5d6.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ContainerShape, ControlSize, FillColor } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Text, TextProps } from '../Typography';\n\ninterface BadgeBaseProps {\n  /** Title of the badge */\n  title?: OptionalString;\n\n  /**\n   * Color of the badge\n   * @default \"neutral\"\n   */\n  color?: FillColor;\n\n  /**\n   * Size of the badge\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Shape of the container\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * When true, display in solid mode\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface BadgeOverrides {\n  Root: RootProps;\n  Title: TitleProps;\n}\n\nexport interface BadgeProps\n  extends WithOverrides<BadgeBaseProps, BadgeOverrides> {}\n\nexport const Badge = (props: BadgeProps) => {\n  const {\n    size = 'medium',\n    color = 'neutral',\n    isSolid = false,\n    shape = 'rounded',\n    title,\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { size, isSolid, color, shape, testID },\n    dlv(theme, 'overrides.Badge.Root'),\n    overrides.Root,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    { size, isSolid, color, title },\n    dlv(theme, 'overrides.Badge.Title'),\n    overrides.Title,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Title {...titleProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  color: FillColor;\n  size: ControlSize | number;\n  shape: ContainerShape;\n  isSolid: boolean;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { size, color, isSolid, shape, children, style, ...viewProps } = props;\n  const theme = useTheme();\n  const shapeStyles = theme.containerShapes[shape];\n  const fills = isSolid ? theme.fills.solid : theme.fills.subtle;\n\n  const colors = fills[color];\n  const { minHeight, paddingLeft, paddingRight } = isControlSize(size)\n    ? {\n        small: {\n          minHeight: theme.controlHeights.small,\n          paddingLeft: theme.controlPaddings.small,\n          paddingRight: theme.controlPaddings.small,\n        },\n\n        medium: {\n          minHeight: theme.controlHeights.medium,\n          paddingLeft: theme.controlPaddings.medium,\n          paddingRight: theme.controlPaddings.medium,\n        },\n\n        large: {\n          minHeight: theme.controlHeights.large,\n          paddingLeft: theme.controlPaddings.large,\n          paddingRight: theme.controlPaddings.large,\n        },\n      }[size]\n    : {\n        minHeight: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      };\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          alignSelf: 'flex-start',\n          backgroundColor: colors.backgroundColor,\n          display: 'flex',\n          flexDirection: 'row',\n          minHeight,\n          justifyContent: 'center',\n          paddingLeft,\n          paddingRight,\n          ...shapeStyles,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  color: FillColor;\n  title?: OptionalString;\n  isSolid: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { size, color, isSolid, title, style, ...textProps } = props;\n  const theme = useTheme();\n  const fills = isSolid ? theme.fills.solid : theme.fills.subtle;\n\n  const colors = fills[color];\n\n  return (\n    <Text\n      weight=\"bold\"\n      style={[\n        { color: colors.color, textTransform: 'uppercase' },\n        getStyle(props, style),\n      ]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Badge } from './Badge';\nimport { Box } from '../Box';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"badge\"\n    }}>{`Badge`}</h1>\n    <p>{`Display to indicate status or feat of service`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Badge title=\\\"Badge\\\" color=\\\"teal\\\" isSolid size=\\\"large\\\" shape=\\\"pill\\\" />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Badge,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Badge title=\"Badge\" color=\"teal\" isSolid size=\"large\" shape=\"pill\" mdxType=\"Badge\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Badge} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}