{"version":3,"sources":["webpack:///../docs/Customization.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"icAMO,IAAMA,EAAe,Q,wMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,kFACA,iBAAQ,CACN,GAAM,iBADR,iBAGA,+GAA8F,0BAAYC,WAAW,KAAvB,SAA9F,cAA8J,0BAAYA,WAAW,KAAvB,iBAA9J,iCACyB,mBAAGA,WAAW,KAAQ,CAC3C,KAAQ,aADa,qBAGzB,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,srBAsCL,iFAAgE,0BAAYA,WAAW,KAAvB,aAChE,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iGAQL,iBAAQ,CACN,GAAM,cADR,cAGA,oHAAmG,mBAAGA,WAAW,KAAQ,CACrH,KAAQ,4BADuF,oBAGnG,wDAAuC,mBAAGA,WAAW,KAAQ,CACzD,KAAQ,mBAD2B,iBAAvC,YAEuC,mBAAGA,WAAW,KAAQ,CACzD,KAAQ,wBAD2B,kBAGvC,iBAAQ,CACN,GAAM,iBADR,iBAGA,yEAAwD,0BAAYA,WAAW,KAAvB,aAAxD,mHAAiO,0BAAYA,WAAW,KAAvB,iBAAjO,0DACA,gDAA+B,0BAAYA,WAAW,KAAvB,cAA/B,MACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6uBAiCL,iBAAQ,CACN,GAAM,sBADR,sBAGA,oCAAmB,0BAAYA,WAAW,KAAvB,iBAAnB,kBAA+F,0BAAYA,WAAW,KAAvB,cAA/F,kCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,g2CAoCL,iBAAQ,CACN,GAAM,WADR,WAGA,iHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ikQ,+LAkaTJ,EAAWK,gBAAiB","file":"component---docs-customization-mdx-a75b1159b7aa1ee3c340.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/paramount/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h1>\n    <p>{`Paramount UI provides full customizability of components.`}</p>\n    <h2 {...{\n      \"id\": \"look-and-feel\"\n    }}>{`Look and Feel`}</h2>\n    <p>{`For general look and feel customization, you can tweak the tokens in the theme. Pass a `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{` object to `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{`.\nFor all available options, `}<a parentName=\"p\" {...{\n        \"href\": \"#options\"\n      }}>{`refer to Options`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { ThemeProvider } from 'paramount-ui'\n\n<ThemeProvider\n  value={{\n    // Colors\n    colors: Colors;\n    fills: Fills;\n\n    // Layout\n    layout: Layout;\n    spacing: SpacingSizes;\n\n    // Typography\n    fontFamilies: FontFamilies;\n    fontWeights: FontWeights;\n\n    headingSizes: HeadingSizes;\n    paragraphSizes: ParagraphSizes;\n    textSizes: TextSizes;\n\n    // Elevations\n    elevations: Elevations;\n\n    // Controls - Buttons, Pickers, Inputs etc.\n    controlPaddings: ControlSizes;\n    controlHeights: ControlSizes;\n    controlBorderRadius: ControlSizes;\n\n    // Containers\n    containerShapes: ContainerShapes;\n  }}\n>\n  ...\n</ThemeProvider>\n\n`}</code></pre>\n    <p>{`You can also import theme values from a convenience hook `}<inlineCode parentName=\"p\">{`useTheme`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const MyComponent = () => {\n  const { colors, fills, ...theme } = useTheme();\n\n  ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <p>{`For more granular level of component customization, we use \"Overrides\" approach inspired by `}<a parentName=\"p\" {...{\n        \"href\": \"https://baseweb.design/\"\n      }}>{`Base UI by Uber`}</a></p>\n    <p>{`Overrides can be applied either `}<a parentName=\"p\" {...{\n        \"href\": \"#per-component\"\n      }}>{`per component`}</a>{` or from `}<a parentName=\"p\" {...{\n        \"href\": \"#from-themeprovider\"\n      }}>{`ThemeProvider`}</a></p>\n    <h3 {...{\n      \"id\": \"per-component\"\n    }}>{`Per component`}</h3>\n    <p>{`Components with more than one React Node, expose `}<inlineCode parentName=\"p\">{`overrides`}</inlineCode>{` prop, through which you can customize the style or even its children props. Each component has a corresponding `}<inlineCode parentName=\"p\">{`Overrides API`}</inlineCode>{` section, through which you can see available options.`}</p>\n    <p>{`For example (taken from `}<inlineCode parentName=\"p\">{`Picker.tsx`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Button } from 'paramount-ui';\n\nconst CustomButton = () => {\n  const { isSelected, value, onSelect } = props;\n  const theme = useTheme();\n\n  return (\n    <Button\n      color={isSelected ? 'primary' : 'default'}\n      overrides={{\n        Touchable: {\n          style: {\n            backgroundColor: isSelected ? 'white' : 'transparent',\n            paddingLeft: 0,\n            paddingRight: 0,\n          },\n        },\n        Title: {\n          style: {\n            color: isSelected\n              ? theme.colors.text.primary\n              : theme.colors.text.muted,\n          },\n        },\n      }}\n      title={typeof value === 'string' ? value : 'Invalid value'}\n      onPress={onSelect}\n    />\n  );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"from-themeprovider\"\n    }}>{`From ThemeProvider`}</h3>\n    <p>{`In the same `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` as above, use `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` option to apply the overrides`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface ThemeOverrides {\n  Alert: Overrides<any, AlertOverrides>;\n  Avatar: Overrides<any, AvatarOverrides>;\n  Badge: Overrides<any, BadgeOverrides>;\n  Button: Overrides<any, ButtonOverrides>;\n  Checkbox: Overrides<any, CheckboxOverrides>;\n  Collapsible: Overrides<any, CollapsibleOverrides>;\n  Column: ColumnOverride;\n  Container: ContainerOverride;\n  Counter: Overrides<any, CounterOverrides>;\n  Dialog: Overrides<any, DialogOverrides>;\n  Divider: DividerOverride;\n  Drawer: Overrides<any, DrawerOverrides>;\n  FormField: Overrides<any, FormFieldOverrides>;\n  Heading: HeadingOverride;\n  Label: Overrides<any, LabelOverrides>;\n  ListItem: Overrides<any, ListItemOverrides>;\n  ListPicker: Overrides<any, ListPickerOverrides<any>>;\n  NativePicker: Overrides<any, NativePickerOverrides>;\n  Overlay: OverlayOverride;\n  Popover: Overrides<any, PopoverOverrides>;\n  Positioner: Overrides<any, PositionerOverrides>;\n  ProgressBar: Overrides<any, ProgressBarOverrides>;\n  Rating: Overrides<any, RatingOverrides>;\n  Row: RowOverride;\n  Slider: Overrides<any, SliderOverrides>;\n  Spacing: SpacingOverride;\n  Switch: Overrides<any, SwitchOverrides>;\n  Picker: Overrides<any, PickerOverrides<any, any, any>>;\n  Text: TextOverride;\n  TextInput: Overrides<any, TextInputOverrides>;\n  WheelPicker: Overrides<any, WheelPickerOverrides<any>>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h2>\n    <p>{`These are all the available theme configuration options, as well as their default values`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst spacing: { [size in SpacingSize]: number } = {\n  xsmall: 4,\n  small: 8,\n  medium: 16,\n  large: 24,\n  xlarge: 32,\n  xxlarge: 40,\n  xxxlarge: 48,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.teal.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: \\`\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"\\`,\n        mono: \\`\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace\\`,\n        text: \\`\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"\\`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const layout: Layout = {\n  breakpoints: {\n    small: 480,\n\n    medium: 768,\n\n    large: 992,\n\n    xlarge: 1200,\n  },\n  containerSizes: {\n    small: 540,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1200,\n  },\n  gridColumnCount: 12,\n  gutterWidth: 32,\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  spacing,\n  layout,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}