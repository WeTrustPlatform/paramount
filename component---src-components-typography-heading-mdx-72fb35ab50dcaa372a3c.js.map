{"version":3,"sources":["webpack:///../src/components/Typography/Heading.mdx","webpack:///../src/components/Typography/Heading.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Heading","Box","size","of","isMDXComponent","children","accessibilityLevel","align","color","weight","style","textProps","theme","useTheme","sizeStyle","getHeadingSize","headingSizes","accessibilityRole","Platform","OS","aria-level","getTextColor","colors","text","fontFamily","fontFamilies","heading","fontWeight","getFontWeight","fontWeights","textAlign","getStyle","dlv","fontSize"],"mappings":"geASO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,WADR,WAGA,gDAA+B,0BAAYC,WAAW,KAAvB,QAA/B,cACA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oRAAiSC,QAAS,CAC3UL,QACAH,kBACAS,eACAC,UACAC,YACAC,SACCR,QAAQ,cACb,YAAC,IAAD,CAAKA,QAAQ,OACX,YAAC,IAAD,CAASS,KAAK,WAAWT,QAAQ,WAAjC,YACA,YAAC,IAAD,CAASS,KAAK,UAAUT,QAAQ,WAAhC,WACA,YAAC,IAAD,CAASS,KAAK,SAAST,QAAQ,WAA/B,UACA,YAAC,IAAD,CAASS,KAAK,QAAQT,QAAQ,WAA9B,SACA,YAAC,IAAD,CAASS,KAAK,SAAST,QAAQ,WAA/B,UACA,YAAC,IAAD,CAASS,KAAK,QAAQT,QAAQ,WAA9B,WAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOU,GAAIH,IAASP,QAAQ,W,8MAKhCH,EAAWc,gBAAiB,G,w8CCCrB,IAAMJ,EAAU,SAACR,GAAwB,IAE5Ca,EAQEb,EARFa,SACAC,EAOEd,EAPFc,mBAH4C,EAU1Cd,EANFU,YAJ4C,MAIrC,SAJqC,IAU1CV,EALFe,aAL4C,MAKpC,OALoC,IAU1Cf,EAJFgB,aAN4C,MAMpC,UANoC,EAO5CC,EAGEjB,EAHFiB,OACAC,EAEElB,EAFFkB,MACGC,E,oIATyC,CAU1CnB,EAV0C,2EAWxCoB,EAAQC,cACRC,EAAYC,EAAeH,EAAMI,aAArBD,CAAmCb,GAErD,OACE,YAAC,IAAD,GAEEe,kBAAmC,QAAhBC,IAASC,GAAe,UAAY,OACvDC,aAAYd,EACZI,MAAO,CAAC,EAAD,GAEAI,EAFA,CAGHN,MAAOa,YAAaT,EAAMU,OAAOC,KAA1BF,CAAgCb,GACvCgB,WAAYZ,EAAMa,aAAaC,QAC/BC,WACEC,YAAchB,EAAMiB,YAApBD,CAAiCnB,IAAWK,EAAUa,WACxDG,UAAWvB,IAEbwB,YAASvC,EAAOkB,GAChBqB,YAASvC,EAAOwC,IAAIpB,EAAO,8BAEzBD,GAEHN,S,kNAKA,IAAMU,EAAiB,SAACC,GAAD,OAAgC,SAC5Dd,GAKA,OAF0Bc,EAAad,IAEX,CAAE+B,SAAU/B,U","file":"component---src-components-typography-heading-mdx-72fb35ab50dcaa372a3c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Heading } from './Heading';\nimport { Box } from '../Box';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"heading\"\n    }}>{`Heading`}</h1>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` component`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Heading size=\\\"xxxlarge\\\">xxxlarge</Heading>\\n  <Heading size=\\\"xxlarge\\\">xxlarge</Heading>\\n  <Heading size=\\\"xlarge\\\">xlarge</Heading>\\n  <Heading size=\\\"large\\\">large</Heading>\\n  <Heading size=\\\"medium\\\">medium</Heading>\\n  <Heading size=\\\"small\\\">small</Heading>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Heading,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Heading size=\"xxxlarge\" mdxType=\"Heading\">xxxlarge</Heading>\n    <Heading size=\"xxlarge\" mdxType=\"Heading\">xxlarge</Heading>\n    <Heading size=\"xlarge\" mdxType=\"Heading\">xlarge</Heading>\n    <Heading size=\"large\" mdxType=\"Heading\">large</Heading>\n    <Heading size=\"medium\" mdxType=\"Heading\">medium</Heading>\n    <Heading size=\"small\" mdxType=\"Heading\">small</Heading>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Heading} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  Platform,\n  Text as RNText,\n  TextProps as RNTextProps,\n  TextStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport {\n  FontWeight,\n  HeadingSize,\n  HeadingSizes,\n  TextColor,\n} from '../../theme/Theme';\nimport { getStyle, OverrideStyle, Style } from '../../utils/Overrides';\n\nimport { getFontWeight, getTextColor } from './Text';\nimport { TextAlign } from './types';\n\nexport interface HeadingProps extends Omit<RNTextProps, 'style'> {\n  /** Text content */\n  children?: React.ReactNode;\n\n  /**\n   * Size of the heading.\n   * @default \"medium\"\n   */\n  size?: HeadingSize | number;\n\n  /**\n   * Alignment of the heading.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Color of the heading.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Weight of the heading.\n   * @default headingSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * Style callback or TextStyle object\n   */\n  style?: Style<HeadingProps, TextStyle>;\n\n  /**\n   * (Web only): Corresponding h1, h2, h3... levels\n   */\n  accessibilityLevel?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport type HeadingOverride = OverrideStyle<HeadingProps, TextStyle>;\n\nexport const Heading = (props: HeadingProps) => {\n  const {\n    children,\n    accessibilityLevel,\n    size = 'medium',\n    align = 'left',\n    color = 'default',\n    weight,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n  const sizeStyle = getHeadingSize(theme.headingSizes)(size);\n\n  return (\n    <RNText\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'heading' : 'none'}\n      aria-level={accessibilityLevel} // Web\n      style={[\n        {\n          ...sizeStyle,\n          color: getTextColor(theme.colors.text)(color),\n          fontFamily: theme.fontFamilies.heading,\n          fontWeight:\n            getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n          textAlign: align,\n        },\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Heading.style')),\n      ]}\n      {...textProps}\n    >\n      {children}\n    </RNText>\n  );\n};\n\nexport const getHeadingSize = (headingSizes: HeadingSizes) => (\n  size: HeadingSize | number,\n): TextStyle => {\n  // @ts-ignore\n  const presetHeadingSize = headingSizes[size] as TextStyle;\n\n  return presetHeadingSize || { fontSize: size };\n};\n"],"sourceRoot":""}