{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/SearchTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactNative","_reactPowerplug","_","_docz","_Inputs","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Text","Toggle","FormField","Props","TextInput","labelPosition","label","description","error","getStyles","theme","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","labelWrapperStyle","wrapperStyle","of","isMDXComponent","getFormFieldStyles","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","React","_interopRequireWildcard","_theme","_mergeStyles2","_Typography","_FormField","children","_props$labelPosition","useTheme","_mergeStyles","mergeStyles","labelContent","createElement","View","style","Label","textStyle","color","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_Icon","_IconTextInput","ClearableTextInputBase","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","IconTextInput","ref","TouchableOpacity","onPress","Icon","name","size","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","leftContainerStyle","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","textInputProps","getPhoneNumberInputStyles","_countriesList","_Button","_ListItem","_Modal","_PhoneNumberInput","countries","countryList","map","countryCode","PhoneNumberInputBase","_props$countryCode","phoneNumber","onChangeCountryCode","onChangePhoneNumber","header","_props$useHistory","useHistory","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","Button","appearance","buttonStyle","borderBottomRightRadius","borderColor","border","borderTopRightRadius","borderWidth","iconAfter","title","concat","phone","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","country","ListItem","event","preventDefault","borderBottomLeftRadius","borderTopLeftRadius","keyboardType","PhoneNumberInput","_ClearableTextInput","SearchTextInputBase","SearchTextInput","getTextInputVariables","base","backgroundColor","background","content","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlPaddings","large","getTextInputStyles","isDisabled","isInvalid","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","prototype","hasOwnProperty","call","_exportNames","_SearchTextInput","getListItemVariables","borderBottomWidth","focusBackgroundColor","greyLight","selected","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textWrapperStyle","testID","accessibilityProps","TouchableHighlight","underlayColor"],"mappings":"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","file":"static/js/8.a2993ec8.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Text } from 'react-native';\nimport { Toggle } from 'react-powerplug';\nimport { FormField } from '.';\nimport { Playground, Props } from 'docz';\nimport { TextInput } from '../Inputs';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<FormField\\n  labelPosition=\\\"top\\\"\\n  label=\\\"Email\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n  getStyles={(props, theme) => ({\\n    containerStyles: {},\\n    descriptionTextStyle: {},\\n    errorTextStyle: {},\\n    errorWrapperStyle: {},\\n    labelTextStyle: {},\\n    labelWrapperStyle: {},\\n    wrapperStyle: {},\\n  })}\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Text,\n      Toggle,\n      FormField,\n      Playground,\n      Props,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField labelPosition=\"top\" label=\"Email\" description=\"Description for the field\" error=\"Error message\" getStyles={(props, theme) => ({\n        containerStyles: {},\n        descriptionTextStyle: {},\n        errorTextStyle: {},\n        errorWrapperStyle: {},\n        labelTextStyle: {},\n        labelWrapperStyle: {},\n        wrapperStyle: {}\n      })} mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={FormField} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { FormFieldLabelPosition } from './FormField';\n\nexport interface FormFieldStylesProps {\n  labelPosition?: FormFieldLabelPosition;\n}\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  FormFieldStylesProps: FormFieldStylesProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  error?: string;\n  label?: string;\n  labelPosition?: FormFieldLabelPosition;\n  description?: string;\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(getFormFieldStyles, getStyles)(\n    {\n      labelPosition,\n    },\n    theme,\n  );\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ textStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import { countries as countryList } from 'countries-list';\nimport * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n}\n\nconst countries = (() => {\n  return Object.keys(countryList).map(countryCode => ({\n    countryCode,\n    key: countryCode,\n    ...countryList[countryCode],\n  }));\n})();\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = 'US',\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.default,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={`+${countryList[countryCode].phone}`}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.key}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countries}\n          renderItem={({ item: country }) => {\n            return (\n              <ListItem\n                key={country.countryCode}\n                label={country.name}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(country.countryCode);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport {\n  ClearableTextInput,\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\n","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export * from './PhoneNumberInput';\nexport {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\nexport * from './SearchTextInput';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n"],"sourceRoot":""}