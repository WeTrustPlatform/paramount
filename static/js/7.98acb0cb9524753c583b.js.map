{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Spacing/Spacing.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useMeasure.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/Positioner.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["getSpacing","size","theme","spacing","Spacing","props","_props$size","_props$orientation","orientation","style","viewProps","Object","objectWithoutProperties","useTheme","react","View","esm_extends","height","width","getStyle","dlv","__source","fileName","lineNumber","propToFn","backgroundColor","color","colors","background","elevation","elevations","shape","containerShapes","space","spaceBottom","spaceEnd","spaceHorizontal","spaceLeft","spaceRight","spaceStart","spaceTop","spaceVertical","Box","children","testID","viewStyles","transformedStyles","pureStyles","prop","styleFn","push","reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","slicedToArray","useCallback","AnimatedView","animated","Dots","_props$color","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","alignItems","flexDirection","justifyContent","_jsxFileName","map","index","key","borderRadius","marginLeft","marginRight","Button","_props$appearance","appearance","_props$isDisabled","isDisabled","_props$isLoading","isLoading","_props$onPress","onPress","title","_props$overrides","overrides","_getOverrides","getOverrides","StyledTouchable","Touchable","_getOverrides2","touchableProps","_getOverrides3","StyledTitle","Title","_getOverrides4","titleProps","_getOverrides5","StyledLoading","Loading","_getOverrides6","loadingProps","_getOverrides7","StyledIcon","IconBefore","_getOverrides8","iconBeforeProps","_getOverrides9","IconAfter","_getOverrides10","iconAfterProps","Button_jsxFileName","buttonAppearances","minimal","default","content","danger","secondary","greyLight","button","dangerLight","primaryLight","secondaryLight","outline","borderColor","borderWidth","border","getButtonAppearances","_ref","isControlSize","controlBorderRadius","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","TouchableOpacity","accessibilityRole","disabled","objectSpread","getButtonTextColor","defaultText","dangerText","primaryText","secondaryText","textProps","textSize","textSizes","Text","weight","muted","display","fontWeight","textAlign","paddingHorizontal","Dots_Dots","Toggle","_props$initial","initial","_React$useState","useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","handleSet","on","toggle","set","initialMeasurements","pageX","pageY","x","y","adjustPageY","Platform","OS","window","scrollY","useMeasure","onMeasure","ref","measurements","setMeasurements","handleMeasure","layout","handle","findNodeHandle","current","prevMeasurements","UIManager","measure","newMeasurements","handleLayout","e","nativeEvent","handleResize","Dimensions","addEventListener","removeEventListener","onLayout","ViewMeasure","isRenderProp","_useMeasure","layoutProps","MDXLayout","MDXContent","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","Playground","Props","Popover","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_8__","_ref2","___WEBPACK_IMPORTED_MODULE_7__","isVisible","position","___WEBPACK_IMPORTED_MODULE_9__","___WEBPACK_IMPORTED_MODULE_6__","of","isMDXComponent","POSITION","TOP","TOP_LEFT","TOP_RIGHT","BOTTOM","BOTTOM_LEFT","BOTTOM_RIGHT","LEFT","RIGHT","Positioner","_props$isVisible","_props$position","targetMeasurements","setTargetMeasurements","_React$useState3","_React$useState4","positionerMeasurements","setPositionerMeasurements","isPositionerMeasurementsMeasured","positionStyle","params","left","top","transform","translateX","right","getPositionerPosition","StyledRoot","Root","rootProps","Target","targetProps","_props$isPositionerMe","viewMeasureProps","zIndex","restProps","StyledContent","Content","contentProps","Positioner_Positioner","Popover_jsxFileName","padding","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/7.d86f0a5e.js","sourcesContent":["import dlv from 'dlv';\nimport * as React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { SpacingSize, Theme, useTheme } from '../../theme';\nimport { getStyle, OverrideStyle, Style } from '../../utils/overrides';\n\ntype SpacingOrientation = 'horizontal' | 'vertical';\n\nexport interface SpacingProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the Spacing.\n   * @default \"medium\"\n   */\n  size?: SpacingSize | number;\n\n  /**\n   * Orientation of spacing.\n   * @default \"vertical\"\n   */\n  orientation?: SpacingOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<SpacingProps, ViewStyle>;\n}\n\nexport type SpacingOverride = OverrideStyle<SpacingProps, ViewStyle>;\n\nexport const getSpacing = (size: SpacingSize | number, theme: Theme) =>\n  typeof size === 'number' ? size : theme.spacing[size];\n\nexport const Spacing = (props: SpacingProps) => {\n  const {\n    size = 'medium',\n    orientation = 'vertical',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        orientation === 'vertical'\n          ? { height: getSpacing(size, theme) }\n          : { width: getSpacing(size, theme) },\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Spacing.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport {\n  BackgroundColor,\n  ContainerShape,\n  SpacingSize,\n  Theme,\n  useTheme,\n} from '../../theme';\nimport { getSpacing } from '../Spacing';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n  space?: SpacingSize | number;\n  spaceBottom?: SpacingSize | number;\n  spaceEnd?: SpacingSize | number;\n  spaceHorizontal?: SpacingSize | number;\n  spaceLeft?: SpacingSize | number;\n  spaceRight?: SpacingSize | number;\n  spaceStart?: SpacingSize | number;\n  spaceTop?: SpacingSize | number;\n  spaceVertical?: SpacingSize | number;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n  space: getSpacing,\n  spaceBottom: getSpacing,\n  spaceEnd: getSpacing,\n  spaceHorizontal: getSpacing,\n  spaceLeft: getSpacing,\n  spaceRight: getSpacing,\n  spaceStart: getSpacing,\n  spaceTop: getSpacing,\n  spaceVertical: getSpacing,\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Dots } from '../LoadingIndicators';\nimport { Text, TextProps } from '../Typography';\n\ninterface ButtonBaseProps {\n  /** Title of the button */\n  title?: OptionalString;\n\n  /**\n   * The color of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /** Called when button is pressed */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ButtonOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconBefore: IconProps;\n  IconAfter: IconProps;\n  Loading: LoadingProps;\n}\n\nexport interface ButtonProps\n  extends WithOverrides<ButtonBaseProps, ButtonOverrides> {}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    color = 'default',\n    isDisabled = false,\n    isLoading = false,\n    size = 'medium',\n    onPress = () => {\n      return;\n    },\n    title,\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Button.Touchable'),\n    overrides.Touchable,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.Button.Title'),\n    overrides.Title,\n  );\n  const [Loading, loadingProps] = getOverrides(\n    StyledLoading,\n    props,\n    dlv(theme, 'overrides.Button.Loading'),\n    overrides.Loading,\n  );\n  const [IconBefore, iconBeforeProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconBefore'),\n    overrides.IconBefore,\n  );\n  const [IconAfter, iconAfterProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconAfter'),\n    overrides.IconAfter,\n  );\n\n  return (\n    <Touchable\n      appearance={appearance}\n      color={color}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      size={size}\n      onPress={onPress}\n      testID={testID}\n      {...touchableProps}\n    >\n      <IconBefore\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconBeforeProps}\n      />\n      {isLoading ? (\n        <Loading appearance={appearance} color={color} {...loadingProps} />\n      ) : (\n        <Title\n          appearance={appearance}\n          color={color}\n          isDisabled={isDisabled}\n          size={size}\n          title={title}\n          {...titleProps}\n        />\n      )}\n      <IconAfter\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconAfterProps}\n      />\n    </Touchable>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ViewStyle };\n  primary: { [size in ButtonColor]: ViewStyle };\n  outline: { [size in ButtonColor]: ViewStyle };\n}\n\ntype ButtonAppearance = keyof ButtonAppearances;\n\nconst getButtonAppearances = (\n  theme: Theme,\n  isLoading: boolean,\n): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: isLoading\n          ? theme.colors.background.greyLight\n          : theme.colors.button.default,\n      },\n      danger: {\n        backgroundColor: isLoading\n          ? theme.colors.background.dangerLight\n          : theme.colors.button.danger,\n      },\n      primary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.primaryLight\n          : theme.colors.button.primary,\n      },\n      secondary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.secondaryLight\n          : theme.colors.button.secondary,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n      },\n    },\n  };\n};\n\ninterface TouchableProps extends TouchableOpacityProps, PropsWithChildren {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    isLoading,\n    size,\n    children,\n    style,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n  const buttonAppearances = getButtonAppearances(theme, isLoading);\n\n  const { borderRadius, height, paddingLeft, paddingRight } = isControlSize(\n    size,\n  )\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size] + 8,\n        paddingRight: theme.controlPaddings[size] + 8,\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium + 8,\n        paddingRight: theme.controlPaddings.medium + 8,\n      };\n\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"button\"\n      disabled={!!(isDisabled || isLoading)}\n      style={[\n        {\n          borderRadius,\n          height,\n          paddingLeft,\n          paddingRight,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          ...buttonAppearances[appearance][color],\n          ...(isDisabled && {\n            backgroundColor: theme.colors.button.disabled,\n          }),\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface ButtonTextColors {\n  minimal: { [size in ButtonColor]: string };\n  primary: { [size in ButtonColor]: string };\n  outline: { [size in ButtonColor]: string };\n}\n\nconst getButtonTextColor = (theme: Theme): ButtonTextColors => {\n  return {\n    minimal: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n    primary: {\n      default: theme.colors.button.defaultText,\n      danger: theme.colors.button.dangerText,\n      primary: theme.colors.button.primaryText,\n      secondary: theme.colors.button.secondaryText,\n    },\n\n    outline: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n  };\n};\n\ninterface TitleProps extends TextProps {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    size,\n    title,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const textSize = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      weight=\"bold\"\n      style={[\n        {\n          alignItems: 'center',\n          color: isDisabled\n            ? theme.colors.text.muted\n            : getButtonTextColor(theme)[appearance][color],\n          display: 'flex',\n          fontWeight: '600',\n          justifyContent: 'center',\n          textAlign: 'center',\n          paddingHorizontal: 8,\n          ...textSize,\n        },\n        getStyle(props, style),\n      ]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface LoadingProps {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n}\n\nconst StyledLoading = (props: LoadingProps) => {\n  const { appearance, color } = props;\n  const theme = useTheme();\n\n  return <Dots color={getButtonTextColor(theme)[appearance][color]} />;\n};\n\ninterface IconProps extends PropsWithChildren {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledIcon = (props: IconProps) => {\n  return <></>;\n};\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","import * as React from 'react';\nimport {\n  Dimensions,\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n  ref: React.MutableRefObject<any>;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst adjustPageY = (pageY: number) => {\n  // On the web, when scroll position is restored (e.g. User is scrolled down and refreshes the page)\n  // We need to adjust pageY accordingly. Required to correct behavior of positioner\n  return Platform.OS === 'web' ? pageY + window.scrollY : pageY;\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps) => {\n  const { onMeasure, ref } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleMeasure = React.useCallback(\n    (layout?: LayoutRectangle) => {\n      const handle = findNodeHandle(ref.current);\n      const prevMeasurements = measurements;\n\n      if (handle) {\n        UIManager.measure(handle, (x, y, width, height, pageX, pageY) => {\n          const newMeasurements = {\n            ...prevMeasurements,\n            ...layout,\n            pageX,\n            pageY: adjustPageY(pageY),\n          };\n\n          setMeasurements(newMeasurements);\n\n          if (onMeasure) onMeasure(newMeasurements);\n        });\n      }\n    },\n    [measurements],\n  );\n\n  const handleLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      // Use the value from here, isntead of inside UIManager.measure callback\n      // Async behavior will nullify nativeEvent\n      const layout = e.nativeEvent.layout;\n      handleMeasure(layout);\n    },\n    [handleMeasure, measurements],\n  );\n\n  const handleResize = React.useCallback(() => {\n    handleMeasure();\n  }, [handleMeasure, measurements]);\n\n  React.useEffect(() => {\n    Dimensions.addEventListener('change', handleResize);\n\n    return () => Dimensions.removeEventListener('change', handleResize);\n  }, [measurements]);\n\n  return {\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderProp = (props: Measurements) => JSX.Element;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children: React.ReactNode | ViewMeasureRenderProp;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const ref = React.useRef<View>(null);\n  const { measurements, onLayout } = useMeasure({ onMeasure, ref });\n\n  return (\n    <View\n      ref={ref}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, Popover, Toggle, Text } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <p>{`Composes `}<inlineCode parentName=\"p\">{`Positioner`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box height={250}>\\n  <Toggle>\\n    {({ on, toggle }) => (\\n      <Popover\\n        isVisible={on}\\n        position=\\\"bottom\\\"\\n        content={\\n          <Box width={200} height={200}>\\n            <Text>\\n              Due to variety and complexity involved in detecting touch\\n              outside of the component on the web and in native, managing its\\n              open and closed state is in your control\\n            </Text>\\n            <Button\\n              appearance=\\\"outline\\\"\\n              color=\\\"danger\\\"\\n              onPress={toggle}\\n              title=\\\"Close popover\\\"\\n            />\\n          </Box>\\n        }\\n      >\\n        <Button onPress={toggle} title=\\\"Open popover\\\" />\\n      </Popover>\\n    )}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      Popover,\n      Toggle,\n      Text\n    }} mdxType=\"Playground\">\n  <Box height={250} mdxType=\"Box\">\n    <Toggle mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Popover isVisible={on} position=\"bottom\" content={<Box width={200} height={200} mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Due to variety and complexity involved in detecting touch\n                outside of the component on the web and in native, managing its\n                open and closed state is in your control\n              </Text>\n              <Button appearance=\"outline\" color=\"danger\" onPress={toggle} title=\"Close popover\" mdxType=\"Button\" />\n            </Box>} mdxType=\"Popover\">\n          <Button onPress={toggle} title=\"Open popover\" mdxType=\"Button\" />\n        </Popover>}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Popover} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport { ViewStyle } from 'react-native';\n\nimport { Measurements } from '../../hooks';\nimport { useTheme } from '../../theme';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { ViewMeasure, ViewMeasureProps } from '../Helpers';\n\nexport const POSITION = {\n  TOP: 'top' as const,\n  TOP_LEFT: 'top-left' as const,\n  TOP_RIGHT: 'top-right' as const,\n\n  BOTTOM: 'bottom' as const,\n  BOTTOM_LEFT: 'bottom-left' as const,\n  BOTTOM_RIGHT: 'bottom-right' as const,\n\n  LEFT: 'left' as const,\n  RIGHT: 'right' as const,\n};\n\nexport type PositionerPosition =\n  | 'top'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'left'\n  | 'right';\n\nexport interface PositionerBaseProps {\n  /**\n   * Position of the content.\n   * @default \"bottom\"\n   */\n  position?: PositionerPosition;\n\n  /**\n   * Wrapped component to open the positioner over.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Content revealed when positioner is opened.\n   */\n  content?: React.ReactNode;\n\n  /**\n   * When true, displays positioner.\n   */\n  isVisible?: boolean;\n}\n\nexport interface PositionerOverrides {\n  Root: RootProps;\n  Target: ViewMeasureProps;\n}\n\nexport interface PositionerProps\n  extends WithOverrides<PositionerBaseProps, PositionerOverrides> {}\n\ninterface GetPositionerPositionParams {\n  position: PositionerPosition;\n  targetMeasurements: Measurements;\n  positionerMeasurements: Measurements;\n}\n\nconst DEFAULT_OFFSET = 14;\n\nconst getPositionerPosition = (params: GetPositionerPositionParams) => {\n  const { position, targetMeasurements, positionerMeasurements } = params;\n\n  switch (position) {\n    case POSITION.TOP_LEFT:\n      return {\n        left: 0,\n        top: -positionerMeasurements.height - DEFAULT_OFFSET,\n      };\n    case POSITION.TOP:\n      return {\n        left: targetMeasurements.width / 2,\n        top: -positionerMeasurements.height - DEFAULT_OFFSET,\n        transform: [\n          {\n            translateX: -positionerMeasurements.width / 2,\n          },\n        ],\n      };\n    case POSITION.TOP_RIGHT:\n      return {\n        right: 0,\n        top: -positionerMeasurements.height - DEFAULT_OFFSET,\n      };\n    case POSITION.LEFT:\n      return {\n        left: 0 - positionerMeasurements.width - DEFAULT_OFFSET,\n        top: -positionerMeasurements.height / 2 + targetMeasurements.height / 2,\n      };\n    case POSITION.RIGHT:\n      return {\n        right: 0 - positionerMeasurements.width - DEFAULT_OFFSET,\n        top: -positionerMeasurements.height / 2 + targetMeasurements.height / 2,\n      };\n    case POSITION.BOTTOM_RIGHT:\n      return {\n        right: 0,\n        top: targetMeasurements.height + DEFAULT_OFFSET,\n      };\n    case POSITION.BOTTOM:\n      return {\n        left: targetMeasurements.width / 2,\n        top: targetMeasurements.height + DEFAULT_OFFSET,\n        transform: [\n          {\n            translateX: -positionerMeasurements.width / 2,\n          },\n        ],\n      };\n    case POSITION.BOTTOM_LEFT:\n      return {\n        left: 0,\n        top: targetMeasurements.height + DEFAULT_OFFSET,\n      };\n    default:\n      return {};\n  }\n};\n\nconst initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nexport const Positioner = (props: PositionerProps) => {\n  const {\n    children,\n    content,\n    isVisible = false,\n    position = POSITION.BOTTOM,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [targetMeasurements, setTargetMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const [positionerMeasurements, setPositionerMeasurements] = React.useState(\n    initialMeasurements,\n  );\n\n  const isPositionerMeasurementsMeasured = !!(\n    positionerMeasurements.width || positionerMeasurements.height\n  );\n\n  const positionStyle = getPositionerPosition({\n    position,\n    positionerMeasurements,\n    targetMeasurements,\n  });\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    dlv(theme, 'overrides.Positioner.Root'),\n    overrides.Root,\n  );\n  const [Target, targetProps] = getOverrides(\n    ViewMeasure,\n    props,\n    dlv(theme, 'overrides.Positioner.Target'),\n    overrides.Target,\n  );\n\n  return (\n    <>\n      {isVisible && (\n        <Root\n          positionStyle={positionStyle}\n          isPositionerMeasurementsMeasured={isPositionerMeasurementsMeasured}\n          onMeasure={setPositionerMeasurements}\n          {...rootProps}\n        >\n          {content}\n        </Root>\n      )}\n      <Target onMeasure={setTargetMeasurements} {...targetProps}>\n        {children}\n      </Target>\n    </>\n  );\n};\n\ninterface RootProps extends ViewMeasureProps {\n  isPositionerMeasurementsMeasured?: boolean;\n  positionStyle?: ViewStyle;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const {\n    style,\n    positionStyle,\n    isPositionerMeasurementsMeasured = false,\n    ...viewMeasureProps\n  } = props;\n\n  return (\n    <ViewMeasure\n      style={[\n        {\n          opacity: isPositionerMeasurementsMeasured ? 1 : 0,\n          position: 'absolute',\n          zIndex: 1,\n        },\n        positionStyle,\n        style,\n      ]}\n      {...viewMeasureProps}\n    />\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport {\n  Positioner,\n  PositionerBaseProps,\n  PositionerOverrides,\n} from '../Positioner';\n\nexport interface PopoverOverrides extends PositionerOverrides {\n  Content: ViewProps;\n}\n\nexport interface PopoverProps\n  extends WithOverrides<PositionerBaseProps, PopoverOverrides> {}\n\nexport const Popover = (props: PopoverProps) => {\n  const { content, overrides = {}, ...restProps } = props;\n  const theme = useTheme();\n\n  const [Content, contentProps] = getOverrides(\n    StyledContent,\n    props,\n    dlv(theme, 'overrides.Popover.Content'),\n    overrides.Content,\n  );\n\n  return (\n    <Positioner\n      content={<Content {...contentProps}>{content}</Content>}\n      // TODO: pass overrides from theme\n      overrides={overrides}\n      {...restProps}\n    />\n  );\n};\n\nconst StyledContent = (props: ViewProps) => {\n  const { style, ...viewProps } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.content,\n          padding: 16,\n          ...theme.elevations[2],\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}