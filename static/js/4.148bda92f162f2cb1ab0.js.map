{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","newHashValue","controlSize","isControlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","propToFn","colors","background","elevation","elevations","shape","containerShapes","Box","children","viewStyles","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","transformedStyles","pureStyles","prop","styleFn","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","getCheckboxStyles","value","isDisabled","_ref$shape","_ref$size","sizeValue","checkColor","text","white","checkboxStyle","objectSpread","content","borderColor","border","borderWidth","primaryDefault","greyDark","touchableStyle","Checkbox","_props$value","_props$isDisabled","_props$isInteractive","isInteractive","onPress","TouchableOpacity","accessible","disabled","Icon_web","State","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","Icon","_ref$color","IconTag","Feather","concat","result","matches","charAt","convertToPascal","_getTextSize$fontSize","getTextSize","textSizes","iconSize","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","getListItemStyles","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexDirection","rightWrapperStyle","right","zIndex","textWrapperStyle","titleStyle","wrapperStyle","ListItem","avatarProps","title","description","rightNode","leftNode","accessibilityHint","_props$accessible","esm_extends","layoutProps","MDXLayout","MDXContent","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","SelectList","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_6__","onValueChange","newValue","itemIndex","options","label","of","isMDXComponent","SelectListItem","_props$index","index","_props$isSelected","isSelected","_props$onPress","listItemProps","objectWithoutProperties","innerRef","isMulti","Array","isArray","getIsMulti","handleOnPress","itemValue","filter","val","FlatList","ref","keyExtractor","item","getItemLayout","_","offset","data","renderItem","some","selVal","SelectListItem_SelectListItem","SelectList_jsxFileName","SelectListWithRef","SelectList_SelectList","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextStyles","_ref$align","align","weight","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","controlBorderRadius","overlay","greyLight","greyDefault","primaryLight","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","selected","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","merge","all"],"mappings":"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","file":"static/js/4.561c085a.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => AvatarStyles;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { value, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(value\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    value = false,\n    isDisabled = false,\n    isInteractive = true,\n    onPress,\n    getStyles,\n    testID,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      disabled={isDisabled || !isInteractive}\n      testID={testID}\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <View style={checkboxStyle}>\n        {value ? <Icon name=\"check\" size=\"xsmall\" color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor, getTextSize } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({\n  name,\n  color = 'default',\n  size = 'medium',\n}: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n  const { fontSize = 16 } = getTextSize(theme.textSizes)(size);\n  const iconSize = typeof size === 'string' ? fontSize + 8 : size;\n\n  return (\n    <IconTag color={getTextColor(theme.colors.text)(color)} size={iconSize} />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  rightWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = ({ isDisabled }, theme) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    rightWrapperStyle: {\n      position: 'absolute',\n      right: 0,\n      zIndex: 2,\n    },\n    textWrapperStyle: {\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: theme.colors.background.content,\n      height: 72,\n      justifyContent: 'center',\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Title of the list item\n   */\n  title?: React.ReactNode;\n\n  /**\n   * Description of the list item\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * React node replacing `Avatar` on the left hand-side\n   */\n  leftNode?: React.ReactNode;\n\n  /**\n   * React node replacing right hand-side icon\n   */\n  rightNode?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    rightNode,\n    leftNode,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    rightWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {leftNode || avatarProps ? (\n            <View style={imageWrapperStyle}>\n              {leftNode || <Avatar size=\"small\" {...avatarProps} />}\n            </View>\n          ) : null}\n          <View style={textWrapperStyle}>\n            {title ? (\n              typeof title === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: titleStyle })}\n                  size=\"large\"\n                >\n                  {title}\n                </Text>\n              ) : (\n                title\n              )\n            ) : null}\n            {description ? (\n              typeof description === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: descriptionStyle })}\n                  size=\"medium\"\n                  color=\"muted\"\n                >\n                  {description}\n                </Text>\n              ) : (\n                description\n              )\n            ) : null}\n          </View>\n        </View>\n        {rightNode === null ? null : (\n          <View style={rightWrapperStyle}>\n            {rightNode || <Icon name=\"chevron-right\" />}\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, SelectList, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item.`}</p>\n    <p><inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{`.\nTo use `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`, import `}<inlineCode parentName=\"p\">{`SelectListWithRef`}</inlineCode>{` instead`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: [\\'c\\', \\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={300}>\\n      <SelectList\\n        value={state.value}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ value: newValue })\\n        }}\\n        options={[\\n          { label: \\'C\\', value: \\'c\\' },\\n          { label: \\'C#\\', value: \\'c#\\' },\\n          { label: \\'C++\\', value: \\'c++\\' },\\n          { label: \\'CSS\\', value: \\'css\\' },\\n          { label: \\'Elixir\\', value: \\'elixir\\' },\\n          { label: \\'Elm\\', value: \\'elm\\' },\\n          { label: \\'Erlang\\', value: \\'erlang\\' },\\n          { label: \\'Go\\', value: \\'go\\' },\\n          { label: \\'Haskell\\', value: \\'haskell\\' },\\n          { label: \\'HTML\\', value: \\'html\\' },\\n          { label: \\'Java\\', value: \\'java\\' },\\n          { label: \\'JavaScript\\', value: \\'js\\' },\\n          { label: \\'Lua\\', value: \\'lua\\' },\\n          { label: \\'Python\\', value: \\'python\\' },\\n          { label: \\'R\\', value: \\'r\\' },\\n          { label: \\'Ruby\\', value: \\'ruby\\' },\\n          { label: \\'Rust\\', value: \\'rust\\' },\\n          { label: \\'Switft\\', value: \\'swift\\' },\\n          { label: \\'Typescript\\', value: \\'typescript\\' },\\n        ]}\\n      />\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ['c', 'js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={300} mdxType=\"Box\">\n        <SelectList value={state.value} onValueChange={(newValue, itemIndex) => {\n            setState({\n              value: newValue\n            });\n          }} options={[{\n            label: 'C',\n            value: 'c'\n          }, {\n            label: 'C#',\n            value: 'c#'\n          }, {\n            label: 'C++',\n            value: 'c++'\n          }, {\n            label: 'CSS',\n            value: 'css'\n          }, {\n            label: 'Elixir',\n            value: 'elixir'\n          }, {\n            label: 'Elm',\n            value: 'elm'\n          }, {\n            label: 'Erlang',\n            value: 'erlang'\n          }, {\n            label: 'Go',\n            value: 'go'\n          }, {\n            label: 'Haskell',\n            value: 'haskell'\n          }, {\n            label: 'HTML',\n            value: 'html'\n          }, {\n            label: 'Java',\n            value: 'java'\n          }, {\n            label: 'JavaScript',\n            value: 'js'\n          }, {\n            label: 'Lua',\n            value: 'lua'\n          }, {\n            label: 'Python',\n            value: 'python'\n          }, {\n            label: 'R',\n            value: 'r'\n          }, {\n            label: 'Ruby',\n            value: 'ruby'\n          }, {\n            label: 'Rust',\n            value: 'rust'\n          }, {\n            label: 'Switft',\n            value: 'swift'\n          }, {\n            label: 'Typescript',\n            value: 'typescript'\n          }]} mdxType=\"SelectList\" />\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"selectlist-props\"\n    }}>{`SelectList Props`}</h2>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemProps extends Omit<ListItemProps, 'onPress'> {\n  /**\n   * Injected by SelectList. Index of the item on the list.\n   * @default 0\n   */\n  index?: number;\n\n  /**\n   * Injected by SelectList. When true, it will be marked as checked\n   * @default false\n   */\n  isSelected?: boolean;\n\n  /**\n   * Injected by SelectList. Called when pressed select list item\n   */\n  onPress?: (value: string, index: number, isSelected: boolean) => void;\n\n  /**\n   * Value of the select list item\n   */\n  value: string;\n\n  /**\n   * Label of the select list item\n   */\n  label: string;\n}\n\nexport const SelectListItem = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={() => {\n        onPress(value, index, isSelected);\n      }}\n      title={label}\n      rightNode={\n        <Checkbox isInteractive={false} shape=\"circle\" value={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n","import * as React from 'react';\nimport { FlatList } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItem, SelectListItemProps } from './SelectListItem';\n\ntype Value<TIsMulti extends boolean> = TIsMulti extends true\n  ? string[]\n  : string;\n\ninterface SelectListOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectListProps<TIsMulti extends boolean> {\n  /**\n   * Set whether it should allow multiple selections. You should specify the value to get proper type-checking.\n   * @default false\n   */\n  isMulti?: TIsMulti;\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value: Value<TIsMulti>;\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange: (\n    itemValue: Value<TIsMulti>,\n    itemIndex: number,\n  ) => void | undefined;\n\n  /**\n   * `SelectListItem` components\n   */\n  options: SelectListOption[];\n\n  /**\n   * Use `ref` prop instead for using `FlatList` methods\n   */\n  innerRef?: React.Ref<FlatList<SelectListItemProps>>;\n}\n\nconst getIsMulti = (value: string | string[]): value is string[] =>\n  Array.isArray(value);\n\nexport const SelectList = <TIsMulti extends boolean>(\n  props: SelectListProps<TIsMulti>,\n) => {\n  const { value, onValueChange, options, innerRef } = props;\n  const theme = useTheme();\n  const isMulti = getIsMulti(value);\n\n  const handleOnPress = React.useCallback(\n    (itemValue: string, itemIndex: number, isSelected: boolean) => {\n      if (isMulti && Array.isArray(value)) {\n        if (isSelected) {\n          onValueChange(\n            value.filter(val => val !== itemValue) as Value<TIsMulti>,\n            itemIndex,\n          );\n        } else {\n          onValueChange(value.concat(itemValue) as Value<TIsMulti>, itemIndex);\n        }\n      } else {\n        onValueChange(itemValue as Value<TIsMulti>, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={options}\n      renderItem={({ item, index }) => {\n        const isSelected =\n          isMulti && Array.isArray(value)\n            ? value.some(selVal => selVal === item.value)\n            : value === item.value;\n\n        return (\n          <SelectListItem\n            value={item.value}\n            label={item.label}\n            index={index}\n            isSelected={isSelected}\n            onPress={handleOnPress}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport const SelectListWithRef = React.forwardRef(\n  <TIsMulti extends boolean>(\n    props: SelectListProps<TIsMulti>,\n    ref: React.Ref<FlatList<SelectListItemProps>>,\n  ) => {\n    return <SelectList<TIsMulti> {...props} innerRef={ref} />;\n  },\n);\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.teal.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { GetWheelPickerStyles } from '../components/WheelPicker/WheelPicker.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getWheelPickerStyles?: GetWheelPickerStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}