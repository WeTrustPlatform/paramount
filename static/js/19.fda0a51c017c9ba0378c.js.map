{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/hooks/useMeasure.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.mdx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/usePrevious.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["initialMeasurements","height","pageX","pageY","width","x","y","adjustPageY","Platform","OS","window","scrollY","useMeasure","props","onMeasure","ref","_React$useState","React","_React$useState2","Object","slicedToArray","measurements","setMeasurements","handleMeasure","layout","handle","findNodeHandle","current","prevMeasurements","UIManager","measure","newMeasurements","objectSpread","handleLayout","e","nativeEvent","handleResize","Dimensions","addEventListener","removeEventListener","onLayout","ViewMeasure","children","viewProps","objectWithoutProperties","isRenderProp","_useMeasure","react","View","esm_extends","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Slider","___WEBPACK_IMPORTED_MODULE_5__","size","value","onValueChange","console","log","onSlidingComplete","onSlidingStart","parentName","step","minimumValue","maximumValue","of","className","isMDXComponent","usePrevious","getSliderStyles","theme","_props$size","controlSize","isControlSize","controlHeights","containerStyle","justifyContent","selectedTrackStyle","backgroundColor","colors","background","primaryDefault","borderRadius","position","thumbStyle","content","borderColor","border","primary","borderWidth","zIndex","unselectedTrackStyle","greyDark","getBoundedValueBase","isRangeValue","Array","isArray","getLeftValue","getRightValue","_props$value","initialValue","_props$onSlidingStart","_props$onSlidingCompl","_props$onValueChange","_props$minimumValue","_props$maximumValue","_props$step","getStyles","_props$isRange","isRange","leftThumbAccessibilityLabel","leftThumbAccessibilityHint","rightThumbAccessibilityHint","rightThumbAccessibilityLabel","finalInitialValue","setValue","_React$useState3","_React$useState4","isSliding","setIsSliding","_React$useState5","_React$useState6","trackMeasurements","setTrackMeasurements","prevIsSliding","valuePerPixel","pixelPerValue","isRangeSlider","handleLeftSlide","dx","leftValue","roundedLeftValue","Math","round","finalLeftValue","updatedValue","previousValue","setLeftValue","handleRightSlide","rightValue","roundedRightValue","finalRightValue","setRightValue","makeThumbRef","handler","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_","_ref2","onPanResponderRelease","leftThumbRef","rightThumbRef","useTheme","_mergeStyles","mergeStyles","left","right","cursor","style","accessible","accessibilityLabel","accessibilityHint","panHandlers","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/19.1a9419a0.js","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n  ref: React.MutableRefObject<any>;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst adjustPageY = (pageY: number) => {\n  // On the web, when scroll position is restored (e.g. User is scrolled down and refreshes the page)\n  // We need to adjust pageY accordingly. Required to correct behavior of positioner\n  return Platform.OS === 'web' ? pageY + window.scrollY : pageY;\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps) => {\n  const { onMeasure, ref } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleMeasure = React.useCallback(\n    (layout?: LayoutRectangle) => {\n      const handle = findNodeHandle(ref.current);\n      const prevMeasurements = measurements;\n\n      if (handle) {\n        UIManager.measure(handle, (x, y, width, height, pageX, pageY) => {\n          const newMeasurements = {\n            ...prevMeasurements,\n            ...layout,\n            pageX,\n            pageY: adjustPageY(pageY),\n          };\n\n          setMeasurements(newMeasurements);\n\n          if (onMeasure) onMeasure(newMeasurements);\n        });\n      }\n    },\n    [measurements],\n  );\n\n  const handleLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      // Use the value from here, isntead of inside UIManager.measure callback\n      // Async behavior will nullify nativeEvent\n      const layout = e.nativeEvent.layout;\n      handleMeasure(layout);\n    },\n    [handleMeasure, measurements],\n  );\n\n  const handleResize = React.useCallback(() => {\n    handleMeasure();\n  }, [handleMeasure, measurements]);\n\n  React.useEffect(() => {\n    Dimensions.addEventListener('change', handleResize);\n\n    return () => Dimensions.removeEventListener('change', handleResize);\n  }, [measurements]);\n\n  return {\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderProp = (props: Measurements) => JSX.Element;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children: React.ReactNode | ViewMeasureRenderProp;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const ref = React.useRef<View>(null);\n  const { measurements, onLayout } = useMeasure({ onMeasure, ref });\n\n  return (\n    <View\n      ref={ref}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Slider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Slider\\n  size=\\\"small\\\"\\n  value={0.3}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider size=\"small\" value={0.3} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"with-range\"\n    }}>{`With Range`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` as an array of `}<inlineCode parentName=\"p\">{`[number, number]`}</inlineCode>{`, it will automatically transform into a range slider. The minimum range is the value of the step`}</p>\n    <Playground __position={1} __code={'<Slider\\n  value={[30, 60]}\\n  step={5}\\n  minimumValue={0}\\n  maximumValue={100}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider value={[30, 60]} step={5} minimumValue={0} maximumValue={100} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`SliderStyles {\n  containerStyle: ViewStyle; // { height: thumbSize }\n  selectedTrackStyle: ViewStyle;\n  thumbStyle: ViewStyle; // { height: thumbSize, width: thumbSize }\n  unselectedTrackStyle: ViewStyle;\n}\n\ngetStyles={(SliderProps, Theme) => SliderStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View containerStyle>\n  <View unselectedTrackStyle />\n  <View selectedTrackStyle />\n  <View thumbStyle />\n  <View thumbStyle />\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nexport const usePrevious = <TValue = any>(value: TValue) => {\n  const ref = React.useRef<TValue>(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { SliderProps } from './Slider';\n\nexport interface SliderStyles {\n  containerStyle: ViewStyle;\n  selectedTrackStyle: ViewStyle;\n  thumbStyle: ViewStyle;\n  unselectedTrackStyle: ViewStyle;\n}\n\nexport type GetSliderStyles = (\n  props: SliderProps<any>,\n  theme: Theme,\n) => Partial<SliderStyles>;\n\nexport const getSliderStyles: GetSliderStyles = (props, theme) => {\n  const { size = 'medium' } = props;\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return {\n    containerStyle: { height: controlSize, justifyContent: 'center' },\n    selectedTrackStyle: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderRadius: 8,\n      height: controlSize / 4,\n      position: 'absolute',\n      width: '100%',\n    },\n    thumbStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.primary,\n      borderRadius: 999,\n      borderWidth: 3,\n      height: controlSize,\n      position: 'absolute',\n      width: controlSize,\n      zIndex: 1,\n    },\n    unselectedTrackStyle: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderRadius: 8,\n      height: controlSize / 4,\n      position: 'absolute',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { PanResponder, View } from 'react-native';\n\nimport { usePrevious } from '../../hooks';\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { ViewMeasure } from '../Helpers';\nimport { GetSliderStyles, getSliderStyles } from './Slider.styles';\n\ntype RangeValue = [number, number];\ntype SliderValue = number | RangeValue;\ntype Value<TIsRange extends boolean> = TIsRange extends true\n  ? [number, number]\n  : number;\n\nexport interface SliderProps<TIsRange extends boolean> {\n  /**\n   * Set whether it should slide a range. You should specify the value to get proper type-checking.\n   * However, if initialValue is set, it will take precedence over this prop\n   * @default false\n   */\n  isRange?: TIsRange;\n\n  /**\n   * Size of the thumb, and thus the whole slider\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue; which default to 0 and 1 respectively.\n   *\n   * *This is not a controlled component*; you don't need to update the\n   * value during dragging.\n   * @default 0\n   */\n  value?: Value<TIsRange>;\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * @default 0\n   */\n  step?: number;\n\n  /**\n   * Initial minimum value of the slider.\n   * @default 0\n   */\n  minimumValue?: number;\n\n  /**\n   * Initial maximum value of the slider.\n   * @default 1\n   */\n  maximumValue?: number;\n\n  /**\n   * If true the user won't be able to move the slider.\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback that is called when the user releases the slider;\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback called when the user starts changing the value.\n   */\n  onSlidingStart?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback to get element styles.\n   */\n  getStyles?: GetSliderStyles;\n\n  /** Label for screen readers */\n  leftThumbAccessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  leftThumbAccessibilityHint?: string;\n\n  /** Label for screen readers */\n  rightThumbAccessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  rightThumbAccessibilityHint?: string;\n\n  /**\n   * Used to locate this view in UI automation tests.\n   */\n  testID?: string;\n}\n\nconst initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst getBoundedValueBase = ({\n  maximumValue,\n  minimumValue,\n}: {\n  maximumValue: number;\n  minimumValue: number;\n}) => (value: number) =>\n  value > maximumValue\n    ? maximumValue\n    : value < minimumValue\n    ? minimumValue\n    : value;\n\nconst isRangeValue = (value: SliderValue): value is [number, number] =>\n  Array.isArray(value);\n\nconst getLeftValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[0];\n  return value;\n};\n\nconst getRightValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[1];\n  return value;\n};\n\nconst setLeftValue = (\n  previousValue: SliderValue,\n  leftValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [leftValue, previousValue[1]]\n    : leftValue;\n};\n\nconst setRightValue = (\n  previousValue: SliderValue,\n  rightValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [previousValue[0], rightValue]\n    : rightValue;\n};\n\nexport const Slider = <TIsRange extends boolean>(\n  props: SliderProps<TIsRange>,\n) => {\n  const {\n    value: initialValue = 0,\n    onSlidingStart = () => undefined,\n    onSlidingComplete = () => undefined,\n    onValueChange = () => undefined,\n    minimumValue = 0,\n    maximumValue = 1,\n    step = 0,\n    getStyles,\n    isRange = false,\n    leftThumbAccessibilityLabel,\n    leftThumbAccessibilityHint,\n    rightThumbAccessibilityHint,\n    rightThumbAccessibilityLabel,\n  } = props;\n\n  const finalInitialValue =\n    initialValue || (isRange ? [minimumValue, maximumValue] : minimumValue);\n\n  const [value, setValue] = React.useState(finalInitialValue);\n  const [isSliding, setIsSliding] = React.useState(false);\n  const [trackMeasurements, setTrackMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const prevIsSliding = usePrevious(isSliding);\n  const valuePerPixel = (maximumValue - minimumValue) / trackMeasurements.width;\n  const pixelPerValue = trackMeasurements.width / (maximumValue - minimumValue);\n  const isRangeSlider = isRangeValue(value);\n\n  const handleLeftSlide = (dx: number) => {\n    const leftValue = getLeftValue(value) + dx * valuePerPixel;\n    const roundedLeftValue = step\n      ? Math.round(leftValue / step) * step\n      : leftValue;\n\n    const finalLeftValue = getBoundedValueBase({\n      maximumValue: isRangeSlider ? getRightValue(value) - step : maximumValue,\n      minimumValue,\n    })(getLeftValue(roundedLeftValue));\n    const updatedValue = setLeftValue(value, finalLeftValue);\n\n    setValue(updatedValue);\n    onValueChange(updatedValue as Value<TIsRange>);\n  };\n\n  const handleRightSlide = (dx: number) => {\n    const rightValue = getRightValue(value) + dx * valuePerPixel;\n    const roundedRightValue = step\n      ? Math.round(rightValue / step) * step\n      : rightValue;\n\n    const finalRightValue = getBoundedValueBase({\n      maximumValue,\n      minimumValue: getLeftValue(value) + step,\n    })(getRightValue(roundedRightValue));\n\n    const updatedValue = setRightValue(value, finalRightValue);\n\n    setValue(updatedValue);\n    onValueChange(updatedValue as Value<TIsRange>);\n  };\n\n  const makeThumbRef = (handler: (dx: number) => void) =>\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        onSlidingStart(value as Value<TIsRange>);\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        setIsSliding(true);\n      },\n\n      onPanResponderMove: (_, { dx }) => handler(dx),\n\n      onPanResponderRelease: () => {\n        setIsSliding(false);\n      },\n    });\n\n  const leftThumbRef = React.useRef(makeThumbRef(handleLeftSlide));\n  const rightThumbRef = React.useRef(makeThumbRef(handleRightSlide));\n\n  React.useEffect(() => {\n    // We need to update the callback `onPanResponderMove` because it uses memoized `value`\n    leftThumbRef.current = makeThumbRef(handleLeftSlide);\n    rightThumbRef.current = makeThumbRef(handleRightSlide);\n\n    // We need to callback here because we need latest value instead of memoized one\n    if (prevIsSliding && !isSliding) {\n      onSlidingComplete(value as Value<TIsRange>);\n    }\n\n    // We diff valuePerPixel because on loading the component it may be NaN as it is calculating the measurements of the track\n  }, [isSliding, valuePerPixel]);\n\n  const theme = useTheme();\n  const {\n    containerStyle,\n    selectedTrackStyle,\n    thumbStyle,\n    unselectedTrackStyle,\n  } = mergeStyles(getSliderStyles, getStyles, theme.components.getSliderStyles)(\n    props,\n    theme,\n  );\n\n  const left = getLeftValue(value) * pixelPerValue;\n  const right = getRightValue(value) * pixelPerValue;\n  const cursor = isSliding ? 'grabbing' : 'grab';\n\n  return (\n    <ViewMeasure onMeasure={setTrackMeasurements} style={{ ...containerStyle }}>\n      <View style={unselectedTrackStyle} />\n      <View\n        style={{\n          ...selectedTrackStyle,\n          ...(isRangeSlider ? { left, width: right - left } : { width: left }),\n        }}\n      />\n      <View\n        accessible\n        // @ts-ignore\n        style={{ ...thumbStyle, left: left - thumbStyle.width / 2, cursor }}\n        accessibilityLabel={leftThumbAccessibilityLabel}\n        accessibilityHint={leftThumbAccessibilityHint}\n        {...leftThumbRef.current.panHandlers}\n      />\n      {isRangeSlider && (\n        <View\n          accessible\n          // @ts-ignore\n          style={{ ...thumbStyle, left: right - thumbStyle.width / 2, cursor }}\n          accessibilityLabel={rightThumbAccessibilityLabel}\n          accessibilityHint={rightThumbAccessibilityHint}\n          {...rightThumbRef.current.panHandlers}\n        />\n      )}\n    </ViewMeasure>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}