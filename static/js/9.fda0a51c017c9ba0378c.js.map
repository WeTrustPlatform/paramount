{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Checkbox","FormField","Toggle","___WEBPACK_IMPORTED_MODULE_7__","initial","_ref2","on","toggle","___WEBPACK_IMPORTED_MODULE_6__","label","labelPosition","___WEBPACK_IMPORTED_MODULE_5__","shape","value","onPress","size","of","parentName","className","isMDXComponent","getCheckboxStyles","theme","isDisabled","_ref$shape","_ref$size","sizeValue","isControlSize","controlHeights","checkColor","colors","text","white","checkboxStyle","objectSpread","alignItems","backgroundColor","background","content","borderColor","border","borderWidth","height","justifyContent","width","primaryDefault","greyDark","containerShapes","touchableStyle","_props$value","_props$isDisabled","_props$isInteractive","isInteractive","getStyles","testID","accessibilityLabel","useTheme","_mergeStyles","mergeStyles","react","TouchableOpacity","accessible","style","disabled","View","Icon_web","name","color","getFormFieldStyles","labelWrapperStyle","wrapperStyle","paddingRight","flexDirection","paddingLeft","paddingBottom","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","error","children","description","_props$labelPosition","labelContent","Label","labelStyle","Text","textStyle","_props$initial","_React$useState","React","useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","set","getLabelStyles","rest","objectWithoutProperties","getTextStyles","textProps","esm_extends","accessibilityRole","Platform","OS","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/9.a900ee30.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Checkbox, FormField, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`Checkbox for boolean values`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <FormField label=\\\"Checkbox\\\" labelPosition=\\\"right\\\">\\n      <Checkbox shape=\\\"circle\\\" value={on} onPress={toggle} size=\\\"medium\\\" />\\n    </FormField>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Checkbox,\n      FormField,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <FormField label=\"Checkbox\" labelPosition=\"right\" mdxType=\"FormField\">\n        <Checkbox shape=\"circle\" value={on} onPress={toggle} size=\"medium\" mdxType=\"Checkbox\" />\n      </FormField>}\n  </Toggle>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\ngetStyles={(CheckboxProps, Theme) => CheckboxStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<TouchableOpacity touchableStyle>\n  <View checkboxStyle>{icon}</View>\n</TouchableOpacity>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => Partial<CheckboxStyles>;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { value, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(value\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { GetCheckboxStyles, getCheckboxStyles } from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /** Callback to get element styles. */\n  getStyles?: GetCheckboxStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    value = false,\n    isDisabled = false,\n    isInteractive = true,\n    onPress,\n    getStyles,\n    testID,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      disabled={isDisabled || !isInteractive}\n      testID={testID}\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <View style={checkboxStyle}>\n        {value ? <Icon name=\"check\" size=\"xsmall\" color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldProps } from './FormField';\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  props: FormFieldProps,\n  theme: Theme,\n) => Partial<FormFieldStyles>;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport { GetFormFieldStyles, getFormFieldStyles } from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  /**\n   * Error message of the field\n   */\n  error?: React.ReactNode;\n\n  /**\n   * Label of the field.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: FormFieldLabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: React.ReactNode;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: GetFormFieldStyles;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(props, theme);\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ labelStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","import { TextStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { LabelProps } from './Label';\nimport { getTextStyles } from './Text.styles';\n\nexport interface LabelStyles {\n  labelStyle: TextStyle;\n}\n\nexport type GetLabelStyles = (\n  props: LabelProps,\n  theme: Theme,\n) => Partial<LabelStyles>;\n\nexport const getLabelStyles: GetLabelStyles = (props, theme) => {\n  const { getStyles, ...rest } = props;\n  const { textStyle } = getTextStyles(rest, theme);\n\n  return { labelStyle: textStyle };\n};\n","import * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetLabelStyles, getLabelStyles } from './Label.styles';\nimport { Text, TextProps } from './Text';\n\n// tslint:disable-next-line\n// @ts-ignore\nexport interface LabelProps extends TextProps {\n  /** Callback to get element styles. */\n  getStyles?: GetLabelStyles;\n}\n\nexport const Label = (props: LabelProps) => {\n  const { children, getStyles, ...textProps } = props;\n  const theme = useTheme();\n\n  const { labelStyle } = mergeStyles(\n    getLabelStyles,\n    getStyles,\n    theme.components.getLabelStyles,\n  )(props, theme);\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      getStyles={() => ({ textStyle: labelStyle })}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}