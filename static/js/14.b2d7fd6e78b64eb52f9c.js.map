{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.mdx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Box","Button","Dialog","Heading","Icon","Text","Toggle","initial","_ref2","on","toggle","header","padding","flexDirection","justifyContent","alignItems","icon","name","size","onPress","footer","appearance","title","paddingLeft","color","console","log","isVisible","onRequestClose","useHistory","getStyles","theme","modalContainerStyle","containerStyle","bodyStyle","height","of","isMDXComponent"],"mappings":"gYAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,6BAOMG,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAA,SAAAH,EAAA,gBACD,OAAO,EAAAR,EAAAY,KAACN,GAAD,EAAAO,EAAA,YAAeR,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAG5E,EAAAd,EAAAY,KAAA,KAAQ,CACNG,GAAM,UADR,WAGA,EAAAf,EAAAY,KAAA,0HACA,EAAAZ,EAAAY,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAf,EAAAY,KAACT,EAAAa,WAAD,CAAYC,WAAY,EAAGC,OAAQ,yvCAAgxCC,QAAS,CAC1zCT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BM,wBACAK,cACAC,UACAC,gBACAC,gBACAC,kBACAC,YACAC,YACAC,iBACCd,QAAQ,eACb,EAAAd,EAAAY,KAACR,EAAAwB,OAAD,CAAQC,SAAS,EAAOf,QAAQ,UAC7B,SAAAgB,GAAA,IACKC,EADLD,EACKC,GACAC,EAFLF,EAEKE,OAFL,OAGS,EAAAhC,EAAAY,KAACR,EAAAkB,IAAD,CAAKR,QAAQ,QACnB,EAAAd,EAAAY,KAACR,EAAAoB,OAAD,CAAQS,QAAQ,EAAAjC,EAAAY,KAACR,EAAAkB,IAAD,CAAKY,QAAS,GAAIC,cAAc,MAAMC,eAAe,gBAAgBC,WAAW,SAASvB,QAAQ,QAC3G,EAAAd,EAAAY,KAACR,EAAAqB,QAAD,CAASX,QAAQ,WAAjB,UACA,EAAAd,EAAAY,KAACR,EAAAmB,OAAD,CAAQe,MAAM,EAAAtC,EAAAY,KAACR,EAAAsB,KAAD,CAAMa,KAAK,IAAIC,KAAM,GAAI1B,QAAQ,SAAW2B,QAAST,EAAQlB,QAAQ,YAC7E4B,QAAQ,EAAA1C,EAAAY,KAACR,EAAAkB,IAAD,CAAKY,QAAS,GAAIC,cAAc,MAAMC,eAAe,WAAWtB,QAAQ,QACtF,EAAAd,EAAAY,KAACR,EAAAmB,OAAD,CAAQoB,WAAW,UAAUF,QAAST,EAAQY,MAAM,SAAS9B,QAAQ,YACrE,EAAAd,EAAAY,KAACR,EAAAkB,IAAD,CAAKuB,YAAa,GAAI/B,QAAQ,QAC5B,EAAAd,EAAAY,KAACR,EAAAmB,OAAD,CAAQuB,MAAM,UAAUL,QAAS,kBAAMM,QAAQC,IAAI,mBAAmBJ,MAAM,SAAS9B,QAAQ,aAEzFmC,UAAWlB,EAAImB,eAAgBlB,EAAQmB,YAAY,EAAOC,UAAW,SAAC1C,EAAO2C,GAAR,MAAmB,CAChGC,oBAAqB,GACrBC,eAAgB,GAChBC,UAAW,KACT1C,QAAQ,WACZ,EAAAd,EAAAY,KAACR,EAAAkB,IAAD,CAAKmC,OAAQ,KAAM3C,QAAQ,QACzB,EAAAd,EAAAY,KAACR,EAAAuB,KAAD,CAAMb,QAAQ,QAAd,oCAGJ,EAAAd,EAAAY,KAACR,EAAAmB,OAAD,CAAQkB,QAAST,EAAQY,MAAM,cAAc9B,QAAQ,gBAIzD,EAAAd,EAAAY,KAAA,KAAQ,CACNG,GAAM,gBADR,iBAGA,EAAAf,EAAAY,KAACT,EAAAkB,MAAD,CAAOqC,GAAIlC,SAAQV,QAAQ,iMAI/BP,EAAWoD,gBAAiB","file":"static/js/14.d21d6b29.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, Dialog, Heading, Icon, Text, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n    <p>{`Dialog has no predefined styling and handlers. The content, header and footer is completely in your control.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Box>\\n      <Dialog\\n        header={\\n          <Box\\n            padding={16}\\n            flexDirection=\\\"row\\\"\\n            justifyContent=\\\"space-between\\\"\\n            alignItems=\\\"center\\\"\\n          >\\n            <Heading>Title</Heading>\\n            <Button icon={<Icon name=\\\"x\\\" size={24} />} onPress={toggle} />\\n          </Box>\\n        }\\n        footer={\\n          <Box padding={16} flexDirection=\\\"row\\\" justifyContent=\\\"flex-end\\\">\\n            <Button appearance=\\\"minimal\\\" onPress={toggle} title=\\\"Cancel\\\" />\\n            <Box paddingLeft={16}>\\n              <Button\\n                color=\\\"primary\\\"\\n                onPress={() => console.log(\\'Button clicked\\')}\\n                title=\\\"Accept\\\"\\n              />\\n            </Box>\\n          </Box>\\n        }\\n        isVisible={on}\\n        onRequestClose={toggle}\\n        useHistory={false}\\n        getStyles={(props, theme) => ({\\n          modalContainerStyle: {},\\n          containerStyle: {},\\n          bodyStyle: {},\\n        })}\\n      >\\n        <Box height={1800}>\\n          <Text>Put any content in the dialog</Text>\\n        </Box>\\n      </Dialog>\\n      <Button onPress={toggle} title=\\\"Open dialog\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      Dialog,\n      Heading,\n      Icon,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Box mdxType=\"Box\">\n        <Dialog header={<Box padding={16} flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mdxType=\"Box\">\n              <Heading mdxType=\"Heading\">Title</Heading>\n              <Button icon={<Icon name=\"x\" size={24} mdxType=\"Icon\" />} onPress={toggle} mdxType=\"Button\" />\n            </Box>} footer={<Box padding={16} flexDirection=\"row\" justifyContent=\"flex-end\" mdxType=\"Box\">\n              <Button appearance=\"minimal\" onPress={toggle} title=\"Cancel\" mdxType=\"Button\" />\n              <Box paddingLeft={16} mdxType=\"Box\">\n                <Button color=\"primary\" onPress={() => console.log('Button clicked')} title=\"Accept\" mdxType=\"Button\" />\n              </Box>\n            </Box>} isVisible={on} onRequestClose={toggle} useHistory={false} getStyles={(props, theme) => ({\n            modalContainerStyle: {},\n            containerStyle: {},\n            bodyStyle: {}\n          })} mdxType=\"Dialog\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Put any content in the dialog</Text>\n          </Box>\n        </Dialog>\n        <Button onPress={toggle} title=\"Open dialog\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"dialog-props\"\n    }}>{`Dialog Props`}</h3>\n    <Props of={Dialog} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}