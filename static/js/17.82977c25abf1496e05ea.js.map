{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","Feather","_theme","_Text","Icon","_ref","name","color","size","theme","useTheme","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","getTextColor","colors","text","_Icon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_reactNative","_IconTextInput","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","_objectWithoutProperties2","IconTextInput","_extends2","ref","TouchableOpacity","onPress","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","isInvalid","keyboardType","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","getTextInputVariables","base","backgroundColor","background","content","borderColor","border","borderWidth","width","disabled","greyDark","focus","invalid","danger","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlHeights","controlPaddings","medium","large","getTextInputStyles","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","_ClearableTextInput","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","textStyle","textAlign","alignSelf","flexDirection","fontStyle","textTransform","_deepmerge","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/17.d76d8c02.js","sourcesContent":["import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { TextInputStylesProps } from './TextInput.styles';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps\n  extends Partial<TextInputStylesProps> {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetIconTextInputStyles,\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetIconTextInputStyles,\n    DeepPartial<IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../Icon';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/ThemeInterface';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextVariables {\n  size: TextSizes;\n  fontFamily: FontFamilies;\n}\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import deepMerge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  return getOverridingStyles\n    ? deepMerge<TStyles>(defaultStyles, getOverridingStyles(\n        props,\n        theme,\n      ) as Partial<TStyles>)\n    : defaultStyles;\n};\n"],"sourceRoot":""}