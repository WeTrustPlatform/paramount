{"version":3,"sources":["webpack:///./src/components/Drawer/Drawer.styles.ts","webpack:///./src/components/Drawer/Drawer.tsx","webpack:///./src/components/Drawer/index.ts","webpack:///./src/components/Menu/DrawerMenu.mdx","webpack:///./src/components/Menu/DrawerMenu.tsx","webpack:///./src/components/Menu/DropdownMenu.tsx","webpack:///./src/components/Menu/index.ts"],"names":["getDrawerVariables","theme","container","position","width","zIndex","modalContainer","alignItems","display","height","justifyContent","getDrawerStyles","drawerVariables","containerStyle","modalContainerStyle","displayName","__docgenInfo","description","props","colors","defaultValue","name","required","type","fills","fontFamilies","fontWeights","headingSizes","paragraphSizes","textSizes","elevations","controlPaddings","controlHeights","controlBorderRadius","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Modal","_Overlay","_Drawer","Drawer","children","isVisible","_props$onClose","onClose","_props$position","_props$offset","offset","space","getStyles","useTheme","_mergeStyles","mergeStyles","value","Animated","Value","spring","bounciness","speed","toValue","start","createElement","Modal","visible","transparent","onRequestClose","View","style","_objectSpread3","default","_defineProperty2","Overlay","onPress","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_react","_interopRequireDefault","_tag","_docz","_reactPowerplug","_","_Button","MDXContent","_this","_classCallCheck2","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","MDXTag","id","Playground","__position","__code","__scope","Toggle","DrawerMenu","Button","_ref","on","toggle","Fragment","isInline","title","options","color","appearance","Component","_Layout","_props$options","Spacing","padding","Box","elevation","borderRadius","medium","borderWidth","borderColor","border","map","option","_extends2","paddingTop","_Helpers","_Positioner","DropdownMenu","_React$useState","useState","pageX","pageY","x","y","_React$useState2","_slicedToArray2","targetMeasurements","setTargetMeasurements","Positioner","content","ViewMeasure","onMeasure","_DrawerMenu","_DropdownMenu"],"mappings":"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","file":"static/js/26.c5dc6da7.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DrawerVariables {\n  container: ViewStyle;\n  modalContainer: ViewStyle;\n}\n\nexport const getDrawerVariables = (theme: Theme): DrawerVariables => {\n  return {\n    container: {\n      position: 'absolute',\n      width: '100%',\n      zIndex: 1,\n    },\n    modalContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n\nexport interface DrawerStyles {\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDrawerStyles = (theme: Theme) => DrawerStyles;\n\nexport const getDrawerStyles: GetDrawerStyles = theme => {\n  const drawerVariables = getDrawerVariables(theme);\n\n  return {\n    containerStyle: drawerVariables.container,\n    modalContainerStyle: drawerVariables.modalContainer,\n  };\n};\ntry {\n    // @ts-ignore\n    getDrawerVariables.displayName = \"getDrawerVariables\";\n    // @ts-ignore\n    getDrawerVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getDrawerVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Drawer/Drawer.styles.ts#getDrawerVariables\"] = { docgenInfo: getDrawerVariables.__docgenInfo, name: \"getDrawerVariables\", path: \"src/components/Drawer/Drawer.styles.ts#getDrawerVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    getDrawerStyles.displayName = \"getDrawerStyles\";\n    // @ts-ignore\n    getDrawerStyles.__docgenInfo = { \"description\": \"\", \"displayName\": \"getDrawerStyles\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Drawer/Drawer.styles.ts#getDrawerStyles\"] = { docgenInfo: getDrawerStyles.__docgenInfo, name: \"getDrawerStyles\", path: \"src/components/Drawer/Drawer.styles.ts#getDrawerStyles\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DrawerStyles,\n  GetDrawerStyles,\n  getDrawerStyles,\n} from './Drawer.styles';\n\ntype Position = 'bottom' | 'top' | 'right' | 'left';\n\nexport interface DrawerProps {\n  children: React.ReactNode;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** Amount to offset from the edge of window @default 0 */\n  offset?: number;\n  /** Amount of % screen to take up. */\n  space?: number | string;\n  /** Which side to draw from @default bottom */\n  position?: Position;\n  getStyles?: ReplaceReturnType<GetDrawerStyles, DeepPartial<DrawerStyles>>;\n}\n\nexport const Drawer = (props: DrawerProps) => {\n  const {\n    children,\n    isVisible,\n    onClose = () => null,\n    position = 'bottom',\n    offset = 0,\n    space,\n    getStyles,\n  } = props;\n\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle } = mergeStyles(\n    getDrawerStyles,\n    getStyles,\n  )(theme);\n\n  if (!isVisible) return null;\n\n  const value = new Animated.Value(-500);\n\n  Animated.spring(value, {\n    bounciness: 0,\n    speed: 70,\n    toValue: offset,\n  }).start();\n\n  return (\n    <Modal visible transparent onRequestClose={onClose}>\n      <View style={modalContainerStyle}>\n        <Animated.View\n          style={{\n            ...containerStyle,\n            [position]: value,\n            ...((position === 'left' || position === 'right') &&\n              space && {\n                height: '100%',\n                width: space,\n              }),\n            ...((position === 'bottom' || position === 'top') &&\n              space && {\n                height: space,\n                width: '100%',\n              }),\n          }}\n        >\n          {children}\n        </Animated.View>\n        <Overlay onPress={onClose} />\n      </View>\n    </Modal>\n  );\n};\ntry {\n    // @ts-ignore\n    Drawer.displayName = \"Drawer\";\n    // @ts-ignore\n    Drawer.__docgenInfo = { \"description\": \"\", \"displayName\": \"Drawer\", \"props\": { \"isVisible\": { \"defaultValue\": null, \"description\": \"To show dialog or not\", \"name\": \"isVisible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onClose\": { \"defaultValue\": null, \"description\": \"Called when clicking on overlay or pressing Esc\", \"name\": \"onClose\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"offset\": { \"defaultValue\": null, \"description\": \"Amount to offset from the edge of window @default 0\", \"name\": \"offset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"space\": { \"defaultValue\": null, \"description\": \"Amount of % screen to take up.\", \"name\": \"space\", \"required\": false, \"type\": { \"name\": \"ReactText\" } }, \"position\": { \"defaultValue\": null, \"description\": \"Which side to draw from @default bottom\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"Position\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetDrawerStyles, DeepPartial<DrawerStyles>>\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Drawer/Drawer.tsx#Drawer\"] = { docgenInfo: Drawer.__docgenInfo, name: \"Drawer\", path: \"src/components/Drawer/Drawer.tsx#Drawer\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export * from './Drawer';\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { DrawerMenu } from '.';\nimport { Button } from '../Button';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"drawermenu\"}}>{`DrawerMenu`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} isInline title=\\\"Open overlay menu\\\" />\\n      <DrawerMenu\\n        options={[\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 1\\',\\n            color: \\'danger\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 2\\',\\n            color: \\'primary\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 3\\',\\n            color: \\'secondary\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 4\\',\\n            appearance: \\'minimal\\',\\n          },\\n        ]}\\n        isVisible={on}\\n        onClose={toggle}\\n      />\\n    </>\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,DrawerMenu,Button}}>\n  <Toggle>\n    {({ on, toggle }) => (\n      <>\n        <Button onPress={toggle} isInline title=\"Open overlay menu\" />\n        <DrawerMenu\n          options={[\n            {\n              onPress: toggle,\n              title: 'Menu Option 1',\n              color: 'danger',\n              appearance: 'minimal',\n            },\n            {\n              onPress: toggle,\n              title: 'Menu Option 2',\n              color: 'primary',\n              appearance: 'minimal',\n            },\n            {\n              onPress: toggle,\n              title: 'Menu Option 3',\n              color: 'secondary',\n              appearance: 'minimal',\n            },\n            {\n              onPress: toggle,\n              title: 'Menu Option 4',\n              appearance: 'minimal',\n            },\n          ]}\n          isVisible={on}\n          onClose={toggle}\n        />\n      </>\n    )}\n  </Toggle>\n</Playground>\n           </MDXTag>\n  }\n}\n  ","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Button, ButtonProps } from '../Button';\nimport { Drawer } from '../Drawer';\nimport { Box, Spacing } from '../Layout';\n\nexport interface DrawerMenuProps {\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** List of menu options, which also take `ButtonProps` */\n  options?: ButtonProps[];\n}\n\nexport const DrawerMenu = (props: DrawerMenuProps) => {\n  const { options = [], isVisible, onClose } = props;\n  const theme = useTheme();\n\n  return (\n    <Drawer isVisible={isVisible} onClose={onClose}>\n      <Spacing padding={3}>\n        <Box\n          elevation={1}\n          borderRadius={theme.controlBorderRadius.medium}\n          borderWidth={1}\n          borderColor={theme.colors.border.default}\n        >\n          {options.map(option => (\n            <Button key={option.title} {...option} />\n          ))}\n        </Box>\n        <Spacing paddingTop={3}>\n          <Button onPress={onClose} title=\"Close\" />\n        </Spacing>\n      </Spacing>\n    </Drawer>\n  );\n};\ntry {\n    // @ts-ignore\n    DrawerMenu.displayName = \"DrawerMenu\";\n    // @ts-ignore\n    DrawerMenu.__docgenInfo = { \"description\": \"\", \"displayName\": \"DrawerMenu\", \"props\": { \"isVisible\": { \"defaultValue\": null, \"description\": \"To show dialog or not\", \"name\": \"isVisible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onClose\": { \"defaultValue\": null, \"description\": \"Called when clicking on overlay or pressing Esc\", \"name\": \"onClose\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"options\": { \"defaultValue\": null, \"description\": \"List of menu options, which also take `ButtonProps`\", \"name\": \"options\", \"required\": false, \"type\": { \"name\": \"any[]\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Menu/DrawerMenu.tsx#DrawerMenu\"] = { docgenInfo: DrawerMenu.__docgenInfo, name: \"DrawerMenu\", path: \"src/components/Menu/DrawerMenu.tsx#DrawerMenu\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Button, ButtonProps } from '../Button';\nimport { Measurements, ViewMeasure } from '../Helpers';\nimport { Box } from '../Layout';\nimport { Positioner } from '../Positioner';\n\nexport interface DropdownMenuProps {\n  children: React.ReactNode;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** List of menu options, which also take `ButtonProps` */\n  options?: ButtonProps[];\n}\n\nexport interface DropdownMenuState {\n  targetMeasurements: Measurements;\n}\n\nexport const DropdownMenu = (props: DropdownMenuProps) => {\n  const { options = [], isVisible, onClose, children } = props;\n  const [targetMeasurements, setTargetMeasurements] = React.useState({\n    height: 0,\n    pageX: 0,\n    pageY: 0,\n    width: 0,\n    x: 0,\n    y: 0,\n  });\n  const theme = useTheme();\n\n  return (\n    <Positioner\n      position=\"bottom\"\n      content={() => (\n        <Box\n          elevation={1}\n          borderRadius={theme.controlBorderRadius.medium}\n          borderWidth={1}\n          borderColor={theme.colors.border.default}\n          width={targetMeasurements.width}\n        >\n          {options.map(option => (\n            <Button key={option.title} {...option} />\n          ))}\n        </Box>\n      )}\n      isVisible={isVisible}\n      onClose={onClose}\n    >\n      <ViewMeasure onMeasure={setTargetMeasurements}>{children}</ViewMeasure>\n    </Positioner>\n  );\n};\ntry {\n    // @ts-ignore\n    DropdownMenu.displayName = \"DropdownMenu\";\n    // @ts-ignore\n    DropdownMenu.__docgenInfo = { \"description\": \"\", \"displayName\": \"DropdownMenu\", \"props\": { \"isVisible\": { \"defaultValue\": null, \"description\": \"To show dialog or not\", \"name\": \"isVisible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onClose\": { \"defaultValue\": null, \"description\": \"Called when clicking on overlay or pressing Esc\", \"name\": \"onClose\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"options\": { \"defaultValue\": null, \"description\": \"List of menu options, which also take `ButtonProps`\", \"name\": \"options\", \"required\": false, \"type\": { \"name\": \"any[]\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Menu/DropdownMenu.tsx#DropdownMenu\"] = { docgenInfo: DropdownMenu.__docgenInfo, name: \"DropdownMenu\", path: \"src/components/Menu/DropdownMenu.tsx#DropdownMenu\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export * from './DrawerMenu';\nexport * from './DropdownMenu';\n"],"sourceRoot":""}