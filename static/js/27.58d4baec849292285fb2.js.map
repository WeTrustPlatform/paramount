{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_Alert","_Box","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Alert","Box","title","description","isCloseable","intent","component","getStyles","theme","bodyStyle","containerStyle","paddingVertical","of","isMDXComponent","getAlertStyles","flex","_objectSpread2","backgroundColor","colors","background","content","borderLeftColor","border","borderLeftWidth","borderRadius","controlBorderRadius","medium","display","flexDirection","padding","elevations","textStyle","titleStyle","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Icon","_Typography","onClose","_props$isCloseable","icon","_props$intent","testID","useTheme","_mergeStyles","mergeStyles","createElement","View","style","paddingRight","justifyContent","Icon","name","size","color","resolveIcon","Text","weight","TouchableOpacity","onPress","paddingLeft","text","Feather","_Text","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","Object","keys","forEach","key","defineProperty","exports","enumerable","get"],"mappings":"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","file":"static/js/27.5c299d90.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Alert } from './Alert';\nimport { Box } from '../Box';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Alert\\n  title=\\\"Kitchen sink\\\"\\n  description=\\\"Message\\\"\\n  isCloseable\\n  intent=\\\"success\\\"\\n  component={null} // Overrides body\\n  getStyles={(props, theme) => ({\\n    bodyStyle: {},\\n    containerStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Alert,\n      Box\n    }} mdxType=\"Playground\">\n  <Alert title=\"Kitchen sink\" description=\"Message\" isCloseable intent=\"success\" component={null} // Overrides body\n      getStyles={(props, theme) => ({\n        bodyStyle: {},\n        containerStyle: {}\n      })} mdxType=\"Alert\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Box paddingVertical={16}>\\n  <Alert title=\\\"Info\\\" description=\\\"Message\\\" />\\n</Box>\\n<Box paddingVertical={16}>\\n  <Alert intent=\\\"success\\\" title=\\\"Success\\\" description=\\\"Message\\\" />\\n</Box>\\n<Box paddingVertical={16}>\\n  <Alert intent=\\\"warning\\\" title=\\\"Warning\\\" description=\\\"Message\\\" />\\n</Box>\\n<Box paddingVertical={16}>\\n  <Alert intent=\\\"danger\\\" title=\\\"Danger\\\" description=\\\"Message\\\" />\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Alert,\n      Box\n    }} mdxType=\"Playground\">\n  <Box paddingVertical={16} mdxType=\"Box\">\n    <Alert title=\"Info\" description=\"Message\" mdxType=\"Alert\" />\n  </Box>\n  <Box paddingVertical={16} mdxType=\"Box\">\n    <Alert intent=\"success\" title=\"Success\" description=\"Message\" mdxType=\"Alert\" />\n  </Box>\n  <Box paddingVertical={16} mdxType=\"Box\">\n    <Alert intent=\"warning\" title=\"Warning\" description=\"Message\" mdxType=\"Alert\" />\n  </Box>\n  <Box paddingVertical={16} mdxType=\"Box\">\n    <Alert intent=\"danger\" title=\"Danger\" description=\"Message\" mdxType=\"Alert\" />\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Alert} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Intent } from '../../constants/Intent';\nimport { Theme } from '../../theme';\n\nexport interface AlertStyles {\n  containerStyle: ViewStyle;\n  bodyStyle: ViewStyle;\n  titleStyle: TextStyle;\n  textStyle: TextStyle;\n}\n\nexport interface AlertStyleProps {\n  intent: Intent;\n}\n\nexport type GetAlertStyles = (\n  alertStyleProps: AlertStyleProps,\n  theme: Theme,\n) => AlertStyles;\n\nexport const getAlertStyles: GetAlertStyles = ({ intent }, theme) => {\n  return {\n    bodyStyle: {\n      flex: 1,\n    },\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderLeftColor: theme.colors.border[intent],\n      borderLeftWidth: 5,\n      borderRadius: theme.controlBorderRadius.medium,\n      display: 'flex',\n      flexDirection: 'row',\n      padding: 16,\n      ...theme.elevations[2],\n    },\n    textStyle: {},\n    titleStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Intent } from '../../constants/Intent';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Box } from '../Box';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport { AlertStyles, GetAlertStyles, getAlertStyles } from './Alert.styles';\n\nexport interface AlertProps {\n  title?: string;\n  description?: string;\n  testID?: string;\n  /* custom component, will take precedence over title and description */\n  component?: React.ReactNode;\n  onClose?: () => void;\n  isCloseable?: boolean;\n  icon?: React.ReactNode | null;\n  intent?: Intent;\n\n  getStyles?: ReplaceReturnType<GetAlertStyles, DeepPartial<AlertStyles>>;\n}\n\nconst resolveIcon = (intent: Intent) => {\n  switch (intent) {\n    case 'success':\n      return <Icon name=\"check-circle\" size={24} color=\"success\" />;\n    case 'warning':\n      return <Icon name=\"alert-triangle\" size={24} color=\"warning\" />;\n    case 'danger':\n      return <Icon name=\"alert-circle\" size={24} color=\"danger\" />;\n    default:\n      return <Icon name=\"info\" size={24} color=\"info\" />;\n  }\n};\n\nexport const Alert = (props: AlertProps) => {\n  const {\n    title,\n    description,\n    component,\n    onClose,\n    isCloseable = false,\n    icon,\n    intent = 'info',\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { containerStyle, bodyStyle } = mergeStyles(\n    getAlertStyles,\n    getStyles,\n    theme.components.getAlertStyles,\n  )({ intent }, theme);\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {icon || (\n        <Box paddingRight={16} justifyContent=\"center\">\n          {resolveIcon(intent)}\n        </Box>\n      )}\n      {component || (\n        <View style={bodyStyle}>\n          <Text weight=\"bold\">{title}</Text>\n          <Text>{description}</Text>\n        </View>\n      )}\n      {isCloseable && (\n        <TouchableOpacity onPress={onClose}>\n          <Box paddingLeft={16}>\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </Box>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n"],"sourceRoot":""}