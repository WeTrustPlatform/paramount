{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_reactNative","_","_Form","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","Props","Text","Checkbox","FormField","initial","_ref2","on","toggle","label","labelPosition","shape","isChecked","isDisabled","isInteractive","onChange","size","getStyles","theme","touchableStyle","checkboxStyle","checkColor","checkboxFocusBackgroundColor","of","isMDXComponent","getCheckboxStyles","sizeValue","controlHeights","colors","text","white","background","primaryDark","greyLight","_objectSpread2","alignItems","backgroundColor","content","borderColor","border","borderWidth","height","justifyContent","width","primaryDefault","greyDark","circle","borderRadius","square","controlBorderRadius","small","React","_interopRequireWildcard","_theme","_mergeStyles2","_Icon","_Checkbox","_props$isChecked","_props$isDisabled","_props$isInteractive","_props$onChange","_props$shape","_props$size","testID","accessibilityProps","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","accessible","style","underlayColor","disabled","onPress","View","Icon","name","color","getFormFieldStyles","labelWrapperStyle","wrapperStyle","paddingRight","flexDirection","paddingLeft","paddingBottom","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","_Typography","_FormField","error","children","description","_props$labelPosition","labelContent","Label","textStyle","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor"],"mappings":"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","file":"static/js/19.1fede128.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Text } from 'react-native';\nimport { Checkbox } from '.';\nimport { FormField } from '../Form';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <FormField label=\\\"Checkbox\\\" labelPosition=\\\"right\\\">\\n      <Checkbox\\n        shape=\\\"square\\\" // or \\\"circle\\\"\\n        isChecked={on}\\n        isDisabled={false}\\n        isInteractive={true}\\n        onChange={toggle}\\n        size=\\\"medium\\\"\\n        getStyles={(props, theme) => ({\\n          touchableStyle: {},\\n          checkboxStyle: {},\\n          checkColor: \\'white\\',\\n          checkboxFocusBackgroundColor: \\'\\',\\n        })}\\n      />\\n    </FormField>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Text,\n      Checkbox,\n      FormField\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <FormField label=\"Checkbox\" labelPosition=\"right\" mdxType=\"FormField\">\n        <Checkbox shape=\"square\" // or \"circle\"\n          isChecked={on} isDisabled={false} isInteractive={true} onChange={toggle} size=\"medium\" getStyles={(props, theme) => ({\n            touchableStyle: {},\n            checkboxStyle: {},\n            checkColor: 'white',\n            checkboxFocusBackgroundColor: ''\n          })} mdxType=\"Checkbox\" />\n      </FormField>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n  size: ControlSize;\n}\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n  checkboxFocusBackgroundColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape, size },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkColor: theme.colors.text.white,\n    checkboxFocusBackgroundColor: isChecked\n      ? theme.colors.background.primaryDark\n      : theme.colors.background.greyLight,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...{\n        circle: {\n          borderRadius: 999,\n        },\n        square: {\n          borderRadius: theme.controlBorderRadius.small,\n        },\n      }[shape],\n    },\n\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n  size?: ControlSize;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'square',\n    size = 'medium',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    touchableStyle,\n    checkboxStyle,\n    checkColor,\n    checkboxFocusBackgroundColor,\n  } = mergeStyles(getCheckboxStyles, getStyles)(\n    {\n      isChecked,\n      isDisabled,\n      shape,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible={isInteractive}\n      style={touchableStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={checkboxStyle}>\n        {isChecked ? <Icon name=\"check\" size={20} color={checkColor} /> : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export { Checkbox, CheckboxProps } from './Checkbox';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { FormFieldLabelPosition } from './FormField';\n\nexport interface FormFieldStylesProps {\n  labelPosition?: FormFieldLabelPosition;\n}\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  FormFieldStylesProps: FormFieldStylesProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  error?: string;\n  label?: string;\n  labelPosition?: FormFieldLabelPosition;\n  description?: string;\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(getFormFieldStyles, getStyles)(\n    {\n      labelPosition,\n    },\n    theme,\n  );\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ textStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n"],"sourceRoot":""}