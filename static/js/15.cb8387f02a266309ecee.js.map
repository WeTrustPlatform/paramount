{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","newHashValue","controlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","Icon","_ref$size","IconTag","Feather","concat","result","matches","charAt","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","colors","text","layoutProps","MDXLayout","MDXContent","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","ListItem","___WEBPACK_IMPORTED_MODULE_7__","onPress","console","log","avatarProps","uri","title","description","of","className","isMDXComponent","getListItemStyles","isDisabled","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexDirection","rightWrapperStyle","right","zIndex","textWrapperStyle","titleStyle","touchableStyle","objectSpread","background","content","borderBottomWidth","borderColor","border","greyDark","wrapperStyle","_props$isDisabled","rightNode","leftNode","accessibilityHint","_props$accessible","accessible","TouchableOpacity","disabled","esm_extends","Icon_web","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","getTextStyles","_ref$color","_ref$align","align","weight","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","children","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","controlBorderRadius","overlay","greyLight","greyDefault","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/15.e718df61.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => AvatarStyles;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = theme.controlHeights[size] * avatarScale[size];\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size = 24 }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar, Icon, ListItem } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  avatarProps={{\\n    source: { uri: \\'https://picsum.photos/200/200\\' },\\n  }}\\n  title=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar,\n      Icon,\n      ListItem\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} avatarProps={{\n        source: {\n          uri: 'https://picsum.photos/200/200'\n        }\n      }} title=\"Some label\" description=\"Some description\" mdxType=\"ListItem\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ListItem} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\ngetStyles={(ListItemProps, Theme) => ListItemStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<TouchableOpacity touchableStyle>\n  <View wrapperStyle>\n    <View leftWrapperStyle>\n      <View imageWrapperStyle>{leftNode || <Avatar />}</View>\n      <View textWrapperStyle>\n        {title}\n        {description}\n      </View>\n    </View>\n    {rightNode}\n  </View>\n</TouchableOpacity>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  rightWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = ({ isDisabled }, theme) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    rightWrapperStyle: {\n      position: 'absolute',\n      right: 0,\n      zIndex: 2,\n    },\n    textWrapperStyle: {\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights.large,\n      justifyContent: 'center',\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Title of the list item\n   */\n  title?: React.ReactNode;\n\n  /**\n   * Description of the list item\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * React node replacing `Avatar` on the left hand-side\n   */\n  leftNode?: React.ReactNode;\n\n  /**\n   * React node replacing right hand-side icon\n   */\n  rightNode?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    rightNode,\n    leftNode,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    rightWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {leftNode || avatarProps ? (\n            <View style={imageWrapperStyle}>\n              {leftNode || <Avatar size=\"small\" {...avatarProps} />}\n            </View>\n          ) : null}\n          <View style={textWrapperStyle}>\n            {title ? (\n              typeof title === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: titleStyle })}\n                  size=\"large\"\n                >\n                  {title}\n                </Text>\n              ) : (\n                title\n              )\n            ) : null}\n            {description ? (\n              typeof description === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: descriptionStyle })}\n                  size=\"medium\"\n                  color=\"muted\"\n                >\n                  {description}\n                </Text>\n              ) : (\n                description\n              )\n            ) : null}\n          </View>\n        </View>\n        {rightNode === null ? null : (\n          <View style={rightWrapperStyle}>\n            {rightNode || (\n              <Icon color=\"default\" size={24} name=\"chevron-right\" />\n            )}\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}