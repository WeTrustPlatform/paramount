{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","shapeMapping","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","_shape","_x","apply","this","arguments","toString","Box","props","children","propStyle","style","testID","viewStyles","_objectWithoutProperties2","useTheme","transformedStyles","pureStyles","prop","styleFn","push","createElement","View","_Box","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","Icon","_ref","name","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","text","_Icon","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","Props","Toggle","Switch","initial","_ref2","on","toggle","isSwitchedOn","onChange","isDisabled","onIcon","offIcon","duration","getStyles","circleStyle","containerStyle","backgroundColorOff","backgroundColorOn","circleColorOff","circleColorOn","of","isMDXComponent","getSwitchVariables","greyDefault","primaryDefault","content","alignItems","display","height","justifyContent","padding","width","container","greyLight","flexDirection","getSwitchStyles","switchVariables","_native","_Animation","_mergeStyles2","_Switch","AnimatedView","animated","accessibilityProps","_mergeStyles","mergeStyles","_useSpring","useSpring","config","springDefaultConfig","circleColor","circlePosition","TouchableOpacity","accessible","accessibilityLabel","onPress","activeOpacity","alignSelf","flexWrap","transform","translateX","primary","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","fontSize","getTextStyles","isInline","isItalic","align","weight","sizeStyle","textStyle","_objectSpread2","textAlign","fontStyle","textTransform","friction","tension","_deepmerge","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/13.9e7208bc.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","export * from './Box';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Switch } from '.';\nimport { Box } from '../Box';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle }) => (\\n      <Switch\\n        isSwitchedOn={on}\\n        onChange={toggle}\\n        isDisabled={false}\\n        onIcon={null}\\n        offIcon={null}\\n        duration={300}\\n        getStyles={(props, theme) => ({\\n          circleStyle: {},\\n          containerStyle: {},\\n          backgroundColorOff: \\'#F5F6F7\\',\\n          backgroundColorOn: \\'#67c6bb\\',\\n          circleColorOff: \\'white\\',\\n          circleColorOn: \\'white\\',\\n        })}\\n      />\\n    )}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Switch,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Switch isSwitchedOn={on} onChange={toggle} isDisabled={false} onIcon={null} offIcon={null} duration={300} getStyles={(props, theme) => ({\n            circleStyle: {},\n            containerStyle: {},\n            backgroundColorOff: '#F5F6F7',\n            backgroundColorOn: '#67c6bb',\n            circleColorOff: 'white',\n            circleColorOn: 'white'\n          })} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface SwitchVariables {\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n\n  container: ViewStyle & SwitchStylesRequired;\n  circle: ViewStyle & SwitchStylesRequired;\n}\n\nexport const getSwitchVariables = (theme: Theme): SwitchVariables => {\n  return {\n    backgroundColorOff: theme.colors.background.greyDefault,\n    backgroundColorOn: theme.colors.background.primaryDefault,\n    circleColorOff: theme.colors.background.content,\n    circleColorOn: theme.colors.background.content,\n\n    circle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderRadius: 24,\n      display: 'flex',\n      height: 38,\n      justifyContent: 'center',\n      padding: 0,\n      width: 38,\n    },\n\n    container: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.greyLight,\n      borderRadius: 24,\n      flexDirection: 'row',\n      height: 44,\n      padding: 3,\n      width: 72,\n    },\n  };\n};\n\nexport interface SwitchStylesRequired {\n  width: number;\n  padding: number;\n}\n\nexport interface SwitchStyles {\n  containerStyle: ViewStyle & SwitchStylesRequired;\n  circleStyle: ViewStyle & SwitchStylesRequired;\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n}\nexport type GetSwitchStyles = (props: {}, theme: Theme) => SwitchStyles;\n\nexport const getSwitchStyles: GetSwitchStyles = (props, theme) => {\n  const switchVariables = getSwitchVariables(theme);\n\n  return {\n    backgroundColorOff: switchVariables.backgroundColorOff,\n    backgroundColorOn: switchVariables.backgroundColorOn,\n    circleColorOff: switchVariables.circleColorOff,\n    circleColorOn: switchVariables.circleColorOn,\n    circleStyle: switchVariables.circle,\n    containerStyle: switchVariables.container,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  GetSwitchStyles,\n  getSwitchStyles,\n  SwitchStyles,\n} from './Switch.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface SwitchProps extends AccessibilityProps {\n  isSwitchedOn?: boolean;\n  isDisabled?: boolean;\n  onChange?: (event: GestureResponderEvent) => void;\n  onIcon?: React.ReactNode;\n  offIcon?: React.ReactNode;\n  testID?: string;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetSwitchStyles, DeepPartial<SwitchStyles>>;\n}\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    onIcon,\n    offIcon,\n    onChange,\n    isSwitchedOn,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n  const {\n    circleStyle,\n    containerStyle,\n    backgroundColorOff,\n    backgroundColorOn,\n    circleColorOff,\n    circleColorOn,\n  } = mergeStyles(getSwitchStyles, getStyles)({}, theme);\n\n  const { backgroundColor, circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: isSwitchedOn ? backgroundColorOn : backgroundColorOff,\n    circleColor: isSwitchedOn ? circleColorOn : circleColorOff,\n    circlePosition: isSwitchedOn\n      ? containerStyle.width - (circleStyle.width + containerStyle.padding * 2)\n      : 0,\n  });\n\n  return (\n    <TouchableOpacity\n      accessible\n      accessibilityLabel=\"switch\"\n      onPress={onChange}\n      activeOpacity={1}\n      style={{\n        alignSelf: 'flex-start',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      }}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      {/*\n      // @ts-ignore */}\n      <AnimatedView style={[containerStyle, { backgroundColor }]}>\n        <AnimatedView\n          // @ts-ignore\n          style={[\n            circleStyle,\n            { backgroundColor: circleColor },\n            { transform: [{ translateX: circlePosition }] },\n          ]}\n        >\n          {isSwitchedOn\n            ? onIcon || (\n                <Icon\n                  name=\"check\"\n                  size={20}\n                  color={theme.colors.text.primary}\n                />\n              )\n            : offIcon || (\n                <Icon name=\"x\" size={20} color={theme.colors.text.default} />\n              )}\n        </AnimatedView>\n      </AnimatedView>\n    </TouchableOpacity>\n  );\n};\n","export * from './Switch';\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/ThemeInterface';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextVariables {\n  size: TextSizes;\n  fontFamily: FontFamilies;\n}\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 450,\n};\n","import deepMerge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  return getOverridingStyles\n    ? deepMerge<TStyles>(defaultStyles, getOverridingStyles(\n        props,\n        theme,\n      ) as Partial<TStyles>)\n    : defaultStyles;\n};\n"],"sourceRoot":""}