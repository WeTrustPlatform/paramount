{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx"],"names":["getCheckboxStyles","_ref","theme","isChecked","isDisabled","shape","checkColor","size","sizeValue","controlHeights","checkboxFocusBackgroundColor","colors","background","primaryDark","greyLight","checkboxStyle","_objectSpread2","alignItems","backgroundColor","content","borderColor","border","borderWidth","height","justifyContent","width","primaryDefault","greyDark","circle","borderRadius","square","controlBorderRadius","small","iconColor","text","white","touchableStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Icon","_Checkbox","Checkbox","props","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","_props$onChange","onChange","_props$shape","_props$size","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","disabled","onPress","View","Icon","name","color","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","Object","keys","forEach","key","defineProperty","exports","enumerable","get","getListItemVariables","base","borderBottomWidth","focusBackgroundColor","selected","sizes","fontSize","textSizes","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","flexDirection","getListItemStyles","isSelected","selectListVariables","_sizes$size","sizeStyles","containerStyle","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","_Typography","_ListItem","ListItem","label","description","_props$rightIcon","rightIcon","leftIcon","Text","_react2","_interopRequireDefault","_countriesList","_docz","_Box","_SelectList","_SelectListItem","_reactPowerplug","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","Playground","__position","__code","__scope","this","countryList","Props","Box","SelectList","SelectListItem","State","isMulti","selectedValue","onValueChange","newValue","itemIndex","console","log","value","initial","_ref2","state","setState","_ref3","map","countryCode","data","_ref4","of","isMDXComponent","SelectListBase","children","innerRef","flatListProps","handleOnPress","itemValue","Array","isArray","filter","val","childrenArray","Children","toArray","child","FlatList","ref","keyExtractor","item","getItemLayout","_","index","length","offset","renderItem","selectListItem","some","selVal","cloneElement","onSelect","forwardRef","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault"],"mappings":"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","file":"static/js/14.39fe96a1.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n  checkColor: string;\n  size: ControlSize;\n}\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  iconColor: string;\n  checkboxFocusBackgroundColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape, checkColor, size },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? theme.colors.background.primaryDark\n      : theme.colors.background.greyLight,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...{\n        circle: {\n          borderRadius: 999,\n        },\n        square: {\n          borderRadius: theme.controlBorderRadius.small,\n        },\n      }[shape],\n    },\n    iconColor: checkColor || theme.colors.text.white,\n\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n  checkColor?: string;\n  size?: ControlSize;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'square',\n    size = 'medium',\n    checkColor,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    touchableStyle,\n    checkboxStyle,\n    iconColor,\n    checkboxFocusBackgroundColor,\n  } = mergeStyles(getCheckboxStyles, getStyles)(\n    {\n      checkColor,\n      isChecked,\n      isDisabled,\n      shape,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible={isInteractive}\n      style={touchableStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={checkboxStyle}>\n        {isChecked ? <Icon name=\"check\" size={20} color={iconColor} /> : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export { Checkbox, CheckboxProps } from './Checkbox';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { countries as countryList } from 'countries-list';\nimport { Playground, Props } from 'docz';\nimport { Box } from '../Box';\nimport { SelectList } from './SelectList';\nimport { SelectListItem } from './SelectListItem';\nimport { State } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item. `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` is a compound component, which means that its children can be any component, and it will implicitly inject props such as `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` to them.\n`}<inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<SelectList\\n  isMulti={false}\\n  selectedValue=\\\"c\\\"\\n  onValueChange={(newValue, itemIndex) => {\\n    console.log(newValue, itemIndex)\\n  }}\\n>\\n  <SelectListItem\\n    label=\\\"Usage\\\"\\n    value=\\\"c\\\"\\n    // Props below are passed from `SelectList`, so it is not necessary to pass them here\\n    // isSelected\\n    // onSelect\\n    // index\\n  />\\n</SelectList>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <SelectList isMulti={false} selectedValue=\"c\" onValueChange={(newValue, itemIndex) => {\n        console.log(newValue, itemIndex);\n      }} mdxType=\"SelectList\">\n    <SelectListItem label=\"Usage\" value=\"c\" // Props below are passed from `SelectList`, so it is not necessary to pass them here\n        // isSelected\n        // onSelect\n        // index\n        mdxType=\"SelectListItem\" />\n  </SelectList>\n    </Playground>\n    <h3 {...{\n      \"id\": \"multi-select\"\n    }}>{`Multi select`}</h3>\n    <Playground __position={1} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      isMulti\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"large-selectlist\"\n    }}>{`Large SelectList`}</h3>\n    <p><inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-native`}</inlineCode></p>\n    <Playground __position={2} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={400}>\\n      <SelectList\\n        isMulti\\n        selectedValue={state.selectedValue}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ selectedValue: newValue })\\n        }}\\n      >\\n        {Object.keys(countryList)\\n          .map(countryCode => ({\\n            countryCode,\\n            value: countryCode,\\n            label: countryList[countryCode].name,\\n            ...countryList[countryCode],\\n          }))\\n          .map(data => (\\n            <SelectListItem\\n              key={data.value}\\n              label={data.label}\\n              value={data.label}\\n            />\\n          ))}\\n      </SelectList>\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={400} mdxType=\"Box\">\n        <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n            setState({\n              selectedValue: newValue\n            });\n          }} mdxType=\"SelectList\">\n          {Object.keys(countryList).map(countryCode => ({\n              countryCode,\n              value: countryCode,\n              label: countryList[countryCode].name,\n              ...countryList[countryCode]\n            })).map(data => <SelectListItem key={data.value} label={data.label} value={data.label} mdxType=\"SelectListItem\" />)}\n        </SelectList>\n      </Box>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"single-select\"\n    }}>{`Single select`}</h3>\n    <Playground __position={3} __code={'<State initial={{ selectedValue: \\'go\\' }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: 'go'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <h3 {...{\n      \"id\": \"select-list\"\n    }}>{`Select List`}</h3>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n"],"sourceRoot":""}