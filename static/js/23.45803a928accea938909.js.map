{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Toast/Toast.mdx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","slicedToArray","useCallback","AnimatedView","animated","View","Dots","_props$size","size","_props$color","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","react","alignItems","flexDirection","justifyContent","_jsxFileName","map","index","key","borderRadius","height","marginLeft","marginRight","width","Button","_props$appearance","appearance","_props$isDisabled","isDisabled","_props$isLoading","isLoading","_props$onPress","onPress","title","_props$overrides","overrides","_getOverrides","getOverrides","StyledTouchable","dlv","Touchable","_getOverrides2","touchableProps","_getOverrides3","StyledTitle","Title","_getOverrides4","titleProps","_getOverrides5","StyledLoading","Loading","_getOverrides6","loadingProps","_getOverrides7","StyledIcon","IconBefore","_getOverrides8","iconBeforeProps","_getOverrides9","IconAfter","_getOverrides10","iconAfterProps","esm_extends","Button_jsxFileName","objectWithoutProperties","buttonAppearances","minimal","default","content","danger","secondary","overlay","button","dangerLight","primaryLight","secondaryLight","outline","borderColor","borderWidth","border","getButtonAppearances","_ref","isControlSize","controlBorderRadius","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","TouchableOpacity","accessibilityRole","disabled","objectSpread","getButtonTextColor","defaultText","dangerText","primaryText","secondaryText","textProps","textSize","textSizes","Text","weight","muted","display","fontWeight","textAlign","paddingHorizontal","Dots_Dots","layoutProps","MDXLayout","MDXContent","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","Playground","Props","ToastContext","ToastProvider","Toast","___WEBPACK_IMPORTED_MODULE_8__","___WEBPACK_IMPORTED_MODULE_7__","Consumer","_ref2","notify","___WEBPACK_IMPORTED_MODULE_6__","description","of","isMDXComponent","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/23.971e01a4.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Dots } from '../LoadingIndicators';\nimport { Text, TextProps } from '../Typography';\n\ninterface ButtonBaseProps {\n  /** Title of the button */\n  title?: OptionalString;\n\n  /**\n   * The color of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /** Called when button is pressed */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ButtonOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconBefore: IconProps;\n  IconAfter: IconProps;\n  Loading: LoadingProps;\n}\n\nexport interface ButtonProps\n  extends WithOverrides<ButtonBaseProps, ButtonOverrides> {}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    color = 'default',\n    isDisabled = false,\n    isLoading = false,\n    size = 'medium',\n    onPress = () => {\n      return;\n    },\n    title,\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Button.Touchable'),\n    overrides.Touchable,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.Button.Title'),\n    overrides.Title,\n  );\n  const [Loading, loadingProps] = getOverrides(\n    StyledLoading,\n    props,\n    dlv(theme, 'overrides.Button.Loading'),\n    overrides.Loading,\n  );\n  const [IconBefore, iconBeforeProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconBefore'),\n    overrides.IconBefore,\n  );\n  const [IconAfter, iconAfterProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconAfter'),\n    overrides.IconAfter,\n  );\n\n  return (\n    <Touchable\n      appearance={appearance}\n      color={color}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      size={size}\n      onPress={onPress}\n      testID={testID}\n      {...touchableProps}\n    >\n      <IconBefore\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconBeforeProps}\n      />\n      {isLoading ? (\n        <Loading appearance={appearance} color={color} {...loadingProps} />\n      ) : (\n        <Title\n          appearance={appearance}\n          color={color}\n          isDisabled={isDisabled}\n          size={size}\n          title={title}\n          {...titleProps}\n        />\n      )}\n      <IconAfter\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconAfterProps}\n      />\n    </Touchable>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ViewStyle };\n  primary: { [size in ButtonColor]: ViewStyle };\n  outline: { [size in ButtonColor]: ViewStyle };\n}\n\ntype ButtonAppearance = keyof ButtonAppearances;\n\nconst getButtonAppearances = (\n  theme: Theme,\n  isLoading: boolean,\n): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: isLoading\n          ? theme.colors.background.overlay\n          : theme.colors.button.default,\n      },\n      danger: {\n        backgroundColor: isLoading\n          ? theme.colors.background.dangerLight\n          : theme.colors.button.danger,\n      },\n      primary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.primaryLight\n          : theme.colors.button.primary,\n      },\n      secondary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.secondaryLight\n          : theme.colors.button.secondary,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n      },\n    },\n  };\n};\n\ninterface TouchableProps extends TouchableOpacityProps, PropsWithChildren {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    isLoading,\n    size,\n    children,\n    style,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n  const buttonAppearances = getButtonAppearances(theme, isLoading);\n\n  const { borderRadius, height, paddingLeft, paddingRight } = isControlSize(\n    size,\n  )\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size] + 8,\n        paddingRight: theme.controlPaddings[size] + 8,\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium + 8,\n        paddingRight: theme.controlPaddings.medium + 8,\n      };\n\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"button\"\n      disabled={!!(isDisabled || isLoading)}\n      style={[\n        {\n          borderRadius,\n          height,\n          paddingLeft,\n          paddingRight,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          ...buttonAppearances[appearance][color],\n          ...(isDisabled && {\n            backgroundColor: theme.colors.button.disabled,\n          }),\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface ButtonTextColors {\n  minimal: { [size in ButtonColor]: string };\n  primary: { [size in ButtonColor]: string };\n  outline: { [size in ButtonColor]: string };\n}\n\nconst getButtonTextColor = (theme: Theme): ButtonTextColors => {\n  return {\n    minimal: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n    primary: {\n      default: theme.colors.button.defaultText,\n      danger: theme.colors.button.dangerText,\n      primary: theme.colors.button.primaryText,\n      secondary: theme.colors.button.secondaryText,\n    },\n\n    outline: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n  };\n};\n\ninterface TitleProps extends TextProps {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    size,\n    title,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const textSize = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      weight=\"bold\"\n      style={[\n        {\n          alignItems: 'center',\n          color: isDisabled\n            ? theme.colors.text.muted\n            : getButtonTextColor(theme)[appearance][color],\n          display: 'flex',\n          fontWeight: '600',\n          justifyContent: 'center',\n          textAlign: 'center',\n          paddingHorizontal: 8,\n          ...textSize,\n        },\n        style,\n      ]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface LoadingProps {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n}\n\nconst StyledLoading = (props: LoadingProps) => {\n  const { appearance, color } = props;\n  const theme = useTheme();\n\n  return <Dots color={getButtonTextColor(theme)[appearance][color]} />;\n};\n\ninterface IconProps extends PropsWithChildren {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledIcon = (props: IconProps) => {\n  return <></>;\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, ToastContext, ToastProvider, Toast } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`Make sure to use `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` at the top-level component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<ThemeProvider>{children}</ThemeProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useToast`}</inlineCode>{` you can use to create toasts from anywhere in the application.`}</p>\n    <Playground __position={0} __code={'<ToastProvider>\\n  {/*\\n    We use `ToastContext.Consumer` here due to limitations in docs\\n    Use `const { notify } = useToast()` inside your function component\\n   */}\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <Button\\n        onPress={() =>\\n          notify({\\n            title: \\'Title\\',\\n            description: \\'Description\\',\\n            duration: 5000,\\n          })\\n        }\\n        title=\\\"Open toast\\\"\\n      />\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      ToastContext,\n      ToastProvider,\n      Toast\n    }} mdxType=\"Playground\">\n  <ToastProvider mdxType=\"ToastProvider\">\n    {\n          /*\n           We use `ToastContext.Consumer` here due to limitations in docs\n           Use `const { notify } = useToast()` inside your function component\n          */\n        }\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <Button onPress={() => notify({\n            title: 'Title',\n            description: 'Description',\n            duration: 5000\n          })} title=\"Open toast\" mdxType=\"Button\" />}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"toast-options\"\n    }}>{`Toast Options`}</h2>\n    <Props of={Toast} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}