{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePickerItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButtonWrapper.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","Feather","_theme","_Text","Icon","_ref","name","color","size","theme","useTheme","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","getTextColor","colors","text","_Icon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_react2","_interopRequireDefault","_docz","_reactPowerplug","_NativePicker","_NativePickerItem","layoutProps","MDXLayout","MDXContent","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","State","NativePicker","NativePickerItem","initial","value","_ref2","state","setState","selectedValue","onValueChange","itemValue","itemIndex","getStyles","pickerStyle","itemStyle","label","isMDXComponent","_reactNative","_mergeStyles2","_PickerButton","_PickerButtonWrapper","NativePickerBase","_props$size","innerRef","pickerProps","_mergeStyles","mergeStyles","getPickerButtonStyles","PickerButtonWrapper","Picker","ref","style","forwardRef","RNPicker","Item","pickerStylesProps","controlSizeStyles","small","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","textSizeStyles","textSizes","containerStyle","backgroundColor","background","content","position","_objectSpread2","appearance","borderColor","border","borderWidth","width","rightContainerStyle","alignItems","display","justifyContent","paddingHorizontal","right","zIndex","children","View","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","fontSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","textStyle","textAlign","alignSelf","flexDirection","fontStyle","textTransform","_deepmerge","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/21.a9afa12d.js","sourcesContent":["import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { NativePicker } from './NativePicker';\nimport { NativePickerItem } from './NativePickerItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"nativepicker\"\n    }}>{`NativePicker`}</h1>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <NativePicker\\n      selectedValue={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      size=\\\"large\\\"\\n      getStyles={(props, theme) => ({\\n        pickerStyle: {},\\n        itemStyle: {},\\n      })}\\n    >\\n      <NativePickerItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <NativePickerItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <NativePickerItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <NativePickerItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <NativePickerItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <NativePickerItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <NativePickerItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <NativePickerItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <NativePickerItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <NativePickerItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <NativePickerItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <NativePickerItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <NativePickerItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <NativePickerItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <NativePickerItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <NativePickerItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <NativePickerItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <NativePickerItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <NativePickerItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </NativePicker>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      NativePicker,\n      NativePickerItem\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <NativePicker selectedValue={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} size=\"large\" getStyles={(props, theme) => ({\n          pickerStyle: {},\n          itemStyle: {}\n        })} mdxType=\"NativePicker\">\n        <NativePickerItem label=\"C\" value=\"c\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C#\" value=\"c#\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C++\" value=\"c++\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"CSS\" value=\"css\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elixir\" value=\"elixir\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elm\" value=\"elm\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Erlang\" value=\"erlang\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Go\" value=\"go\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Haskell\" value=\"haskell\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"HTML\" value=\"html\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Java\" value=\"java\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"JavaScript\" value=\"js\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Lua\" value=\"lua\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Python\" value=\"python\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"R\" value=\"r\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Ruby\" value=\"ruby\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Rust\" value=\"rust\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Switft\" value=\"swift\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Typescript\" value=\"typescript\" mdxType=\"NativePickerItem\" />\n      </NativePicker>}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { Picker as RNPicker, PickerProps as RNPickerProps } from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { PickerButtonGetStylesProp } from './PickerButton';\nimport { getPickerButtonStyles } from './PickerButton.styles';\nimport { PickerButtonWrapper } from './PickerButtonWrapper';\n\nexport interface NativePickerProps extends RNPickerProps {\n  size?: ControlSize;\n  innerRef?: React.Ref<RNPicker>;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: PickerButtonGetStylesProp;\n}\n\nconst NativePickerBase = (props: NativePickerProps) => {\n  const { size = 'medium', getStyles, innerRef, ...pickerProps } = props;\n  const theme = useTheme();\n\n  const { pickerStyle, itemStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <PickerButtonWrapper>\n      <RNPicker\n        ref={innerRef}\n        itemStyle={itemStyle}\n        style={pickerStyle}\n        {...pickerProps}\n      />\n    </PickerButtonWrapper>\n  );\n};\n\nexport const NativePicker = React.forwardRef<RNPicker, RNPickerProps>(\n  (props, ref) => {\n    return <NativePickerBase {...props} innerRef={ref} />;\n  },\n);\n","import { Picker as RNPicker, PickerItemProps } from 'react-native';\n\n// tslint:disable-next-line\nexport interface NativePickerItemProps extends PickerItemProps {}\n\nexport const NativePickerItem = RNPicker.Item;\n","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface PickerButtonStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: any;\n}\n\nexport interface PickerButtonStylesProps {\n  size: ControlSize;\n}\n\nexport type GetPickerButtonStyles = (\n  pickerStylesProps: PickerButtonStylesProps,\n  theme: Theme,\n) => PickerButtonStyles;\n\nexport const getPickerButtonStyles: GetPickerButtonStyles = (\n  pickerStylesProps,\n  theme,\n) => {\n  const { size } = pickerStylesProps;\n\n  const controlSizeStyles = {\n    small: {\n      borderRadius: theme.controlBorderRadius.small,\n      height: theme.controlHeights.small,\n      paddingLeft: theme.controlPaddings.small,\n      paddingRight: 40,\n    },\n\n    medium: {\n      borderRadius: theme.controlBorderRadius.medium,\n      height: theme.controlHeights.medium,\n      paddingLeft: theme.controlPaddings.medium,\n      paddingRight: 40,\n    },\n\n    large: {\n      borderRadius: theme.controlBorderRadius.large,\n      height: theme.controlHeights.large,\n      paddingLeft: theme.controlPaddings.large,\n      paddingRight: 40,\n    },\n  }[size];\n\n  const textSizeStyles = theme.textSizes[size];\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      position: 'relative',\n    },\n    itemStyle: {\n      ...textSizeStyles,\n    },\n    pickerStyle: {\n      appearance: 'none',\n      backgroundColor: 'transparent',\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n      ...textSizeStyles,\n      ...controlSizeStyles,\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: -1,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { PickerButtonGetStylesProp } from './PickerButton';\nimport { getPickerButtonStyles } from './PickerButton.styles';\n\nexport interface PickerButtonWrapperProps {\n  getStyles?: PickerButtonGetStylesProp;\n  size?: ControlSize;\n  children: React.ReactNode;\n}\n\nexport const PickerButtonWrapper = (props: PickerButtonWrapperProps) => {\n  const { getStyles, children, size = 'medium' } = props;\n  const theme = useTheme();\n\n  const { containerStyle, rightContainerStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <View style={containerStyle}>\n      {children}\n      <View style={rightContainerStyle}>\n        <Icon name=\"chevron-down\" size={32} color={theme.colors.text.default} />\n      </View>\n    </View>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/ThemeInterface';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextVariables {\n  size: TextSizes;\n  fontFamily: FontFamilies;\n}\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import deepMerge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  return getOverridingStyles\n    ? deepMerge<TStyles>(defaultStyles, getOverridingStyles(\n        props,\n        theme,\n      ) as Partial<TStyles>)\n    : defaultStyles;\n};\n"],"sourceRoot":""}