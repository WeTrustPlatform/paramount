{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/LabeledCheckbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","Props","Checkbox","initial","_ref2","on","toggle","shape","isChecked","isDisabled","isInteractive","checkedIcon","onChange","getStyles","theme","checkboxStyle","checkboxFocusBackgroundColor","position","label","of","isMDXComponent","getCheckboxVariables","base","backgroundColor","colors","background","content","borderColor","border","borderWidth","height","width","checked","primaryDefault","checkedFocus","primaryDark","disabled","greyDark","circle","borderRadius","square","controlBorderRadius","small","uncheckedFocus","greyLight","getCheckboxStyles","checkboxVariables","_objectSpread2","React","_interopRequireWildcard","_reactNative","_icons","_theme","_mergeStyles2","_Checkbox","_props$isChecked","_props$isDisabled","_props$isInteractive","_props$onChange","_props$shape","testID","accessibilityProps","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","accessible","style","underlayColor","onPress","View","alignItems","display","justifyContent","Icon","name","size","color","text","white","_Box","_Typography","LabeledCheckbox","_props$position","restProps","Box","flexDirection","Text","paddingHorizontal","_LabeledCheckbox","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon"],"mappings":"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","file":"static/js/18.bfffd7f5.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n    <h3 {...{\n      \"id\": \"usage-1\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Checkbox\\n      shape=\\\"square\\\" // or \\\"circle\\\"\\n      isChecked={on}\\n      isDisabled={false}\\n      isInteractive={true}\\n      checkedIcon={null}\\n      onChange={toggle}\\n      getStyles={(props, theme) => ({\\n        checkboxStyle: {},\\n        checkboxFocusBackgroundColor: \\'\\',\\n      })}\\n      position=\\\"right\\\"\\n      label=\\\"Label\\\"\\n    />\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Checkbox\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Checkbox shape=\"square\" // or \"circle\"\n        isChecked={on} isDisabled={false} isInteractive={true} checkedIcon={null} onChange={toggle} getStyles={(props, theme) => ({\n          checkboxStyle: {},\n          checkboxFocusBackgroundColor: ''\n        })} position=\"right\" label=\"Label\" mdxType=\"Checkbox\" />}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport const getCheckboxVariables = (theme: Theme): CheckboxVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: 32,\n      width: 32,\n    },\n    checked: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderColor: 'transparent',\n    },\n    checkedFocus: {\n      backgroundColor: theme.colors.background.primaryDark,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderColor: theme.colors.border.default,\n    },\n    shape: {\n      circle: {\n        borderRadius: 999,\n      },\n      square: {\n        borderRadius: theme.controlBorderRadius.small,\n      },\n    },\n    uncheckedFocus: {\n      backgroundColor: theme.colors.background.greyLight,\n    },\n  };\n};\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n}\n\nexport interface CheckboxStyles {\n  checkboxStyle: ViewStyle;\n  checkboxFocusBackgroundColor?: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape },\n  theme,\n) => {\n  const checkboxVariables = getCheckboxVariables(theme);\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? checkboxVariables.checkedFocus.backgroundColor\n      : checkboxVariables.uncheckedFocus.backgroundColor,\n    checkboxStyle: {\n      ...checkboxVariables.base,\n      ...(isChecked ? checkboxVariables.checked : {}),\n      ...(isDisabled ? checkboxVariables.disabled : {}),\n      ...checkboxVariables.shape[shape],\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  checkedIcon?: React.ReactNode;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    checkedIcon,\n    onChange = () => null,\n    shape = 'square',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { checkboxStyle, checkboxFocusBackgroundColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n  )({ isChecked, isDisabled, shape }, theme);\n\n  return (\n    <TouchableHighlight\n      accessible\n      style={checkboxStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {isChecked\n          ? checkedIcon || (\n              <Icon name=\"check\" size={20} color={theme.colors.text.white} />\n            )\n          : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","import * as React from 'react';\n\nimport { TextColor, TextSize } from '../../theme/ThemeInterface';\nimport { Box } from '../Box';\nimport { Checkbox, CheckboxProps } from '../Checkbox/Checkbox';\nimport { Text } from '../Typography';\n\nexport interface LabeledCheckboxProps extends CheckboxProps {\n  label?: string;\n  position?: 'left' | 'right';\n  color?: TextColor;\n  size?: TextSize;\n}\n\nexport const LabeledCheckbox = (props: LabeledCheckboxProps) => {\n  const { label, position = 'right', color, size, ...restProps } = props;\n\n  if (!label) {\n    return <Checkbox {...restProps} />;\n  }\n\n  return (\n    <Box flexDirection=\"row\" alignItems=\"center\">\n      {position === 'left' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n      <Box paddingHorizontal={8}>\n        <Checkbox {...restProps} />\n      </Box>\n      {position === 'right' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n    </Box>\n  );\n};\n","export {\n  LabeledCheckbox as Checkbox,\n  LabeledCheckboxProps as CheckboxProps,\n} from './LabeledCheckbox';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n"],"sourceRoot":""}