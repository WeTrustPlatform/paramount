{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Column.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Column.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/LayoutContext.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/LayoutProvider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Row.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Row.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Visible.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/index.ts"],"names":["_LayoutContext","__webpack_require__","getColumnCount","columns","currentScreenSize","matchedColumn","nearestColumn","currentScreenSizeIndex","DESC_ORDER_SCREEN_SIZES","indexOf","nearestSize","find","screenSize","index","getNearestColumn","getProportion","columnCount","gridColumnCount","concat","getColumnStyles","_ref","theme","gutterWidth","offsetColumns","flexBasis","offsetColumnCount","columnStyle","marginLeft","maxWidth","paddingLeft","paddingRight","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Column","_Row","splitColumnConfig","config","xsmall","small","medium","large","xlarge","offsetXsmall","offsetSmall","offsetMedium","offsetLarge","offsetXlarge","Column","props","children","getStyles","_objectWithoutProperties2","_useLayout","useLayout","useTheme","useContext","GutterWidthContext","_splitColumnConfig","mergeStyles","createElement","View","style","_react2","_interopRequireDefault","_reactPowerplug","_docz","_","_Box","_Typography","layoutProps","MDXLayout","MDXContent","components","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","CounterContainer","Props","Container","LayoutProvider","Box","Text","backgroundColor","padding","isMDXComponent","getContainerStyles","containerWidth","containerStyle","marginRight","width","_Container","defaultLayout","breakpoints","getResponsiveValue","values","ASC_ORDER_SCREEN_SIZES","slice","reverse","LayoutContext","createContext","_deepmerge","getCurrentScreenSize","layout","windowScaledSize","Dimensions","get","value","layoutContext","_React$useState","useState","_React$useState2","_slicedToArray2","setCurrentScreenSize","handleDimensionsChange","useCallback","useLayoutEffect","addEventListener","removeEventListener","Provider","_objectSpread2","deriveResponsiveValue","getRowStyles","hasGutter","rowStyle","flexDirection","flexWrap","Row","_props$hasGutter","Visible","visibles","combineConfig","val","isVisible","Object","keys","forEach","key","defineProperty","exports","enumerable","_LayoutProvider","_Visible"],"mappings":"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","file":"static/js/14.ca950a5b.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { ColumnConfigBase } from './Column';\nimport {\n  ColumnCount,\n  DESC_ORDER_SCREEN_SIZES,\n  ScreenSize,\n} from './LayoutContext';\n\nexport interface ColumnStylesProps {\n  gutterWidth: number;\n  currentScreenSize: ScreenSize;\n  gridColumnCount: ColumnCount;\n  columns: ColumnConfigBase;\n  offsetColumns: ColumnConfigBase;\n}\n\nexport type GetColumnStyles = (\n  progressStylesProps: ColumnStylesProps,\n  theme: Theme,\n) => ColumnStyles;\n\nexport interface ColumnStyles {\n  columnStyle: ViewStyle;\n}\n\n// Find nearest matching column count\n// when currentScreenSize = xlarge and columns = { medium: 6 }, it should use medium column count\n// when currentScreenSize = small and columns = { medium: 6 }, it should return null\nconst getNearestColumn = (\n  columns: ColumnConfigBase,\n  currentScreenSize: ScreenSize,\n) => {\n  const currentScreenSizeIndex = DESC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  const nearestSize = DESC_ORDER_SCREEN_SIZES.find((screenSize, index) => {\n    if (currentScreenSizeIndex >= index) return false;\n\n    return !!columns[screenSize];\n  });\n\n  return nearestSize ? columns[nearestSize] : null;\n};\n\nconst getColumnCount = (\n  columns: ColumnConfigBase,\n  currentScreenSize: ScreenSize,\n) => {\n  const matchedColumn = columns[currentScreenSize];\n  if (matchedColumn) return matchedColumn;\n\n  const nearestColumn = getNearestColumn(columns, currentScreenSize);\n  if (nearestColumn) return nearestColumn;\n\n  return null;\n};\n\nexport const getProportion = (columnCount: number, gridColumnCount: number) => {\n  const percentPerColumn = 100 / gridColumnCount;\n\n  return `${columnCount * percentPerColumn}%`;\n};\n\nexport const getColumnStyles: GetColumnStyles = (\n  { gutterWidth, currentScreenSize, gridColumnCount, columns, offsetColumns },\n  theme,\n) => {\n  const columnCount = getColumnCount(columns, currentScreenSize);\n  const flexBasis = getProportion(columnCount || 12, gridColumnCount);\n  const offsetColumnCount = getColumnCount(offsetColumns, currentScreenSize);\n  const marginLeft = getProportion(offsetColumnCount || 0, gridColumnCount);\n\n  return {\n    columnStyle: {\n      flexBasis,\n      marginLeft,\n      maxWidth: flexBasis,\n      paddingLeft: gutterWidth / 2,\n      paddingRight: gutterWidth / 2,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  ColumnStyles,\n  GetColumnStyles,\n  getColumnStyles,\n} from './Column.styles';\nimport { ColumnCount, useLayout } from './LayoutContext';\nimport { GutterWidthContext } from './Row';\n\nexport interface ColumnConfigBase {\n  xsmall?: ColumnCount;\n  small?: ColumnCount;\n  medium?: ColumnCount;\n  large?: ColumnCount;\n  xlarge?: ColumnCount;\n}\n\nexport interface ColumnConfig extends ColumnConfigBase {\n  offsetXsmall?: ColumnCount;\n  offsetSmall?: ColumnCount;\n  offsetMedium?: ColumnCount;\n  offsetLarge?: ColumnCount;\n  offsetXlarge?: ColumnCount;\n}\n\nexport interface ColumnProps extends ColumnConfig {\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<GetColumnStyles, DeepPartial<ColumnStyles>>;\n}\n\nexport const splitColumnConfig = (config: ColumnConfig) => {\n  const {\n    xsmall,\n    small,\n    medium,\n    large,\n    xlarge,\n    offsetXsmall,\n    offsetSmall,\n    offsetMedium,\n    offsetLarge,\n    offsetXlarge,\n  } = config;\n  const columns = { xsmall, small, medium, large, xlarge };\n  const offsetColumns = {\n    large: offsetLarge,\n    medium: offsetMedium,\n    small: offsetSmall,\n    xlarge: offsetXlarge,\n    xsmall: offsetXsmall,\n  };\n\n  return { columns, offsetColumns };\n};\n\nexport const Column = (props: ColumnProps) => {\n  const { children, getStyles, ...config } = props;\n  const { currentScreenSize, gridColumnCount } = useLayout();\n  const theme = useTheme();\n  const gutterWidth = React.useContext(GutterWidthContext);\n\n  const { columns, offsetColumns } = splitColumnConfig(config);\n  const { columnStyle } = mergeStyles(getColumnStyles, getStyles)(\n    { gutterWidth, currentScreenSize, gridColumnCount, columns, offsetColumns },\n    theme,\n  );\n\n  return <View style={columnStyle}>{children}</View>;\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Counter as CounterContainer } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Container, LayoutProvider } from '.';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h1>\n    <p>{`On small screens, the container is the width of the screen. On large screens, it centers the content with a max-width of defined by Layout (default 1440) and adds padding`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<LayoutProvider>\\n  <Box backgroundColor=\\\"#67c6bb\\\" padding={3}>\\n    <Container maxWidth={300}>\\n      <Box backgroundColor=\\\"white\\\" padding={3}>\\n        <Text>Centered content</Text>\\n      </Box>\\n    </Container>\\n  </Box>\\n</LayoutProvider>'} __scope={{\n      props: this ? this.props : props,\n      CounterContainer,\n      Playground,\n      Props,\n      Container,\n      LayoutProvider,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <LayoutProvider mdxType=\"LayoutProvider\">\n    <Box backgroundColor=\"#67c6bb\" padding={3} mdxType=\"Box\">\n      <Container maxWidth={300} mdxType=\"Container\">\n        <Box backgroundColor=\"white\" padding={3} mdxType=\"Box\">\n          <Text mdxType=\"Text\">Centered content</Text>\n        </Box>\n      </Container>\n    </Box>\n  </LayoutProvider>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface ContainerStylesProps {\n  maxWidth?: number;\n  containerWidth: number;\n  gutterWidth: number;\n}\nexport type GetContainerStyles = (\n  progressStylesProps: ContainerStylesProps,\n  theme: Theme,\n) => ContainerStyles;\n\nexport interface ContainerStyles {\n  containerStyle: ViewStyle;\n}\n\nexport const getContainerStyles: GetContainerStyles = (\n  { maxWidth, containerWidth, gutterWidth },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      maxWidth: maxWidth || containerWidth,\n      paddingLeft: `${gutterWidth / 2}px`,\n      paddingRight: `${gutterWidth / 2}px`,\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  ContainerStyles,\n  GetContainerStyles,\n  getContainerStyles,\n} from './Container.styles';\nimport { useLayout } from './LayoutContext';\n\nexport interface ContainerProps {\n  children: React.ReactNode;\n  maxWidth?: number;\n  getStyles?: ReplaceReturnType<\n    GetContainerStyles,\n    DeepPartial<ContainerStyles>\n  >;\n}\n\n/**\n * On screens with size lg and above, caps maximum width of the content\n */\nexport const Container = (props: ContainerProps) => {\n  const { children, getStyles, maxWidth } = props;\n  const { maxWidth: containerWidth, gutterWidth } = useLayout();\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getContainerStyles, getStyles)(\n    { maxWidth, containerWidth, gutterWidth },\n    theme,\n  );\n\n  return <View style={containerStyle}>{children}</View>;\n};\n","import * as React from 'react';\n\nexport interface Breakpoints {\n  small: number;\n  medium: number;\n  large: number;\n  xlarge: number;\n}\n\nexport interface ScreenSizes extends Breakpoints {\n  xsmall: number;\n}\n\nexport type ColumnCount =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport type Breakpoint = keyof Breakpoints;\nexport type ScreenSize = keyof ScreenSizes;\n\nexport interface GetResponsiveValueParam<\n  TXsmallValue = any,\n  TSmallValue = any,\n  TMediumValue = any,\n  TLargeValue = any,\n  TXlargeValue = any\n> {\n  xsmall?: TXlargeValue;\n  small?: TXsmallValue;\n  medium?: TSmallValue;\n  large?: TMediumValue;\n  xlarge?: TLargeValue;\n}\n\nexport type GetResponsiveValue = <\n  TXsmallValue = any,\n  TSmallValue = any,\n  TMediumValue = any,\n  TLargeValue = any,\n  TXlargeValue = any\n>(\n  values: GetResponsiveValueParam<\n    TXsmallValue,\n    TSmallValue,\n    TMediumValue,\n    TLargeValue,\n    TXlargeValue\n  >,\n) =>\n  | TXsmallValue\n  | TSmallValue\n  | TMediumValue\n  | TLargeValue\n  | TXlargeValue\n  | null;\n\nexport interface LayoutInterface {\n  breakpoints: Breakpoints;\n  currentScreenSize: ScreenSize;\n  getResponsiveValue: GetResponsiveValue;\n  gridColumnCount: ColumnCount;\n  gutterWidth: number;\n  maxWidth: number;\n}\n\nexport const defaultLayout: LayoutInterface = {\n  breakpoints: {\n    small: 480,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1280,\n  },\n  currentScreenSize: 'small',\n  getResponsiveValue: values =>\n    values.xsmall ||\n    values.small ||\n    values.medium ||\n    values.large ||\n    values.xlarge ||\n    null,\n  gridColumnCount: 12,\n  gutterWidth: 30,\n  maxWidth: 1440,\n};\n\nexport const ASC_ORDER_SCREEN_SIZES: Array<keyof ScreenSizes> = [\n  'xsmall',\n  'small',\n  'medium',\n  'large',\n  'xlarge',\n];\n\nexport const DESC_ORDER_SCREEN_SIZES: Array<\n  keyof ScreenSizes\n> = ASC_ORDER_SCREEN_SIZES.slice(0).reverse();\n\nexport const LayoutContext = React.createContext(defaultLayout);\n\nexport const useLayout = () => {\n  return React.useContext(LayoutContext);\n};\n","import deepmerge from 'deepmerge';\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nimport {\n  DESC_ORDER_SCREEN_SIZES,\n  GetResponsiveValueParam,\n  LayoutContext,\n  LayoutInterface,\n  ScreenSize,\n} from './LayoutContext';\n\nexport interface LayoutProviderProps {\n  children: React.ReactNode;\n  value?: Partial<LayoutInterface>;\n}\n\nexport const getCurrentScreenSize = (layout: LayoutInterface) => {\n  const { breakpoints } = layout;\n  const windowScaledSize = Dimensions.get('window');\n\n  const currentScreenSize = DESC_ORDER_SCREEN_SIZES.find(screenSize => {\n    if (screenSize === 'xsmall') {\n      return windowScaledSize.width < breakpoints.small;\n    }\n\n    const width = breakpoints[screenSize];\n    if (windowScaledSize.width >= width) return true;\n\n    return false;\n  });\n\n  return currentScreenSize || 'xsmall';\n};\n\nconst deriveResponsiveValue = (\n  values: GetResponsiveValueParam,\n  currentScreenSize: ScreenSize,\n) => {\n  const currentScreenSizeIndex = DESC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  const nearestSize = DESC_ORDER_SCREEN_SIZES.find((screenSize, index) => {\n    if (currentScreenSizeIndex >= index) return false;\n\n    return !!values[screenSize];\n  });\n\n  return nearestSize ? values[nearestSize] : null;\n};\n\nexport const LayoutProvider = (props: LayoutProviderProps) => {\n  const { children, value } = props;\n  const layoutContext = React.useContext(LayoutContext);\n  const layout = value ? deepmerge(layoutContext, value) : layoutContext;\n\n  const [currentScreenSize, setCurrentScreenSize] = React.useState(\n    getCurrentScreenSize(layout),\n  );\n\n  const handleDimensionsChange = React.useCallback(() => {\n    setCurrentScreenSize(getCurrentScreenSize(layout));\n  }, []);\n\n  React.useLayoutEffect(() => {\n    Dimensions.addEventListener('change', handleDimensionsChange);\n\n    return () =>\n      Dimensions.removeEventListener('change', handleDimensionsChange);\n  }, []);\n\n  return (\n    <LayoutContext.Provider\n      value={{\n        ...layout,\n        currentScreenSize,\n        getResponsiveValue: values =>\n          deriveResponsiveValue(values, currentScreenSize),\n      }}\n    >\n      {children}\n    </LayoutContext.Provider>\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface RowStyleProps {\n  gutterWidth: number;\n  hasGutter: boolean;\n}\n\nexport type GetRowStyles = (props: RowStyleProps, theme: Theme) => RowStyles;\n\nexport interface RowStyles {\n  rowStyle: ViewStyle;\n}\n\nexport const getRowStyles: GetRowStyles = ({ hasGutter, gutterWidth }) => {\n  return {\n    rowStyle: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      marginLeft: hasGutter ? -gutterWidth / 2 : 0,\n      marginRight: hasGutter ? -gutterWidth / 2 : 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { defaultLayout, useLayout } from './LayoutContext';\nimport { GetRowStyles, getRowStyles, RowStyles } from './Row.styles';\n\nexport interface RowProps {\n  children: React.ReactNode;\n  hasGutter?: boolean;\n  getStyles?: ReplaceReturnType<GetRowStyles, DeepPartial<RowStyles>>;\n}\n\nexport const GutterWidthContext = React.createContext(\n  defaultLayout.gutterWidth,\n);\n\nexport const Row = (props: RowProps) => {\n  const { children, hasGutter = true, getStyles } = props;\n  const { gutterWidth } = useLayout();\n  const theme = useTheme();\n\n  const { rowStyle } = mergeStyles(getRowStyles, getStyles)(\n    { gutterWidth, hasGutter },\n    theme,\n  );\n\n  return (\n    <View style={rowStyle}>\n      <GutterWidthContext.Provider value={hasGutter ? gutterWidth : 0}>\n        {children}\n      </GutterWidthContext.Provider>\n    </View>\n  );\n};\n","import * as React from 'react';\n\nimport {\n  ASC_ORDER_SCREEN_SIZES,\n  LayoutContext,\n  ScreenSize,\n} from './LayoutContext';\n\nexport interface VisibleConfig {\n  xsmall?: boolean;\n  small?: boolean;\n  medium?: boolean;\n  large?: boolean;\n  xlarge?: boolean;\n}\n\nexport interface VisibleProps extends VisibleConfig {\n  children: React.ReactElement;\n}\n\nconst combineConfig = (config: VisibleConfig) => {\n  const { xsmall, small, medium, large, xlarge } = config;\n\n  return [xsmall, small, medium, large, xlarge];\n};\n\nconst isVisible = (config: VisibleConfig, currentScreenSize: ScreenSize) => {\n  const visibles = combineConfig(config);\n  const currentScreenSizeIndex = ASC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  return !!visibles.find(\n    (val, index) => index === currentScreenSizeIndex && !!val,\n  );\n};\n\nexport const Visible = (props: VisibleProps) => {\n  const { children, ...config } = props;\n  const { currentScreenSize } = React.useContext(LayoutContext);\n\n  if (isVisible(config, currentScreenSize)) return children;\n\n  return null;\n};\n","export * from './Column';\nexport * from './Container';\nexport * from './LayoutContext';\nexport * from './LayoutProvider';\nexport * from './Row';\nexport * from './Visible';\n"],"sourceRoot":""}