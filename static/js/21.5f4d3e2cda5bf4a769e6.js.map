{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Rating/Rating.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Rating/Rating.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Rating/Rating.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Rating/Star.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Rating/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Svg/Svg.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Svg/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","CounterContainer","Props","Rating","Counter","initial","_ref2","rating","count","set","value","size","color","onChange","getStyles","theme","containerStyle","touchableStyle","starColor","starSize","of","isMDXComponent","_Text","getRatingStyles","controlHeights","flexDirection","paddingRight","controlPaddings","getTextColor","colors","text","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Rating","_Star","_props$value","_props$maxRating","maxRating","_props$size","_props$onChange","_props$color","useTheme","_mergeStyles","mergeStyles","createElement","View","style","Array","fill","map","index","currentValue","isWithinRating","isLast","TouchableOpacity","key","_objectSpread2","onPress","Star","isFilled","_Svg","_props$isFilled","coercedSize","String","finalColor","fills","subtle","yellow","backgroundColor","Svg","width","height","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","Polygon","points","Object","keys","forEach","defineProperty","exports","enumerable","get","_reactNativeWeb","prepare","translate","scale","rotation","skewX","skewY","originX","originY","fontFamily","fontSize","fontWeight","fontStyle","clean","transform","push","concat","length","join","styleProp","cleanedProps","styles","StyleSheet","Symbol","iterator","assign","apply","_toConsumableArray2","Circle","ClipPath","Defs","Ellipse","G","x","y","rest","Image","Line","LinearGradient","Path","Polyline","RadialGradient","Rect","Stop","Text","TSpan","TextPath","Use","Mask","Pattern","getFontFamily","fontFamilies","getFontWeight","fontWeights","textColors","textColor","getTextSize","textSizes","getTextStyles","isInline","isItalic","align","weight","sizeStyle","textStyle","textAlign","alignSelf","textTransform","_deepmerge","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/21.90db9ffc.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Counter as CounterContainer } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Rating } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"rating\"\n    }}>{`Rating`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<CounterContainer initial={3}>\\n  {({ count: rating, set }) => (\\n    <Rating\\n      value={rating}\\n      size=\\\"small\\\"\\n      color=\\\"#67c6bb\\\"\\n      onChange={value => set(value)}\\n      getStyles={(props, theme) => ({\\n        containerStyle: {},\\n        touchableStyle: {},\\n        starColor: \\'#67c6bb\\', // defined as color prop\\n        starSize: 40, // defined as size prop\\n      })}\\n    />\\n  )}\\n</CounterContainer>'} __scope={{\n      props: this ? this.props : props,\n      CounterContainer,\n      Playground,\n      Props,\n      Rating\n    }} mdxType=\"Playground\">\n  <CounterContainer initial={3} mdxType=\"CounterContainer\">\n    {({\n          count: rating,\n          set\n        }) => <Rating value={rating} size=\"small\" color=\"#67c6bb\" onChange={value => set(value)} getStyles={(props, theme) => ({\n          containerStyle: {},\n          touchableStyle: {},\n          starColor: '#67c6bb',\n          // defined as color prop\n          starSize: 40 // defined as size prop\n\n        })} mdxType=\"Rating\" />}\n  </CounterContainer>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Rating} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, TextColor, Theme } from '../../theme/ThemeInterface';\nimport { getTextColor } from '../Typography/Text.styles';\n\nexport interface RatingStylesProps {\n  size: ControlSize;\n  color: TextColor;\n}\n\nexport type GetRatingStyles = (\n  progressStylesProps: RatingStylesProps,\n  theme: Theme,\n) => RatingStyles;\n\nexport interface RatingStyles {\n  touchableStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  starColor: string;\n  starSize: number;\n}\n\nexport const getRatingStyles: GetRatingStyles = ({ size, color }, theme) => {\n  const starSize = theme.controlHeights[size];\n  const padding = theme.controlPaddings[size];\n\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n    touchableStyle: {\n      paddingRight: padding,\n    },\n\n    starColor: getTextColor(theme.colors.text)(color),\n    starSize,\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, TextColor, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetRatingStyles,\n  getRatingStyles,\n  RatingStyles,\n} from './Rating.styles';\nimport { Star } from './Star';\n\nexport interface RatingProps {\n  value?: number;\n  maxRating?: number;\n  size?: ControlSize;\n  getStyles?: ReplaceReturnType<GetRatingStyles, DeepPartial<RatingStyles>>;\n  onChange?: (value: number) => void;\n  color?: TextColor;\n}\n\nexport const Rating = (props: RatingProps) => {\n  const {\n    value = 0,\n    maxRating = 5,\n    size = 'medium',\n    getStyles,\n    onChange = () => undefined,\n    color = 'primary',\n  } = props;\n  const theme = useTheme();\n\n  const { containerStyle, starColor, starSize, touchableStyle } = mergeStyles(\n    getRatingStyles,\n    getStyles,\n  )({ size, color }, theme);\n\n  return (\n    <View style={containerStyle}>\n      {new Array(maxRating).fill(0).map((_, index) => {\n        const currentValue = index + 1;\n        const isWithinRating = currentValue <= value;\n        const isLast = currentValue === maxRating;\n\n        return (\n          <TouchableOpacity\n            key={currentValue}\n            style={{\n              ...touchableStyle,\n              ...(isLast ? { paddingRight: 0 } : {}),\n            }}\n            onPress={() => onChange(currentValue)}\n          >\n            <Star color={starColor} size={starSize} isFilled={isWithinRating} />\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n};\n","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Polygon, Svg } from '../Svg';\n\nexport interface StarProps {\n  size?: number;\n  isFilled?: boolean;\n  color?: string;\n}\n\nexport const Star = (props: StarProps) => {\n  const { size = 24, color, isFilled = false } = props;\n  const theme = useTheme();\n\n  const coercedSize = String(size);\n\n  const finalColor = color || theme.fills.subtle.yellow.backgroundColor;\n\n  return (\n    <Svg\n      width={coercedSize}\n      height={coercedSize}\n      viewBox={`0 0 24 24`}\n      fill={isFilled ? finalColor : 'none'}\n      stroke={finalColor}\n      strokeWidth={2}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <Polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\" />\n    </Svg>\n  );\n};\n","export * from './Rating';\nexport * from './Star';\n","// PORTED IMPLEMENTATION FROM https://github.com/react-native-community/react-native-svg/blob/master/index.web.js\nimport * as React from 'react';\nimport {\n  CircleProps,\n  ClipPathProps,\n  DefinitionProps,\n  EllipseProps,\n  GProps,\n  ImageProps,\n  LinearGradientProps,\n  LineProps,\n  MaskProps,\n  PathProps,\n  PatternProps,\n  PolygonProps,\n  PolylineProps,\n  RadialGradientProps,\n  RectProps,\n  StopProps,\n  SvgProps,\n  SymbolProps,\n  TextPathProps,\n  TextProps,\n  TSpanProps,\n  UseProps,\n} from 'react-native-svg';\n// @ts-ignore\nimport { createElement, StyleSheet } from 'react-native-web';\n\n// Kept in separate file, to avoid name collision with Symbol element\n// @ts-ignore\nconst resolve = (styleProp, cleanedProps) => {\n  if (styleProp) {\n    return StyleSheet\n      ? [styleProp, cleanedProps]\n      : // Compatibility for arrays of styles in plain react web\n      // @ts-ignore\n      styleProp[Symbol.iterator]\n      ? Object.assign({}, ...styleProp, cleanedProps)\n      : Object.assign({}, styleProp, cleanedProps);\n  } else {\n    return cleanedProps;\n  }\n};\n\nexport const prepare = (props: any) => {\n  const {\n    translate,\n    scale,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY,\n    fontFamily,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    style,\n    ...clean\n  } = props;\n\n  const transform = [];\n\n  if (originX != null || originY != null) {\n    transform.push(`translate(${originX || 0}, ${originY || 0})`);\n  }\n  if (translate != null) {\n    transform.push(`translate(${translate})`);\n  }\n  if (scale != null) {\n    transform.push(`scale(${scale})`);\n  }\n  // rotation maps to rotate, not to collide with the text rotate attribute (which acts per glyph rather than block)\n  if (rotation != null) {\n    transform.push(`rotate(${rotation})`);\n  }\n  if (skewX != null) {\n    transform.push(`skewX(${skewX})`);\n  }\n  if (skewY != null) {\n    transform.push(`skewY(${skewY})`);\n  }\n  if (originX != null || originY != null) {\n    transform.push(`translate(${-originX || 0}, ${-originY || 0})`);\n  }\n\n  if (transform.length) {\n    clean.transform = transform.join(' ');\n  }\n\n  const styles: StyleSheet = {};\n\n  if (fontFamily != null) {\n    styles.fontFamily = fontFamily;\n  }\n  if (fontSize != null) {\n    styles.fontSize = fontSize;\n  }\n  if (fontWeight != null) {\n    styles.fontWeight = fontWeight;\n  }\n  if (fontStyle != null) {\n    styles.fontStyle = fontStyle;\n  }\n\n  clean.style = resolve(style, styles);\n\n  return clean;\n};\n\nexport const Circle = (props: CircleProps) => {\n  return createElement('circle', prepare(props));\n};\n\nexport const ClipPath = (props: ClipPathProps) => {\n  return createElement('clipPath', prepare(props));\n};\n\nexport const Defs = (props: DefinitionProps) => {\n  return createElement('defs', prepare(props));\n};\n\nexport const Ellipse = (props: EllipseProps) => {\n  return createElement('ellipse', prepare(props));\n};\n\nexport const G = (props: GProps) => {\n  const { x, y, ...rest } = props;\n\n  if ((x || y) && !rest.translate) {\n    rest.translate = `${x || 0}, ${y || 0}`;\n  }\n\n  return createElement('g', prepare(rest));\n};\n\nexport const Image = (props: ImageProps) => {\n  return createElement('image', prepare(props));\n};\n\nexport const Line = (props: LineProps) => {\n  return createElement('line', prepare(props));\n};\n\nexport const LinearGradient = (props: LinearGradientProps) => {\n  return createElement('linearGradient', prepare(props));\n};\n\nexport const Path = (props: PathProps) => {\n  return createElement('path', prepare(props));\n};\n\nexport const Polygon = (props: PolygonProps) => {\n  return createElement('polygon', prepare(props));\n};\n\nexport const Polyline = (props: PolylineProps) => {\n  return createElement('polyline', prepare(props));\n};\n\nexport const RadialGradient = (props: RadialGradientProps) => {\n  return createElement('radialGradient', prepare(props));\n};\n\nexport const Rect = (props: RectProps) => {\n  return createElement('rect', prepare(props));\n};\n\nexport const Stop = (props: StopProps) => {\n  return createElement('stop', prepare(props));\n};\n\nexport const Svg = (props: SvgProps) => {\n  return createElement('svg', prepare(props));\n};\n\nexport const Symbol = (props: SymbolProps) => {\n  return createElement('symbol', prepare(props));\n};\n\nexport const Text = (props: TextProps) => {\n  return createElement('text', prepare(props));\n};\n\nexport const TSpan = (props: TSpanProps) => {\n  return createElement('tspan', prepare(props));\n};\n\nexport const TextPath = (props: TextPathProps) => {\n  return createElement('textPath', prepare(props));\n};\n\nexport const Use = (props: UseProps) => {\n  return createElement('use', prepare(props));\n};\n\nexport const Mask = (props: MaskProps) => {\n  return createElement('mask', prepare(props));\n};\n\nexport const Pattern = (props: PatternProps) => {\n  return createElement('pattern', prepare(props));\n};\n\nexport default Svg;\n","export * from './Svg';\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/ThemeInterface';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextVariables {\n  size: TextSizes;\n  fontFamily: FontFamilies;\n}\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import deepMerge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  return getOverridingStyles\n    ? deepMerge<TStyles>(defaultStyles, getOverridingStyles(\n        props,\n        theme,\n      ) as Partial<TStyles>)\n    : defaultStyles;\n};\n"],"sourceRoot":""}