{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_Avatar","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Avatar","name","source","uri","size","isSolid","color","getInitials","fallback","concat","charAt","getStyles","theme","boxStyle","textStyle","imageStyle","of","isMDXComponent","getAvatarVariables","box","alignItems","borderRadius","display","justifyContent","overflow","position","image","height","width","text","fills","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","colorProps","_ref2$size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","avatarVariables","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","_objectSpread2","backgroundColor","fontSize","lineHeight","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Typography","globalGetInitials","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","_props$size","_props$isSolid","_props$getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","createElement","View","style","Text","Image"],"mappings":"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","file":"static/js/24.62e966ba.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar } from './Avatar';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"avatar\"\n    }}>{`Avatar`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Avatar\\n  name=\\\"Bill Gates\\\"\\n  source={{ uri: \\'https://picsum.photos/200/200\\' }}\\n  size={40}\\n  isSolid={false}\\n  color=\\\"automatic\\\"\\n  getInitials={(name, fallback) => `${name.charAt(0)}${name.charAt(5)}`}\\n  getStyles={(props, theme) => ({\\n    boxStyle: {},\\n    textStyle: {},\\n    imageStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" source={{\n        uri: 'https://picsum.photos/200/200'\n      }} size={40} isSolid={false} color=\"automatic\" getInitials={(name, fallback) => `${name.charAt(0)}${name.charAt(5)}`} getStyles={(props, theme) => ({\n        boxStyle: {},\n        textStyle: {},\n        imageStyle: {}\n      })} mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"automatic-name-usage\"\n    }}>{`Automatic name usage`}</h3>\n    <Playground __position={1} __code={'<Avatar name=\\\"Bill Gates\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Avatar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/ThemeInterface';\n\nexport interface AvatarVariables {\n  fills: Fills;\n  box: ViewStyle;\n  text: TextStyle;\n  image: ImageStyle;\n}\n\nexport const getAvatarVariables = (theme: Theme): AvatarVariables => {\n  return {\n    box: {\n      alignItems: 'center',\n      borderRadius: 9999,\n      display: 'flex',\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n    },\n\n    image: {\n      height: '100%',\n      width: '100%',\n    },\n\n    text: {},\n\n    fills: theme.fills,\n  };\n};\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  boxStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  const avatarVariables = getAvatarVariables(theme);\n  let colorProps;\n  const fills = avatarVariables.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(avatarVariables.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    boxStyle: {\n      ...avatarVariables.box,\n      backgroundColor: colorProps.backgroundColor,\n      height: size,\n      width: size,\n    },\n\n    textStyle: {\n      ...avatarVariables.text,\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: avatarVariables.image,\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/ThemeInterface';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { boxStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={boxStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n"],"sourceRoot":""}