{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Avatar","Box","___WEBPACK_IMPORTED_MODULE_5__","source","uri","width","height","name","size","of","parentName","className","isMDXComponent","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","isSolid","color","hashValue","appearances","keys","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","_ref2$color","_ref2$isSolid","_ref2$size","newHashValue","controlSize","isControlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","justifyContent","overflow","position","textStyle","fontSize","lineHeight","imageStyle","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","react","View","style","Text","Image","onError","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/21.84ea4db0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar, Box } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"avatar\"\n    }}>{`Avatar`}</h1>\n    <p>{`Display avatar image, with default for name initials`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Avatar\\n  source={{ uri: \\'https://picsum.photos/200/200\\', width: 200, height: 200 }}\\n  // Fallbacks to name if source is not provided\\n  name=\\\"Bill Gates\\\"\\n  size=\\\"large\\\"\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar,\n      Box\n    }} mdxType=\"Playground\">\n  <Avatar source={{\n        uri: 'https://picsum.photos/200/200',\n        width: 200,\n        height: 200\n      }} // Fallbacks to name if source is not provided\n      name=\"Bill Gates\" size=\"large\" mdxType=\"Avatar\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Avatar} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`AvatarStyles {\n  containerStyle: ViewStyle; // set height and width for custom avatar size\n  textStyle: TextStyle; // set font size if you want it to match avatar size\n  imageStyle: ImageStyle;\n}\n\ngetStyles={(AvatarProps, Theme) => AvatarStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View containerStyle>\n  <Text textStyle>{initials}</Text>\n  <Image imageStyle />\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => Partial<AvatarStyles>;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport { GetAvatarStyles, getAvatarStyles } from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: GetAvatarStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}