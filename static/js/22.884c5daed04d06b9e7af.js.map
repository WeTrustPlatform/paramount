{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextArea.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextArea.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_TextArea","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","TextArea","name","placeholder","size","isDisabled","isInvalid","keyboardType","onChangeText","text","console","log","onSubmitEditing","e","isMDXComponent","React","_interopRequireWildcard","_theme","_TextInput","TextAreaBase","_props$numberOfLines","numberOfLines","_props$size","textInputProps","controlHeight","useTheme","controlHeights","createElement","TextInput","multiline","getStyles","inputStyle","height","paddingBottom","paddingTop","forwardRef","ref","innerRef","getTextInputVariables","theme","base","backgroundColor","colors","background","content","borderColor","border","borderWidth","color","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","paddingLeft","controlPaddings","paddingRight","medium","large","getTextInputStyles","textInputVariables","sizeStyles","focusedStyle","_objectSpread2","_reactNative","_mergeStyles2","TextInputBase","_props$isDisabled","_props$isInvalid","_mergeStyles","mergeStyles","style","editable","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles","apply","arguments"],"mappings":"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","file":"static/js/22.327c7c38.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { TextArea } from './TextArea';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"textarea\"\n    }}>{`TextArea`}</h1>\n    <p>{`Composes of `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode></p>\n    <Playground __position={0} __code={'<TextArea\\n  name=\\\"field\\\"\\n  placeholder=\\\"Add your own placeholder\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  isInvalid={false}\\n  keyboardType=\\\"email-address\\\"\\n  onChangeText={text => console.log(\\'field\\', text)}\\n  onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      TextArea\n    }} mdxType=\"Playground\">\n  <TextArea name=\"field\" placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => console.log('field', text)} onSubmitEditing={e => console.log('Submit on enter')} mdxType=\"TextArea\" />\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { TextInput as RNTextInput } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface TextAreaProps extends TextInputProps {\n  numberOfLines?: number;\n}\n\nconst TextAreaBase = (props: TextAreaProps) => {\n  const { numberOfLines = 3, size = 'medium', ...textInputProps } = props;\n  const theme = useTheme();\n  const controlHeight = theme.controlHeights[size];\n\n  return (\n    <TextInput\n      multiline\n      size={size}\n      numberOfLines={numberOfLines}\n      getStyles={() => ({\n        inputStyle: {\n          height: numberOfLines * controlHeight,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n      })}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextArea = React.forwardRef<RNTextInput, TextAreaProps>(\n  (props, ref) => <TextAreaBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface TextInputSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type TextInputSize = keyof TextInputSizes;\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: TextInputSizes;\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: TextInputSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputSize,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: TextInputSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}