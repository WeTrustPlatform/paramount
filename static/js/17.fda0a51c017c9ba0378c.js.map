{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButtonWrapper.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["State","props","children","_props$initial","initial","_React$useState","React","useState","_React$useState2","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","layoutProps","MDXLayout","MDXContent","_ref","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","NativePicker","___WEBPACK_IMPORTED_MODULE_6__","value","_ref2","___WEBPACK_IMPORTED_MODULE_5__","onValueChange","itemValue","itemIndex","size","options","label","of","className","isMDXComponent","getPickerButtonStyles","theme","_ref$size","controlSizeStyles","isControlSize","small","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","textSizeStyles","textSizes","containerStyle","backgroundColor","colors","background","content","position","itemStyle","objectSpread","pickerStyle","appearance","borderColor","border","borderWidth","color","text","width","rightContainerStyle","alignItems","display","justifyContent","paddingHorizontal","right","zIndex","PickerButtonWrapper","getStyles","useTheme","_mergeStyles","mergeStyles","react","View","style","Icon_web","name","_props$options","testID","PickerButtonWrapper_PickerButtonWrapper","NativePicker_jsxFileName","Picker","selectedValue","map","option","Item","key","concat","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/17.919f5756.js","sourcesContent":["import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { NativePicker, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"nativepicker\"\n    }}>{`NativePicker`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`Picker`}</inlineCode></p>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <NativePicker\\n      value={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      size=\\\"large\\\"\\n      options={[\\n        { label: \\'C\\', value: \\'c\\' },\\n        { label: \\'C#\\', value: \\'c#\\' },\\n        { label: \\'C++\\', value: \\'c++\\' },\\n        { label: \\'CSS\\', value: \\'css\\' },\\n        { label: \\'Elixir\\', value: \\'elixir\\' },\\n        { label: \\'Elm\\', value: \\'elm\\' },\\n        { label: \\'Erlang\\', value: \\'erlang\\' },\\n        { label: \\'Go\\', value: \\'go\\' },\\n        { label: \\'Haskell\\', value: \\'haskell\\' },\\n        { label: \\'HTML\\', value: \\'html\\' },\\n        { label: \\'Java\\', value: \\'java\\' },\\n        { label: \\'JavaScript\\', value: \\'js\\' },\\n        { label: \\'Lua\\', value: \\'lua\\' },\\n        { label: \\'Python\\', value: \\'python\\' },\\n        { label: \\'R\\', value: \\'r\\' },\\n        { label: \\'Ruby\\', value: \\'ruby\\' },\\n        { label: \\'Rust\\', value: \\'rust\\' },\\n        { label: \\'Switft\\', value: \\'swift\\' },\\n        { label: \\'Typescript\\', value: \\'typescript\\' },\\n      ]}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      NativePicker,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <NativePicker value={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} size=\"large\" options={[{\n          label: 'C',\n          value: 'c'\n        }, {\n          label: 'C#',\n          value: 'c#'\n        }, {\n          label: 'C++',\n          value: 'c++'\n        }, {\n          label: 'CSS',\n          value: 'css'\n        }, {\n          label: 'Elixir',\n          value: 'elixir'\n        }, {\n          label: 'Elm',\n          value: 'elm'\n        }, {\n          label: 'Erlang',\n          value: 'erlang'\n        }, {\n          label: 'Go',\n          value: 'go'\n        }, {\n          label: 'Haskell',\n          value: 'haskell'\n        }, {\n          label: 'HTML',\n          value: 'html'\n        }, {\n          label: 'Java',\n          value: 'java'\n        }, {\n          label: 'JavaScript',\n          value: 'js'\n        }, {\n          label: 'Lua',\n          value: 'lua'\n        }, {\n          label: 'Python',\n          value: 'python'\n        }, {\n          label: 'R',\n          value: 'r'\n        }, {\n          label: 'Ruby',\n          value: 'ruby'\n        }, {\n          label: 'Rust',\n          value: 'rust'\n        }, {\n          label: 'Switft',\n          value: 'swift'\n        }, {\n          label: 'Typescript',\n          value: 'typescript'\n        }]} mdxType=\"NativePicker\" />}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"nativepicker-props\"\n    }}>{`NativePicker Props`}</h2>\n    <p>{`Extends native `}<inlineCode parentName=\"p\">{`Picker`}</inlineCode></p>\n    <Props of={NativePicker} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`NativePickerStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: ViewStyle;\n}\n\ngetStyles={(NativePickerProps, Theme) => NativePickerStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View style={containerStyle}>\n  <Picker itemStyle pickerStyle />\n  <View style={rightContainerStyle}>{icon}</View>\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { PickerButtonWrapperProps } from './PickerButtonWrapper';\n\nexport interface PickerButtonStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: any;\n}\n\nexport type GetPickerButtonStyles = (\n  props: PickerButtonWrapperProps,\n  theme: Theme,\n) => Partial<PickerButtonStyles>;\n\nexport const getPickerButtonStyles: GetPickerButtonStyles = (\n  { size = 'medium' },\n  theme,\n) => {\n  const controlSizeStyles = isControlSize(size)\n    ? {\n        small: {\n          borderRadius: theme.controlBorderRadius.small,\n          height: theme.controlHeights.small,\n          paddingLeft: theme.controlPaddings.small,\n          paddingRight: 40,\n        },\n\n        medium: {\n          borderRadius: theme.controlBorderRadius.medium,\n          height: theme.controlHeights.medium,\n          paddingLeft: theme.controlPaddings.medium,\n          paddingRight: 40,\n        },\n\n        large: {\n          borderRadius: theme.controlBorderRadius.large,\n          height: theme.controlHeights.large,\n          paddingLeft: theme.controlPaddings.large,\n          paddingRight: 40,\n        },\n      }[size]\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: 40,\n      };\n\n  const textSizeStyles = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      position: 'relative',\n    },\n    itemStyle: {\n      ...textSizeStyles,\n    },\n    pickerStyle: {\n      appearance: 'none',\n      backgroundColor: 'transparent',\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n      ...textSizeStyles,\n      ...controlSizeStyles,\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: -1,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  GetPickerButtonStyles,\n  getPickerButtonStyles,\n} from './PickerButton.styles';\n\nexport interface PickerButtonWrapperProps {\n  /**\n   * The size of the picker.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Callback to get element styles.\n   */\n  getStyles?: GetPickerButtonStyles;\n\n  /**\n   * Content of the wrapper\n   */\n  children?: React.ReactNode;\n}\n\nexport const PickerButtonWrapper = (props: PickerButtonWrapperProps) => {\n  const { getStyles, children } = props;\n  const theme = useTheme();\n\n  const { containerStyle, rightContainerStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n    theme.components.getPickerButtonStyles,\n  )(props, theme);\n\n  return (\n    <View style={containerStyle}>\n      {children}\n      <View style={rightContainerStyle}>\n        <Icon\n          name=\"chevron-down\"\n          size=\"large\"\n          color={theme.colors.text.default}\n        />\n      </View>\n    </View>\n  );\n};\n","import * as React from 'react';\nimport { Picker as RNPicker } from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport {\n  GetPickerButtonStyles,\n  getPickerButtonStyles,\n} from './PickerButton.styles';\nimport { PickerButtonWrapper } from './PickerButtonWrapper';\n\nexport interface NativePickerOption<TValue extends any> {\n  label: string;\n  value: TValue;\n}\n\nexport interface NativePickerProps<TValue extends any> {\n  /**\n   * The size of the picker.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * List of NativePickerItem items.\n   */\n  options?: NativePickerOption<TValue>[];\n\n  /**\n   * Callback to get element styles.\n   */\n  getStyles?: GetPickerButtonStyles;\n\n  /**\n   * Callback invoked when a item is picked\n   */\n  onValueChange?: (itemValue: TValue, itemPosition: number) => void;\n\n  /**\n   * Value of the picker\n   */\n  value?: TValue;\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: string;\n}\n\nexport const NativePicker = <TValue extends any>(\n  props: NativePickerProps<TValue>,\n) => {\n  const { getStyles, options = [], value, testID, onValueChange } = props;\n  const theme = useTheme();\n\n  const { pickerStyle, itemStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )(props, theme);\n\n  return (\n    <PickerButtonWrapper getStyles={getStyles}>\n      <RNPicker\n        itemStyle={itemStyle}\n        style={pickerStyle}\n        selectedValue={value}\n        testID={testID}\n        onValueChange={onValueChange}\n      >\n        {options.map(option => (\n          <RNPicker.Item\n            key={`${option.value}`}\n            value={option.value}\n            label={option.label}\n          />\n        ))}\n      </RNPicker>\n    </PickerButtonWrapper>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}