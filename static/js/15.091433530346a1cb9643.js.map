{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx"],"names":["getCheckboxStyles","_ref","theme","isChecked","isDisabled","shape","size","sizeValue","controlHeights","checkColor","colors","text","white","checkboxFocusBackgroundColor","background","primaryDark","greyLight","checkboxStyle","_objectSpread2","alignItems","backgroundColor","content","borderColor","border","borderWidth","height","justifyContent","width","primaryDefault","greyDark","circle","borderRadius","square","controlBorderRadius","small","touchableStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Icon","_Checkbox","Checkbox","props","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","_props$onChange","onChange","_props$shape","_props$size","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","components","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","disabled","onPress","View","Icon","name","color","Feather","_Text","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","Object","keys","forEach","key","defineProperty","exports","enumerable","get","getListItemStyles","containerStyle","borderBottomWidth","paddingLeft","controlPaddings","paddingRight","focusBackgroundColor","imageWrapperStyle","marginRight","leftWrapperStyle","flexDirection","textStyle","textSizes","textWrapperStyle","wrapperStyle","_Typography","_ListItem","ListItem","label","description","_props$rightIcon","rightIcon","leftIcon","Text","_react2","_interopRequireDefault","_countriesList","_docz","_Box","_SelectList","_SelectListItem","_reactPowerplug","layoutProps","MDXLayout","MDXContent","mdx","mdxType","id","parentName","Playground","__position","__code","__scope","this","countryList","Props","Box","SelectList","SelectListItem","State","isMulti","selectedValue","onValueChange","newValue","itemIndex","console","log","value","initial","_ref2","state","setState","_ref3","map","countryCode","data","_ref4","of","isMDXComponent","SelectListBase","children","innerRef","flatListProps","handleOnPress","itemValue","isSelected","Array","isArray","filter","val","childrenArray","Children","toArray","child","FlatList","ref","keyExtractor","item","getItemLayout","_","index","length","medium","offset","renderItem","selectListItem","some","selVal","cloneElement","onSelect","forwardRef","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault"],"mappings":"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","file":"static/js/15.eba85e48.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n  size: ControlSize;\n}\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n  checkboxFocusBackgroundColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape, size },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkColor: theme.colors.text.white,\n    checkboxFocusBackgroundColor: isChecked\n      ? theme.colors.background.primaryDark\n      : theme.colors.background.greyLight,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...{\n        circle: {\n          borderRadius: 999,\n        },\n        square: {\n          borderRadius: theme.controlBorderRadius.small,\n        },\n      }[shape],\n    },\n\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n  size?: ControlSize;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'square',\n    size = 'medium',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    touchableStyle,\n    checkboxStyle,\n    checkColor,\n    checkboxFocusBackgroundColor,\n  } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(\n    {\n      isChecked,\n      isDisabled,\n      shape,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible={isInteractive}\n      style={touchableStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={checkboxStyle}>\n        {isChecked ? <Icon name=\"check\" size={20} color={checkColor} /> : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export { Checkbox, CheckboxProps } from './Checkbox';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights[size],\n      justifyContent: 'center',\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ControlSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { countries as countryList } from 'countries-list';\nimport { Playground, Props } from 'docz';\nimport { Box } from '../Box';\nimport { SelectList } from './SelectList';\nimport { SelectListItem } from './SelectListItem';\nimport { State } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item. `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` is a compound component, which means that its children can be any component, and it will implicitly inject props such as `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` to them.\n`}<inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<SelectList\\n  isMulti={false}\\n  selectedValue=\\\"c\\\"\\n  onValueChange={(newValue, itemIndex) => {\\n    console.log(newValue, itemIndex)\\n  }}\\n>\\n  <SelectListItem\\n    label=\\\"Usage\\\"\\n    value=\\\"c\\\"\\n    // Props below are passed from `SelectList`, so it is not necessary to pass them here\\n    // isSelected\\n    // onSelect\\n    // index\\n  />\\n</SelectList>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <SelectList isMulti={false} selectedValue=\"c\" onValueChange={(newValue, itemIndex) => {\n        console.log(newValue, itemIndex);\n      }} mdxType=\"SelectList\">\n    <SelectListItem label=\"Usage\" value=\"c\" // Props below are passed from `SelectList`, so it is not necessary to pass them here\n        // isSelected\n        // onSelect\n        // index\n        mdxType=\"SelectListItem\" />\n  </SelectList>\n    </Playground>\n    <h3 {...{\n      \"id\": \"multi-select\"\n    }}>{`Multi select`}</h3>\n    <Playground __position={1} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      isMulti\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"large-selectlist\"\n    }}>{`Large SelectList`}</h3>\n    <p><inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-native`}</inlineCode></p>\n    <Playground __position={2} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={400}>\\n      <SelectList\\n        isMulti\\n        selectedValue={state.selectedValue}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ selectedValue: newValue })\\n        }}\\n      >\\n        {Object.keys(countryList)\\n          .map(countryCode => ({\\n            countryCode,\\n            value: countryCode,\\n            label: countryList[countryCode].name,\\n            ...countryList[countryCode],\\n          }))\\n          .map(data => (\\n            <SelectListItem\\n              key={data.value}\\n              label={data.label}\\n              value={data.label}\\n            />\\n          ))}\\n      </SelectList>\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={400} mdxType=\"Box\">\n        <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n            setState({\n              selectedValue: newValue\n            });\n          }} mdxType=\"SelectList\">\n          {Object.keys(countryList).map(countryCode => ({\n              countryCode,\n              value: countryCode,\n              label: countryList[countryCode].name,\n              ...countryList[countryCode]\n            })).map(data => <SelectListItem key={data.value} label={data.label} value={data.label} mdxType=\"SelectListItem\" />)}\n        </SelectList>\n      </Box>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"single-select\"\n    }}>{`Single select`}</h3>\n    <Playground __position={3} __code={'<State initial={{ selectedValue: \\'go\\' }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: 'go'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <h3 {...{\n      \"id\": \"select-list\"\n    }}>{`Select List`}</h3>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n"],"sourceRoot":""}