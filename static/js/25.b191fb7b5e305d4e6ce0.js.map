{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Divider","___WEBPACK_IMPORTED_MODULE_5__","paddingVertical","___WEBPACK_IMPORTED_MODULE_6__","of","isMDXComponent","defaultProps","_props$size","size","_props$color","_props$orientation","orientation","override","_getOverrides","getOverrides","StyledDivider","dlv","_getOverrides2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","Root","rootProps","react__WEBPACK_IMPORTED_MODULE_4__","dividerScale","large","medium","small","borderColors","_props$size2","_props$color2","_props$orientation2","viewProps","border","borderColor","dividerSize","isControlSize","styleMap","horizontal","height","width","vertical","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_5__","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/25.2ebcab69.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Divider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"divider\"\n    }}>{`Divider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box paddingVertical={40}>\\n  <Divider />\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Divider\n    }} mdxType=\"Playground\">\n  <Box paddingVertical={40} mdxType=\"Box\">\n    <Divider mdxType=\"Divider\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Divider} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { BorderColor, BorderColors, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, Override } from '../../utils/overrides';\n\ntype DividerOrientation = 'horizontal' | 'vertical';\n\nexport interface DividerProps extends ViewProps {\n  /**\n   * Size of the divider.\n   * @default small\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Color of the divider.\n   * @default colors.border.default\n   */\n  color?: BorderColor | string;\n\n  /**\n   * Orientation of the divier\n   * @default \"horizontal\"\n   */\n  orientation?: DividerOrientation;\n\n  /**\n   * Overrides\n   */\n  override?: DividerOverride;\n}\n\nexport type DividerOverride = Override<DividerProps, StyledDividerProps>;\n\nconst defaultProps = {\n  size: 'small' as const,\n  color: 'default' as const,\n  orientation: 'horizontal' as const,\n};\n\nexport const Divider = (props: DividerProps) => {\n  const {\n    size = defaultProps.size,\n    color = defaultProps.color,\n    orientation = defaultProps.orientation,\n    override,\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledDivider,\n    props,\n    dlv(theme, 'overrides.Divider'),\n    override,\n  );\n\n  return (\n    <Root size={size} color={color} orientation={orientation} {...rootProps} />\n  );\n};\n\nconst getDividerColor = (borderColors: BorderColors) => (\n  borderColor: BorderColor,\n) => {\n  // @ts-ignore\n  const presetColor = borderColors[borderColor] as string | undefined;\n\n  return presetColor || borderColor;\n};\n\nconst dividerScale: { [size in ControlSize]: number } = {\n  large: 3,\n  medium: 2,\n  small: 1,\n};\n\ninterface StyledDividerProps extends ViewProps {\n  size?: ControlSize | number;\n  color?: BorderColor | string;\n  orientation?: DividerOrientation;\n}\n\nconst StyledDivider = (props: StyledDividerProps) => {\n  const theme = useTheme();\n  const {\n    size = defaultProps.size,\n    color = defaultProps.color,\n    orientation = defaultProps.orientation,\n    style,\n    ...viewProps\n  } = props;\n\n  const backgroundColor = getDividerColor(theme.colors.border)(\n    color || theme.colors.border.default,\n  );\n\n  const dividerSize = isControlSize(size) ? dividerScale[size] : size;\n\n  const styleMap = {\n    horizontal: {\n      backgroundColor,\n      height: dividerSize,\n      width: '100%',\n    },\n    vertical: {\n      backgroundColor,\n      height: '100%',\n      width: dividerSize,\n    },\n  };\n\n  return (\n    <View\n      style={[orientation ? styleMap[orientation] : styleMap.horizontal, style]}\n      {...viewProps}\n    />\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}