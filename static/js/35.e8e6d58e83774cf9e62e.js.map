{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Spacing/Spacing.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","___WEBPACK_IMPORTED_MODULE_5__","height","width","shape","elevation","backgroundColor","of","isMDXComponent","getSpacing","size","theme","spacing","Spacing","_props$size","_props$orientation","orientation","style","viewProps","objectWithoutProperties","useTheme","react","View","esm_extends","getStyle","dlv","propToFn","color","colors","background","elevations","containerShapes","space","padding","spaceBottom","paddingBottom","spaceEnd","paddingEnd","spaceHorizontal","paddingHorizontal","spaceLeft","paddingLeft","spaceRight","paddingRight","spaceStart","paddingStart","spaceTop","paddingTop","spaceVertical","paddingVertical","children","testID","viewStyles","transformedStyles","pureStyles","prop","styleFn","push"],"mappings":"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","file":"static/js/35.619de6ac.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"box\"\n    }}>{`Box`}</h1>\n    <p>{`Primitive component for convenient layout of components that accepts all `}<inlineCode parentName=\"p\">{`ViewStyle`}</inlineCode>{` properties`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box\\n  // ...ViewStyle\\n  height={100}\\n  width={100}\\n  shape=\\\"rounded\\\"\\n  elevation={5}\\n  backgroundColor=\\\"primaryDefault\\\"\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box\n    }} mdxType=\"Playground\">\n  <Box // ...ViewStyle\n      height={100} width={100} shape=\"rounded\" elevation={5} backgroundColor=\"primaryDefault\" mdxType=\"Box\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p>{`Extends `}<inlineCode parentName=\"p\">{`ViewStyle`}</inlineCode></p>\n    <Props of={Box} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { SpacingSize, Theme, useTheme } from '../../theme';\nimport { getStyle, OverrideStyle, Style } from '../../utils/Overrides';\n\ntype SpacingOrientation = 'horizontal' | 'vertical';\n\nexport interface SpacingProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the Spacing.\n   * @default \"medium\"\n   */\n  size?: SpacingSize | number;\n\n  /**\n   * Orientation of spacing.\n   * @default \"vertical\"\n   */\n  orientation?: SpacingOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<SpacingProps, ViewStyle>;\n}\n\nexport type SpacingOverride = OverrideStyle<SpacingProps, ViewStyle>;\n\nexport const getSpacing = (size: SpacingSize | number, theme: Theme) =>\n  typeof size === 'number' ? size : theme.spacing[size];\n\nexport const Spacing = (props: SpacingProps) => {\n  const {\n    size = 'medium',\n    orientation = 'vertical',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        orientation === 'vertical'\n          ? { height: getSpacing(size, theme) }\n          : { width: getSpacing(size, theme) },\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Spacing.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport {\n  BackgroundColor,\n  ContainerShape,\n  SpacingSize,\n  Theme,\n  useTheme,\n} from '../../theme';\nimport { getSpacing } from '../Spacing';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n  testID?: string;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n\n  space?: SpacingSize | number;\n  spaceBottom?: SpacingSize | number;\n  spaceEnd?: SpacingSize | number;\n  spaceHorizontal?: SpacingSize | number;\n  spaceLeft?: SpacingSize | number;\n  spaceRight?: SpacingSize | number;\n  spaceStart?: SpacingSize | number;\n  spaceTop?: SpacingSize | number;\n  spaceVertical?: SpacingSize | number;\n}\n\ntype BoxProp = keyof Omit<Omit<BoxProps, 'children'>, 'testID'>;\n\nconst propToFn: Partial<\n  {\n    [key in BoxProp]: (\n      prop: NonNullable<BoxProps[key]>,\n      theme: Theme,\n    ) => ViewStyle;\n  }\n> = {\n  backgroundColor: (color: BackgroundColor | string, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n\n    return { backgroundColor: color };\n  },\n  elevation: (elevation: number, theme: Theme) => theme.elevations[elevation],\n\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n\n  space: (size: SpacingSize | number, theme: Theme) => ({\n    padding: getSpacing(size, theme),\n  }),\n  spaceBottom: (size: SpacingSize | number, theme: Theme) => ({\n    paddingBottom: getSpacing(size, theme),\n  }),\n  spaceEnd: (size: SpacingSize | number, theme: Theme) => ({\n    paddingEnd: getSpacing(size, theme),\n  }),\n  spaceHorizontal: (size: SpacingSize | number, theme: Theme) => ({\n    paddingHorizontal: getSpacing(size, theme),\n  }),\n  spaceLeft: (size: SpacingSize | number, theme: Theme) => ({\n    paddingLeft: getSpacing(size, theme),\n  }),\n  spaceRight: (size: SpacingSize | number, theme: Theme) => ({\n    paddingRight: getSpacing(size, theme),\n  }),\n  spaceStart: (size: SpacingSize | number, theme: Theme) => ({\n    paddingStart: getSpacing(size, theme),\n  }),\n  spaceTop: (size: SpacingSize | number, theme: Theme) => ({\n    paddingTop: getSpacing(size, theme),\n  }),\n  spaceVertical: (size: SpacingSize | number, theme: Theme) => ({\n    paddingVertical: getSpacing(size, theme),\n  }),\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles: ViewStyle = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      const styleFn = propToFn[prop as BoxProp];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop as BoxProp], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop as keyof ViewStyle] = viewStyles[prop as BoxProp];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n"],"sourceRoot":""}