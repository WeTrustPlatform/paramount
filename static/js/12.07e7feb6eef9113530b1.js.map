{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactNative","_reactPowerplug","_","_docz","_Inputs","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Text","Toggle","FormField","Props","TextInput","labelPosition","label","description","error","getStyles","theme","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","labelWrapperStyle","wrapperStyle","of","isMDXComponent","getFormFieldStyles","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","React","_interopRequireWildcard","_theme","_mergeStyles2","_Typography","_FormField","children","_props$labelPosition","useTheme","_mergeStyles","mergeStyles","labelContent","createElement","View","style","Label","textStyle","color","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","Icon","name","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon","_IconTextInput","ClearableTextInputBase","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","IconTextInput","ref","TouchableOpacity","onPress","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","leftContainerStyle","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","textInputProps","getTextInputVariables","base","backgroundColor","background","content","borderColor","border","borderWidth","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlHeights","controlPaddings","medium","large","getTextInputStyles","isDisabled","isInvalid","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","_ClearableTextInput"],"mappings":"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","file":"static/js/12.4a96b44f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Text } from 'react-native';\nimport { Toggle } from 'react-powerplug';\nimport { FormField } from '.';\nimport { Playground, Props } from 'docz';\nimport { TextInput } from '../Inputs';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<FormField\\n  labelPosition=\\\"top\\\"\\n  label=\\\"Email\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n  getStyles={(props, theme) => ({\\n    containerStyles: {},\\n    descriptionTextStyle: {},\\n    errorTextStyle: {},\\n    errorWrapperStyle: {},\\n    labelTextStyle: {},\\n    labelWrapperStyle: {},\\n    wrapperStyle: {},\\n  })}\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Text,\n      Toggle,\n      FormField,\n      Playground,\n      Props,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField labelPosition=\"top\" label=\"Email\" description=\"Description for the field\" error=\"Error message\" getStyles={(props, theme) => ({\n        containerStyles: {},\n        descriptionTextStyle: {},\n        errorTextStyle: {},\n        errorWrapperStyle: {},\n        labelTextStyle: {},\n        labelWrapperStyle: {},\n        wrapperStyle: {}\n      })} mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={FormField} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { FormFieldLabelPosition } from './FormField';\n\nexport interface FormFieldStylesProps {\n  labelPosition?: FormFieldLabelPosition;\n}\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  FormFieldStylesProps: FormFieldStylesProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  error?: string;\n  label?: string;\n  labelPosition?: FormFieldLabelPosition;\n  description?: string;\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(getFormFieldStyles, getStyles)(\n    {\n      labelPosition,\n    },\n    theme,\n  );\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ textStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\n"],"sourceRoot":""}