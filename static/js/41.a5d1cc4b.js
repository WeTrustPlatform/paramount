(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{"./src/components/Positioner/Positioner.mdx":function(n,o,t){var e=t("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(o,"__esModule",{value:!0}),o.default=T;var i=e(t("./node_modules/@babel/runtime/helpers/extends.js")),s=e(t("./node_modules/@babel/runtime/helpers/objectWithoutProperties.js")),l=(e(t("./node_modules/react/index.js")),t("./node_modules/@mdx-js/react/dist/index.es.js")),a=t("./node_modules/docz/dist/index.esm.js"),r=t("./node_modules/react-powerplug/dist/react-powerplug.esm.js"),d=t("./src/components/Positioner/index.ts"),p=t("./src/components/Button/index.ts"),g=t("./src/components/Layout/index.ts"),x=t("./src/components/Typography/index.ts"),u={},m=function(n){var o=n.children;return document.body.style.height="initial",document.body.style.position="relative",(0,l.mdx)("div",null,o)};function T(n){var o=n.components,t=(0,s.default)(n,["components"]);return(0,l.mdx)(m,(0,i.default)({},u,t,{components:o,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"positioner"},"Positioner"),(0,l.mdx)("p",null,"A base component for manipulating the position of the element on the screen. Used by ",(0,l.mdx)("inlineCode",{parentName:"p"},"Popover")),(0,l.mdx)("h3",{id:"usage"},"Usage"),(0,l.mdx)(a.Playground,{__position:0,__code:'<Toggle>\n  {({ on, toggle }) => (\n    <Positioner\n      isVisible={on}\n      onClose={toggle}\n      isDynamicContent={false}\n      position="top-right"\n      content={props => (\n        <Box width={200} height={200}>\n          <Text>\n            Content that can be anything. By default it has no styling at all.\n            You can use `Popover` that comes with predefined styles.\n            Positioner is used as a base for `Popovers`, `Tooltips`,\n            `DropdownMenus`\n          </Text>\n        </Box>\n      )}\n      isFullWidth={false}\n      parentHeight={1000}\n      // Use this prop to specify the position of a component u want to wrap with the positioner\n      // targetMeasurements={{}}\n      getStyles={(props, theme) => ({\n        positionerStyle: {},\n        modalContainerStyle: {},\n      })}\n    >\n      <Button onPress={toggle} title="Usage" />\n    </Positioner>\n  )}\n</Toggle>',__scope:{props:this?this.props:t,Playground:a.Playground,Props:a.Props,Toggle:r.Toggle,Positioner:d.Positioner,Button:p.Button,Box:g.Box,Spacing:g.Spacing,Text:x.Text},mdxType:"Playground"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,isDynamicContent:!1,position:"top-right",content:function(n){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},isFullWidth:!1,parentHeight:1e3,getStyles:function(n,o){return{positionerStyle:{},modalContainerStyle:{}}},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,title:"Usage",mdxType:"Button"}))})),(0,l.mdx)("h3",{id:"variants"},"Variants"),(0,l.mdx)(a.Playground,{__position:1,__code:'<Spacing paddingBottom={8} zIndex={1}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="top-right"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top right" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="top"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="top-left"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top left" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="left"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Left" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="right"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Right" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n<Spacing paddingTop={8} zIndex={3}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="bottom-right"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom right" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="bottom"\n          parentHeight={2480}\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>This has parent height set to 2480</Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position="bottom-left"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom left" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>',__scope:{props:this?this.props:t,Playground:a.Playground,Props:a.Props,Toggle:r.Toggle,Positioner:d.Positioner,Button:p.Button,Box:g.Box,Spacing:g.Spacing,Text:x.Text},mdxType:"Playground"},(0,l.mdx)(g.Spacing,{paddingBottom:8,zIndex:1,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"top-right",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top right",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"top",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"top-left",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top left",mdxType:"Button"}))}))),(0,l.mdx)(g.Spacing,{paddingVertical:8,zIndex:2,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"left",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Left",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"right",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Right",mdxType:"Button"}))}))),(0,l.mdx)(g.Spacing,{paddingTop:8,zIndex:3,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"bottom-right",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom right",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"bottom",parentHeight:2480,content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"This has parent height set to 2480"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,onClose:t,position:"bottom-left",content:function(){return(0,l.mdx)(g.Box,{width:200,height:200,mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom left",mdxType:"Button"}))})))),(0,l.mdx)("h3",{id:"dynamically-sized-content"},"Dynamically sized content"),(0,l.mdx)("p",null,"Add ",(0,l.mdx)("inlineCode",{parentName:"p"},"isDynamicContent")," to props to give time for Positioner to calculate its layout of dynamic content prior to displaying it"),(0,l.mdx)(a.Playground,{__position:2,__code:'<Spacing paddingBottom={8} zIndex={1}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="top-right"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top right" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="top"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="top-left"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Top left" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="left"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Left" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="right"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Right" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n<Spacing paddingTop={8} zIndex={3}>\n  <Box flexDirection="row" justifyContent="space-between">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="bottom-right"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom right" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="bottom"\n          parentHeight={2480}\n          content={() => (\n            <Box>\n              <Text>This has parent height set to 2480</Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position="bottom-left"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title="Bottom left" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>',__scope:{props:this?this.props:t,Playground:a.Playground,Props:a.Props,Toggle:r.Toggle,Positioner:d.Positioner,Button:p.Button,Box:g.Box,Spacing:g.Spacing,Text:x.Text},mdxType:"Playground"},(0,l.mdx)(g.Spacing,{paddingBottom:8,zIndex:1,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"top-right",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top right",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"top",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"top-left",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Top left",mdxType:"Button"}))}))),(0,l.mdx)(g.Spacing,{paddingVertical:8,zIndex:2,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"left",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Left",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"right",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Right",mdxType:"Button"}))}))),(0,l.mdx)(g.Spacing,{paddingTop:8,zIndex:3,mdxType:"Spacing"},(0,l.mdx)(g.Box,{flexDirection:"row",justifyContent:"space-between",mdxType:"Box"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"bottom-right",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom right",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"bottom",parentHeight:2480,content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"This has parent height set to 2480"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom",mdxType:"Button"}))}),(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isDynamicContent:!0,onClose:t,position:"bottom-left",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,isInline:!0,title:"Bottom left",mdxType:"Button"}))})))),(0,l.mdx)("h3",{id:"positioner-with-full-width"},"Positioner with full width"),(0,l.mdx)("p",null,"On Mobile sometimes we want the content to stretch full width of the window. There is the prop ",(0,l.mdx)("inlineCode",{parentName:"p"},"isFullWidth")," for that"),(0,l.mdx)(a.Playground,{__position:3,__code:'<Spacing flexDirection="row">\n  <Spacing flex={1}>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isFullWidth\n          onClose={toggle}\n          position="top-left"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} title="Bottom" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Spacing>\n  <Spacing flex={1}>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isFullWidth\n          onClose={toggle}\n          position="bottom-right"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} title="Bottom" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Spacing>\n</Spacing>',__scope:{props:this?this.props:t,Playground:a.Playground,Props:a.Props,Toggle:r.Toggle,Positioner:d.Positioner,Button:p.Button,Box:g.Box,Spacing:g.Spacing,Text:x.Text},mdxType:"Playground"},(0,l.mdx)(g.Spacing,{flexDirection:"row",mdxType:"Spacing"},(0,l.mdx)(g.Spacing,{flex:1,mdxType:"Spacing"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isFullWidth:!0,onClose:t,position:"top-left",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,title:"Bottom",mdxType:"Button"}))})),(0,l.mdx)(g.Spacing,{flex:1,mdxType:"Spacing"},(0,l.mdx)(r.Toggle,{mdxType:"Toggle"},function(n){var o=n.on,t=n.toggle;return(0,l.mdx)(d.Positioner,{isVisible:o,isFullWidth:!0,onClose:t,position:"bottom-right",content:function(){return(0,l.mdx)(g.Box,{mdxType:"Box"},(0,l.mdx)(x.Text,{mdxType:"Text"},"Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`"))},mdxType:"Positioner"},(0,l.mdx)(p.Button,{onPress:t,title:"Bottom",mdxType:"Button"}))})))),(0,l.mdx)("h3",{id:"props"},"Props"),(0,l.mdx)(a.Props,{of:d.Positioner,mdxType:"Props"}))}T&&T===Object(T)&&Object.isExtensible(T)&&Object.defineProperty(T,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/components/Positioner/Positioner.mdx"}}),T.isMDXComponent=!0}}]);
//# sourceMappingURL=41.1e09579ed7b0fe3ad592.js.map