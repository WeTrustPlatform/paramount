{"version":3,"sources":["webpack:///./src/components/Checkbox/Checkbox.styles.ts","webpack:///./src/components/Checkbox/Checkbox.tsx","webpack:///./src/components/Checkbox/LabeledCheckbox.tsx","webpack:///./src/components/Checkbox/index.ts","webpack:///./src/components/ListItem/ListItem.styles.ts","webpack:///./src/components/ListItem/ListItem.tsx","webpack:///./src/components/ListItem/index.ts","webpack:///./src/components/SelectList/SelectList.tsx","webpack:///./src/components/SelectList/SelectListItem.tsx","webpack:///./src/icons/Icon.web.tsx","webpack:///./src/icons/index.ts"],"names":["getCheckboxVariables","theme","base","backgroundColor","colors","background","white","borderColor","border","default","borderWidth","height","width","checked","primaryDefault","checkedFocus","primaryDark","disabled","greyDark","shape","circle","borderRadius","square","controlBorderRadius","small","uncheckedFocus","greyLight","_ref","isChecked","isDisabled","checkboxVariables","checkboxFocusBackgroundColor","checkboxStyle","_objectSpread2","displayName","__docgenInfo","description","props","defaultValue","name","required","type","fills","fontFamilies","fontWeights","headingSizes","paragraphSizes","textSizes","elevations","controlPaddings","controlHeights","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","React","_interopRequireWildcard","__webpack_require__","_reactNative","_icons","_theme","_mergeStyles2","_Checkbox","Checkbox","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","checkedIcon","_props$onChange","onChange","_props$shape","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","getCheckboxStyles","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","onPress","View","alignItems","display","justifyContent","Icon","size","color","text","accessibilityLabel","accessibilityRole","accessibilityStates","accessibilityHint","accessibilityComponentType","accessibilityLiveRegion","importantForAccessibility","accessibilityElementsHidden","accessibilityTraits","onAccessibilityTap","onMagicTap","accessibilityIgnoresInvertColors","_Layout","_Typography","LabeledCheckbox","label","_props$position","position","restProps","Box","flexDirection","Text","Spacing","paddingHorizontal","_LabeledCheckbox","getListItemVariables","borderBottomWidth","focusBackgroundColor","selected","sizes","fontSize","paddingLeft","paddingRight","medium","large","wrapper","isSelected","selectListVariables","_sizes$size","sizeStyles","containerStyle","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","_ListItem","ListItem","_props$size","_props$rightIcon","rightIcon","leftIcon","getListItemStyles","avatarProps","Object","keys","forEach","key","defineProperty","exports","enumerable","get","SelectListBase","selectedValue","onValueChange","isMulti","children","innerRef","flatListProps","handleOnPress","itemValue","itemIndex","Array","isArray","filter","val","concat","childrenArray","Children","toArray","data","map","child","FlatList","ref","keyExtractor","item","value","getItemLayout","_","index","length","offset","renderItem","selectListItem","some","selVal","cloneElement","onSelect","SelectList","forwardRef","ItemSeparatorComponent","ListEmptyComponent","ListFooterComponent","ListHeaderComponent","columnWrapperStyle","keyboardShouldPersistTaps","extraData","horizontal","initialNumToRender","initialScrollIndex","legacyImplementation","numColumns","onEndReached","onEndReachedThreshold","onRefresh","onViewableItemsChanged","refreshing","viewabilityConfig","removeClippedSubviews","debug","disableVirtualization","getItem","getItemCount","inverted","listKey","maxToRenderPerBatch","onLayout","onScrollToIndexFailed","progressViewOffset","renderScrollComponent","updateCellsBatchingPeriod","viewabilityConfigCallbackPairs","windowSize","contentContainerStyle","invertStickyHeaders","keyboardDismissMode","onContentSizeChange","onScroll","onScrollBeginDrag","onScrollEndDrag","onMomentumScrollEnd","onMomentumScrollBegin","pagingEnabled","scrollEnabled","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","refreshControl","snapToAlignment","snapToInterval","snapToOffsets","snapToStart","snapToEnd","hitSlop","pointerEvents","nativeID","collapsable","needsOffscreenAlphaCompositing","renderToHardwareTextureAndroid","accessibilityViewIsModal","accessibilityActions","onAccessibilityAction","shouldRasterizeIOS","isTVSelectable","hasTVPreferredFocus","tvParallaxProperties","tvParallaxShiftDistanceX","tvParallaxShiftDistanceY","tvParallaxTiltAngle","tvParallaxMagnification","onStartShouldSetResponder","onMoveShouldSetResponder","onResponderEnd","onResponderGrant","onResponderReject","onResponderMove","onResponderRelease","onResponderStart","onResponderTerminationRequest","onResponderTerminate","onStartShouldSetResponderCapture","onMoveShouldSetResponderCapture","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","onTouchEndCapture","alwaysBounceHorizontal","alwaysBounceVertical","automaticallyAdjustContentInsets","bounces","bouncesZoom","canCancelContentTouches","centerContent","contentInset","contentOffset","contentInsetAdjustmentBehavior","decelerationRate","directionalLockEnabled","indicatorStyle","maximumZoomScale","minimumZoomScale","onScrollAnimationEnd","pinchGestureEnabled","scrollEventThrottle","scrollIndicatorInsets","scrollsToTop","stickyHeaderIndices","zoomScale","endFillColor","scrollPerfTag","overScrollMode","nestedScrollEnabled","SelectListItem","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault","Feather","IconTag","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","Iconweb","_Icon","_interopRequireDefault"],"mappings":"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","file":"static/js/5.0715938b.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport const getCheckboxVariables = (theme: Theme): CheckboxVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: 32,\n      width: 32,\n    },\n    checked: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderColor: 'transparent',\n    },\n    checkedFocus: {\n      backgroundColor: theme.colors.background.primaryDark,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderColor: theme.colors.border.default,\n    },\n    shape: {\n      circle: {\n        borderRadius: 999,\n      },\n      square: {\n        borderRadius: theme.controlBorderRadius.small,\n      },\n    },\n    uncheckedFocus: {\n      backgroundColor: theme.colors.background.greyLight,\n    },\n  };\n};\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n}\n\nexport interface CheckboxStyles {\n  checkboxStyle: ViewStyle;\n  checkboxFocusBackgroundColor?: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape },\n  theme,\n) => {\n  const checkboxVariables = getCheckboxVariables(theme);\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? checkboxVariables.checkedFocus.backgroundColor\n      : checkboxVariables.uncheckedFocus.backgroundColor,\n    checkboxStyle: {\n      ...checkboxVariables.base,\n      ...(isChecked ? checkboxVariables.checked : {}),\n      ...(isDisabled ? checkboxVariables.disabled : {}),\n      ...checkboxVariables.shape[shape],\n    },\n  };\n};\ntry {\n    // @ts-ignore\n    getCheckboxVariables.displayName = \"getCheckboxVariables\";\n    // @ts-ignore\n    getCheckboxVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getCheckboxVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/Checkbox.styles.ts#getCheckboxVariables\"] = { docgenInfo: getCheckboxVariables.__docgenInfo, name: \"getCheckboxVariables\", path: \"src/components/Checkbox/Checkbox.styles.ts#getCheckboxVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  checkedIcon?: React.ReactNode;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    checkedIcon,\n    onChange = () => null,\n    shape = 'square',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { checkboxStyle, checkboxFocusBackgroundColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n  )({ isChecked, isDisabled, shape }, theme);\n\n  return (\n    <TouchableHighlight\n      accessible\n      style={checkboxStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {isChecked\n          ? checkedIcon || (\n              <Icon name=\"check\" size={20} color={theme.colors.text.white} />\n            )\n          : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\ntry {\n    // @ts-ignore\n    Checkbox.displayName = \"Checkbox\";\n    // @ts-ignore\n    Checkbox.__docgenInfo = { \"description\": \"\", \"displayName\": \"Checkbox\", \"props\": { \"isChecked\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isChecked\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"isInteractive\": { \"defaultValue\": null, \"description\": \"Sometimes we just want the display of the checkbox\", \"name\": \"isInteractive\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"checkedIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"checkedIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"shape\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shape\", \"required\": false, \"type\": { \"name\": \"CheckboxShape\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(e: GestureResponderEvent) => void\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"link\\\" | \\\"search\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/Checkbox.tsx#Checkbox\"] = { docgenInfo: Checkbox.__docgenInfo, name: \"Checkbox\", path: \"src/components/Checkbox/Checkbox.tsx#Checkbox\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { TextColor, TextSize } from '../../theme/ThemeInterface';\nimport { Checkbox, CheckboxProps } from '../Checkbox/Checkbox';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\n\nexport interface LabeledCheckboxProps extends CheckboxProps {\n  label?: string;\n  position?: 'left' | 'right';\n  color?: TextColor;\n  size?: TextSize;\n}\n\nexport const LabeledCheckbox = (props: LabeledCheckboxProps) => {\n  const { label, position = 'right', color, size, ...restProps } = props;\n\n  if (!label) {\n    return <Checkbox {...restProps} />;\n  }\n\n  return (\n    <Box flexDirection=\"row\" alignItems=\"center\">\n      {position === 'left' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n      <Spacing paddingHorizontal={1}>\n        <Checkbox {...restProps} />\n      </Spacing>\n      {position === 'right' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n    </Box>\n  );\n};\ntry {\n    // @ts-ignore\n    LabeledCheckbox.displayName = \"LabeledCheckbox\";\n    // @ts-ignore\n    LabeledCheckbox.__docgenInfo = { \"description\": \"\", \"displayName\": \"LabeledCheckbox\", \"props\": { \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"position\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"position\", \"required\": false, \"type\": { \"name\": \"\\\"left\\\" | \\\"right\\\"\" } }, \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"TextSize\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/LabeledCheckbox.tsx#LabeledCheckbox\"] = { docgenInfo: LabeledCheckbox.__docgenInfo, name: \"LabeledCheckbox\", path: \"src/components/Checkbox/LabeledCheckbox.tsx#LabeledCheckbox\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export {\n  LabeledCheckbox as Checkbox,\n  LabeledCheckboxProps as CheckboxProps,\n} from './LabeledCheckbox';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\ntry {\n    // @ts-ignore\n    getListItemVariables.displayName = \"getListItemVariables\";\n    // @ts-ignore\n    getListItemVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getListItemVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.styles.ts#getListItemVariables\"] = { docgenInfo: getListItemVariables.__docgenInfo, name: \"getListItemVariables\", path: \"src/components/ListItem/ListItem.styles.ts#getListItemVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\ntry {\n    // @ts-ignore\n    ListItem.displayName = \"ListItem\";\n    // @ts-ignore\n    ListItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListItem\", \"props\": { \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"description\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"description\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"avatarProps\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"avatarProps\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"leftIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"leftIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"rightIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"rightIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"onPress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onPress\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"link\\\" | \\\"search\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.tsx#ListItem\"] = { docgenInfo: ListItem.__docgenInfo, name: \"ListItem\", path: \"src/components/ListItem/ListItem.tsx#ListItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export * from './ListItem';\n","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\ntry {\n    // @ts-ignore\n    SelectList.displayName = \"SelectList\";\n    // @ts-ignore\n    SelectList.__docgenInfo = { \"description\": \"\", \"displayName\": \"SelectList\", \"props\": { \"selectedValue\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"selectedValue\", \"required\": true, \"type\": { \"name\": \"string | string[]\" } }, \"innerRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"innerRef\", \"required\": false, \"type\": { \"name\": \"Ref<FlatList<any>>\" } }, \"isMulti\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isMulti\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onValueChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onValueChange\", \"required\": true, \"type\": { \"name\": \"(itemValue: string | string[], itemIndex: number) => void\" } }, \"ItemSeparatorComponent\": { \"defaultValue\": null, \"description\": \"Rendered in between each item, but not at the top or bottom\", \"name\": \"ItemSeparatorComponent\", \"required\": false, \"type\": { \"name\": \"ComponentType<any>\" } }, \"ListEmptyComponent\": { \"defaultValue\": null, \"description\": \"Rendered when the list is empty.\", \"name\": \"ListEmptyComponent\", \"required\": false, \"type\": { \"name\": \"ComponentClass<any, any> | FunctionComponent<any> | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } }, \"ListFooterComponent\": { \"defaultValue\": null, \"description\": \"Rendered at the very end of the list.\", \"name\": \"ListFooterComponent\", \"required\": false, \"type\": { \"name\": \"ComponentClass<any, any> | FunctionComponent<any> | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } }, \"ListHeaderComponent\": { \"defaultValue\": null, \"description\": \"Rendered at the very beginning of the list.\", \"name\": \"ListHeaderComponent\", \"required\": false, \"type\": { \"name\": \"ComponentClass<any, any> | FunctionComponent<any> | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<...>)>\" } }, \"columnWrapperStyle\": { \"defaultValue\": null, \"description\": \"Optional custom style for multi-item rows generated when numColumns > 1\", \"name\": \"columnWrapperStyle\", \"required\": false, \"type\": { \"name\": \"StyleProp<ViewStyle>\" } }, \"keyboardShouldPersistTaps\": { \"defaultValue\": null, \"description\": \"When false tapping outside of the focused text input when the keyboard\\nis up dismisses the keyboard. When true the scroll view will not catch\\ntaps and the keyboard will not dismiss automatically. The default value\\nis false.\", \"name\": \"keyboardShouldPersistTaps\", \"required\": false, \"type\": { \"name\": \"boolean | \\\"always\\\" | \\\"never\\\" | \\\"handled\\\"\" } }, \"extraData\": { \"defaultValue\": null, \"description\": \"A marker property for telling the list to re-render (since it implements PureComponent).\\nIf any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the `data` prop,\\nstick it here and treat it immutably.\", \"name\": \"extraData\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"getItemLayout\": { \"defaultValue\": null, \"description\": \"`getItemLayout` is an optional optimization that lets us skip measurement of dynamic\\ncontent if you know the height of items a priori. getItemLayout is the most efficient,\\nand is easy to use if you have fixed height items, for example:\\n```\\n     * getItemLayout={(data, index) => (\\n     *   {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\\n     * )}\\n     * ```\\nRemember to include separator length (height or width) in your offset calculation if you specify\\n`ItemSeparatorComponent`.\", \"name\": \"getItemLayout\", \"required\": false, \"type\": { \"name\": \"(data: any[], index: number) => { length: number; offset: number; index: number; }\" } }, \"horizontal\": { \"defaultValue\": null, \"description\": \"If true, renders items next to each other horizontally instead of stacked vertically.\", \"name\": \"horizontal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"initialNumToRender\": { \"defaultValue\": null, \"description\": \"How many items to render in the initial batch\", \"name\": \"initialNumToRender\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"initialScrollIndex\": { \"defaultValue\": null, \"description\": \"Instead of starting at the top with the first item, start at initialScrollIndex\", \"name\": \"initialScrollIndex\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"keyExtractor\": { \"defaultValue\": null, \"description\": \"Used to extract a unique key for a given item at the specified index. Key is used for caching\\nand as the react key to track item re-ordering. The default extractor checks `item.key`, then\\nfalls back to using the index, like React does.\", \"name\": \"keyExtractor\", \"required\": false, \"type\": { \"name\": \"(item: any, index: number) => string\" } }, \"legacyImplementation\": { \"defaultValue\": null, \"description\": \"Uses legacy MetroListView instead of default VirtualizedSectionList\", \"name\": \"legacyImplementation\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"numColumns\": { \"defaultValue\": null, \"description\": \"Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a `flexWrap` layout.\\nItems should all be the same height - masonry layouts are not supported.\", \"name\": \"numColumns\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onEndReached\": { \"defaultValue\": null, \"description\": \"Called once when the scroll position gets within onEndReachedThreshold of the rendered content.\", \"name\": \"onEndReached\", \"required\": false, \"type\": { \"name\": \"(info: { distanceFromEnd: number; }) => void\" } }, \"onEndReachedThreshold\": { \"defaultValue\": null, \"description\": \"How far from the end (in units of visible length of the list) the bottom edge of the\\nlist must be from the end of the content to trigger the `onEndReached` callback.\\nThus a value of 0.5 will trigger `onEndReached` when the end of the content is\\nwithin half the visible length of the list.\", \"name\": \"onEndReachedThreshold\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onRefresh\": { \"defaultValue\": null, \"description\": \"If provided, a standard RefreshControl will be added for \\\"Pull to Refresh\\\" functionality.\\nMake sure to also set the refreshing prop correctly.\", \"name\": \"onRefresh\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onViewableItemsChanged\": { \"defaultValue\": null, \"description\": \"Called when the viewability of rows changes, as defined by the `viewablePercentThreshold` prop.\", \"name\": \"onViewableItemsChanged\", \"required\": false, \"type\": { \"name\": \"(info: { viewableItems: ViewToken[]; changed: ViewToken[]; }) => void\" } }, \"refreshing\": { \"defaultValue\": null, \"description\": \"Set this true while waiting for new data from a refresh.\", \"name\": \"refreshing\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"viewabilityConfig\": { \"defaultValue\": null, \"description\": \"See `ViewabilityHelper` for flow type and further documentation.\", \"name\": \"viewabilityConfig\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"removeClippedSubviews\": { \"defaultValue\": null, \"description\": \"Note: may have bugs (missing content) in some circumstances - use at your own risk.\\n\\nThis may improve scroll performance for large lists.\", \"name\": \"removeClippedSubviews\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"debug\": { \"defaultValue\": null, \"description\": \"`debug` will turn on extra logging and visual overlays to aid with debugging both usage and\\nimplementation, but with a significant perf hit.\", \"name\": \"debug\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disableVirtualization\": { \"defaultValue\": null, \"description\": \"DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\\nunmounts react instances that are outside of the render window. You should only need to disable\\nthis for debugging purposes.\", \"name\": \"disableVirtualization\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"getItem\": { \"defaultValue\": null, \"description\": \"A generic accessor for extracting an item from any sort of data blob.\", \"name\": \"getItem\", \"required\": false, \"type\": { \"name\": \"(data: any, index: number) => any\" } }, \"getItemCount\": { \"defaultValue\": null, \"description\": \"Determines how many items are in the data blob.\", \"name\": \"getItemCount\", \"required\": false, \"type\": { \"name\": \"(data: any) => number\" } }, \"inverted\": { \"defaultValue\": null, \"description\": \"Reverses the direction of scroll. Uses scale transforms of -1.\", \"name\": \"inverted\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"listKey\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"listKey\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"maxToRenderPerBatch\": { \"defaultValue\": null, \"description\": \"The maximum number of items to render in each incremental render batch. The more rendered at\\nonce, the better the fill rate, but responsiveness my suffer because rendering content may\\ninterfere with responding to button taps or other interactions.\", \"name\": \"maxToRenderPerBatch\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onLayout\": { \"defaultValue\": null, \"description\": \"Invoked on mount and layout changes with\\n\\n{nativeEvent: { layout: {x, y, width, height}}}.\", \"name\": \"onLayout\", \"required\": false, \"type\": { \"name\": \"(event: LayoutChangeEvent) => void\" } }, \"onScrollToIndexFailed\": { \"defaultValue\": null, \"description\": \"Used to handle failures when scrolling to an index that has not been measured yet.\\nRecommended action is to either compute your own offset and `scrollTo` it, or scroll as far\\nas possible and then try again after more items have been rendered.\", \"name\": \"onScrollToIndexFailed\", \"required\": false, \"type\": { \"name\": \"(info: { index: number; highestMeasuredFrameIndex: number; averageItemLength: number; }) => void\" } }, \"progressViewOffset\": { \"defaultValue\": null, \"description\": \"Set this when offset is needed for the loading indicator to show correctly.\\n@platform android\", \"name\": \"progressViewOffset\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"renderScrollComponent\": { \"defaultValue\": null, \"description\": \"Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\", \"name\": \"renderScrollComponent\", \"required\": false, \"type\": { \"name\": \"(props: ScrollViewProps) => ReactElement<ScrollViewProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>\" } }, \"updateCellsBatchingPeriod\": { \"defaultValue\": null, \"description\": \"Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\\nscreen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\", \"name\": \"updateCellsBatchingPeriod\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"viewabilityConfigCallbackPairs\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"viewabilityConfigCallbackPairs\", \"required\": false, \"type\": { \"name\": \"ViewabilityConfigCallbackPair[]\" } }, \"windowSize\": { \"defaultValue\": null, \"description\": \"Determines the maximum number of items rendered outside of the visible area, in units of\\nvisible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\\nrender the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\\nthis number will reduce memory consumption and may improve performance, but will increase the\\nchance that fast scrolling may reveal momentary blank areas of unrendered content.\", \"name\": \"windowSize\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"contentContainerStyle\": { \"defaultValue\": null, \"description\": \"These styles will be applied to the scroll view content container which\\nwraps all of the child views. Example:\\n\\n   return (\\n     <ScrollView contentContainerStyle={styles.contentContainer}>\\n     </ScrollView>\\n   );\\n   ...\\n   const styles = StyleSheet.create({\\n     contentContainer: {\\n       paddingVertical: 20\\n     }\\n   });\", \"name\": \"contentContainerStyle\", \"required\": false, \"type\": { \"name\": \"StyleProp<ViewStyle>\" } }, \"invertStickyHeaders\": { \"defaultValue\": null, \"description\": \"If sticky headers should stick at the bottom instead of the top of the\\nScrollView. This is usually used with inverted ScrollViews.\", \"name\": \"invertStickyHeaders\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"keyboardDismissMode\": { \"defaultValue\": null, \"description\": \"Determines whether the keyboard gets dismissed in response to a drag.\\n   - 'none' (the default) drags do not dismiss the keyboard.\\n   - 'onDrag' the keyboard is dismissed when a drag begins.\\n   - 'interactive' the keyboard is dismissed interactively with the drag\\n     and moves in synchrony with the touch; dragging upwards cancels the\\n     dismissal.\", \"name\": \"keyboardDismissMode\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"interactive\\\" | \\\"on-drag\\\"\" } }, \"onContentSizeChange\": { \"defaultValue\": null, \"description\": \"Called when scrollable content view of the ScrollView changes.\\nHandler function is passed the content width and content height as parameters: (contentWidth, contentHeight)\\nIt's implemented using onLayout handler attached to the content container which this ScrollView renders.\", \"name\": \"onContentSizeChange\", \"required\": false, \"type\": { \"name\": \"(w: number, h: number) => void\" } }, \"onScroll\": { \"defaultValue\": null, \"description\": \"Fires at most once per frame during scrolling.\\nThe frequency of the events can be contolled using the scrollEventThrottle prop.\", \"name\": \"onScroll\", \"required\": false, \"type\": { \"name\": \"(event: NativeSyntheticEvent<NativeScrollEvent>) => void\" } }, \"onScrollBeginDrag\": { \"defaultValue\": null, \"description\": \"Fires if a user initiates a scroll gesture.\", \"name\": \"onScrollBeginDrag\", \"required\": false, \"type\": { \"name\": \"(event: NativeSyntheticEvent<NativeScrollEvent>) => void\" } }, \"onScrollEndDrag\": { \"defaultValue\": null, \"description\": \"Fires when a user has finished scrolling.\", \"name\": \"onScrollEndDrag\", \"required\": false, \"type\": { \"name\": \"(event: NativeSyntheticEvent<NativeScrollEvent>) => void\" } }, \"onMomentumScrollEnd\": { \"defaultValue\": null, \"description\": \"Fires when scroll view has finished moving\", \"name\": \"onMomentumScrollEnd\", \"required\": false, \"type\": { \"name\": \"(event: NativeSyntheticEvent<NativeScrollEvent>) => void\" } }, \"onMomentumScrollBegin\": { \"defaultValue\": null, \"description\": \"Fires when scroll view has begun moving\", \"name\": \"onMomentumScrollBegin\", \"required\": false, \"type\": { \"name\": \"(event: NativeSyntheticEvent<NativeScrollEvent>) => void\" } }, \"pagingEnabled\": { \"defaultValue\": null, \"description\": \"When true the scroll view stops on multiples of the scroll view's size\\nwhen scrolling. This can be used for horizontal pagination. The default\\nvalue is false.\", \"name\": \"pagingEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"scrollEnabled\": { \"defaultValue\": null, \"description\": \"When false, the content does not scroll. The default value is true\", \"name\": \"scrollEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"showsHorizontalScrollIndicator\": { \"defaultValue\": null, \"description\": \"When true, shows a horizontal scroll indicator.\", \"name\": \"showsHorizontalScrollIndicator\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"showsVerticalScrollIndicator\": { \"defaultValue\": null, \"description\": \"When true, shows a vertical scroll indicator.\", \"name\": \"showsVerticalScrollIndicator\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"style\": { \"defaultValue\": null, \"description\": \"Style\", \"name\": \"style\", \"required\": false, \"type\": { \"name\": \"StyleProp<ViewStyle>\" } }, \"refreshControl\": { \"defaultValue\": null, \"description\": \"A RefreshControl component, used to provide pull-to-refresh\\nfunctionality for the ScrollView.\", \"name\": \"refreshControl\", \"required\": false, \"type\": { \"name\": \"ReactElement<RefreshControlProps, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)>) | (new (props: any) => Component<any, any, any>)>\" } }, \"snapToAlignment\": { \"defaultValue\": null, \"description\": \"When `snapToInterval` is set, `snapToAlignment` will define the relationship of the the snapping to the scroll view.\\n      - `start` (the default) will align the snap at the left (horizontal) or top (vertical)\\n      - `center` will align the snap in the center\\n      - `end` will align the snap at the right (horizontal) or bottom (vertical)\", \"name\": \"snapToAlignment\", \"required\": false, \"type\": { \"name\": \"\\\"start\\\" | \\\"center\\\" | \\\"end\\\"\" } }, \"snapToInterval\": { \"defaultValue\": null, \"description\": \"When set, causes the scroll view to stop at multiples of the value of `snapToInterval`.\\nThis can be used for paginating through children that have lengths smaller than the scroll view.\\nUsed in combination with `snapToAlignment` and `decelerationRate=\\\"fast\\\"`. Overrides less\\nconfigurable `pagingEnabled` prop.\", \"name\": \"snapToInterval\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"snapToOffsets\": { \"defaultValue\": null, \"description\": \"When set, causes the scroll view to stop at the defined offsets. This can be used for\\npaginating through variously sized children that have lengths smaller than the scroll view.\\nTypically used in combination with `decelerationRate=\\\"fast\\\"`. Overrides less configurable\\n`pagingEnabled` and `snapToInterval` props.\", \"name\": \"snapToOffsets\", \"required\": false, \"type\": { \"name\": \"number[]\" } }, \"snapToStart\": { \"defaultValue\": null, \"description\": \"Use in conjuction with `snapToOffsets`. By default, the beginning of the list counts as a\\nsnap offset. Set `snapToStart` to false to disable this behavior and allow the list to scroll\\nfreely between its start and the first `snapToOffsets` offset. The default value is true.\", \"name\": \"snapToStart\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"snapToEnd\": { \"defaultValue\": null, \"description\": \"Use in conjuction with `snapToOffsets`. By default, the end of the list counts as a snap\\noffset. Set `snapToEnd` to false to disable this behavior and allow the list to scroll freely\\nbetween its end and the last `snapToOffsets` offset. The default value is true.\", \"name\": \"snapToEnd\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"hitSlop\": { \"defaultValue\": null, \"description\": \"This defines how far a touch event can start away from the view.\\nTypical interface guidelines recommend touch targets that are at least\\n30 - 40 points/density-independent pixels. If a Touchable view has\\na height of 20 the touchable height can be extended to 40 with\\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\\nNOTE The touch area never extends past the parent view bounds and\\nthe Z-index of sibling views always takes precedence if a touch\\nhits two overlapping views.\", \"name\": \"hitSlop\", \"required\": false, \"type\": { \"name\": \"Insets\" } }, \"pointerEvents\": { \"defaultValue\": null, \"description\": \"In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\\n\\n.box-none {\\n   pointer-events: none;\\n}\\n.box-none * {\\n   pointer-events: all;\\n}\\n\\nbox-only is the equivalent of\\n\\n.box-only {\\n   pointer-events: all;\\n}\\n.box-only * {\\n   pointer-events: none;\\n}\\n\\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\", \"name\": \"pointerEvents\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"box-none\\\" | \\\"box-only\\\" | \\\"auto\\\"\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"Used to locate this view in end-to-end tests.\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"nativeID\": { \"defaultValue\": null, \"description\": \"Used to reference react managed views from native code.\", \"name\": \"nativeID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"collapsable\": { \"defaultValue\": null, \"description\": \"Views that are only used to layout their children or otherwise don't draw anything\\nmay be automatically removed from the native hierarchy as an optimization.\\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.\", \"name\": \"collapsable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"needsOffscreenAlphaCompositing\": { \"defaultValue\": null, \"description\": \"Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\\nThe default (false) falls back to drawing the component and its children\\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\\n\\nRendering offscreen to preserve correct alpha behavior is extremely expensive\\nand hard to debug for non-native developers, which is why it is not turned on by default.\\nIf you do need to enable this property for an animation,\\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\\nIf that property is enabled, this View will be rendered off-screen once,\\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\", \"name\": \"needsOffscreenAlphaCompositing\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"renderToHardwareTextureAndroid\": { \"defaultValue\": null, \"description\": \"Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\\n\\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\", \"name\": \"renderToHardwareTextureAndroid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityViewIsModal\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\\n@platform ios\", \"name\": \"accessibilityViewIsModal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityActions\": { \"defaultValue\": null, \"description\": \"Provides an array of custom actions available for accessibility.\\n@platform ios\", \"name\": \"accessibilityActions\", \"required\": false, \"type\": { \"name\": \"string[]\" } }, \"onAccessibilityAction\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function\\nwhen the user performs an accessibility custom action.\\n@platform ios\", \"name\": \"onAccessibilityAction\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldRasterizeIOS\": { \"defaultValue\": null, \"description\": \"Whether this view should be rendered as a bitmap before compositing.\\n\\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\\nand quickly composite it during each frame.\\n\\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\\nTest and measure when using this property.\", \"name\": \"shouldRasterizeIOS\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"isTVSelectable\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* When set to true, this view will be focusable\\nand navigable using the Apple TV remote.\\n@platform ios\", \"name\": \"isTVSelectable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"hasTVPreferredFocus\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\\n@platform ios\", \"name\": \"hasTVPreferredFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"tvParallaxProperties\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* Object with properties to control Apple TV parallax effects.\\n@platform ios\", \"name\": \"tvParallaxProperties\", \"required\": false, \"type\": { \"name\": \"TVParallaxProperties\" } }, \"tvParallaxShiftDistanceX\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\\n@platform ios\", \"name\": \"tvParallaxShiftDistanceX\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"tvParallaxShiftDistanceY\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\\n@platform ios\", \"name\": \"tvParallaxShiftDistanceY\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"tvParallaxTiltAngle\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\\n@platform ios\", \"name\": \"tvParallaxTiltAngle\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"tvParallaxMagnification\": { \"defaultValue\": null, \"description\": \"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\\n@platform ios\", \"name\": \"tvParallaxMagnification\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onStartShouldSetResponder\": { \"defaultValue\": null, \"description\": \"A view can become the touch responder by implementing the correct negotiation methods.\\nThere are two methods to ask the view if it wants to become responder:\\nDoes this view want to become responder on the start of a touch?\", \"name\": \"onStartShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponder\": { \"defaultValue\": null, \"description\": \"Called for every touch move on the View when it is not the responder: does this view want to \\\"claim\\\" touch responsiveness?\", \"name\": \"onMoveShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderEnd\": { \"defaultValue\": null, \"description\": \"If the View returns true and attempts to become the responder, one of the following will happen:\", \"name\": \"onResponderEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderGrant\": { \"defaultValue\": null, \"description\": \"The View is now responding for touch events.\\nThis is the time to highlight and show the user what is happening\", \"name\": \"onResponderGrant\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderReject\": { \"defaultValue\": null, \"description\": \"Something else is the responder right now and will not release it\", \"name\": \"onResponderReject\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderMove\": { \"defaultValue\": null, \"description\": \"If the view is responding, the following handlers can be called:\\nThe user is moving their finger\", \"name\": \"onResponderMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderRelease\": { \"defaultValue\": null, \"description\": \"Fired at the end of the touch, ie \\\"touchUp\\\"\", \"name\": \"onResponderRelease\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onResponderStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderTerminationRequest\": { \"defaultValue\": null, \"description\": \"Something else wants to become responder.\\nShould this view release the responder? Returning true allows release\", \"name\": \"onResponderTerminationRequest\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderTerminate\": { \"defaultValue\": null, \"description\": \"The responder has been taken from the View.\\nMight be taken by other views after a call to onResponderTerminationRequest,\\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)\", \"name\": \"onResponderTerminate\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onStartShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onStartShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onMoveShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onTouchStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchMove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEnd\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchCancel\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchCancel\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEndCapture\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEndCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"link\\\" | \\\"search\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"alwaysBounceHorizontal\": { \"defaultValue\": null, \"description\": \"When true the scroll view bounces horizontally when it reaches the end\\neven if the content is smaller than the scroll view itself. The default\\nvalue is true when `horizontal={true}` and false otherwise.\", \"name\": \"alwaysBounceHorizontal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"alwaysBounceVertical\": { \"defaultValue\": null, \"description\": \"When true the scroll view bounces vertically when it reaches the end\\neven if the content is smaller than the scroll view itself. The default\\nvalue is false when `horizontal={true}` and true otherwise.\", \"name\": \"alwaysBounceVertical\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"automaticallyAdjustContentInsets\": { \"defaultValue\": null, \"description\": \"Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar.\\nThe default value is true.\", \"name\": \"automaticallyAdjustContentInsets\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"bounces\": { \"defaultValue\": null, \"description\": \"When true the scroll view bounces when it reaches the end of the\\ncontent if the content is larger then the scroll view along the axis of\\nthe scroll direction. When false it disables all bouncing even if\\nthe `alwaysBounce*` props are true. The default value is true.\", \"name\": \"bounces\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"bouncesZoom\": { \"defaultValue\": null, \"description\": \"When true gestures can drive zoom past min/max and the zoom will animate\\nto the min/max value at gesture end otherwise the zoom will not exceed\\nthe limits.\", \"name\": \"bouncesZoom\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"canCancelContentTouches\": { \"defaultValue\": null, \"description\": \"When false once tracking starts won't try to drag if the touch moves.\\nThe default value is true.\", \"name\": \"canCancelContentTouches\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"centerContent\": { \"defaultValue\": null, \"description\": \"When true the scroll view automatically centers the content when the\\ncontent is smaller than the scroll view bounds; when the content is\\nlarger than the scroll view this property has no effect. The default\\nvalue is false.\", \"name\": \"centerContent\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"contentInset\": { \"defaultValue\": null, \"description\": \"The amount by which the scroll view content is inset from the edges of the scroll view.\\nDefaults to {0, 0, 0, 0}.\", \"name\": \"contentInset\", \"required\": false, \"type\": { \"name\": \"Insets\" } }, \"contentOffset\": { \"defaultValue\": null, \"description\": \"Used to manually set the starting scroll offset.\\nThe default value is {x: 0, y: 0}\", \"name\": \"contentOffset\", \"required\": false, \"type\": { \"name\": \"PointPropType\" } }, \"contentInsetAdjustmentBehavior\": { \"defaultValue\": null, \"description\": \"This property specifies how the safe area insets are used to modify the content area of the scroll view.\\nThe default value of this property must be 'automatic'. But the default value is 'never' until RN@0.51.\", \"name\": \"contentInsetAdjustmentBehavior\", \"required\": false, \"type\": { \"name\": \"\\\"always\\\" | \\\"never\\\" | \\\"automatic\\\" | \\\"scrollableAxes\\\"\" } }, \"decelerationRate\": { \"defaultValue\": null, \"description\": \"A floating-point number that determines how quickly the scroll view\\ndecelerates after the user lifts their finger. Reasonable choices include\\n   - Normal: 0.998 (the default)\\n   - Fast: 0.9\", \"name\": \"decelerationRate\", \"required\": false, \"type\": { \"name\": \"number | \\\"fast\\\" | \\\"normal\\\"\" } }, \"directionalLockEnabled\": { \"defaultValue\": null, \"description\": \"When true the ScrollView will try to lock to only vertical or horizontal\\nscrolling while dragging.  The default value is false.\", \"name\": \"directionalLockEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"indicatorStyle\": { \"defaultValue\": null, \"description\": \"The style of the scroll indicators.\\n- default (the default), same as black.\\n- black, scroll indicator is black. This style is good against\\n   a white content background.\\n- white, scroll indicator is white. This style is good against\\n   a black content background.\", \"name\": \"indicatorStyle\", \"required\": false, \"type\": { \"name\": \"\\\"default\\\" | \\\"black\\\" | \\\"white\\\"\" } }, \"maximumZoomScale\": { \"defaultValue\": null, \"description\": \"The maximum allowed zoom scale. The default value is 1.0.\", \"name\": \"maximumZoomScale\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"minimumZoomScale\": { \"defaultValue\": null, \"description\": \"The minimum allowed zoom scale. The default value is 1.0.\", \"name\": \"minimumZoomScale\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"onScrollAnimationEnd\": { \"defaultValue\": null, \"description\": \"Called when a scrolling animation ends.\", \"name\": \"onScrollAnimationEnd\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"pinchGestureEnabled\": { \"defaultValue\": null, \"description\": \"When true, ScrollView allows use of pinch gestures to zoom in and out.\\nThe default value is true.\", \"name\": \"pinchGestureEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"scrollEventThrottle\": { \"defaultValue\": null, \"description\": \"This controls how often the scroll event will be fired while scrolling (in events per seconds).\\nA higher number yields better accuracy for code that is tracking the scroll position,\\nbut can lead to scroll performance problems due to the volume of information being send over the bridge.\\nThe default value is zero, which means the scroll event will be sent only once each time the view is scrolled.\", \"name\": \"scrollEventThrottle\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"scrollIndicatorInsets\": { \"defaultValue\": null, \"description\": \"The amount by which the scroll view indicators are inset from the edges of the scroll view.\\nThis should normally be set to the same value as the contentInset.\\nDefaults to {0, 0, 0, 0}.\", \"name\": \"scrollIndicatorInsets\", \"required\": false, \"type\": { \"name\": \"Insets\" } }, \"scrollsToTop\": { \"defaultValue\": null, \"description\": \"When true the scroll view scrolls to top when the status bar is tapped.\\nThe default value is true.\", \"name\": \"scrollsToTop\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"stickyHeaderIndices\": { \"defaultValue\": null, \"description\": \"An array of child indices determining which children get docked to the\\ntop of the screen when scrolling. For example passing\\n`stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\\ntop of the scroll view. This property is not supported in conjunction\\nwith `horizontal={true}`.\", \"name\": \"stickyHeaderIndices\", \"required\": false, \"type\": { \"name\": \"number[]\" } }, \"zoomScale\": { \"defaultValue\": null, \"description\": \"The current scale of the scroll view content. The default value is 1.0.\", \"name\": \"zoomScale\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"endFillColor\": { \"defaultValue\": null, \"description\": \"Sometimes a scrollview takes up more space than its content fills.\\nWhen this is the case, this prop will fill the rest of the\\nscrollview with a color to avoid setting a background and creating\\nunnecessary overdraw. This is an advanced optimization that is not\\nneeded in the general case.\", \"name\": \"endFillColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"scrollPerfTag\": { \"defaultValue\": null, \"description\": \"Tag used to log scroll performance on this scroll view. Will force\\nmomentum events to be turned on (see sendMomentumEvents). This doesn't do\\nanything out of the box and you need to implement a custom native\\nFpsListener for it to be useful.\\n@platform android\", \"name\": \"scrollPerfTag\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"overScrollMode\": { \"defaultValue\": null, \"description\": \"Used to override default value of overScroll mode.\\n\\n   Possible values:\\n     - 'auto' - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll.\\n     - 'always' - Always allow a user to over-scroll this view.\\n     - 'never' - Never allow a user to over-scroll this view.\", \"name\": \"overScrollMode\", \"required\": false, \"type\": { \"name\": \"\\\"always\\\" | \\\"never\\\" | \\\"auto\\\"\" } }, \"nestedScrollEnabled\": { \"defaultValue\": null, \"description\": \"Enables nested scrolling for Android API level 21+. Nested scrolling is supported by default on iOS.\", \"name\": \"nestedScrollEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<FlatList<any>>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/SelectList/SelectList.tsx#SelectList\"] = { docgenInfo: SelectList.__docgenInfo, name: \"SelectList\", path: \"src/components/SelectList/SelectList.tsx#SelectList\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\ntry {\n    // @ts-ignore\n    SelectListItem.displayName = \"SelectListItem\";\n    // @ts-ignore\n    SelectListItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"SelectListItem\", \"props\": { \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"index\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"index\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"isSelected\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSelected\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(value: string, index: number, isSelected: boolean) => void\" } }, \"value\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"value\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/SelectList/SelectListItem.tsx#SelectListItem\"] = { docgenInfo: SelectListItem.__docgenInfo, name: \"SelectListItem\", path: \"src/components/SelectList/SelectListItem.tsx#SelectListItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\ntry {\n    // @ts-ignore\n    Iconweb.displayName = \"Iconweb\";\n    // @ts-ignore\n    Iconweb.__docgenInfo = { \"description\": \"\", \"displayName\": \"Iconweb\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/icons/Icon.web.tsx#Iconweb\"] = { docgenInfo: Iconweb.__docgenInfo, name: \"Iconweb\", path: \"src/icons/Icon.web.tsx#Iconweb\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { default as Icon } from './Icon';\n"],"sourceRoot":""}