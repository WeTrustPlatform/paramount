{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Modal/Modal.mdx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","_Button","_Box","_Typography","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Toggle","Props","Modal","Button","Box","Text","initial","_ref2","on","set","toggle","visible","animationType","onRequestClose","height","onPress","title","_ref3","outerOn","outerSet","_ref4","innerOn","innerSet","_ref5","useHistory","_ref6","of","isMDXComponent"],"mappings":"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","file":"static/js/35.35c28704.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Modal } from '.';\nimport { Button } from '../Button';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`Modal covers the full screen. For a prompt/small version of modal, use `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle, set }) => (\\n    <Box>\\n      <Modal\\n        visible={on}\\n        animationType=\\\"slide\\\"\\n        onRequestClose={() => set(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Put any content in the modal</Text>\\n          <Button onPress={() => set(false)} title=\\\"Close button one\\\" />\\n          <Button onPress={() => set(false)} title=\\\"Close button two\\\" />\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => set(true)} title=\\\"Open modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle,\n          set\n        }) => <Box mdxType=\"Box\">\n        <Modal visible={on} animationType=\"slide\" onRequestClose={() => set(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Put any content in the modal</Text>\n            <Button onPress={() => set(false)} title=\"Close button one\" mdxType=\"Button\" />\n            <Button onPress={() => set(false)} title=\"Close button two\" mdxType=\"Button\" />\n          </Box>\n        </Modal>\n        <Button onPress={() => set(true)} title=\"Open modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"nested\"\n    }}>{`Nested`}</h3>\n    <Playground __position={1} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal\\n        visible={outerOn}\\n        animationType=\\\"fade\\\"\\n        onRequestClose={() => outerSet(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  animationType=\\\"slide\\\"\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on: outerOn,\n          set: outerSet\n        }) => <Box mdxType=\"Box\">\n        <Modal visible={outerOn} animationType=\"fade\" onRequestClose={() => outerSet(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Outer modal</Text>\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button one\" mdxType=\"Button\" />\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button two\" mdxType=\"Button\" />\n            <Toggle initial={false} mdxType=\"Toggle\">\n              {({\n                  on: innerOn,\n                  set: innerSet\n                }) => <Box mdxType=\"Box\">\n                  <Modal visible={innerOn} animationType=\"slide\" onRequestClose={() => innerSet(false)} mdxType=\"Modal\">\n                    <Box height={1800} mdxType=\"Box\">\n                      <Text mdxType=\"Text\">Inner modal</Text>\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button one\" mdxType=\"Button\" />\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button two\" mdxType=\"Button\" />\n                    </Box>\n                  </Modal>\n                  <Button onPress={() => innerSet(true)} title=\"Open inner modal\" mdxType=\"Button\" />\n                </Box>}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"using-browser-history\"\n    }}>{`Using browser history`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`useHistory`}</inlineCode>{` prop it will mimic Android's back button behavior on web which closes modals. On RN, this will have no effect and will use a regular `}<inlineCode parentName=\"p\">{`Modal`}</inlineCode>{`. Works in nested modals as well.`}</p>\n    <p>{`Note: Uses history `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` to manipulate modal state`}</p>\n    <Playground __position={2} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal\\n        useHistory\\n        visible={outerOn}\\n        onRequestClose={() => outerSet(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  useHistory\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on: outerOn,\n          set: outerSet\n        }) => <Box mdxType=\"Box\">\n        <Modal useHistory visible={outerOn} onRequestClose={() => outerSet(false)} mdxType=\"Modal\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Outer modal</Text>\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button one\" mdxType=\"Button\" />\n            <Button onPress={() => outerSet(false)} title=\"Close outer modal button two\" mdxType=\"Button\" />\n            <Toggle initial={false} mdxType=\"Toggle\">\n              {({\n                  on: innerOn,\n                  set: innerSet\n                }) => <Box mdxType=\"Box\">\n                  <Modal visible={innerOn} useHistory onRequestClose={() => innerSet(false)} mdxType=\"Modal\">\n                    <Box height={1800} mdxType=\"Box\">\n                      <Text mdxType=\"Text\">Inner modal</Text>\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button one\" mdxType=\"Button\" />\n                      <Button onPress={() => innerSet(false)} title=\"Close inner modal button two\" mdxType=\"Button\" />\n                    </Box>\n                  </Modal>\n                  <Button onPress={() => innerSet(true)} title=\"Open inner modal\" mdxType=\"Button\" />\n                </Box>}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Modal} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}