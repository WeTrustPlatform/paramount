{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_react2","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Box","Button","Drawer","Text","Toggle","_ref2","on","toggle","Fragment","onPress","isInline","title","space","undefined","offset","position","isVisible","onClose","getStyles","theme","modalContainerStyle","containerStyle","padding","elevation","backgroundColor","borderRadius","color","map","option","key","appearance","paddingTop","_ref3","width","height","_ref4","_ref5","_ref6","isMDXComponent"],"mappings":"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","file":"static/js/16.ee2ef618.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, Drawer, Text, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"drawer\"\n    }}>{`Drawer`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} isInline title=\\\"Open drawer menu\\\" />\\n      <Drawer\\n        space={undefined} // px or %, null fits the content\\n        offset={0}\\n        position=\\\"bottom\\\"\\n        isVisible={on}\\n        onClose={toggle}\\n        getStyles={(props, theme) => ({\\n          modalContainerStyle: {},\\n          containerStyle: {},\\n        })}\\n      >\\n        <Box padding={24}>\\n          <Box elevation={1} backgroundColor=\\\"white\\\" borderRadius={4}>\\n            {[\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 1\\',\\n                color: \\'danger\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 2\\',\\n                color: \\'primary\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 3\\',\\n                color: \\'secondary\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 4\\',\\n              },\\n            ].map(option => (\\n              <Button key={option.title} appearance=\\\"minimal\\\" {...option} />\\n            ))}\\n          </Box>\\n          <Box paddingTop={24}>\\n            <Button onPress={toggle} title=\\\"Close\\\" />\\n          </Box>\\n        </Box>\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      Drawer,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <>\n        <Button onPress={toggle} isInline title=\"Open drawer menu\" mdxType=\"Button\" />\n        <Drawer space={undefined} // px or %, null fits the content\n          offset={0} position=\"bottom\" isVisible={on} onClose={toggle} getStyles={(props, theme) => ({\n            modalContainerStyle: {},\n            containerStyle: {}\n          })} mdxType=\"Drawer\">\n          <Box padding={24} mdxType=\"Box\">\n            <Box elevation={1} backgroundColor=\"white\" borderRadius={4} mdxType=\"Box\">\n              {[{\n                  onPress: toggle,\n                  title: 'Menu Option 1',\n                  color: 'danger'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 2',\n                  color: 'primary'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 3',\n                  color: 'secondary'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 4'\n                }].map(option => <Button key={option.title} appearance=\"minimal\" {...option} mdxType=\"Button\" />)}\n            </Box>\n            <Box paddingTop={24} mdxType=\"Box\">\n              <Button onPress={toggle} title=\"Close\" mdxType=\"Button\" />\n            </Box>\n          </Box>\n        </Drawer>\n      </>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open bottom drawer\\\" />\\n      <Drawer space=\\\"30%\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open top drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"top\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open left drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"left\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open right drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"right\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      Drawer,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <>\n        <Button onPress={toggle} title=\"Open bottom drawer\" mdxType=\"Button\" />\n        <Drawer space=\"30%\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n          <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n        </Drawer>\n      </>}\n  </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open top drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"top\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open left drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"left\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open right drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"right\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}