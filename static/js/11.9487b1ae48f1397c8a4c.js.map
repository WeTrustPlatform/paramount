{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/LabeledCheckbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts"],"names":["getCheckboxVariables","theme","base","backgroundColor","colors","background","content","borderColor","border","borderWidth","height","width","checked","primaryDefault","checkedFocus","primaryDark","disabled","greyDark","shape","circle","borderRadius","square","controlBorderRadius","small","uncheckedFocus","greyLight","getCheckboxStyles","_ref","isChecked","isDisabled","checkboxVariables","checkboxFocusBackgroundColor","checkboxStyle","_objectSpread2","React","_interopRequireWildcard","__webpack_require__","_reactNative","_icons","_theme","_mergeStyles2","_Checkbox","Checkbox","props","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","checkedIcon","_props$onChange","onChange","_props$shape","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","onPress","View","alignItems","display","justifyContent","Icon","name","size","color","text","white","_Layout","_Typography","LabeledCheckbox","label","_props$position","position","restProps","Box","flexDirection","Text","paddingHorizontal","_LabeledCheckbox","getListItemVariables","borderBottomWidth","focusBackgroundColor","selected","sizes","fontSize","textSizes","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","sizeStyles","containerStyle","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","_ListItem","ListItem","description","_props$size","_props$rightIcon","rightIcon","leftIcon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_react2","_interopRequireDefault","_countriesList","_docz","_SelectList","_SelectListItem","_reactPowerplug","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","Playground","__position","__code","__scope","this","countryList","Props","SelectList","SelectListItem","State","isMulti","selectedValue","onValueChange","newValue","itemIndex","console","log","value","initial","_ref2","state","setState","_ref3","map","countryCode","data","_ref4","of","isMDXComponent","SelectListBase","children","innerRef","flatListProps","handleOnPress","itemValue","Array","isArray","filter","val","concat","childrenArray","Children","toArray","child","FlatList","ref","keyExtractor","item","getItemLayout","_","index","length","offset","renderItem","selectListItem","some","selVal","cloneElement","onSelect","forwardRef","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault","Feather","IconTag","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon"],"mappings":"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","file":"static/js/11.1dca6066.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport const getCheckboxVariables = (theme: Theme): CheckboxVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: 32,\n      width: 32,\n    },\n    checked: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderColor: 'transparent',\n    },\n    checkedFocus: {\n      backgroundColor: theme.colors.background.primaryDark,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderColor: theme.colors.border.default,\n    },\n    shape: {\n      circle: {\n        borderRadius: 999,\n      },\n      square: {\n        borderRadius: theme.controlBorderRadius.small,\n      },\n    },\n    uncheckedFocus: {\n      backgroundColor: theme.colors.background.greyLight,\n    },\n  };\n};\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n}\n\nexport interface CheckboxStyles {\n  checkboxStyle: ViewStyle;\n  checkboxFocusBackgroundColor?: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape },\n  theme,\n) => {\n  const checkboxVariables = getCheckboxVariables(theme);\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? checkboxVariables.checkedFocus.backgroundColor\n      : checkboxVariables.uncheckedFocus.backgroundColor,\n    checkboxStyle: {\n      ...checkboxVariables.base,\n      ...(isChecked ? checkboxVariables.checked : {}),\n      ...(isDisabled ? checkboxVariables.disabled : {}),\n      ...checkboxVariables.shape[shape],\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  checkedIcon?: React.ReactNode;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    checkedIcon,\n    onChange = () => null,\n    shape = 'square',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { checkboxStyle, checkboxFocusBackgroundColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n  )({ isChecked, isDisabled, shape }, theme);\n\n  return (\n    <TouchableHighlight\n      accessible\n      style={checkboxStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {isChecked\n          ? checkedIcon || (\n              <Icon name=\"check\" size={20} color={theme.colors.text.white} />\n            )\n          : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","import * as React from 'react';\n\nimport { TextColor, TextSize } from '../../theme/ThemeInterface';\nimport { Checkbox, CheckboxProps } from '../Checkbox/Checkbox';\nimport { Box } from '../Layout';\nimport { Text } from '../Typography';\n\nexport interface LabeledCheckboxProps extends CheckboxProps {\n  label?: string;\n  position?: 'left' | 'right';\n  color?: TextColor;\n  size?: TextSize;\n}\n\nexport const LabeledCheckbox = (props: LabeledCheckboxProps) => {\n  const { label, position = 'right', color, size, ...restProps } = props;\n\n  if (!label) {\n    return <Checkbox {...restProps} />;\n  }\n\n  return (\n    <Box flexDirection=\"row\" alignItems=\"center\">\n      {position === 'left' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n      <Box paddingHorizontal={8}>\n        <Checkbox {...restProps} />\n      </Box>\n      {position === 'right' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n    </Box>\n  );\n};\n","export {\n  LabeledCheckbox as Checkbox,\n  LabeledCheckboxProps as CheckboxProps,\n} from './LabeledCheckbox';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { countries as countryList } from 'countries-list';\nimport { Playground, Props } from 'docz';\nimport { Box } from '../Layout';\nimport { SelectList } from './SelectList';\nimport { SelectListItem } from './SelectListItem';\nimport { State } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item. `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` is a compound component, which means that its children can be any component, and it will implicitly inject props such as `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` to them.\n`}<inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<SelectList\\n  isMulti={false}\\n  selectedValue=\\\"c\\\"\\n  onValueChange={(newValue, itemIndex) => {\\n    console.log(newValue, itemIndex)\\n  }}\\n>\\n  <SelectListItem\\n    label=\\\"Usage\\\"\\n    value=\\\"c\\\"\\n    // Props below are passed from `SelectList`, so it is not necessary to pass them here\\n    // isSelected\\n    // onSelect\\n    // index\\n  />\\n</SelectList>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <SelectList isMulti={false} selectedValue=\"c\" onValueChange={(newValue, itemIndex) => {\n        console.log(newValue, itemIndex);\n      }} mdxType=\"SelectList\">\n    <SelectListItem label=\"Usage\" value=\"c\" // Props below are passed from `SelectList`, so it is not necessary to pass them here\n        // isSelected\n        // onSelect\n        // index\n        mdxType=\"SelectListItem\" />\n  </SelectList>\n    </Playground>\n    <h3 {...{\n      \"id\": \"multi-select\"\n    }}>{`Multi select`}</h3>\n    <Playground __position={1} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      isMulti\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"large-selectlist\"\n    }}>{`Large SelectList`}</h3>\n    <p><inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-native`}</inlineCode></p>\n    <Playground __position={2} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={400}>\\n      <SelectList\\n        isMulti\\n        selectedValue={state.selectedValue}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ selectedValue: newValue })\\n        }}\\n      >\\n        {Object.keys(countryList)\\n          .map(countryCode => ({\\n            countryCode,\\n            value: countryCode,\\n            label: countryList[countryCode].name,\\n            ...countryList[countryCode],\\n          }))\\n          .map(data => (\\n            <SelectListItem\\n              key={data.value}\\n              label={data.label}\\n              value={data.label}\\n            />\\n          ))}\\n      </SelectList>\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={400} mdxType=\"Box\">\n        <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n            setState({\n              selectedValue: newValue\n            });\n          }} mdxType=\"SelectList\">\n          {Object.keys(countryList).map(countryCode => ({\n              countryCode,\n              value: countryCode,\n              label: countryList[countryCode].name,\n              ...countryList[countryCode]\n            })).map(data => <SelectListItem key={data.value} label={data.label} value={data.label} mdxType=\"SelectListItem\" />)}\n        </SelectList>\n      </Box>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"single-select\"\n    }}>{`Single select`}</h3>\n    <Playground __position={3} __code={'<State initial={{ selectedValue: \\'go\\' }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: 'go'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <h3 {...{\n      \"id\": \"select-list\"\n    }}>{`Select List`}</h3>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n"],"sourceRoot":""}