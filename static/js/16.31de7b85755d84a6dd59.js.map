{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$size","size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","_props$size","_props$isSolid","_props$color","_props$sizeLimitOneCh","getStyles","testID","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","substring","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","Icon","IconTag","Feather","concat","result","matches","charAt","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","colors","text","layoutProps","MDXLayout","MDXContent","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","ListItem","___WEBPACK_IMPORTED_MODULE_7__","onPress","console","log","avatarProps","uri","rightIcon","leftIcon","title","description","isDisabled","descriptionStyle","focusBackgroundColor","imageWrapperStyle","leftWrapperStyle","textWrapperStyle","titleStyle","wrapperStyle","of","isMDXComponent","getListItemStyles","objectSpread","background","content","borderBottomWidth","borderColor","border","controlHeights","paddingLeft","paddingRight","greyDark","marginRight","flexDirection","iconSize","large","medium","small","avatarSize","titleSize","descriptionSize","_props$isDisabled","accessibilityProps","objectWithoutProperties","TouchableOpacity","esm_extends","disabled","weight","Icon_web","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","getTextStyles","isInline","isItalic","align","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","textAlign","alignSelf","fontStyle","textTransform","children","_props$fontFamily","_props$align","_props$isInline","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","controlBorderRadius","overlay","greyLight","greyDefault","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"2fAIaA,EAAW,SAACC,GACvB,IAAMC,EAAMC,OAAOF,GACfG,EAAO,EAEX,GAA0B,IAAtBF,EAAIG,OAAOC,OAAc,OAAOF,EACpC,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAG9BH,GAAQA,GAAQ,GAAKA,EAFdF,EAAIM,WAAWD,GAKtBH,GAAQA,EAEV,OAAOK,KAAKC,IAAIN,kiCAmBlB,IAUMO,EAAiB,SACrBC,EADqBC,GAWlB,IARDC,EAQCD,EARDC,QACAC,EAOCF,EAPDE,MACAC,EAMCH,EANDG,UAOIC,EAAcL,EAAME,EAAU,QAAU,UAE9C,GAAc,cAAVC,EAAuB,CACzB,IAAMG,EAAOC,OAAOD,KAAKD,GAEzB,OAAOA,EADKC,EAAKF,EAAYE,EAAKZ,SAIpC,OAAOW,EAAYF,iTAQd,IAAMK,EAAmC,SAAAC,EAE9CC,GACG,IACCC,EAHFC,EAECH,EAFDG,KAAMT,EAELM,EAFKN,MAAOD,EAEZO,EAFYP,QAEZW,EAAAJ,EAFqBK,YAErB,IAAAD,EAF4B,GAE5BA,EAAAE,EAAAN,EAFgCO,6BAEhC,IAAAD,EAFwD,GAExDA,EAEGf,EAAQU,EAAMV,MACpB,GAAc,cAAVG,EAAuB,CACzB,IAAMc,EAAe7B,EAASwB,GAC9BD,EAAaZ,EAAeW,EAAMV,MAAO,CACvCG,QACAC,UAAWa,EACXf,iBAGFS,EAAaZ,EAAeC,EAAO,CAAEG,QAAOD,UAASE,UAAW,IAGlE,IAAMc,EAvD0B,SAChCJ,EACAE,GAEA,OAAIF,GAAQE,EACHnB,KAAKsB,KAAKL,EAAO,KAEnBjB,KAAKsB,KAAKL,EAAO,KAgDCM,CACvBN,EACAE,GAGF,MAAO,CACLK,eAAgB,CACdC,WAAY,SACZC,gBAAiBZ,EAAWY,gBAC5BC,aAAc,KACdC,QAAS,OACTC,OAAQZ,EACRa,eAAgB,SAChBC,SAAU,SACVC,SAAU,WACVC,MAAOhB,GAGTiB,UAAW,CACT5B,MAAOQ,EAAWR,MAClB6B,SAAUd,EACVe,WAAYf,GAGdgB,WAAY,CACVR,OAAQ,OACRI,MAAO,m3BClDN,IAAMK,EAAS,SAACC,GAAuB,IAE1CC,EAQED,EARFC,OAF0CC,EAUxCF,EAPFtB,YAH0C,IAAAwB,EAGnC,GAHmCA,EAI1C1B,EAMEwB,EANFxB,KAJ0C2B,EAUxCH,EALFlC,eAL0C,IAAAqC,KAAAC,EAUxCJ,EAJFjC,aAN0C,IAAAqC,EAMlC,YANkCA,EAAAC,EAUxCL,EAHFpB,6BAP0C,IAAAyB,EAOlB,GAPkBA,EAQ1CC,EAEEN,EAFFM,UACAC,EACEP,EADFO,OAGIjC,EAAQkC,cAZ8BC,EAccC,YACxD,GAf0CC,EAAAxC,OAAAyC,EAAA,EAAAzC,CAAAsC,EAAA,GAcrCI,EAdqCF,EAAA,GAcdG,EAdcH,EAAA,GAiBtCI,GAAoBd,GAAUY,EAEhCG,EArE+B,SAACxC,GAAyB,IAAnByC,EAAmBC,UAAA5D,OAAA,QAAA6D,IAAAD,UAAA,GAAAA,UAAA,GAAR,IACrD,OAAK1C,EAEEA,EACJ4C,QAAQ,MAAO,KACfC,MAAM,KACNC,MAAM,EAAG,GACTC,IAAI,SAAAC,GAAC,OAAIA,GAAKA,EAAE,GAAGC,gBACnBC,KAAK,IAPUT,EAoEHU,CAAYnD,GACvBE,GAAQE,IACVoC,EAAWA,EAASY,UAAU,EAAG,IArBS,IAAAC,EAwBMC,YAChD1D,EACAkC,EACAhC,EAAMyD,WAAW3D,gBAH+B0D,CAKhD,CACE/D,QACAD,UACAU,OACAE,OACAE,yBAEFN,GAZMW,EAxBoC4C,EAwBpC5C,eAAgBU,EAxBoBkC,EAwBpBlC,UAAWG,EAxBS+B,EAwBT/B,WAenC,OACEkC,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOjD,EAAgBsB,OAAQA,EAArC4B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGvB,GACCiB,EAAA,cAACO,EAAA,EAAD,CAAMjC,UAAW,iBAAO,CAAEX,cAA1BwC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAAyCtB,IAEzCD,KAAsBd,GACtB+B,EAAA,cAACQ,EAAA,EAAD,CACEC,QAAS,kBAAM3B,GAAyB,IACxCb,OAAQA,EACRiC,MAAOpC,EAHTqC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,geChGD,IAAMI,EAAO,SAAA7E,GAAsC,IAAnCW,EAAmCX,EAAnCW,KAAMT,EAA6BF,EAA7BE,MAAOW,EAAsBb,EAAtBa,KAC5BJ,EAAQkC,cAERmC,EAAUC,EAAO,KAAAC,OAZzB,SAAyBrE,GACvB,IAIMsE,EAAStE,EAAK4C,QAAQ,UAJV,SAAC2B,GACjB,OAAOA,EAAQ,GAAGtB,gBAIpB,OAAOqB,EAAOE,OAAO,GAAGvB,cAAgBqB,EAAOxB,MAAM,GAMxB2B,CAAgBzE,KAE7C,OACE0E,EAAA,cAACP,EAAD,CACE5E,MAAOA,EAAQoF,YAAa7E,EAAM8E,OAAOC,KAA1BF,CAAgCpF,GAASA,EACxDW,KAAMA,EAFRyD,SAAA,CAAAC,yFAAAE,WAAA,s3BCVEgB,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT3F,GAGZ,IAFDkE,EAEClE,EAFDkE,WACG/B,EACF7B,OAAAsF,EAAA,EAAAtF,CAAAN,EAAA,gBACD,OAAOM,OAAAuF,EAAA,EAAAvF,CAACoF,EAADpF,OAAAwF,EAAA,EAAAxF,CAAA,GAAemF,EAAiBtD,EAAhC,CAAuC+B,WAAYA,EAAY6B,QAAQ,YAAvEzB,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAGLnE,OAAAuF,EAAA,EAAAvF,CAAA,KAAAA,OAAAwF,EAAA,EAAAxF,CAAQ,CACN0F,GAAM,YADR,CAAA1B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,kBAGAnE,OAAAuF,EAAA,EAAAvF,CAAA,KAAAgE,SAAA,CAAAC,SAAAC,EAAAC,WAAA,+BAA8BnE,OAAAuF,EAAA,EAAAvF,CAAA,cAAY2F,WAAW,IAAvB3B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,eAA9B,kBAAmGnE,OAAAuF,EAAA,EAAAvF,CAAA,cAAY2F,WAAW,IAAvB3B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,oBAAnG,yCACAnE,OAAAuF,EAAA,EAAAvF,CAAA,KAAAA,OAAAwF,EAAA,EAAAxF,CAAQ,CACN0F,GAAM,SADR,CAAA1B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,eAGAnE,OAAAuF,EAAA,EAAAvF,CAAC4F,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,ilBAAwlBC,QAAS,CACloBlE,MAAOmE,KAAOA,KAAKnE,MAAQA,EAC3BoE,eACAC,UACAtE,WACA2C,SACA4B,cACCV,QAAQ,aAPXzB,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAQFnE,OAAAuF,EAAA,EAAAvF,CAACoG,EAAA,EAAD,CAAUC,QAAS,kBAAMC,QAAQC,IAAI,UAAUC,YAAa,CACtD1E,OAAQ,CACN2E,IAAK,kCAENC,eAAW1D,EACd2D,cAAU3D,EACV4D,MAAM,aAAaC,YAAY,mBAAmBtG,KAAK,QAAQuG,YAAY,EAAO3E,UAAW,SAACN,EAAO1B,GAAR,MAAmB,CAC9GW,eAAgB,GAChBiG,iBAAkB,GAClBC,qBAAsB,UACtBC,kBAAmB,GACnBC,iBAAkB,GAClBC,iBAAkB,GAClBC,WAAY,GACZC,aAAc,KACZ5B,QAAQ,WAfhBzB,SAAA,CAAAC,SAAAC,EAAAC,WAAA,OAiBEnE,OAAAuF,EAAA,EAAAvF,CAAA,KAAAA,OAAAwF,EAAA,EAAAxF,CAAQ,CACN0F,GAAM,SADR,CAAA1B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,eAGAnE,OAAAuF,EAAA,EAAAvF,CAAC4F,EAAA,EAAD,CAAO0B,GAAInB,IAAUV,QAAQ,QAA7BzB,SAAA,CAAAC,SAAAC,EAAAC,WAAA,iMAIJkB,EAAWkC,gBAAiB,4qDCtCrB,IAAMC,EAAuC,SAAA9H,EAElDS,GACG,IAFDI,EAECb,EAFDa,KAAMuG,EAELpH,EAFKoH,WAGR,MAAO,CACLhG,eAAed,OAAAyH,EAAA,EAAAzH,CAAA,CACbgB,gBAAiBb,EAAM8E,OAAOyC,WAAWC,QACzCC,kBAAmB,EACnBC,YAAa1H,EAAM8E,OAAO6C,OAAb,QACb3G,OAAQhB,EAAM4H,eAAexH,GAC7Ba,eAAgB,SAChB4G,YAAa,GACbC,aAAc,GACVnB,EACA,CAAE9F,gBAAiBb,EAAM8E,OAAOyC,WAAWQ,UAC3C,IAENnB,iBAAkB,GAClBE,kBAAmB,CACjBkB,YAAa,GAEfjB,iBAAkB,CAChBnG,WAAY,SACZqH,cAAe,OAEjBjB,iBAAkB,CAChB/F,eAAgB,UAElBgG,WAAY,GACZC,aAAc,CACZtG,WAAY,SACZqH,cAAe,MACfhH,eAAgB,inBCvBtB,IAAMiH,EAEF,CACFC,MAAO,GACPC,OAAQ,GACRC,MAAO,IAGHC,EAEF,CACFH,MAAO,GACPC,OAAQ,GACRC,MAAO,IAGHE,EAEF,CACFJ,MAAO,QACPC,OAAQ,SACRC,MAAO,SAGHG,EAEF,CACFL,MAAO,SACPC,OAAQ,QACRC,MAAO,UAGIrC,EAAW,SAACtE,GAAyB,IAE9C2E,EAWE3E,EAXF2E,YACArE,EAUEN,EAVFM,UAH8CyG,EAa5C/G,EATFiF,kBAJ8C,IAAA8B,KAK9ChC,EAQE/E,EARF+E,MACAC,EAOEhF,EAPFgF,YAN8C9E,EAa5CF,EANFtB,YAP8C,IAAAwB,EAOvC,SAPuCA,EAQ9CsE,EAKExE,EALFwE,QACAK,EAIE7E,EAJF6E,UACAC,EAGE9E,EAHF8E,SACAvE,EAEEP,EAFFO,OACGyG,EAZ2C7I,OAAA8I,EAAA,EAAA9I,CAa5C6B,EAb4C,iHAc1C1B,EAAQkC,cAdkCqB,EAwB5CC,YACF6D,EACArF,EACAhC,EAAMyD,WAAW4D,kBAHf7D,CAIF,CAAEpD,OAAMuG,cAAc3G,GAXtB8G,EAjB8CvD,EAiB9CuD,kBACAC,EAlB8CxD,EAkB9CwD,iBACAC,EAnB8CzD,EAmB9CyD,iBACArG,EApB8C4C,EAoB9C5C,eACAsG,EArB8C1D,EAqB9C0D,WACAL,EAtB8CrD,EAsB9CqD,iBACAM,EAvB8C3D,EAuB9C2D,aAOF,OACExD,EAAA,cAACkF,EAAA,EAAD/I,OAAAgJ,EAAA,EAAAhJ,CAAA,CACEiJ,SAAUnC,EACV/C,MAAOjD,EACPsB,OAAQA,EACRiE,QAASA,GACLwC,EALN,CAAA7E,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAOEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOsD,EAAbrD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOmD,EAAblD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOkD,EAAbjD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGwC,GAAYH,EACX3C,EAAA,cAACjC,EAAA,EAAD5B,OAAAgJ,EAAA,EAAAhJ,CAAA,CAAQO,KAAMkI,EAAWlI,IAAWiG,EAApC,CAAAxC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,QACE,MAENN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOoD,EAAbnD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGyC,GACC/C,EAAA,cAACO,EAAA,EAAD,CACEjC,UAAW,iBAAO,CAAEX,UAAW4F,IAC/B7G,KAAMmI,EAAUnI,GAChB2I,OAAO,MAHTlF,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAKGyC,GAGJC,GACChD,EAAA,cAACO,EAAA,EAAD,CACEjC,UAAW,iBAAO,CAAEX,UAAWuF,IAC/BxG,KAAMoI,EAAgBpI,GACtBX,MAAM,QAHRoE,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAKG0C,KAKM,OAAdH,EACG,KACAA,GACE7C,EAAA,cAACsF,EAAA,EAAD,CACEvJ,MAAM,UACNW,KAAM8H,EAAS9H,GACfF,KAAK,gBAHP2D,SAAA,CAAAC,SAAAC,EAAAC,WAAA,02CClGP,IAAMiF,EAAgB,SAACC,GAAD,OAAgC,SAC3DC,GAD2D,OAExDD,EAAaC,8NAEX,IAAMC,EAAgB,SAACC,GAAD,OAA8B,SACzDC,GAEA,GAAKA,EAKL,OAHyBD,EAAYC,IAGVA,6NAGtB,IAAMzE,EAAe,SAAC0E,GAAD,OAA4B,SACtDC,GAKA,OAFoBD,EAAWC,IAETA,4NAGjB,IAAMC,EAAc,SAACC,GAAD,OAA0B,SACnDtJ,GAKA,OAFuBsJ,EAAUtJ,IAER,CAAEkB,SAAUlB,oMAGhC,IAAMuJ,EAA+B,SAAApK,EAE1CS,GACG,IAFDI,EAECb,EAFDa,KAAMX,EAELF,EAFKE,MAAO0J,EAEZ5J,EAFY4J,WAAYS,EAExBrK,EAFwBqK,SAAUC,EAElCtK,EAFkCsK,SAAUC,EAE5CvK,EAF4CuK,MAAOC,EAEnDxK,EAFmDwK,UAAWhB,EAE9DxJ,EAF8DwJ,OAG3DiB,EAAYP,EAAYzJ,EAAM0J,UAAlBD,CAA6BrJ,GAE/C,MAAO,CACLiB,UAAUxB,OAAAoK,EAAA,EAAApK,CAAA,GACLmK,EADI,CAEPvK,MAAOoF,EAAa7E,EAAM8E,OAAOC,KAA1BF,CAAgCpF,GACvC0J,WAAYF,EAAcjJ,EAAMkJ,aAApBD,CAAkCE,GAC9CG,WACEF,EAAcpJ,EAAMqJ,YAApBD,CAAiCL,IAAWiB,EAAUV,WACxDY,UAAWJ,GACPF,EACA,CACEO,UAAW,aACXlC,cAAe,OAEjB,GACA4B,GAAY,CACdO,UAAW,UAETL,GAAa,CACfM,cAAeN,ixCCjEhB,IAAM9F,EAAO,SAACvC,GAAqB,IAEtC4I,EAWE5I,EAXF4I,SAFsCxI,EAapCJ,EAVFjC,aAHsC,IAAAqC,EAG9B,UAH8BA,EAAAyI,EAapC7I,EATFyH,kBAJsC,IAAAoB,EAIzB,OAJyBA,EAAA3I,EAapCF,EARFtB,YALsC,IAAAwB,EAK/B,SAL+BA,EAAA4I,EAapC9I,EAPFoI,aANsC,IAAAU,EAM9B,OAN8BA,EAOtCzB,EAMErH,EANFqH,OAPsC0B,EAapC/I,EALFkI,gBARsC,IAAAa,KAStCzI,EAIEN,EAJFM,UATsC0I,EAapChJ,EAHFmI,gBAVsC,IAAAa,KAWtCX,EAEErI,EAFFqI,UACGY,EAZmC9K,OAAA+K,EAAA,EAAA/K,CAapC6B,EAboC,yGAclC1B,EAAQkC,cAENb,EAAcmC,YACpBmG,IACA3H,EACAhC,EAAMyD,WAAWkG,cAHGnG,CAKpB,CACEsG,QACArK,QACA0J,aACAS,WACAC,WACAzJ,OACA2J,YACAhB,UAEF/I,GAfMqB,UAkBR,OACEwJ,EAAA,cAACC,EAAA,EAADjL,OAAAkL,EAAA,EAAAlL,CAAA,CAAQ+D,MAAOvC,GAAesJ,EAA9B,CAAA9G,SAAA,CAAAC,2FAAAE,WAAA,MACGsG,05BC3CQ,IAAAU,EACJ,CACPC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WANEL,EASP,CACJC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAdEL,EAiBR,CACHC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtBEL,EAyBL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WA9BEL,EAiCL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtCEL,EAyCN,CACLC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WA9CEL,EAiDP,CACJC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtDEL,EAyDL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,0rDChEb,IAgBMC,EAAoC,CACxCjD,MAAO,EAEPD,OAAQ,EAERD,MAAO,GAGHrD,EAAiB,CACrByC,WAAY,CACV4D,KAAM,QACN3D,QAAS,QACT+D,QAAS,kBAETC,UAAWR,EAAgBC,SAC3BQ,YAAa,UACb1D,SAAUiD,EAAgBE,MAE1BQ,aAAcV,EAAaC,SAC3BU,eAAgBX,EAAaG,KAC7BS,YAAaZ,EAAaI,KAE1BS,eAAgBb,EAAeC,SAC/Ba,iBAAkBd,EAAeG,KACjCY,cAAef,EAAeI,KAE9BY,YAAahB,EAAYC,SACzBgB,cAAejB,EAAYG,KAC3Be,WAAYlB,EAAYI,KAExBe,UAAWnB,EAAaC,SACxBmB,YAAapB,EAAaG,KAC1BkB,SAAUrB,EAAaI,KAEvBkB,aAActB,EAAcC,SAC5BsB,eAAgBvB,EAAcG,KAC9BqB,YAAaxB,EAAcI,KAE3BqB,aAAczB,EAAeC,SAC7ByB,eAAgB1B,EAAeG,KAC/BwB,YAAa3B,EAAeI,MAG9BzD,OAAQ,CACNiF,QAAS5B,EAAgBE,MAEzB2B,QAAS7B,EAAaK,QACtByB,UAAW9B,EAAeK,QAE1B0B,OAAQ/B,EAAYK,QACpB2B,KAAMhC,EAAaK,QACnB4B,QAASjC,EAAcK,QACvB6B,QAASlC,EAAeK,SAG1B8B,OAAQ,CACNrE,SAAUkC,EAAgBE,MAC1BkC,aAAcpC,EAAgBK,QAE9BuB,QAAS5B,EAAgBC,SACzBoC,YAAarC,EAAgBK,QAE7BwB,QAAS7B,EAAaG,KACtBmC,YAAa,QAEbR,UAAW9B,EAAeG,KAC1BoC,cAAe,QAEfR,OAAQ/B,EAAYG,KACpBqC,WAAY,SAGdzI,KAAM,CACJ0I,KAAMzC,EAAgBK,QACtBuB,QAAS5B,EAAgBK,QACzBqC,MAAO1C,EAAgBI,KACvBuC,MAAO,QACPC,SAAU,QAEVf,QAAS7B,EAAaK,QACtByB,UAAW9B,EAAeK,QAE1B0B,OAAQ/B,EAAYK,QACpB2B,KAAMhC,EAAaK,QACnB4B,QAASjC,EAAcK,QACvB6B,QAASlC,EAAeK,UAItBwC,EAAyB,CAC7B,CACEC,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,EACfC,aAAc,GAEhB,CACEJ,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,IACfC,aAAc,GAEhB,CACEJ,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,GACfC,aAAc,IAEhB,CACEJ,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,IACfC,aAAc,IAEhB,CACEJ,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,GACfC,aAAc,GAEhB,CACEJ,UAAW,EACXC,YAAa/C,EAAgBI,KAC7B4C,aAAc,CAAE5M,MAAO,EAAGJ,OAAQ,GAClCiN,cAAe,IACfC,aAAc,IAmNLC,EAAsB,CACjCrJ,SACAxF,MAjNmB,CACnB8O,MAAO,CACLC,QAAS,CACPxN,gBAAiBmK,EAAgBG,KACjC1L,MAAO,SAGT6O,KAAM,CACJzN,gBAAiBmK,EAAaG,KAC9B1L,MAAO,SAGT8O,IAAK,CACH1N,gBAAiBmK,EAAYG,KAC7B1L,MAAO,SAGT+O,OAAQ,CACN3N,gBAAiBmK,EAAeG,KAChC1L,MAAO,SAGTgP,OAAQ,CACN5N,gBAAiBmK,EAAeG,KAChC1L,MAAOuL,EAAeK,SAGxBqD,MAAO,CACL7N,gBAAiBmK,EAAcG,KAC/B1L,MAAO,SAGTkP,KAAM,CACJ9N,gBAAiBmK,EAAaG,KAC9B1L,MAAO,SAGTmP,OAAQ,CACN/N,gBAAiBmK,EAAeG,KAChC1L,MAAO,UAIXoP,OAAQ,CACNR,QAAS,CACPxN,gBAAiBmK,EAAgBE,MACjCzL,MAAOuL,EAAgBK,SAGzBiD,KAAM,CACJzN,gBAAiBmK,EAAaE,MAC9BzL,MAAOuL,EAAaK,SAGtBkD,IAAK,CACH1N,gBAAiBmK,EAAYE,MAC7BzL,MAAOuL,EAAYK,SAGrBmD,OAAQ,CACN3N,gBAAiBmK,EAAeE,MAChCzL,MAAOuL,EAAeK,SAGxBoD,OAAQ,CACN5N,gBAAiBmK,EAAeE,MAChCzL,MAAOuL,EAAeK,SAGxBqD,MAAO,CACL7N,gBAAiBmK,EAAcE,MAC/BzL,MAAOuL,EAAcK,SAGvBsD,KAAM,CACJ9N,gBAAiBmK,EAAaE,MAC9BzL,MAAOuL,EAAaK,SAGtBuD,OAAQ,CACN/N,gBAAiBmK,EAAeE,MAChCzL,MAAOuL,EAAeK,WAkI1BnC,aA3HgB,QAAhB4F,IAASC,GACL,CACEC,QAAO,iKACPC,KAAI,mGACJlK,KAAI,+JAEN,CACEiK,QAAS,SACTC,KAAM,SACNlK,KAAM,UAmHZsE,YAhH+B,CAC/B6F,KAAM,OACNhE,MAAO,MACPiE,OAAQ,UA+GRC,aA5GiC,CACjCC,SAAU,CACR/N,SAAU,GACVgO,eAAgB,GAChB/N,WAAY,IAGdgO,QAAS,CACPjO,SAAU,GACVgO,eAAgB,GAChB/N,WAAY,IAGdiO,OAAQ,CACNlO,SAAU,GACVgO,eAAgB,IAChB/N,WAAY,IAGd4G,MAAO,CACL7G,SAAU,GACVgO,eAAgB,IAChB/N,WAAY,IAGd6G,OAAQ,CACN9G,SAAU,GACVgO,eAAgB,IAChB/N,WAAY,IAGd8G,MAAO,CACL/G,SAAU,GACVgO,eAAgB,IAChB/N,WAAY,KA2EdkO,eAvEqC,CACrCpH,MAAO,CACL/G,SAAU,GACVC,WAAY,IAGd6G,OAAQ,CACN9G,SAAU,GACVC,WAAY,IAGd4G,MAAO,CACL7G,SAAU,GACVC,WAAY,KA2DdmI,UAvD2B,CAC3BvB,MAAO,CACL7G,SAAU,IAEZ8G,OAAQ,CACN9G,SAAU,IAEZ+G,MAAO,CACL/G,SAAU,IAEZoO,OAAQ,CACNpO,SAAU,KA8CZuM,aAEAvC,sBACA1D,eA3WmC,CACnCS,MAAO,GAEPD,OAAQ,GAERD,MAAO,IAuWPwH,gBApXoC,CACpCtH,MAAO,EAEPD,OAAQ,GAERD,MAAO,IAiXPyH,gBAhDuC,CACvCC,OAAQ,CACN/O,aAAc,KAEhBgP,KAAM,CACJhP,aAAc,KAEhBiP,QAAS,CACPjP,aAAcwK,EAAoBlD,QAEpC4H,cAAe,CACbC,uBAAwB3E,EAAoBlD,OAC5C8H,wBAAyB5E,EAAoBlD,QAE/C+H,YAAa,CACXF,uBAAwB3E,EAAoBlD,OAC5CgI,oBAAqB9E,EAAoBlD,QAE3CiI,aAAc,CACZH,wBAAyB5E,EAAoBlD,OAC7CkI,qBAAsBhF,EAAoBlD,QAE5CmI,WAAY,CACVH,oBAAqB9E,EAAoBlD,OACzCkI,qBAAsBhF,EAAoBlD,QAE5CoI,OAAQ,CACN1P,aAAc,IAuBhB2C,WAAY,utQCtGP,IAAMgN,EAAerO,IAAMsO,cAAcvC,qfAOzC,IAAMwC,EAAc,SAAC3Q,GAC1B,OAAOA,EACH4Q,IAAiBzC,EAAcnO,GAC/BmO,6KAGC,IAAM0C,EAAgB,SAACnP,GAA8B,IAClD4I,EAAmC5I,EAAnC4I,SADkDwG,EACfpP,EAAzBqP,MAEZ/Q,EAAQ2Q,OAH4C,IAAAG,EAChC3C,EADgC2C,GAK1D,OACEE,EAAAC,EAAAC,cAACT,EAAaU,SAAd,CAAuBJ,MAAO/Q,EAA9B6D,SAAA,CAAAC,4EAAAE,WAAA,MAAsCsG,gLAInC,IAAMpI,EAAW,WACtB,OAAOE,IAAMgP,WAAWX,8PC7T1BY,EAAAC,EAAAC,EAAA,sBAAA/N,IAAA,IAAAgO,EAAAH,EAAA,wCAAAI,EAAAJ,EAAAK,EAAAF,szBAiBO,IAAMhO,EAAc,SACzBmO,EACAC,EACAC,GAHyB,OAItB,SAACnQ,EAAoB1B,GACxB,IAEM8R,EAAkC,CAFlBH,EAAiBjQ,EAAO1B,IAY9C,OARI6R,GACFC,EAAOC,KAAKF,EAAenQ,EAAO1B,IAGhC4R,GACFE,EAAOC,KAAKH,EAAoBlQ,EAAO1B,IAGlCgS,IAAMC,IAAaH","file":"static/js/16.18c4a737.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColor } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /** The size of the avatar. */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   * @default 48\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid avatar.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   * @default 20\n   */\n  sizeLimitOneCharacter?: number;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    color = 'automatic',\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(\n    {\n      color,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar, Icon, ListItem } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  avatarProps={{\\n    source: { uri: \\'https://picsum.photos/200/200\\' },\\n  }}\\n  rightIcon={undefined} // Override right-handside icon\\n  leftIcon={undefined} // Override Avatar\\n  title=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  getStyles={(props, theme) => ({\\n    containerStyle: {},\\n    descriptionStyle: {},\\n    focusBackgroundColor: \\'#fafafa\\',\\n    imageWrapperStyle: {},\\n    leftWrapperStyle: {},\\n    textWrapperStyle: {},\\n    titleStyle: {},\\n    wrapperStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar,\n      Icon,\n      ListItem\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} avatarProps={{\n        source: {\n          uri: 'https://picsum.photos/200/200'\n        }\n      }} rightIcon={undefined} // Override right-handside icon\n      leftIcon={undefined} // Override Avatar\n      title=\"Some label\" description=\"Some description\" size=\"large\" isDisabled={false} getStyles={(props, theme) => ({\n        containerStyle: {},\n        descriptionStyle: {},\n        focusBackgroundColor: '#fafafa',\n        imageWrapperStyle: {},\n        leftWrapperStyle: {},\n        textWrapperStyle: {},\n        titleStyle: {},\n        wrapperStyle: {}\n      })} mdxType=\"ListItem\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ListItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights[size],\n      justifyContent: 'center',\n      paddingLeft: 16,\n      paddingRight: 8,\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textWrapperStyle: {\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, TextSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ControlSize;\n  isDisabled?: boolean;\n  title?: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nconst iconSize: {\n  [size in ControlSize]: number;\n} = {\n  large: 32,\n  medium: 24,\n  small: 16,\n};\n\nconst avatarSize: {\n  [size in ControlSize]: number;\n} = {\n  large: 40,\n  medium: 32,\n  small: 24,\n};\n\nconst titleSize: {\n  [size in ControlSize]: TextSize;\n} = {\n  large: 'large',\n  medium: 'medium',\n  small: 'small',\n};\n\nconst descriptionSize: {\n  [size in ControlSize]: TextSize;\n} = {\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n};\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    titleStyle,\n    descriptionStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )({ size, isDisabled }, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>\n            {leftIcon || avatarProps ? (\n              <Avatar size={avatarSize[size]} {...avatarProps} />\n            ) : null}\n          </View>\n          <View style={textWrapperStyle}>\n            {title && (\n              <Text\n                getStyles={() => ({ textStyle: titleStyle })}\n                size={titleSize[size]}\n                weight=\"500\"\n              >\n                {title}\n              </Text>\n            )}\n            {description && (\n              <Text\n                getStyles={() => ({ textStyle: descriptionStyle })}\n                size={descriptionSize[size]}\n                color=\"muted\"\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n        </View>\n        {rightIcon === null\n          ? null\n          : rightIcon || (\n              <Icon\n                color=\"default\"\n                size={iconSize[size]}\n                name=\"chevron-right\"\n              />\n            )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}