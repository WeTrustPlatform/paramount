{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","Collapsible","Toggle","___WEBPACK_IMPORTED_MODULE_7__","initial","_ref2","on","toggle","___WEBPACK_IMPORTED_MODULE_6__","title","isOpen","onOpen","onClose","___WEBPACK_IMPORTED_MODULE_5__","marginVertical","justifyContent","alignItems","height","backgroundColor","of","parentName","className","isMDXComponent","getCollapsibleStyles","theme","contentWrapperStyle","overflow","iconWrapperStyle","paddingLeft","outerWrapperStyle","display","flexDirection","textStyle","touchableStyle","children","header","_props$initialIsOpen","initialIsOpen","getStyles","testID","_props$onOpen","_props$onClose","accessibilityHint","accessibilityLabel","_props$accessible","accessible","useTheme","_React$useState","React","_React$useState2","slicedToArray","isOpened","setIsOpened","isControlledUsage","isFinalOpened","_mergeStyles","mergeStyles","objectSpread","handlePress","react","TouchableOpacity","onPress","style","View","Text","size","Icon_web","name","color","colors","text","_props$initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","set"],"mappings":"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","file":"static/js/26.7b019137.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Collapsible, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <p>{`Component to reveal and hide content`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Collapsible\\n      title={\\n        on ? \\'Close controlled collapsible\\' : \\'Open controlled collapsible\\'\\n      }\\n      isOpen={on}\\n      onOpen={toggle}\\n      onClose={toggle}\\n    >\\n      <Box\\n        marginVertical={16}\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        height={300}\\n        backgroundColor=\\\"#67c6bb\\\"\\n      />\\n    </Collapsible>\\n  )}\\n</Toggle>\\n<Collapsible title=\\\"Uncontrolled collapsible\\\">\\n  <Box\\n    marginVertical={16}\\n    justifyContent=\\\"center\\\"\\n    alignItems=\\\"center\\\"\\n    height={300}\\n    backgroundColor=\\\"#67c6bb\\\"\\n  />\\n</Collapsible>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Collapsible,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Collapsible title={on ? 'Close controlled collapsible' : 'Open controlled collapsible'} isOpen={on} onOpen={toggle} onClose={toggle} mdxType=\"Collapsible\">\n        <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n      </Collapsible>}\n  </Toggle>\n  <Collapsible title=\"Uncontrolled collapsible\" mdxType=\"Collapsible\">\n    <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n  </Collapsible>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Collapsible} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CollapsibleStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  contentWrapperStyle: ViewStyle;\n  textStyle: ViewStyle;\n  iconWrapperStyle: ViewStyle;\n}\n\ngetStyles={(CollapsibleProps, Theme) => CollapsibleStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<>\n  <TouchableOpacity touchableStyle>\n    <View outerWrapperStyle>\n      <Text textStyle>{title}</Text>\n      <View iconWrapperStyle>{icon}</View>\n    </View>\n  </TouchableOpacity>\n  <View contentWrapperStyle>{children}</View>\n</>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { CollapsibleProps } from './Collapsible';\n\nexport interface CollapsibleStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  contentWrapperStyle: ViewStyle;\n  textStyle: TextStyle;\n  iconWrapperStyle: ViewStyle;\n}\n\nexport type GetCollapsibleStyles = (\n  props: CollapsibleProps,\n  theme: Theme,\n) => Partial<CollapsibleStyles>;\n\nexport const getCollapsibleStyles: GetCollapsibleStyles = (props, theme) => {\n  return {\n    contentWrapperStyle: {\n      overflow: 'hidden',\n    },\n    iconWrapperStyle: {\n      paddingLeft: 4,\n    },\n    outerWrapperStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    textStyle: {},\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetCollapsibleStyles,\n  getCollapsibleStyles,\n} from './Collapsible.styles';\n\nexport interface CollapsibleProps {\n  /** Title of the collapsible */\n  title?: string;\n\n  /** Content revealed when collapsible is opened */\n  children?: React.ReactNode;\n\n  /**\n   * Set whether it is opened initially, for uncontrolled usage.\n   * @default false\n   */\n  initialIsOpen?: boolean;\n\n  /**\n   * When true, content of Collapsible is revealed\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /** Called when header is pressed to open collapsible */\n  onOpen?: () => void;\n\n  /** Called when header is pressed to close collapsible */\n  onClose?: () => void;\n\n  /** Override the title with the component */\n  header?: React.ReactNode;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: GetCollapsibleStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Collapsible = (props: CollapsibleProps) => {\n  const {\n    title,\n    children,\n    header,\n    initialIsOpen = false,\n    isOpen,\n    getStyles,\n    testID,\n    onOpen = () => undefined,\n    onClose = () => undefined,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n  const [isOpened, setIsOpened] = React.useState(initialIsOpen);\n\n  const isControlledUsage = typeof isOpen === 'boolean';\n  const isFinalOpened = isControlledUsage ? isOpen : isOpened;\n\n  const {\n    touchableStyle,\n    outerWrapperStyle,\n    contentWrapperStyle,\n    textStyle,\n    iconWrapperStyle,\n  } = mergeStyles(\n    getCollapsibleStyles,\n    getStyles,\n    theme.components.getCollapsibleStyles,\n  )({ ...props, isOpen: isFinalOpened }, theme);\n\n  const handlePress = React.useCallback(() => {\n    if (isControlledUsage) {\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    } else {\n      if (isOpened) {\n        setIsOpened(false);\n        onClose();\n      } else {\n        setIsOpened(true);\n        onOpen();\n      }\n    }\n  }, [isOpened, setIsOpened, isOpen, onClose, isControlledUsage]);\n\n  return (\n    <>\n      <TouchableOpacity\n        testID={testID}\n        onPress={handlePress}\n        style={touchableStyle}\n        accessibilityHint={accessibilityHint}\n        accessibilityLabel={accessibilityLabel}\n        accessible={accessible}\n      >\n        <View style={outerWrapperStyle}>\n          {header || (\n            <>\n              <Text size=\"large\" getStyles={() => ({ textStyle })}>\n                {title}\n              </Text>\n              <View style={iconWrapperStyle}>\n                <Icon\n                  size=\"large\"\n                  name={isFinalOpened ? 'chevron-up' : 'chevron-down'}\n                  color={theme.colors.text.default}\n                />\n              </View>\n            </>\n          )}\n        </View>\n      </TouchableOpacity>\n      <View style={contentWrapperStyle}>{isFinalOpened && children}</View>\n    </>\n  );\n};\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n"],"sourceRoot":""}