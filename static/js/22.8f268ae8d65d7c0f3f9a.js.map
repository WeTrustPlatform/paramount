{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Spacing/Spacing.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Toast/Toast.mdx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["getSpacing","size","theme","spacing","Spacing","props","_props$size","_props$orientation","orientation","style","viewProps","Object","objectWithoutProperties","useTheme","react","View","esm_extends","height","width","getStyle","dlv","__source","fileName","lineNumber","propToFn","backgroundColor","color","colors","background","elevation","elevations","shape","containerShapes","space","padding","spaceBottom","paddingBottom","spaceEnd","paddingEnd","spaceHorizontal","paddingHorizontal","spaceLeft","paddingLeft","spaceRight","paddingRight","spaceStart","paddingStart","spaceTop","paddingTop","spaceVertical","paddingVertical","Box","children","testID","viewStyles","transformedStyles","pureStyles","prop","styleFn","push","reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","slicedToArray","useCallback","AnimatedView","animated","Dots","_props$color","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","alignItems","flexDirection","justifyContent","_jsxFileName","map","index","key","borderRadius","marginLeft","marginRight","Button","_props$appearance","appearance","_props$isDisabled","isDisabled","_props$isLoading","isLoading","_props$onPress","onPress","title","_props$overrides","overrides","_getOverrides","getOverrides","StyledTouchable","Touchable","_getOverrides2","touchableProps","_getOverrides3","StyledTitle","Title","_getOverrides4","titleProps","_getOverrides5","StyledLoading","Loading","_getOverrides6","loadingProps","_getOverrides7","StyledIcon","IconBefore","_getOverrides8","iconBeforeProps","_getOverrides9","IconAfter","_getOverrides10","iconAfterProps","Button_jsxFileName","buttonAppearances","minimal","default","content","danger","secondary","greyLight","button","dangerLight","primaryLight","secondaryLight","outline","borderColor","borderWidth","border","getButtonAppearances","_ref","isControlSize","controlBorderRadius","controlHeights","controlPaddings","medium","TouchableOpacity","accessibilityRole","disabled","objectSpread","getButtonTextColor","defaultText","dangerText","primaryText","secondaryText","textProps","textSize","textSizes","Text","weight","muted","display","fontWeight","textAlign","Dots_Dots","layoutProps","MDXLayout","MDXContent","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","Playground","Props","ToastContext","ToastProvider","Toast","___WEBPACK_IMPORTED_MODULE_8__","___WEBPACK_IMPORTED_MODULE_7__","Consumer","_ref2","notify","___WEBPACK_IMPORTED_MODULE_6__","description","of","isMDXComponent","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/22.70b5f993.js","sourcesContent":["import dlv from 'dlv';\nimport * as React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { SpacingSize, Theme, useTheme } from '../../theme';\nimport { getStyle, OverrideStyle, Style } from '../../utils/overrides';\n\ntype SpacingOrientation = 'horizontal' | 'vertical';\n\nexport interface SpacingProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the Spacing.\n   * @default \"medium\"\n   */\n  size?: SpacingSize | number;\n\n  /**\n   * Orientation of spacing.\n   * @default \"vertical\"\n   */\n  orientation?: SpacingOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<SpacingProps, ViewStyle>;\n}\n\nexport type SpacingOverride = OverrideStyle<SpacingProps, ViewStyle>;\n\nexport const getSpacing = (size: SpacingSize | number, theme: Theme) =>\n  typeof size === 'number' ? size : theme.spacing[size];\n\nexport const Spacing = (props: SpacingProps) => {\n  const {\n    size = 'medium',\n    orientation = 'vertical',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        orientation === 'vertical'\n          ? { height: getSpacing(size, theme) }\n          : { width: getSpacing(size, theme) },\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Spacing.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport {\n  BackgroundColor,\n  ContainerShape,\n  SpacingSize,\n  Theme,\n  useTheme,\n} from '../../theme';\nimport { getSpacing } from '../Spacing';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n  testID?: string;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n\n  space?: SpacingSize | number;\n  spaceBottom?: SpacingSize | number;\n  spaceEnd?: SpacingSize | number;\n  spaceHorizontal?: SpacingSize | number;\n  spaceLeft?: SpacingSize | number;\n  spaceRight?: SpacingSize | number;\n  spaceStart?: SpacingSize | number;\n  spaceTop?: SpacingSize | number;\n  spaceVertical?: SpacingSize | number;\n}\n\ntype BoxProp = keyof Omit<Omit<BoxProps, 'children'>, 'testID'>;\n\nconst propToFn: Partial<\n  {\n    [key in BoxProp]: (\n      prop: NonNullable<BoxProps[key]>,\n      theme: Theme,\n    ) => ViewStyle;\n  }\n> = {\n  backgroundColor: (color: BackgroundColor | string, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n\n    return { backgroundColor: color };\n  },\n  elevation: (elevation: number, theme: Theme) => theme.elevations[elevation],\n\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n\n  space: (size: SpacingSize | number, theme: Theme) => ({\n    padding: getSpacing(size, theme),\n  }),\n  spaceBottom: (size: SpacingSize | number, theme: Theme) => ({\n    paddingBottom: getSpacing(size, theme),\n  }),\n  spaceEnd: (size: SpacingSize | number, theme: Theme) => ({\n    paddingEnd: getSpacing(size, theme),\n  }),\n  spaceHorizontal: (size: SpacingSize | number, theme: Theme) => ({\n    paddingHorizontal: getSpacing(size, theme),\n  }),\n  spaceLeft: (size: SpacingSize | number, theme: Theme) => ({\n    paddingLeft: getSpacing(size, theme),\n  }),\n  spaceRight: (size: SpacingSize | number, theme: Theme) => ({\n    paddingRight: getSpacing(size, theme),\n  }),\n  spaceStart: (size: SpacingSize | number, theme: Theme) => ({\n    paddingStart: getSpacing(size, theme),\n  }),\n  spaceTop: (size: SpacingSize | number, theme: Theme) => ({\n    paddingTop: getSpacing(size, theme),\n  }),\n  spaceVertical: (size: SpacingSize | number, theme: Theme) => ({\n    paddingVertical: getSpacing(size, theme),\n  }),\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles: ViewStyle = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      const styleFn = propToFn[prop as BoxProp];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop as BoxProp], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop as keyof ViewStyle] = viewStyles[prop as BoxProp];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Dots } from '../LoadingIndicators';\nimport { Text, TextProps } from '../Typography';\n\ninterface ButtonBaseProps {\n  /** Title of the button */\n  title?: OptionalString;\n\n  /**\n   * The color of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /** Called when button is pressed */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ButtonOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconBefore: IconProps;\n  IconAfter: IconProps;\n  Loading: LoadingProps;\n}\n\nexport interface ButtonProps\n  extends WithOverrides<ButtonBaseProps, ButtonOverrides> {}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    color = 'default',\n    isDisabled = false,\n    isLoading = false,\n    size = 'medium',\n    onPress = () => {\n      return;\n    },\n    title,\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Button.Touchable'),\n    overrides.Touchable,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.Button.Title'),\n    overrides.Title,\n  );\n  const [Loading, loadingProps] = getOverrides(\n    StyledLoading,\n    props,\n    dlv(theme, 'overrides.Button.Loading'),\n    overrides.Loading,\n  );\n  const [IconBefore, iconBeforeProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconBefore'),\n    overrides.IconBefore,\n  );\n  const [IconAfter, iconAfterProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconAfter'),\n    overrides.IconAfter,\n  );\n\n  return (\n    <Touchable\n      appearance={appearance}\n      color={color}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      size={size}\n      onPress={onPress}\n      testID={testID}\n      {...touchableProps}\n    >\n      <IconBefore\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconBeforeProps}\n      />\n      {isLoading ? (\n        <Loading appearance={appearance} color={color} {...loadingProps} />\n      ) : (\n        <Title\n          appearance={appearance}\n          color={color}\n          isDisabled={isDisabled}\n          size={size}\n          title={title}\n          {...titleProps}\n        />\n      )}\n      <IconAfter\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconAfterProps}\n      />\n    </Touchable>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ViewStyle };\n  primary: { [size in ButtonColor]: ViewStyle };\n  outline: { [size in ButtonColor]: ViewStyle };\n}\n\ntype ButtonAppearance = keyof ButtonAppearances;\n\nconst getButtonAppearances = (\n  theme: Theme,\n  isLoading: boolean,\n): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: isLoading\n          ? theme.colors.background.greyLight\n          : theme.colors.button.default,\n      },\n      danger: {\n        backgroundColor: isLoading\n          ? theme.colors.background.dangerLight\n          : theme.colors.button.danger,\n      },\n      primary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.primaryLight\n          : theme.colors.button.primary,\n      },\n      secondary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.secondaryLight\n          : theme.colors.button.secondary,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n      },\n    },\n  };\n};\n\ninterface TouchableProps extends TouchableOpacityProps, PropsWithChildren {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    isLoading,\n    size,\n    children,\n    style,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n  const buttonAppearances = getButtonAppearances(theme, isLoading);\n\n  const { borderRadius, height, paddingLeft, paddingRight } = isControlSize(\n    size,\n  )\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size] + 8,\n        paddingRight: theme.controlPaddings[size] + 8,\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium + 8,\n        paddingRight: theme.controlPaddings.medium + 8,\n      };\n\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"button\"\n      disabled={!!(isDisabled || isLoading)}\n      style={[\n        {\n          borderRadius,\n          height,\n          paddingLeft,\n          paddingRight,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          ...buttonAppearances[appearance][color],\n          ...(isDisabled && {\n            backgroundColor: theme.colors.button.disabled,\n          }),\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface ButtonTextColors {\n  minimal: { [size in ButtonColor]: string };\n  primary: { [size in ButtonColor]: string };\n  outline: { [size in ButtonColor]: string };\n}\n\nconst getButtonTextColor = (theme: Theme): ButtonTextColors => {\n  return {\n    minimal: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n    primary: {\n      default: theme.colors.button.defaultText,\n      danger: theme.colors.button.dangerText,\n      primary: theme.colors.button.primaryText,\n      secondary: theme.colors.button.secondaryText,\n    },\n\n    outline: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n  };\n};\n\ninterface TitleProps extends TextProps {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const {\n    appearance,\n    color,\n    isDisabled,\n    size,\n    title,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const textSize = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      weight=\"bold\"\n      style={[\n        {\n          alignItems: 'center',\n          color: isDisabled\n            ? theme.colors.text.muted\n            : getButtonTextColor(theme)[appearance][color],\n          display: 'flex',\n          fontWeight: '600',\n          justifyContent: 'center',\n          textAlign: 'center',\n          paddingHorizontal: 8,\n          ...textSize,\n        },\n        getStyle(props, style),\n      ]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface LoadingProps {\n  color: ButtonColor;\n  appearance: ButtonAppearance;\n}\n\nconst StyledLoading = (props: LoadingProps) => {\n  const { appearance, color } = props;\n  const theme = useTheme();\n\n  return <Dots color={getButtonTextColor(theme)[appearance][color]} />;\n};\n\ninterface IconProps extends PropsWithChildren {\n  size: ControlSize | number;\n  color: ButtonColor;\n  title?: OptionalString;\n  appearance: ButtonAppearance;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StyledIcon = (props: IconProps) => {\n  return <></>;\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, ToastContext, ToastProvider, Toast } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`Make sure to use `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` at the top-level component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<ThemeProvider>{children}</ThemeProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useToast`}</inlineCode>{` you can use to create toasts from anywhere in the application.`}</p>\n    <Playground __position={0} __code={'<ToastProvider>\\n  {/*\\n    We use `ToastContext.Consumer` here due to limitations in docs\\n    Use `const { notify } = useToast()` inside your function component\\n   */}\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <Button\\n        onPress={() =>\\n          notify({\\n            title: \\'Title\\',\\n            description: \\'Description\\',\\n            duration: 5000,\\n          })\\n        }\\n        title=\\\"Open toast\\\"\\n      />\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      ToastContext,\n      ToastProvider,\n      Toast\n    }} mdxType=\"Playground\">\n  <ToastProvider mdxType=\"ToastProvider\">\n    {\n          /*\n           We use `ToastContext.Consumer` here due to limitations in docs\n           Use `const { notify } = useToast()` inside your function component\n          */\n        }\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <Button onPress={() => notify({\n            title: 'Title',\n            description: 'Description',\n            duration: 5000\n          })} title=\"Open toast\" mdxType=\"Button\" />}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"toast-options\"\n    }}>{`Toast Options`}</h2>\n    <Props of={Toast} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}