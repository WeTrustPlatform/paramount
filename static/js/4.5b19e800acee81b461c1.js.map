{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","newHashValue","controlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","propToFn","colors","background","elevation","elevations","shape","containerShapes","Box","children","viewStyles","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","transformedStyles","pureStyles","prop","styleFn","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","getCheckboxStyles","value","isDisabled","_ref$shape","_ref$size","sizeValue","checkColor","text","white","checkboxStyle","objectSpread","content","borderColor","border","borderWidth","primaryDefault","greyDark","touchableStyle","Checkbox","_props$value","_props$isDisabled","_props$isInteractive","isInteractive","onPress","TouchableOpacity","accessible","disabled","Icon_web","State","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","Icon","IconTag","Feather","concat","result","matches","charAt","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","getListItemStyles","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexDirection","rightWrapperStyle","right","zIndex","textWrapperStyle","titleStyle","wrapperStyle","ListItem","avatarProps","title","description","rightNode","leftNode","accessibilityHint","_props$accessible","esm_extends","layoutProps","MDXLayout","MDXContent","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","SelectList","SelectListItem","___WEBPACK_IMPORTED_MODULE_8__","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_6__","onValueChange","newValue","itemIndex","___WEBPACK_IMPORTED_MODULE_7__","label","of","isMDXComponent","SelectListBase","innerRef","isMulti","Array","isArray","getIsMulti","handleOnPress","itemValue","isSelected","filter","val","childrenArray","toArray","data","child","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_2__","ref","keyExtractor","item","getItemLayout","_","index","offset","renderItem","selectListItem","some","selVal","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","_props$index","_props$isSelected","_props$onPress","listItemProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_ListItem__WEBPACK_IMPORTED_MODULE_4__","_Checkbox__WEBPACK_IMPORTED_MODULE_3__","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","getTextStyles","_ref$color","_ref$align","align","weight","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","textProps","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","palette","lightest","light","base","dark","darkest","controlBorderRadius","overlay","greyLight","greyDefault","primaryLight","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","selected","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","merge","all"],"mappings":"0fAKaA,EAAW,SAACC,GACvB,IAAMC,EAAMC,OAAOF,GACfG,EAAO,EAEX,GAA0B,IAAtBF,EAAIG,OAAOC,OAAc,OAAOF,EACpC,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAG9BH,GAAQA,GAAQ,GAAKA,EAFdF,EAAIM,WAAWD,GAKtBH,GAAQA,EAEV,OAAOK,KAAKC,IAAIN,uuBAWlB,IAAMO,EAAiB,SACrBC,EADqBC,GAWlB,IARDC,EAQCD,EARDC,QACAC,EAOCF,EAPDE,MACAC,EAMCH,EANDG,UAOIC,EAAcL,EAAME,EAAU,QAAU,UAE9C,GAAc,cAAVC,EAAuB,CACzB,IAAMG,EAAOC,OAAOD,KAAKD,GAEzB,OAAOA,EADKC,EAAKF,EAAYE,EAAKZ,SAIpC,OAAOW,EAAYF,iTAQrB,IAAMK,EAAiD,CACrDC,MAAO,EACPC,OAAQ,IACRC,MAAO,GAGIC,EAAmC,SAAAC,EAE9CC,GACG,IACCC,EAHFC,EAECH,EAFDG,KAECC,EAAAJ,EAFKV,aAEL,IAAAc,EAFa,YAEbA,EAAAC,EAAAL,EAF0BX,eAE1B,IAAAgB,KAAAC,EAAAN,EAF2CO,YAE3C,IAAAD,EAFkD,SAElDA,EAEGnB,EAAQc,EAAMd,MACpB,GAAc,cAAVG,EAAuB,CACzB,IAAMkB,EAAejC,EAAS4B,GAC9BD,EAAahB,EAAee,EAAMd,MAAO,CACvCG,QACAC,UAAWiB,EACXnB,iBAGFa,EAAahB,EAAeC,EAAO,CAAEG,QAAOD,UAASE,UAAW,IAGlE,IAAMkB,EAAcR,EAAMS,eAAeH,GAAQZ,EAAYY,GAE7D,MAAO,CACLI,eAAgB,CACdC,WAAY,SACZC,gBAAiBX,EAAWW,gBAC5BC,aAAc,KACdC,QAAS,OACTC,OAAQP,EACRQ,eAAgB,SAChBC,SAAU,SACVC,SAAU,WACVC,MAAOX,GAGTY,UAAW,CACT/B,MAAOY,EAAWZ,MAClBgC,SAAUb,EAAc,EACxBc,WAAYd,GAGde,WAAY,CACVR,OAAQ,OACRI,MAAO,m3BCnCN,IAAMK,EAAS,SAACC,GAAuB,IAE1CC,EAMED,EANFC,OACAxB,EAKEuB,EALFvB,KACAyB,EAIEF,EAJFE,UACAC,EAGEH,EAHFG,OACAC,EAEEJ,EAFFI,wBACAC,EACEL,EADFK,mBAGI9B,EAAQ+B,cAV8BC,EAYcC,YACxD,GAb0CC,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAAuC,EAAA,GAYrCI,EAZqCF,EAAA,GAYdG,EAZcH,EAAA,GAetCI,GAAoBZ,GAAUU,EAE9BG,EApE6B,SAACrC,GAAyB,IAAnBsC,EAAmBC,UAAA7D,OAAA,QAAA8D,IAAAD,UAAA,GAAAA,UAAA,GAAR,IACrD,OAAKvC,EAEEA,EACJyC,QAAQ,MAAO,KACfC,MAAM,KACNC,MAAM,EAAG,GACTC,IAAI,SAAAC,GAAC,OAAIA,GAAKA,EAAE,GAAGC,gBACnBC,KAAK,IAPUT,EAmEDU,CAAYhD,GAjBeiD,EAmBMC,YAChDtD,EACA6B,EACA3B,EAAMqD,WAAWvD,gBAH+BsD,CAIhD3B,EAAOzB,GAJDU,EAnBoCyC,EAmBpCzC,eAAgBU,EAnBoB+B,EAmBpB/B,UAAWG,EAnBS4B,EAmBT5B,WAMnC,OACE+B,EAAA,cAACC,EAAA,EAAD,CACEzB,mBAAoBA,EACpB0B,MAAO9C,EACPkB,OAAQA,EAHV6B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAKGtB,GACCgB,EAAA,cAACO,EAAA,EAAD,CAAMlC,UAAW,iBAAO,CAAEP,cAA1BqC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAAyCrB,IAEzCD,KAAsBZ,GACtB4B,EAAA,cAACQ,EAAA,EAAD,CACEhC,mBAAoBD,EACpBkC,QAAS,kBAAM1B,GAAyB,IACxCX,OAAQA,EACR8B,MAAOjC,EAJTkC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,wxBC3FR,IAAMI,EAAW,CACfpD,gBAAiB,SAACvB,EAAwBW,GAExC,OAAIA,EAAMiE,OAAOC,WAAW7E,GAEnB,CAAEuB,gBAAiBZ,EAAMiE,OAAOC,WAAW7E,IAE7C,CACLuB,gBAAiBvB,IAGrB8E,UAAW,SAACA,EAA8BnE,GAA/B,OACTA,EAAMoE,WAAWD,IACnBE,MAAO,SAACA,EAAuBrE,GAAxB,OAAyCA,EAAMsE,gBAAgBD,KAG3DE,EAAM,SAAC9C,GAAoB,IAC9B+C,EAAoC/C,EAApC+C,SAAU5C,EAA0BH,EAA1BG,OAAW6C,EADShF,OAAAiF,EAAA,EAAAjF,CACMgC,EADN,uBAEhCzB,EAAQ+B,cACR4C,EAAoB,GACpBC,EAAa,GAEnB,IAAK,IAAMC,KAAQJ,EACjB,GAAII,EAAM,CAER,IAAMC,EAAUd,EAASa,GAEzB,GAAIC,EAAS,CAEX,IAAMtB,EAAQsB,EAAQL,EAAWI,GAAO7E,GAExC2E,EAAkBI,KAAKvB,QAGvBoB,EAAWC,GAAQJ,EAAWI,GAKpC,OACEG,EAAA,cAACC,EAAA,EAAD,CAAMrD,OAAQA,EAAQ4B,MAAO,CAACoB,EAAYD,GAA1ClB,SAAA,CAAAC,mFAAAE,WAAA,KACGY,4vCCrCA,IAAMU,EAAuC,SAAA/F,EAElDa,GACG,IAFDmF,EAEChG,EAFDgG,MAAOC,EAENjG,EAFMiG,WAENC,EAAAlG,EAFkBkF,aAElB,IAAAgB,EAF0B,UAE1BA,EAAAC,EAAAnG,EAFqCmB,YAErC,IAAAgF,EAF4C,SAE5CA,EACGC,EAAYvF,EAAMS,eAAeH,GAAQ,GAE/C,MAAO,CACLkF,WAAYxF,EAAMiE,OAAOwB,KAAKC,MAE9BC,cAAclG,OAAAmG,EAAA,EAAAnG,CAAA,CACZkB,WAAY,SACZC,gBAAiBZ,EAAMiE,OAAOC,WAAW2B,QACzCC,YAAa9F,EAAMiE,OAAO8B,OAAb,QACbC,YAAa,EACbjF,OAAQwE,EACRvE,eAAgB,SAChBG,MAAOoE,GACHJ,EACA,CACEvE,gBAAiBZ,EAAMiE,OAAOC,WAAW+B,eACzCH,YAAa,eAEf,GACAV,EACA,CACExE,gBAAiBZ,EAAMiE,OAAOC,WAAWgC,SACzCJ,YAAa9F,EAAMiE,OAAO8B,OAAb,SAEf,GACD/F,EAAMsE,gBAAgBD,IAG3B8B,eAAgBnG,EAAMsE,gBAAgBD,mmBCWnC,IAAM+B,EAAW,SAAC3E,GAAyB,IAAA4E,EAS5C5E,EAPF0D,aAF8C,IAAAkB,KAAAC,EAS5C7E,EANF2D,kBAH8C,IAAAkB,KAAAC,EAS5C9E,EALF+E,qBAJ8C,IAAAD,KAK9CE,EAIEhF,EAJFgF,QACA9E,EAGEF,EAHFE,UACAC,EAEEH,EAFFG,OACAE,EACEL,EADFK,mBAGI9B,EAAQ+B,cAXkCoB,EAaMC,YACpD8B,EACAvD,EACA3B,EAAMqD,WAAW6B,kBAHmC9B,CAIpD3B,EAAOzB,GAJDmG,EAbwChD,EAaxCgD,eAAgBR,EAbwBxC,EAaxBwC,cAAeH,EAbSrC,EAaTqC,WAMvC,OACElC,EAAA,cAACoD,EAAA,EAAD,CACEC,WAAYH,EACZhD,MAAO2C,EACPS,SAAUxB,IAAeoB,EACzB5E,OAAQA,EACR6E,QAASA,EACT3E,mBAAoBA,EANtB2B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAQEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOmC,EAAblC,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KACGuB,EAAQ7B,EAAA,cAACuD,EAAA,EAAD,CAAM3G,KAAK,QAAQI,KAAM,GAAIjB,MAAOmG,EAApC/B,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAAqD,qgCC5E/D,IAAMkD,EAAQ,SAACrF,GAAsB,IAClC+C,EAA8B/C,EAA9B+C,SADkCuC,EACJtF,EAApBuF,eADwB,IAAAD,KAAA/E,EAEhBC,IAAMgF,SAASD,GAFC9E,EAAAzC,OAAAyH,EAAA,EAAAzH,CAAAuC,EAAA,GAEnCmF,EAFmCjF,EAAA,GAE5BkF,EAF4BlF,EAAA,GAQ1C,OAAOsC,EAAS,CAAE2C,QAAOC,SAJLnF,IAAMoF,YAAY,SAAAC,GACpCF,EAASE,IACR,6dCFE,IAAMC,EAAO,SAAApI,GAA2C,IAAxCe,EAAwCf,EAAxCe,KAAMb,EAAkCF,EAAlCE,MAAkCiG,EAAAnG,EAA3BmB,YAA2B,IAAAgF,EAApB,GAAoBA,EACvDtF,EAAQ+B,cAERyF,EAAUC,EAAO,KAAAC,OAZzB,SAAyBxH,GACvB,IAIMyH,EAASzH,EAAKyC,QAAQ,UAJV,SAACiF,GACjB,OAAOA,EAAQ,GAAG5E,gBAIpB,OAAO2E,EAAOE,OAAO,GAAG7E,cAAgB2E,EAAO9E,MAAM,GAMxBiF,CAAgB5H,KAE7C,OACE6H,EAAA,cAACP,EAAD,CACEnI,MAAOA,EAAQ2I,YAAahI,EAAMiE,OAAOwB,KAA1BuC,CAAgC3I,GAASA,EACxDiB,KAAMA,EAFRmD,SAAA,CAAAC,yFAAAE,WAAA,47CCDG,IAAMqE,EAAuC,SAAA9I,EAAiBa,GAAU,IAAxBoF,EAAwBjG,EAAxBiG,WACrD,MAAO,CACL8C,iBAAkB,GAClBC,kBAAmB,CACjBC,YAAa,GAEfC,iBAAkB,CAChB1H,WAAY,SACZ2H,cAAe,OAEjBC,kBAAmB,CACjBrH,SAAU,WACVsH,MAAO,EACPC,OAAQ,GAEVC,iBAAkB,CAChB1H,eAAgB,UAElB2H,WAAY,GACZxC,eAAe1G,OAAAmG,EAAA,EAAAnG,CAAA,CACbmB,gBAAiBZ,EAAMiE,OAAOC,WAAW2B,QACzC9E,OAAQ,GACRC,eAAgB,UACZoE,EACA,CAAExE,gBAAiBZ,EAAMiE,OAAOC,WAAWgC,UAC3C,IAEN0C,aAAc,CACZjI,WAAY,SACZ2H,cAAe,MACftH,eAAgB,inBCoBf,IAAM6H,EAAW,SAACpH,GAAyB,IAE9CqH,EAYErH,EAZFqH,YACAnH,EAWEF,EAXFE,UAH8C2E,EAc5C7E,EAVF2D,kBAJ8C,IAAAkB,KAK9CyC,EASEtH,EATFsH,MACAC,EAQEvH,EARFuH,YACAvC,EAOEhF,EAPFgF,QACAwC,EAMExH,EANFwH,UACAC,EAKEzH,EALFyH,SACAtH,EAIEH,EAJFG,OACAuH,EAGE1H,EAHF0H,kBACArH,EAEEL,EAFFK,mBAZ8CsH,EAc5C3H,EADFkF,kBAb8C,IAAAyC,KAe1CpJ,EAAQ+B,cAfkCoB,EA0B5CC,YACF6E,EACAtG,EACA3B,EAAMqD,WAAW4E,kBAHf7E,CAIF3B,EAAOzB,GAZPmI,EAlB8ChF,EAkB9CgF,kBACAE,EAnB8ClF,EAmB9CkF,iBACAK,EApB8CvF,EAoB9CuF,iBACAvC,EArB8ChD,EAqB9CgD,eACAwC,EAtB8CxF,EAsB9CwF,WACAT,EAvB8C/E,EAuB9C+E,iBACAK,EAxB8CpF,EAwB9CoF,kBACAK,EAzB8CzF,EAyB9CyF,aAOF,OACEtF,EAAA,cAACoD,EAAA,EAAD,CACEE,SAAUxB,EACV5B,MAAO2C,EACPvE,OAAQA,EACR6E,QAASA,EACT0C,kBAAmBA,EACnBrH,mBAAoBA,EACpB6E,WAAYA,EAPdlD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MASEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOoF,EAAbnF,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACEN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAO6E,EAAb5E,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGsF,GAAYJ,EACXxF,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAO2E,EAAb1E,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGsF,GAAY5F,EAAA,cAAC9B,EAAA,EAAD/B,OAAA4J,EAAA,EAAA5J,CAAA,CAAQa,KAAK,SAAYwI,EAAzB,CAAArF,SAAA,CAAAC,SAAAC,EAAAC,WAAA,SAEb,KACJN,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAOkF,EAAbjF,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGmF,EACkB,kBAAVA,EACLzF,EAAA,cAACO,EAAA,EAAD,CACElC,UAAW,iBAAO,CAAEP,UAAWuH,IAC/BrI,KAAK,QAFPmD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAIGmF,GAGHA,EAEA,KACHC,EACwB,kBAAhBA,EACL1F,EAAA,cAACO,EAAA,EAAD,CACElC,UAAW,iBAAO,CAAEP,UAAW8G,IAC/B5H,KAAK,SACLjB,MAAM,QAHRoE,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAKGoF,GAGHA,EAEA,OAGO,OAAdC,EAAqB,KACpB3F,EAAA,cAACC,EAAA,EAAD,CAAMC,MAAO+E,EAAb9E,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACGqF,GACC3F,EAAA,cAACuD,EAAA,EAAD,CAAMxH,MAAM,UAAUiB,KAAM,GAAIJ,KAAK,gBAArCuD,SAAA,CAAAC,SAAAC,EAAAC,WAAA,87BC3IR0F,EAAc,GAGdC,EAAY,UACH,SAASC,EAATrK,GAGZ,IAFDkE,EAEClE,EAFDkE,WACG5B,EACFhC,OAAAiF,EAAA,EAAAjF,CAAAN,EAAA,gBACD,OAAOM,OAAAgK,EAAA,EAAAhK,CAAC8J,EAAD9J,OAAAiK,EAAA,EAAAjK,CAAA,GAAe6J,EAAiB7H,EAAhC,CAAuC4B,WAAYA,EAAYsG,QAAQ,YAAvElG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MAGLnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAA,OAAAiK,EAAA,EAAAjK,CAAQ,CACNmK,GAAM,cADR,CAAAnG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,oBAGAnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAgE,SAAA,CAAAC,SAAAC,EAAAC,WAAA,4FACAnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAgE,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAAGnE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,uBAAH,aAA2EnE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,iBAA3E,QAAwInE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,mBAAxI,aAA4MnE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,iBAA5M,iBAAkRnE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,YAAlR,eAAiVnE,OAAAgK,EAAA,EAAAhK,CAAA,cAAYoK,WAAW,IAAvBpG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,iBAAjV,YACAnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAA,OAAAiK,EAAA,EAAAjK,CAAQ,CACNmK,GAAM,SADR,CAAAnG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,eAGAnE,OAAAgK,EAAA,EAAAhK,CAACqK,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,20CAAw5CC,QAAS,CACl8CxI,MAAOyI,KAAOA,KAAKzI,MAAQA,EAC3B0I,eACAC,UACA7F,QACA8F,eACAC,mBACAxD,WACC6C,QAAQ,aARXlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KASFnE,OAAAgK,EAAA,EAAAhK,CAAC8K,EAAA,EAAD,CAAOvD,QAAS,CACV7B,MAAO,CAAC,IAAK,KAAM,OAClBwE,QAAQ,QAFflG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAGG,SAAA7D,GAAA,IACKoH,EADLpH,EACKoH,MACAC,EAFLrH,EAEKqH,SAFL,OAGS3H,OAAAgK,EAAA,EAAAhK,CAAC+K,EAAA,EAAD,CAAKzJ,OAAQ,IAAK4I,QAAQ,MAA1BlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KACNnE,OAAAgK,EAAA,EAAAhK,CAACgL,EAAA,EAAD,CAAYtF,MAAOgC,EAAMhC,MAAOuF,cAAe,SAACC,EAAUC,GACtDxD,EAAS,CACPjC,MAAOwF,KAERhB,QAAQ,aAJblG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,KAKEnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,IAAI3F,MAAM,IAAIwE,QAAQ,iBAA5ClG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,KAAK3F,MAAM,KAAKwE,QAAQ,iBAA9ClG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,MAAM3F,MAAM,MAAMwE,QAAQ,iBAAhDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,MAAM3F,MAAM,MAAMwE,QAAQ,iBAAhDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,SAAS3F,MAAM,SAASwE,QAAQ,iBAAtDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,MAAM3F,MAAM,MAAMwE,QAAQ,iBAAhDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,SAAS3F,MAAM,SAASwE,QAAQ,iBAAtDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,KAAK3F,MAAM,KAAKwE,QAAQ,iBAA9ClG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,UAAU3F,MAAM,UAAUwE,QAAQ,iBAAxDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,OAAO3F,MAAM,OAAOwE,QAAQ,iBAAlDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,OAAO3F,MAAM,OAAOwE,QAAQ,iBAAlDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,aAAa3F,MAAM,KAAKwE,QAAQ,iBAAtDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,MAAM3F,MAAM,MAAMwE,QAAQ,iBAAhDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,SAAS3F,MAAM,SAASwE,QAAQ,iBAAtDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,IAAI3F,MAAM,IAAIwE,QAAQ,iBAA5ClG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,OAAO3F,MAAM,OAAOwE,QAAQ,iBAAlDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,OAAO3F,MAAM,OAAOwE,QAAQ,iBAAlDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,SAAS3F,MAAM,QAAQwE,QAAQ,iBAArDlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAACoL,EAAA,EAAD,CAAgBC,MAAM,aAAa3F,MAAM,aAAawE,QAAQ,iBAA9DlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,WAKNnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAA,OAAAiK,EAAA,EAAAjK,CAAQ,CACNmK,GAAM,oBADR,CAAAnG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,0BAGAnE,OAAAgK,EAAA,EAAAhK,CAACqK,EAAA,EAAD,CAAOiB,GAAIV,IAAYV,QAAQ,QAA/BlG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,MACAnE,OAAAgK,EAAA,EAAAhK,CAAA,KAAAA,OAAAiK,EAAA,EAAAjK,CAAQ,CACNmK,GAAM,wBADR,CAAAnG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,8BAGAnE,OAAAgK,EAAA,EAAAhK,CAACqK,EAAA,EAAD,CAAOiB,GAAIT,IAAgBX,QAAQ,QAAnClG,SAAA,CAAAC,SAAAC,EAAAC,WAAA,qMAIJ4F,EAAWwB,gBAAiB,kuBCjD5B,IAGMC,EAAiB,SAACxJ,GAAgC,IAC9C0D,EAA6C1D,EAA7C0D,MAAOuF,EAAsCjJ,EAAtCiJ,cAAelG,EAAuB/C,EAAvB+C,SAAU0G,EAAazJ,EAAbyJ,SAClClL,EAAQ+B,cACRoJ,EANW,SAAChG,GAAD,OACjBiG,MAAMC,QAAQlG,GAKEmG,CAAWnG,GAErBoG,EAAgBtJ,cACpB,SAACuJ,EAAmBZ,EAAmBa,GACjCN,GAAWC,MAAMC,QAAQlG,GAEzBuF,EADEe,EACYtG,EAAMuG,OAAO,SAAAC,GAAG,OAAIA,IAAQH,IAE5BrG,EAAMuC,OAAO8D,GAF2BZ,GAKxDF,EAAcc,EAAWZ,IAG7B,CAACzF,EAAOuF,IAGJkB,EAAgB3J,WAAe4J,QAAQrH,GACvCsH,EAAOF,EAAc9I,IAAI,SAAAiJ,GAAK,OAAIA,EAAMtK,QAE9C,OACEuD,EAAA,cAACgH,EAAA,EAAD,CACEC,IAAKf,EACLgB,aAAc,SAAAC,GAAI,OAAIA,EAAKhH,OAC3BiH,cAAe,SAACC,EAAGC,GAAJ,MAAe,CAC5BA,QACA1N,OAAQoB,EAAMS,eAAeb,OAC7B2M,OAAQvM,EAAMS,eAAeb,OAAS0M,IAExCR,KAAMA,EACNU,WAAY,SAAArN,GAAqB,IAAlBgN,EAAkBhN,EAAlBgN,KAAMG,EAAYnN,EAAZmN,MACbG,EAAiBb,EAAcU,GAE/Bb,EACJN,GAAWC,MAAMC,QAAQlG,GACrBA,EAAMuH,KAAK,SAAAC,GAAM,OAAIA,IAAWR,EAAKhH,QACrCA,IAAUgH,EAAKhH,MAErB,OAAOlD,eAAmBwK,EAAgB,CACxCH,QACAb,aACAhF,QAAS8E,KApBf9H,SAAA,CAAAC,SAAAC,EAAAC,WAAA,OA2BSyG,EAAapI,aAGxB,SAACR,EAAOwK,GACR,OAAOjH,EAAA,cAACiG,EAADxL,OAAAmN,EAAA,EAAAnN,CAAA,GAAoBgC,EAApB,CAA2ByJ,SAAUe,EAArCxI,SAAA,CAAAC,SAAAC,EAAAC,WAAA,glCC7DF,IAAM0G,EAAiB,SAAC7I,GAA+B,IAAAoL,EAUxDpL,EARF6K,aAF0D,IAAAO,EAElD,EAFkDA,EAAAC,EAUxDrL,EAPFgK,kBAH0D,IAAAqB,KAI1DhC,EAMErJ,EANFqJ,MAJ0DiC,EAUxDtL,EALFgF,eAL0D,IAAAsG,EAKhD,aALgDA,EAQ1D5H,EAEE1D,EAFF0D,MACG6H,EATuDvN,OAAAwN,EAAA,EAAAxN,CAUxDgC,EAVwD,kDAY5D,OACEyL,EAAA,cAACC,EAAA,EAAD1N,OAAAmN,EAAA,EAAAnN,CAAA,CACEgH,QAAS,WACPA,EAAQtB,EAAOmH,EAAOb,IAExB1C,MAAO+B,EACP7B,UACEiE,EAAA,cAACE,EAAA,EAAD,CAAU5G,eAAe,EAAOnC,MAAM,SAASc,MAAOsG,EAAtDhI,SAAA,CAAAC,SAAAC,EAAAC,WAAA,OAEEoJ,EARN,CAAAvJ,SAAA,CAAAC,SAAAC,EAAAC,WAAA,uiCC3BG,IAAMyJ,EAAgB,SAACC,GAAD,OAA8B,SACzDC,GAEA,GAAKA,EAKL,OAHyBD,EAAYC,IAGVA,6NAGtB,IAAMvF,EAAe,SAACwF,GAAD,OAA4B,SACtDC,GAKA,OAFoBD,EAAWC,IAETA,4NAGjB,IAAMC,EAAc,SAACC,GAAD,OAA0B,SACnDrN,GAKA,OAFuBqN,EAAUrN,IAER,CAAEe,SAAUf,oMAGhC,IAAMsN,EAA+B,SAAAzO,EAS1Ca,GACG,IAAA6N,EAAA1O,EARDE,aAQC,IAAAwO,EARO,UAQPA,EAAAvI,EAAAnG,EAPDmB,YAOC,IAAAgF,EAPM,SAONA,EAAAwI,EAAA3O,EAND4O,aAMC,IAAAD,EANO,OAMPA,EALDE,EAKC7O,EALD6O,OAKCC,EAAA9O,EAJD+O,gBAIC,IAAAD,KAHDE,EAGChP,EAHDgP,UAIIC,EAAYV,EAAY1N,EAAM2N,UAAlBD,CAA6BpN,GAE/C,MAAO,CACLc,UAAU3B,OAAA4O,EAAA,EAAA5O,CAAA,GACL2O,EADI,CAEP/O,MAAO2I,EAAahI,EAAMiE,OAAOwB,KAA1BuC,CAAgC3I,GACvCiP,WAAYtO,EAAMuO,aAAa9I,KAC/B8H,WACEF,EAAcrN,EAAMsN,YAApBD,CAAiCW,IAAWI,EAAUb,WACxDiB,UAAWT,GACPG,GAAY,CACdO,UAAW,UAETN,GAAa,CACfO,cAAeP,++BCrBhB,IAAMtK,EAAO,SAACpC,GAAqB,IAEtC+C,EASE/C,EATF+C,SAKA7C,GAIEF,EARFpC,MAQEoC,EAPFnB,KAOEmB,EANFsM,MAMEtM,EALFuM,OAKEvM,EAJFE,WAGGgN,GACDlN,EAHFyM,SAGEzM,EAFF0M,UATsC1O,OAAAwN,EAAA,EAAAxN,CAWpCgC,EAXoC,kFAYlCzB,EAAQ+B,cAENX,EAAcgC,YACpBwK,IACAjM,EACA3B,EAAMqD,WAAWuK,cAHGxK,CAIpB3B,EAAOzB,GAJDoB,UAMR,OACE8L,EAAA,cAAC0B,EAAA,EAADnP,OAAAmN,EAAA,EAAAnN,CAAA,CAAQ+D,MAAOpC,GAAeuN,EAA9B,CAAAlL,SAAA,CAAAC,2FAAAE,WAAA,MACGY,05BCtDQ,IAAAqK,EACJ,CACPC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WANEL,EASP,CACJC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAdEL,EAiBR,CACHC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtBEL,EAyBL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WA9BEL,EAiCL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtCEL,EAyCN,CACLC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WA9CEL,EAiDP,CACJC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,WAtDEL,EAyDL,CACNC,SAAU,UACVC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,QAAS,0rDChEb,IAgBMC,EAAoC,CACxCtP,MAAO,EAEPD,OAAQ,EAERD,MAAO,GAGHsE,EAAiB,CACrBC,WAAY,CACV8K,KAAM,QACNnJ,QAAS,QACTuJ,QAAS,kBAETC,UAAWR,EAAgBC,SAC3BQ,YAAa,UACbpJ,SAAU2I,EAAgBE,MAE1BQ,aAAcV,EAAaC,SAC3B7I,eAAgB4I,EAAaG,KAC7BQ,YAAaX,EAAaI,KAE1BQ,eAAgBZ,EAAeC,SAC/BY,iBAAkBb,EAAeG,KACjCW,cAAed,EAAeI,KAE9BW,YAAaf,EAAYC,SACzBe,cAAehB,EAAYG,KAC3Bc,WAAYjB,EAAYI,KAExBc,UAAWlB,EAAaC,SACxBkB,YAAanB,EAAaG,KAC1BiB,SAAUpB,EAAaI,KAEvBiB,aAAcrB,EAAcC,SAC5BqB,eAAgBtB,EAAcG,KAC9BoB,YAAavB,EAAcI,KAE3BoB,aAAcxB,EAAeC,SAC7BwB,eAAgBzB,EAAeG,KAC/BuB,YAAa1B,EAAeI,MAG9BlJ,OAAQ,CACNyK,QAAS3B,EAAgBE,MAEzB0B,QAAS5B,EAAaK,QACtBwB,UAAW7B,EAAeK,QAE1ByB,OAAQ9B,EAAYK,QACpB0B,KAAM/B,EAAaK,QACnB2B,QAAShC,EAAcK,QACvB4B,QAASjC,EAAeK,SAG1B6B,OAAQ,CACNnK,SAAUiI,EAAgBE,MAC1BiC,aAAcnC,EAAgBK,QAE9BsB,QAAS3B,EAAgBC,SACzBmC,YAAapC,EAAgBK,QAE7BuB,QAAS5B,EAAaG,KACtBkC,YAAa,QAEbR,UAAW7B,EAAeG,KAC1BmC,cAAe,QAEfR,OAAQ9B,EAAYG,KACpBoC,WAAY,SAGd3L,KAAM,CACJ4L,KAAMxC,EAAgBK,QACtBsB,QAAS3B,EAAgBK,QACzBoC,MAAOzC,EAAgBI,KACvBvJ,MAAO,QACP6L,SAAU,QAEVd,QAAS5B,EAAaK,QACtBwB,UAAW7B,EAAeK,QAE1ByB,OAAQ9B,EAAYK,QACpB0B,KAAM/B,EAAaK,QACnB2B,QAAShC,EAAcK,QACvB4B,QAASjC,EAAeK,UAItB9K,EAAyB,CAC7B,CACED,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,EACfC,aAAc,GAEhB,CACExN,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,IACfC,aAAc,GAEhB,CACExN,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,GACfC,aAAc,IAEhB,CACExN,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,IACfC,aAAc,IAEhB,CACExN,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,GACfC,aAAc,GAEhB,CACExN,UAAW,EACXqN,YAAa3C,EAAgBI,KAC7BwC,aAAc,CAAEtQ,MAAO,EAAGJ,OAAQ,GAClC2Q,cAAe,IACfC,aAAc,IAmNLC,EAAsB,CACjC3N,SACA/E,MAjNmB,CACnB2S,MAAO,CACLC,QAAS,CACPlR,gBAAiBiO,EAAgBG,KACjC3P,MAAO,SAGT0S,KAAM,CACJnR,gBAAiBiO,EAAaG,KAC9B3P,MAAO,SAGT2S,IAAK,CACHpR,gBAAiBiO,EAAYG,KAC7B3P,MAAO,SAGT4S,OAAQ,CACNrR,gBAAiBiO,EAAeG,KAChC3P,MAAO,SAGT6S,OAAQ,CACNtR,gBAAiBiO,EAAeG,KAChC3P,MAAOwP,EAAeK,SAGxBiD,MAAO,CACLvR,gBAAiBiO,EAAcG,KAC/B3P,MAAO,SAGT+S,KAAM,CACJxR,gBAAiBiO,EAAaG,KAC9B3P,MAAO,SAGTgT,OAAQ,CACNzR,gBAAiBiO,EAAeG,KAChC3P,MAAO,UAIXiT,OAAQ,CACNR,QAAS,CACPlR,gBAAiBiO,EAAgBE,MACjC1P,MAAOwP,EAAgBK,SAGzB6C,KAAM,CACJnR,gBAAiBiO,EAAaE,MAC9B1P,MAAOwP,EAAaK,SAGtB8C,IAAK,CACHpR,gBAAiBiO,EAAYE,MAC7B1P,MAAOwP,EAAYK,SAGrB+C,OAAQ,CACNrR,gBAAiBiO,EAAeE,MAChC1P,MAAOwP,EAAeK,SAGxBgD,OAAQ,CACNtR,gBAAiBiO,EAAeE,MAChC1P,MAAOwP,EAAeK,SAGxBiD,MAAO,CACLvR,gBAAiBiO,EAAcE,MAC/B1P,MAAOwP,EAAcK,SAGvBkD,KAAM,CACJxR,gBAAiBiO,EAAaE,MAC9B1P,MAAOwP,EAAaK,SAGtBmD,OAAQ,CACNzR,gBAAiBiO,EAAeE,MAChC1P,MAAOwP,EAAeK,WAkI1BX,aA3HgB,QAAhBgE,IAASC,GACL,CACEC,QAAO,iKACPC,KAAI,mGACJjN,KAAI,+JAEN,CACEgN,QAAS,SACTC,KAAM,SACNjN,KAAM,UAmHZ6H,YAhH+B,CAC/BqF,KAAM,OACN5D,MAAO,MACP6D,OAAQ,UA+GRC,aA5GiC,CACjCC,SAAU,CACRzR,SAAU,GACV0R,eAAgB,GAChBzR,WAAY,IAGd0R,QAAS,CACP3R,SAAU,GACV0R,eAAgB,GAChBzR,WAAY,IAGd2R,OAAQ,CACN5R,SAAU,GACV0R,eAAgB,IAChBzR,WAAY,IAGd3B,MAAO,CACL0B,SAAU,GACV0R,eAAgB,IAChBzR,WAAY,IAGd1B,OAAQ,CACNyB,SAAU,GACV0R,eAAgB,IAChBzR,WAAY,IAGdzB,MAAO,CACLwB,SAAU,GACV0R,eAAgB,IAChBzR,WAAY,KA2Ed4R,eAvEqC,CACrCrT,MAAO,CACLwB,SAAU,GACVC,WAAY,IAGd1B,OAAQ,CACNyB,SAAU,GACVC,WAAY,IAGd3B,MAAO,CACL0B,SAAU,GACVC,WAAY,KA2DdqM,UAvD2B,CAC3BhO,MAAO,CACL0B,SAAU,IAEZzB,OAAQ,CACNyB,SAAU,IAEZxB,MAAO,CACLwB,SAAU,IAEZ8R,OAAQ,CACN9R,SAAU,KA8CZ+C,aAEA+K,sBACA1O,eA3WmC,CACnCZ,MAAO,GAEPD,OAAQ,GAERD,MAAO,IAuWPyT,gBApXoC,CACpCvT,MAAO,EAEPD,OAAQ,GAERD,MAAO,IAiXP2E,gBAhDuC,CACvC+O,OAAQ,CACNxS,aAAc,KAEhByS,KAAM,CACJzS,aAAc,KAEhB0S,QAAS,CACP1S,aAAcsO,EAAoBvP,QAEpC4T,cAAe,CACbC,uBAAwBtE,EAAoBvP,OAC5C8T,wBAAyBvE,EAAoBvP,QAE/C+T,YAAa,CACXF,uBAAwBtE,EAAoBvP,OAC5CgU,oBAAqBzE,EAAoBvP,QAE3CiU,aAAc,CACZH,wBAAyBvE,EAAoBvP,OAC7CkU,qBAAsB3E,EAAoBvP,QAE5CmU,WAAY,CACVH,oBAAqBzE,EAAoBvP,OACzCkU,qBAAsB3E,EAAoBvP,QAE5CoU,OAAQ,CACNnT,aAAc,IAuBhBwC,WAAY,utQClGP,IAAM4Q,EAAehS,IAAMiS,cAActC,qfAOzC,IAAMuC,EAAc,SAACnU,GAC1B,OAAOA,EACHoU,IAAiBxC,EAAc5R,GAC/B4R,6KAGC,IAAMyC,EAAgB,SAAC5S,GAA8B,IAClD+C,EAAmC/C,EAAnC+C,SADkD6B,EACf5E,EAAzB0D,MAEZnF,EAAQmU,OAH4C,IAAA9N,EAChCuL,EADgCvL,GAK1D,OACEiO,EAAAC,EAAAC,cAACP,EAAaQ,SAAd,CAAuBtP,MAAOnF,EAA9ByD,SAAA,CAAAC,4EAAAE,WAAA,MAAsCY,gLAInC,IAAMzC,EAAW,WACtB,OAAOE,IAAMyS,WAAWT,8PCjU1BU,EAAAC,EAAAC,EAAA,sBAAAzR,IAAA,IAAA0R,EAAAH,EAAA,wCAAAI,EAAAJ,EAAAK,EAAAF,szBAiBO,IAAM1R,EAAc,SACzB6R,EACAC,EACAC,GAHyB,OAItB,SAAC1T,EAAoBzB,GACxB,IAEMoV,EAAkC,CAFlBH,EAAiBxT,EAAOzB,IAY9C,OARImV,GACFC,EAAOrQ,KAAKoQ,EAAe1T,EAAOzB,IAGhCkV,GACFE,EAAOrQ,KAAKmQ,EAAoBzT,EAAOzB,IAGlCqV,IAAMC,IAAaF","file":"static/js/4.090e1f0b.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => AvatarStyles;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = theme.controlHeights[size] * avatarScale[size];\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { value, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(value\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    value = false,\n    isDisabled = false,\n    isInteractive = true,\n    onPress,\n    getStyles,\n    testID,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      disabled={isDisabled || !isInteractive}\n      testID={testID}\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <View style={checkboxStyle}>\n        {value ? <Icon name=\"check\" size={20} color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size = 24 }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  rightWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = ({ isDisabled }, theme) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    rightWrapperStyle: {\n      position: 'absolute',\n      right: 0,\n      zIndex: 2,\n    },\n    textWrapperStyle: {\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: theme.colors.background.content,\n      height: 72,\n      justifyContent: 'center',\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Title of the list item\n   */\n  title?: React.ReactNode;\n\n  /**\n   * Description of the list item\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * React node replacing `Avatar` on the left hand-side\n   */\n  leftNode?: React.ReactNode;\n\n  /**\n   * React node replacing right hand-side icon\n   */\n  rightNode?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    rightNode,\n    leftNode,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    rightWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {leftNode || avatarProps ? (\n            <View style={imageWrapperStyle}>\n              {leftNode || <Avatar size=\"small\" {...avatarProps} />}\n            </View>\n          ) : null}\n          <View style={textWrapperStyle}>\n            {title ? (\n              typeof title === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: titleStyle })}\n                  size=\"large\"\n                >\n                  {title}\n                </Text>\n              ) : (\n                title\n              )\n            ) : null}\n            {description ? (\n              typeof description === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: descriptionStyle })}\n                  size=\"medium\"\n                  color=\"muted\"\n                >\n                  {description}\n                </Text>\n              ) : (\n                description\n              )\n            ) : null}\n          </View>\n        </View>\n        {rightNode === null ? null : (\n          <View style={rightWrapperStyle}>\n            {rightNode || (\n              <Icon color=\"default\" size={24} name=\"chevron-right\" />\n            )}\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, SelectList, SelectListItem, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item.`}</p>\n    <p><inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{`. You can use `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` to trigger `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{` methods`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: [\\'c\\', \\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={300}>\\n      <SelectList\\n        value={state.value}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ value: newValue })\\n        }}\\n      >\\n        <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n        <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n        <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n        <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n        <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n        <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n        <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n        <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n        <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n        <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n        <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n        <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n        <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n        <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n        <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n        <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n        <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n        <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n        <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n      </SelectList>\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ['c', 'js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={300} mdxType=\"Box\">\n        <SelectList value={state.value} onValueChange={(newValue, itemIndex) => {\n            setState({\n              value: newValue\n            });\n          }} mdxType=\"SelectList\">\n          <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n          <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n        </SelectList>\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"selectlist-props\"\n    }}>{`SelectList Props`}</h2>\n    <Props of={SelectList} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"selectlistitem-props\"\n    }}>{`SelectListItem Props`}</h2>\n    <Props of={SelectListItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemProps } from './SelectListItem';\n\nexport interface SelectListProps {\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value: string | string[];\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n\n  /**\n   * `SelectListItem` components\n   */\n  children:\n    | Array<React.ReactElement<SelectListItemProps>>\n    | React.ReactElement<SelectListItemProps>;\n\n  /**\n   * Use `ref` prop instead for using `FlatList` methods\n   */\n  innerRef?: React.Ref<FlatList<SelectListItemProps>>;\n}\n\nconst getIsMulti = (value: string | string[]): value is string[] =>\n  Array.isArray(value);\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const { value, onValueChange, children, innerRef } = props;\n  const theme = useTheme();\n  const isMulti = getIsMulti(value);\n\n  const handleOnPress = React.useCallback(\n    (itemValue: string, itemIndex: number, isSelected: boolean) => {\n      if (isMulti && Array.isArray(value)) {\n        if (isSelected) {\n          onValueChange(value.filter(val => val !== itemValue), itemIndex);\n        } else {\n          onValueChange(value.concat(itemValue), itemIndex);\n        }\n      } else {\n        onValueChange(itemValue, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(value)\n            ? value.some(selVal => selVal === item.value)\n            : value === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onPress: handleOnPress,\n        });\n      }}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemProps extends Omit<ListItemProps, 'onPress'> {\n  /**\n   * Injected by SelectList. Index of the item on the list.\n   * @default 0\n   */\n  index?: number;\n\n  /**\n   * Injected by SelectList. When true, it will be marked as checked\n   * @default false\n   */\n  isSelected?: boolean;\n\n  /**\n   * Injected by SelectList. Called when pressed select list item\n   */\n  onPress?: (value: string, index: number, isSelected: boolean) => void;\n\n  /**\n   * Value of the select list item\n   */\n  value: string;\n\n  /**\n   * Label of the select list item\n   */\n  label: string;\n}\n\nexport const SelectListItem = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={() => {\n        onPress(value, index, isSelected);\n      }}\n      title={label}\n      rightNode={\n        <Checkbox isInteractive={false} shape=\"circle\" value={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { GetWheelPickerStyles } from '../components/WheelPicker/WheelPicker.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getWheelPickerStyles?: GetWheelPickerStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}