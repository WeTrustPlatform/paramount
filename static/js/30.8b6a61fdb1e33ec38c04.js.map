{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.tsx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_Badge","_theme","_Box","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Badge","ThemeContext","Box","color","size","shape","isSolid","getStyles","theme","containerStyle","textStyle","Consumer","Object","keys","fills","solid","map","flexDirection","key","of","isMDXComponent","getBadgeVariables","sizes","small","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","getBadgeStyles","badgeVariables","shapeStyles","shapeMapping","colors","subtle","_badgeVariables$sizes","_objectSpread2","alignItems","alignSelf","backgroundColor","display","justifyContent","textTransform","React","_interopRequireWildcard","_reactNative","_mergeStyles2","_Typography","children","_props$color","_props$isSolid","_props$shape","_props$size","testID","useTheme","_mergeStyles","mergeStyles","createElement","View","style","Text","weight"],"mappings":"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","file":"static/js/30.4f1ad7bf.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Badge } from './Badge';\nimport { ThemeContext } from '../../theme';\nimport { Box } from '../Box';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"badge\"\n    }}>{`Badge`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Box>\\n  <Badge\\n    color=\\\"blue\\\"\\n    size=\\\"large\\\"\\n    shape=\\\"rounded\\\"\\n    isSolid={false}\\n    getStyles={(props, theme) => ({\\n      containerStyle: {},\\n      textStyle: {},\\n    })}\\n  >\\n    Badge\\n  </Badge>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Badge,\n      ThemeContext,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Badge color=\"blue\" size=\"large\" shape=\"rounded\" isSolid={false} getStyles={(props, theme) => ({\n          containerStyle: {},\n          textStyle: {}\n        })} mdxType=\"Badge\">\n      Badge\n    </Badge>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h3>\n    <Playground __position={1} __code={'<ThemeContext.Consumer>\\n  {theme => (\\n    <Box>\\n      {Object.keys(theme.fills.solid).map(color => (\\n        <Box flexDirection=\\\"row\\\" key={color}>\\n          <Badge color={color}>{color}</Badge>\\n          <Badge color={color} isSolid>\\n            {color}\\n          </Badge>\\n        </Box>\\n      ))}\\n    </Box>\\n  )}\\n</ThemeContext.Consumer>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Badge,\n      ThemeContext,\n      Box\n    }} mdxType=\"Playground\">\n  <ThemeContext.Consumer>\n    {theme => <Box mdxType=\"Box\">\n        {Object.keys(theme.fills.solid).map(color => <Box flexDirection=\"row\" key={color} mdxType=\"Box\">\n            <Badge color={color} mdxType=\"Badge\">{color}</Badge>\n            <Badge color={color} isSolid mdxType=\"Badge\">\n              {color}\n            </Badge>\n          </Box>)}\n      </Box>}\n  </ThemeContext.Consumer>\n    </Playground>\n    <h3 {...{\n      \"id\": \"pills\"\n    }}>{`Pills`}</h3>\n    <Playground __position={2} __code={'<ThemeContext.Consumer>\\n  {theme => (\\n    <Box>\\n      {Object.keys(theme.fills.solid).map(color => (\\n        <Box flexDirection=\\\"row\\\" key={color}>\\n          <Badge shape=\\\"pill\\\" color={color}>\\n            {color}\\n          </Badge>\\n          <Badge shape=\\\"pill\\\" color={color} isSolid>\\n            {color}\\n          </Badge>\\n        </Box>\\n      ))}\\n    </Box>\\n  )}\\n</ThemeContext.Consumer>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Badge,\n      ThemeContext,\n      Box\n    }} mdxType=\"Playground\">\n  <ThemeContext.Consumer>\n    {theme => <Box mdxType=\"Box\">\n        {Object.keys(theme.fills.solid).map(color => <Box flexDirection=\"row\" key={color} mdxType=\"Box\">\n            <Badge shape=\"pill\" color={color} mdxType=\"Badge\">\n              {color}\n            </Badge>\n            <Badge shape=\"pill\" color={color} isSolid mdxType=\"Badge\">\n              {color}\n            </Badge>\n          </Box>)}\n      </Box>}\n  </ThemeContext.Consumer>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Badge} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport {\n  ControlSize,\n  FillColor,\n  Fills,\n  Theme,\n} from '../../theme/ThemeInterface';\nimport { Shape, shapeMapping } from '../Box';\n\nexport interface BadgeVariables {\n  fills: Fills;\n  sizes: { [size in ControlSize]: ViewStyle };\n}\nexport const getBadgeVariables = (theme: Theme): BadgeVariables => {\n  return {\n    fills: theme.fills,\n\n    sizes: {\n      small: {\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface BadgeStylesProps {\n  shape: Shape;\n  size: ControlSize;\n  color: FillColor;\n  isSolid: boolean;\n}\n\nexport interface BadgeStyles {\n  textStyle: TextStyle;\n  containerStyle: ViewStyle;\n}\n\nexport type GetBadgeStyles = (\n  props: BadgeStylesProps,\n  theme: Theme,\n) => BadgeStyles;\n\nexport const getBadgeStyles: GetBadgeStyles = (\n  { size, color, isSolid, shape },\n  theme,\n) => {\n  const badgeVariables = getBadgeVariables(theme);\n\n  const shapeStyles = shapeMapping[shape];\n  const fills = isSolid\n    ? badgeVariables.fills.solid\n    : badgeVariables.fills.subtle;\n\n  const colors = fills[color];\n  const { height, paddingLeft, paddingRight } = badgeVariables.sizes[size];\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      alignSelf: 'flex-start',\n      backgroundColor: colors.backgroundColor,\n      display: 'flex',\n      flexDirection: 'row',\n      height,\n      justifyContent: 'center',\n      paddingLeft,\n      paddingRight,\n      ...shapeStyles,\n    },\n    textStyle: {\n      color: colors.color,\n      textTransform: 'uppercase',\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/ThemeInterface';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Shape } from '../Box';\nimport { Text } from '../Typography';\nimport { BadgeStyles, GetBadgeStyles, getBadgeStyles } from './Badge.styles';\n\nexport interface BadgeProps {\n  children: React.ReactNode;\n  color?: FillColor;\n  size?: ControlSize;\n  shape?: Shape;\n  isSolid?: boolean;\n  getStyles?: ReplaceReturnType<GetBadgeStyles, DeepPartial<BadgeStyles>>;\n  testID?: string;\n}\n\nexport const Badge = (props: BadgeProps) => {\n  const {\n    children,\n    color = 'neutral',\n    getStyles,\n    isSolid = false,\n    shape = 'rounded',\n    size = 'medium',\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { containerStyle, textStyle } = mergeStyles(getBadgeStyles, getStyles)(\n    { size, color, isSolid, shape },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      <Text\n        weight=\"bold\"\n        size={size}\n        getStyles={() => ({\n          textStyle,\n        })}\n      >\n        {children}\n      </Text>\n    </View>\n  );\n};\n"],"sourceRoot":""}