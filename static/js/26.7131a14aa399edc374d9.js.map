{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/hooks/useMeasure.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.mdx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/usePrevious.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/ControlSize.ts"],"names":["initialMeasurements","height","pageX","pageY","width","x","y","adjustPageY","Platform","OS","window","scrollY","useMeasure","props","onMeasure","ref","_React$useState","React","_React$useState2","Object","slicedToArray","measurements","setMeasurements","handleMeasure","layout","handle","findNodeHandle","current","prevMeasurements","UIManager","measure","newMeasurements","objectSpread","handleLayout","e","nativeEvent","handleResize","Dimensions","addEventListener","removeEventListener","onLayout","ViewMeasure","children","viewProps","objectWithoutProperties","isRenderProp","_useMeasure","react","View","esm_extends","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Slider","___WEBPACK_IMPORTED_MODULE_5__","size","value","onValueChange","console","log","onSlidingComplete","onSlidingStart","parentName","step","minimumValue","maximumValue","of","isMDXComponent","usePrevious","getBoundedValueBase","isRangeValue","Array","isArray","getLeftValue","getRightValue","_props$value","initialValue","_props$onSlidingStart","_props$onSlidingCompl","_props$onValueChange","_props$minimumValue","_props$maximumValue","_props$step","_props$size","_props$isRange","isRange","_props$overrides","overrides","theme","useTheme","finalInitialValue","setValue","_React$useState3","_React$useState4","isSliding","setIsSliding","_React$useState5","_React$useState6","trackMeasurements","setTrackMeasurements","prevIsSliding","valuePerPixel","pixelPerValue","isRangeSlider","handleLeftSlide","dx","leftValue","roundedLeftValue","Math","round","finalLeftValue","updatedValue","previousValue","setLeftValue","handleRightSlide","rightValue","roundedRightValue","finalRightValue","setRightValue","makeThumbRef","handler","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_","_ref2","onPanResponderRelease","leftThumbRef","rightThumbRef","left","right","_getOverrides","getOverrides","StyledRoot","dlv","Root","_getOverrides2","rootProps","_getOverrides3","StyledUnselectedTrack","UnselectedTrack","_getOverrides4","unselectedTrackProps","_getOverrides5","StyledSelectedTrack","SelectedTrack","_getOverrides6","selectedTrackProps","_getOverrides7","StyledThumb","position","panHandlers","LeftThumb","_getOverrides8","leftThumbProps","_getOverrides9","RightThumb","_getOverrides10","rightThumbProps","style","viewMeasureProps","controlSize","isControlSize","controlHeights","justifyContent","backgroundColor","colors","background","greyDark","borderRadius","_props$left","_props$right","primaryDefault","_props$isSliding","_props$position","cursor","accessible","content","borderColor","border","primary","borderWidth","zIndex","__webpack_require__","d","__webpack_exports__"],"mappings":"g9CAuBO,IAAMA,EAAsB,CACjCC,OAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,EAAG,EACHC,EAAG,iNAGL,IAAMC,EAAc,SAACJ,GAGnB,MAAuB,QAAhBK,IAASC,GAAeN,EAAQO,OAAOC,QAAUR,GAM7CS,EAAa,SAACC,GAA2B,IAC5CC,EAAmBD,EAAnBC,UAAWC,EAAQF,EAARE,IADiCC,EAEZC,WAAejB,GAFHkB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE7CK,EAF6CH,EAAA,GAE/BI,EAF+BJ,EAAA,GAI9CK,EAAgBN,cACpB,SAACO,GACC,IAAMC,EAASC,YAAeX,EAAIY,SAC5BC,EAAmBP,EAErBI,GACFI,IAAUC,QAAQL,EAAQ,SAACpB,EAAGC,EAAGF,EAAOH,EAAQC,EAAOC,GACrD,IAAM4B,EAAeZ,OAAAa,EAAA,EAAAb,CAAA,GAChBS,EACAJ,EAFgB,CAGnBtB,QACAC,MAAOI,EAAYJ,KAGrBmB,EAAgBS,GAEZjB,GAAWA,EAAUiB,MAI/B,CAACV,IAGGY,EAAehB,cACnB,SAACiB,GAGC,IAAMV,EAASU,EAAEC,YAAYX,OAC7BD,EAAcC,IAEhB,CAACD,EAAeF,IAGZe,EAAenB,cAAkB,WACrCM,KACC,CAACA,EAAeF,IAQnB,OANAJ,YAAgB,WAGd,OAFAoB,IAAWC,iBAAiB,SAAUF,GAE/B,kBAAMC,IAAWE,oBAAoB,SAAUH,KACrD,CAACf,IAEG,CACLA,eACAmB,SAAUP,EACVnB,UAAWS,41BC3ER,IAAMkB,EAAc,SAAC5B,GAA4B,IAC9CC,EAAsCD,EAAtCC,UAAW4B,EAA2B7B,EAA3B6B,SAAaC,EADsBxB,OAAAyB,EAAA,EAAAzB,CACRN,EADQ,0BAEhDgC,EAAmC,oBAAbH,EACtB3B,EAAME,SAAmB,MAHuB6B,EAInBlC,EAAW,CAAEE,YAAWC,QAAnDM,EAJ8CyB,EAI9CzB,aAAcmB,EAJgCM,EAIhCN,SAEtB,OACEO,EAAA,cAACC,EAAA,EAAD7B,OAAA8B,EAAA,EAAA9B,CAAA,CACEJ,IAAKA,EACLyB,SAAUA,EAEVE,SAAUG,EAAeH,EAASrB,GAAgBqB,GAC9CC,EALN,CAAAO,SAAA,CAAAC,+FAAAC,WAAA,oyBCXEC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACG5C,EACFM,OAAAuC,EAAA,EAAAvC,CAAAqC,EAAA,gBACD,OAAOrC,OAAAwC,EAAA,EAAAxC,CAACmC,EAADnC,OAAAyC,EAAA,EAAAzC,CAAA,GAAekC,EAAiBxC,EAAhC,CAAuC4C,WAAYA,EAAYI,QAAQ,YAAvEX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,MAGLjC,OAAAwC,EAAA,EAAAxC,CAAA,KAAAA,OAAAyC,EAAA,EAAAzC,CAAQ,CACN4C,GAAM,UADR,CAAAb,SAAA,CAAAC,SAAAW,EAAAV,WAAA,gBAGAjC,OAAAwC,EAAA,EAAAxC,CAAA,KAAAA,OAAAyC,EAAA,EAAAzC,CAAQ,CACN4C,GAAM,SADR,CAAAb,SAAA,CAAAC,SAAAW,EAAAV,WAAA,eAGAjC,OAAAwC,EAAA,EAAAxC,CAAC6C,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,yPAAgQC,QAAS,CAC1StD,MAAOuD,KAAOA,KAAKvD,MAAQA,EAC3BwD,eACAC,UACAC,YACCV,QAAQ,aALXX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,KAMFjC,OAAAwC,EAAA,EAAAxC,CAACqD,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAO,GAAKC,cAAe,SAAAD,GAAK,OAAIE,QAAQC,IAAI,gBAAiBH,IAAQI,kBAAmB,SAAAJ,GAAK,OAAIE,QAAQC,IAAI,oBAAqBH,IAAQK,eAAgB,SAAAL,GAAK,OAAIE,QAAQC,IAAI,iBAAkBH,IAAQb,QAAQ,SAA1OX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,OAEEjC,OAAAwC,EAAA,EAAAxC,CAAA,KAAAA,OAAAyC,EAAA,EAAAzC,CAAQ,CACN4C,GAAM,cADR,CAAAb,SAAA,CAAAC,SAAAW,EAAAV,WAAA,oBAGAjC,OAAAwC,EAAA,EAAAxC,CAAA,KAAA+B,SAAA,CAAAC,SAAAW,EAAAV,WAAA,iBAAgBjC,OAAAwC,EAAA,EAAAxC,CAAA,cAAY6D,WAAW,IAAvB9B,SAAA,CAAAC,SAAAW,EAAAV,WAAA,cAAhB,mBAAqFjC,OAAAwC,EAAA,EAAAxC,CAAA,cAAY6D,WAAW,IAAvB9B,SAAA,CAAAC,SAAAW,EAAAV,WAAA,yBAArF,qGACAjC,OAAAwC,EAAA,EAAAxC,CAAC6C,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,kSAAySC,QAAS,CACnVtD,MAAOuD,KAAOA,KAAKvD,MAAQA,EAC3BwD,eACAC,UACAC,YACCV,QAAQ,aALXX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,KAMFjC,OAAAwC,EAAA,EAAAxC,CAACqD,EAAA,EAAD,CAAQE,MAAO,CAAC,GAAI,IAAKO,KAAM,EAAGC,aAAc,EAAGC,aAAc,IAAKR,cAAe,SAAAD,GAAK,OAAIE,QAAQC,IAAI,gBAAiBH,IAAQI,kBAAmB,SAAAJ,GAAK,OAAIE,QAAQC,IAAI,oBAAqBH,IAAQK,eAAgB,SAAAL,GAAK,OAAIE,QAAQC,IAAI,iBAAkBH,IAAQb,QAAQ,SAA/QX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,OAEEjC,OAAAwC,EAAA,EAAAxC,CAAA,KAAAA,OAAAyC,EAAA,EAAAzC,CAAQ,CACN4C,GAAM,SADR,CAAAb,SAAA,CAAAC,SAAAW,EAAAV,WAAA,eAGAjC,OAAAwC,EAAA,EAAAxC,CAAC6C,EAAA,EAAD,CAAOoB,GAAIb,IAAQV,QAAQ,QAA3BX,SAAA,CAAAC,SAAAW,EAAAV,WAAA,6LAIJG,EAAW8B,gBAAiB,wsBCtDfC,EAAc,SAAeZ,GACxC,IAAM3D,EAAME,SAAqByD,GAMjC,OAJAzD,YAAgB,WACdF,EAAIY,QAAU+C,GACb,CAACA,IAEG3D,EAAIY,m/BCuFb,IAAM3B,EAAsB,CAC1BC,OAAQ,EACRC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,EAAG,EACHC,EAAG,GAGCiF,EAAsB,SAAA/B,GAAA,IAC1B2B,EAD0B3B,EAC1B2B,aACAD,EAF0B1B,EAE1B0B,aAF0B,OAMtB,SAACR,GAAD,OACJA,EAAQS,EACJA,EACAT,EAAQQ,EACRA,EACAR,IAEAc,EAAe,SAACd,GAAD,OACnBe,MAAMC,QAAQhB,IAEViB,EAAe,SAACjB,GACpB,OAAIc,EAAad,GAAeA,EAAM,GAC/BA,GAGHkB,EAAgB,SAAClB,GACrB,OAAIc,EAAad,GAAeA,EAAM,GAC/BA,GAqBIH,EAAS,SACpB1D,GACG,IAAAgF,EAYChF,EAVF6D,MAAOoB,OAFN,IAAAD,EAEqB,EAFrBA,EAAAE,EAYClF,EATFkE,sBAHC,IAAAgB,EAGgB,aAHhBA,EAAAC,EAYCnF,EARFiE,yBAJC,IAAAkB,EAImB,aAJnBA,EAAAC,EAYCpF,EAPF8D,qBALC,IAAAsB,EAKe,aALfA,EAAAC,EAYCrF,EANFqE,oBANC,IAAAgB,EAMc,EANdA,EAAAC,EAYCtF,EALFsE,oBAPC,IAAAgB,EAOc,EAPdA,EAAAC,EAYCvF,EAJFoE,YARC,IAAAmB,EAQM,EARNA,EAAAC,EAYCxF,EAHF4D,YATC,IAAA4B,EASM,SATNA,EAAAC,EAYCzF,EAFF0F,eAVC,IAAAD,KAAAE,EAYC3F,EADF4F,iBAXC,IAAAD,EAWW,GAXXA,EAaGE,EAAQC,cAERC,EACJd,IAAiBS,EAAU,CAACrB,EAAcC,GAAgBD,GAhBzDlE,EAkBuBC,WAAe2F,GAlBtC1F,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAkBI0D,EAlBJxD,EAAA,GAkBW2F,EAlBX3F,EAAA,GAAA4F,EAmB+B7F,YAAe,GAnB9C8F,EAAA5F,OAAAC,EAAA,EAAAD,CAAA2F,EAAA,GAmBIE,EAnBJD,EAAA,GAmBeE,EAnBfF,EAAA,GAAAG,EAoB+CjG,WAChDjB,GArBCmH,EAAAhG,OAAAC,EAAA,EAAAD,CAAA+F,EAAA,GAoBIE,EApBJD,EAAA,GAoBuBE,EApBvBF,EAAA,GAuBGG,GAAgBhC,EAAY0B,GAC5BO,IAAiBpC,EAAeD,GAAgBkC,EAAkBhH,MAClEoH,GAAgBJ,EAAkBhH,OAAS+E,EAAeD,GAC1DuC,GAAgBjC,EAAad,GAE7BgD,GAAkB,SAACC,GACvB,IAAMC,EAAYjC,EAAajB,GAASiD,EAAKJ,GACvCM,EAAmB5C,EACrB6C,KAAKC,MAAMH,EAAY3C,GAAQA,EAC/B2C,EAEEI,EAAiBzC,EAAoB,CACzCJ,aAAcsC,GAAgB7B,EAAclB,GAASO,EAAOE,EAC5DD,gBAFqBK,CAGpBI,EAAakC,IACVI,EA1DW,SACnBC,EACAN,GAEA,OAAOpC,EAAa0C,GAChB,CAACN,EAAWM,EAAc,IAC1BN,EAoDmBO,CAAazD,EAAOsD,GAEzCnB,EAASoB,GACTtD,EAAcsD,IAGVG,GAAmB,SAACT,GACxB,IAAMU,EAAazC,EAAclB,GAASiD,EAAKJ,GACzCe,EAAoBrD,EACtB6C,KAAKC,MAAMM,EAAapD,GAAQA,EAChCoD,EAEEE,EAAkBhD,EAAoB,CAC1CJ,eACAD,aAAcS,EAAajB,GAASO,GAFdM,CAGrBK,EAAc0C,IAEXL,EAlEY,SACpBC,EACAG,GAEA,OAAO7C,EAAa0C,GAChB,CAACA,EAAc,GAAIG,GACnBA,EA4DmBG,CAAc9D,EAAO6D,GAE1C1B,EAASoB,GACTtD,EAAcsD,IAGVQ,GAAe,SAACC,GAAD,OACnBC,IAAaC,OAAO,CAClBC,6BAA8B,WAE5B,OADA9D,EAAeL,IACR,GAGToE,oBAAqB,WACnB7B,GAAa,IAGf8B,mBAAoB,SAACC,EAADC,GAAA,IAAMtB,EAANsB,EAAMtB,GAAN,OAAee,EAAQf,IAE3CuB,sBAAuB,WACrBjC,GAAa,OAIbkC,GAAelI,SAAawH,GAAaf,KACzC0B,GAAgBnI,SAAawH,GAAaL,KAEhDnH,YAAgB,WAEdkI,GAAaxH,QAAU8G,GAAaf,IACpC0B,GAAczH,QAAU8G,GAAaL,IAGjCd,KAAkBN,GACpBlC,EAAkBJ,IAInB,CAACsC,EAAWO,KAEf,IAAM8B,GAAO1D,EAAajB,GAAS8C,GAC7B8B,GAAQ1D,EAAclB,GAAS8C,GAhGlC+B,GAkGuBC,YACxBC,EACA5I,EACA,CAAE4D,OAAM3D,UAAWuG,GACnBqC,IAAIhD,EAAO,yBACXD,EAAUkD,MAvGTC,GAAAzI,OAAAC,EAAA,EAAAD,CAAAoI,GAAA,GAkGII,GAlGJC,GAAA,GAkGUC,GAlGVD,GAAA,GAAAE,GAyG6CN,YAC9CO,EACAlJ,EACA,CAAE4D,QACFiF,IAAIhD,EAAO,oCACXD,EAAUuD,iBA9GTC,GAAA9I,OAAAC,EAAA,EAAAD,CAAA2I,GAAA,GAyGIE,GAzGJC,GAAA,GAyGqBC,GAzGrBD,GAAA,GAAAE,GAgHyCX,YAC1CY,EACAvJ,EACA,CAAE4G,iBAAe4B,QAAMC,SAAO7E,QAC9BiF,IAAIhD,EAAO,kCACXD,EAAU4D,eArHTC,GAAAnJ,OAAAC,EAAA,EAAAD,CAAAgJ,GAAA,GAgHIE,GAhHJC,GAAA,GAgHmBC,GAhHnBD,GAAA,GAAAE,GAuHiChB,YAClCiB,EACA5J,EAF8CM,OAAAa,EAAA,EAAAb,CAAA,CAI5CsD,OACAiG,SAAUrB,GACVrC,YACAtC,MAAOiB,EAAajB,IACjByE,GAAaxH,QAAQgJ,aAE1BjB,IAAIhD,EAAO,8BACXD,EAAUmE,WAlITC,GAAA1J,OAAAC,EAAA,EAAAD,CAAAqJ,GAAA,GAuHII,GAvHJC,GAAA,GAuHeC,GAvHfD,GAAA,GAAAE,GAoImCvB,YACpCiB,EACA5J,EAFgDM,OAAAa,EAAA,EAAAb,CAAA,CAI9CsD,OACAiG,SAAUpB,GACVtC,YACAtC,MAAOkB,EAAclB,IAClB0E,GAAczH,QAAQgJ,aAE3BjB,IAAIhD,EAAO,+BACXD,EAAUuE,YA/ITC,GAAA9J,OAAAC,EAAA,EAAAD,CAAA4J,GAAA,GAoIIC,GApIJC,GAAA,GAoIgBC,GApIhBD,GAAA,GAkJH,OACElI,EAAA,cAAC4G,GAADxI,OAAA8B,EAAA,EAAA9B,CAAA,GAAU0I,GAAV,CAAA3G,SAAA,CAAAC,SAAAW,EAAAV,WAAA,OACEL,EAAA,cAACiH,GAAD7I,OAAA8B,EAAA,EAAA9B,CAAA,GAAqB+I,GAArB,CAAAhH,SAAA,CAAAC,SAAAW,EAAAV,WAAA,QACAL,EAAA,cAACsH,GAADlJ,OAAA8B,EAAA,EAAA9B,CAAA,GAAmBoJ,GAAnB,CAAArH,SAAA,CAAAC,SAAAW,EAAAV,WAAA,QACAL,EAAA,cAAC6H,GAADzJ,OAAA8B,EAAA,EAAA9B,CAAA,GAAe2J,GAAf,CAAA5H,SAAA,CAAAC,SAAAW,EAAAV,WAAA,QACCqE,IAAiB1E,EAAA,cAACiI,GAAD7J,OAAA8B,EAAA,EAAA9B,CAAA,GAAgB+J,GAAhB,CAAAhI,SAAA,CAAAC,SAAAW,EAAAV,WAAA,oNASxB,IAAMqG,EAAa,SAAC5I,GAAqB,IAC/BsK,EAAqCtK,EAArCsK,MAAO1G,EAA8B5D,EAA9B4D,KAAS2G,EADejK,OAAAyB,EAAA,EAAAzB,CACMN,EADN,kBAEjC6F,EAAQC,cAER0E,EAAcC,YAAc7G,GAAQiC,EAAM6E,eAAe9G,GAAQA,EAEvE,OACE1B,EAAA,cAACN,EAAA,EAADtB,OAAA8B,EAAA,EAAA9B,CAAA,CACEgK,MAAO,CACL,CACElL,OAAQoL,EACRG,eAAgB,UAElBL,IAEEC,EARN,CAAAlI,SAAA,CAAAC,SAAAW,EAAAV,WAAA,SAiBE2G,EAAwB,SAAClJ,GAAgC,IACrDsK,EAA8BtK,EAA9BsK,MAAO1G,EAAuB5D,EAAvB4D,KAAS9B,EADqCxB,OAAAyB,EAAA,EAAAzB,CACvBN,EADuB,kBAEvD6F,EAAQC,cAER0E,EAAcC,YAAc7G,GAAQiC,EAAM6E,eAAe9G,GAAQA,EAEvE,OACE1B,EAAA,cAACC,EAAA,EAAD7B,OAAA8B,EAAA,EAAA9B,CAAA,CACEgK,MAAO,CACL,CACEM,gBAAiB/E,EAAMgF,OAAOC,WAAWC,SACzCC,aAAc,EACd5L,OAAQoL,EAAc,EACtBX,SAAU,WACVtK,MAAO,QAET+K,IAEExI,EAXN,CAAAO,SAAA,CAAAC,SAAAW,EAAAV,WAAA,SAuBEgH,EAAsB,SAACvJ,GAA8B,IAEvDsK,EAMEtK,EANFsK,MACA1G,EAKE5D,EALF4D,KAHuDqH,EAQrDjL,EAJFwI,YAJuD,IAAAyC,EAIhD,EAJgDA,EAAAC,EAQrDlL,EAHFyI,aALuD,IAAAyC,EAK/C,EAL+CA,EAMvDtE,EAEE5G,EAFF4G,cACG9E,EAPoDxB,OAAAyB,EAAA,EAAAzB,CAQrDN,EARqD,iDASnD6F,EAAQC,cAER0E,EAAcC,YAAc7G,GAAQiC,EAAM6E,eAAe9G,GAAQA,EAEvE,OACE1B,EAAA,cAACC,EAAA,EAAD7B,OAAA8B,EAAA,EAAA9B,CAAA,CACEgK,MAAO,CAAChK,OAAAa,EAAA,EAAAb,CAAA,CAEJsK,gBAAiB/E,EAAMgF,OAAOC,WAAWK,eACzCH,aAAc,EACd5L,OAAQoL,EAAc,EACtBX,SAAU,WACVtK,MAAO,QACHqH,EAAgB,CAAE4B,OAAMjJ,MAAOkJ,EAAQD,GAAS,CAAEjJ,MAAOiJ,IAE/D8B,IAEExI,EAZN,CAAAO,SAAA,CAAAC,SAAAW,EAAAV,WAAA,SAwBEqH,EAAc,SAAC5J,GACoDA,EAA/DsK,MADiC,IAC1B1G,EAAwD5D,EAAxD4D,KAD0BwH,EAC8BpL,EAAlDmG,iBADoB,IAAAiF,KAAAC,EAC8BrL,EAA/B6J,gBADC,IAAAwB,EACU,EADVA,EACgBvJ,EADhBxB,OAAAyB,EAAA,EAAAzB,CAC8BN,EAD9B,yCAEnC6F,EAAQC,cAER0E,EAAcC,YAAc7G,GAAQiC,EAAM6E,eAAe9G,GAAQA,EACjE0H,EAASnF,EAAY,WAAa,OAExC,OACEjE,EAAA,cAACC,EAAA,EAAD7B,OAAA8B,EAAA,EAAA9B,CAAA,CACEiL,YAAU,EACVjB,MAAO,CACLM,gBAAiB/E,EAAMgF,OAAOC,WAAWU,QACzCC,YAAa5F,EAAMgF,OAAOa,OAAOC,QACjCX,aAAc,IACdY,YAAa,EACbxM,OAAQoL,EACRX,SAAU,WACVtK,MAAOiL,EACPqB,OAAQ,EACRrD,KAAMqB,EAAWW,EAAc,EAE/Bc,WAEExJ,EAfN,CAAAO,SAAA,CAAAC,SAAAW,EAAAV,WAAA,oECzZJuJ,EAAAC,EAAAC,EAAA,sBAAAvB,IAAO,IAAMA,EAAgB,SAC3B7G,GAEA,MAAoB,kBAATA","file":"static/js/26.d0e18d49.js","sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n  ref: React.MutableRefObject<any>;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst adjustPageY = (pageY: number) => {\n  // On the web, when scroll position is restored (e.g. User is scrolled down and refreshes the page)\n  // We need to adjust pageY accordingly. Required to correct behavior of positioner\n  return Platform.OS === 'web' ? pageY + window.scrollY : pageY;\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps) => {\n  const { onMeasure, ref } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleMeasure = React.useCallback(\n    (layout?: LayoutRectangle) => {\n      const handle = findNodeHandle(ref.current);\n      const prevMeasurements = measurements;\n\n      if (handle) {\n        UIManager.measure(handle, (x, y, width, height, pageX, pageY) => {\n          const newMeasurements = {\n            ...prevMeasurements,\n            ...layout,\n            pageX,\n            pageY: adjustPageY(pageY),\n          };\n\n          setMeasurements(newMeasurements);\n\n          if (onMeasure) onMeasure(newMeasurements);\n        });\n      }\n    },\n    [measurements],\n  );\n\n  const handleLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      // Use the value from here, isntead of inside UIManager.measure callback\n      // Async behavior will nullify nativeEvent\n      const layout = e.nativeEvent.layout;\n      handleMeasure(layout);\n    },\n    [handleMeasure, measurements],\n  );\n\n  const handleResize = React.useCallback(() => {\n    handleMeasure();\n  }, [handleMeasure, measurements]);\n\n  React.useEffect(() => {\n    Dimensions.addEventListener('change', handleResize);\n\n    return () => Dimensions.removeEventListener('change', handleResize);\n  }, [measurements]);\n\n  return {\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderProp = (props: Measurements) => JSX.Element;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children?: React.ReactNode | ViewMeasureRenderProp;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const ref = React.useRef<View>(null);\n  const { measurements, onLayout } = useMeasure({ onMeasure, ref });\n\n  return (\n    <View\n      ref={ref}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Slider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Slider\\n  size=\\\"small\\\"\\n  value={0.3}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider size=\"small\" value={0.3} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"with-range\"\n    }}>{`With Range`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` as an array of `}<inlineCode parentName=\"p\">{`[number, number]`}</inlineCode>{`, it will automatically transform into a range slider. The minimum range is the value of the step`}</p>\n    <Playground __position={1} __code={'<Slider\\n  value={[30, 60]}\\n  step={5}\\n  minimumValue={0}\\n  maximumValue={100}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider value={[30, 60]} step={5} minimumValue={0} maximumValue={100} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nexport const usePrevious = <TValue = any>(value: TValue) => {\n  const ref = React.useRef<TValue>(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport { PanResponder, View, ViewProps } from 'react-native';\n\nimport { usePrevious } from '../../hooks';\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { ViewMeasure, ViewMeasureProps } from '../Helpers';\n\ntype RangeValue = [number, number];\ntype SliderValue = number | RangeValue;\ntype Value<TIsRange extends boolean> = TIsRange extends true\n  ? [number, number]\n  : number;\n\ninterface SliderBaseProps<TIsRange extends boolean> {\n  /**\n   * Set whether it should slide a range. You should specify the value to get proper type-checking.\n   * However, if initialValue is set, it will take precedence over this prop\n   * @default false\n   */\n  isRange?: TIsRange;\n\n  /**\n   * Size of the thumb, and thus the whole slider\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue; which default to 0 and 1 respectively.\n   *\n   * *This is not a controlled component*; you don't need to update the\n   * value during dragging.\n   * @default 0\n   */\n  value?: Value<TIsRange>;\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * @default 0\n   */\n  step?: number;\n\n  /**\n   * Initial minimum value of the slider.\n   * @default 0\n   */\n  minimumValue?: number;\n\n  /**\n   * Initial maximum value of the slider.\n   * @default 1\n   */\n  maximumValue?: number;\n\n  /**\n   * If true the user won't be able to move the slider.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback that is called when the user releases the slider;\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback called when the user starts changing the value.\n   */\n  onSlidingStart?: (value: Value<TIsRange>) => void;\n\n  testID?: string;\n}\n\nexport interface SliderOverrides {\n  Root: RootProps;\n  UnselectedTrack: UnselectedTrackProps;\n  SelectedTrack: SelectedTrackProps;\n  LeftThumb: ThumbProps;\n  RightThumb: ThumbProps;\n}\n\nexport interface SliderProps<TIsRange extends boolean>\n  extends WithOverrides<SliderBaseProps<TIsRange>, SliderOverrides> {}\n\nconst initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst getBoundedValueBase = ({\n  maximumValue,\n  minimumValue,\n}: {\n  maximumValue: number;\n  minimumValue: number;\n}) => (value: number) =>\n  value > maximumValue\n    ? maximumValue\n    : value < minimumValue\n    ? minimumValue\n    : value;\n\nconst isRangeValue = (value: SliderValue): value is [number, number] =>\n  Array.isArray(value);\n\nconst getLeftValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[0];\n  return value;\n};\n\nconst getRightValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[1];\n  return value;\n};\n\nconst setLeftValue = (\n  previousValue: SliderValue,\n  leftValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [leftValue, previousValue[1]]\n    : leftValue;\n};\n\nconst setRightValue = (\n  previousValue: SliderValue,\n  rightValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [previousValue[0], rightValue]\n    : rightValue;\n};\n\nexport const Slider = <TIsRange extends boolean>(\n  props: SliderProps<TIsRange>,\n) => {\n  const {\n    value: initialValue = 0,\n    onSlidingStart = () => undefined,\n    onSlidingComplete = () => undefined,\n    onValueChange = () => undefined,\n    minimumValue = 0,\n    maximumValue = 1,\n    step = 0,\n    size = 'medium' as const,\n    isRange = false,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const finalInitialValue =\n    initialValue || (isRange ? [minimumValue, maximumValue] : minimumValue);\n\n  const [value, setValue] = React.useState(finalInitialValue);\n  const [isSliding, setIsSliding] = React.useState(false);\n  const [trackMeasurements, setTrackMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const prevIsSliding = usePrevious(isSliding);\n  const valuePerPixel = (maximumValue - minimumValue) / trackMeasurements.width;\n  const pixelPerValue = trackMeasurements.width / (maximumValue - minimumValue);\n  const isRangeSlider = isRangeValue(value);\n\n  const handleLeftSlide = (dx: number) => {\n    const leftValue = getLeftValue(value) + dx * valuePerPixel;\n    const roundedLeftValue = step\n      ? Math.round(leftValue / step) * step\n      : leftValue;\n\n    const finalLeftValue = getBoundedValueBase({\n      maximumValue: isRangeSlider ? getRightValue(value) - step : maximumValue,\n      minimumValue,\n    })(getLeftValue(roundedLeftValue));\n    const updatedValue = setLeftValue(value, finalLeftValue);\n\n    setValue(updatedValue);\n    onValueChange(updatedValue as Value<TIsRange>);\n  };\n\n  const handleRightSlide = (dx: number) => {\n    const rightValue = getRightValue(value) + dx * valuePerPixel;\n    const roundedRightValue = step\n      ? Math.round(rightValue / step) * step\n      : rightValue;\n\n    const finalRightValue = getBoundedValueBase({\n      maximumValue,\n      minimumValue: getLeftValue(value) + step,\n    })(getRightValue(roundedRightValue));\n\n    const updatedValue = setRightValue(value, finalRightValue);\n\n    setValue(updatedValue);\n    onValueChange(updatedValue as Value<TIsRange>);\n  };\n\n  const makeThumbRef = (handler: (dx: number) => void) =>\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        onSlidingStart(value as Value<TIsRange>);\n        return true;\n      },\n\n      onPanResponderGrant: () => {\n        setIsSliding(true);\n      },\n\n      onPanResponderMove: (_, { dx }) => handler(dx),\n\n      onPanResponderRelease: () => {\n        setIsSliding(false);\n      },\n    });\n\n  const leftThumbRef = React.useRef(makeThumbRef(handleLeftSlide));\n  const rightThumbRef = React.useRef(makeThumbRef(handleRightSlide));\n\n  React.useEffect(() => {\n    // We need to update the callback `onPanResponderMove` because it uses memoized `value`\n    leftThumbRef.current = makeThumbRef(handleLeftSlide);\n    rightThumbRef.current = makeThumbRef(handleRightSlide);\n\n    // We need to callback here because we need latest value instead of memoized one\n    if (prevIsSliding && !isSliding) {\n      onSlidingComplete(value as Value<TIsRange>);\n    }\n\n    // We diff valuePerPixel because on loading the component it may be NaN as it is calculating the measurements of the track\n  }, [isSliding, valuePerPixel]);\n\n  const left = getLeftValue(value) * pixelPerValue;\n  const right = getRightValue(value) * pixelPerValue;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { size, onMeasure: setTrackMeasurements },\n    dlv(theme, 'overrides.Slider.Root'),\n    overrides.Root,\n  );\n  const [UnselectedTrack, unselectedTrackProps] = getOverrides(\n    StyledUnselectedTrack,\n    props,\n    { size },\n    dlv(theme, 'overrides.Slider.UnselectedTrack'),\n    overrides.UnselectedTrack,\n  );\n  const [SelectedTrack, selectedTrackProps] = getOverrides(\n    StyledSelectedTrack,\n    props,\n    { isRangeSlider, left, right, size },\n    dlv(theme, 'overrides.Slider.SelectedTrack'),\n    overrides.SelectedTrack,\n  );\n  const [LeftThumb, leftThumbProps] = getOverrides(\n    StyledThumb,\n    props,\n    {\n      size,\n      position: left,\n      isSliding,\n      value: getLeftValue(value),\n      ...leftThumbRef.current.panHandlers,\n    },\n    dlv(theme, 'overrides.Slider.LeftThumb'),\n    overrides.LeftThumb,\n  );\n  const [RightThumb, rightThumbProps] = getOverrides(\n    StyledThumb,\n    props,\n    {\n      size,\n      position: right,\n      isSliding,\n      value: getRightValue(value),\n      ...rightThumbRef.current.panHandlers,\n    },\n    dlv(theme, 'overrides.Slider.RightThumb'),\n    overrides.RightThumb,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <UnselectedTrack {...unselectedTrackProps} />\n      <SelectedTrack {...selectedTrackProps} />\n      <LeftThumb {...leftThumbProps} />\n      {isRangeSlider && <RightThumb {...rightThumbProps} />}\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewMeasureProps {\n  size: ControlSize | number;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { style, size, ...viewMeasureProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <ViewMeasure\n      style={[\n        {\n          height: controlSize,\n          justifyContent: 'center',\n        },\n        style,\n      ]}\n      {...viewMeasureProps}\n    />\n  );\n};\n\ninterface UnselectedTrackProps extends ViewProps {\n  size: ControlSize | number;\n}\n\nconst StyledUnselectedTrack = (props: UnselectedTrackProps) => {\n  const { style, size, ...viewProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.greyDark,\n          borderRadius: 8,\n          height: controlSize / 4,\n          position: 'absolute',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\ninterface SelectedTrackProps extends ViewProps {\n  size: ControlSize | number;\n  left: number;\n  right: number;\n  isRangeSlider: boolean;\n}\n\nconst StyledSelectedTrack = (props: SelectedTrackProps) => {\n  const {\n    style,\n    size,\n    left = 0,\n    right = 0,\n    isRangeSlider,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.primaryDefault,\n          borderRadius: 8,\n          height: controlSize / 4,\n          position: 'absolute',\n          width: '100%',\n          ...(isRangeSlider ? { left, width: right - left } : { width: left }),\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\ninterface ThumbProps extends ViewProps {\n  size: ControlSize | number;\n  isSliding: boolean;\n  position: number;\n  value: number;\n}\n\nconst StyledThumb = (props: ThumbProps) => {\n  const { style, size, isSliding = false, position = 0, ...viewProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n  const cursor = isSliding ? 'grabbing' : 'grab';\n\n  return (\n    <View\n      accessible\n      style={{\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderRadius: 999,\n        borderWidth: 3,\n        height: controlSize,\n        position: 'absolute',\n        width: controlSize,\n        zIndex: 1,\n        left: position - controlSize / 2,\n        // @ts-ignore\n        cursor,\n      }}\n      {...viewProps}\n    />\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}