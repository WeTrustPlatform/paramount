{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Visible.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Visible.tsx"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Visible","LayoutProvider","Text","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_6__","large","xlarge","___WEBPACK_IMPORTED_MODULE_5__","height","___WEBPACK_IMPORTED_MODULE_8__","align","medium","xsmall","small","of","isMDXComponent","config","currentScreenSize","visibles","combineConfig","currentScreenSizeIndex","ASC_ORDER_SCREEN_SIZES","indexOf","find","val","index","isVisible","useLayout"],"mappings":"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","file":"static/js/30.ebcb2521.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Visible, LayoutProvider, Text } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"visible\"\n    }}>{`Visible`}</h1>\n    <p>{`Renders children when the current screen size matches defined sizes`}</p>\n    <p>{`Refer to `}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{` docs for setup`}</p>\n    <p>{`Resize the window to see different blocks appearing responsively`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<LayoutProvider>\\n  <Visible large xlarge>\\n    <Box backgroundColor=\\\"#67c6bb\\\" height={48}>\\n      <Text align=\\\"center\\\" color=\\\"white\\\">\\n        Large and greater\\n      </Text>\\n    </Box>\\n  </Visible>\\n  <Visible medium>\\n    <Box backgroundColor=\\\"#1ca5F7\\\" height={48}>\\n      <Text align=\\\"center\\\" color=\\\"white\\\">\\n        Medium\\n      </Text>\\n    </Box>\\n  </Visible>\\n  <Visible xsmall small>\\n    <Box backgroundColor=\\\"#d26557\\\" height={48}>\\n      <Text align=\\\"center\\\" color=\\\"white\\\">\\n        Small and lower\\n      </Text>\\n    </Box>\\n  </Visible>\\n</LayoutProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Visible,\n      LayoutProvider,\n      Text\n    }} mdxType=\"Playground\">\n  <LayoutProvider mdxType=\"LayoutProvider\">\n    <Visible large xlarge mdxType=\"Visible\">\n      <Box backgroundColor=\"#67c6bb\" height={48} mdxType=\"Box\">\n        <Text align=\"center\" color=\"white\" mdxType=\"Text\">\n          Large and greater\n        </Text>\n      </Box>\n    </Visible>\n    <Visible medium mdxType=\"Visible\">\n      <Box backgroundColor=\"#1ca5F7\" height={48} mdxType=\"Box\">\n        <Text align=\"center\" color=\"white\" mdxType=\"Text\">\n          Medium\n        </Text>\n      </Box>\n    </Visible>\n    <Visible xsmall small mdxType=\"Visible\">\n      <Box backgroundColor=\"#d26557\" height={48} mdxType=\"Box\">\n        <Text align=\"center\" color=\"white\" mdxType=\"Text\">\n          Small and lower\n        </Text>\n      </Box>\n    </Visible>\n  </LayoutProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Visible} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { ASC_ORDER_SCREEN_SIZES, ScreenSize, useLayout } from './LayoutContext';\n\nexport interface VisibleConfig {\n  /**\n   * When true, render children only when the screen size is xsmall\n   */\n  xsmall?: boolean;\n\n  /**\n   * When true, render children only when the screen size is small\n   */\n  small?: boolean;\n\n  /**\n   * When true, render children only when the screen size is medium\n   */\n  medium?: boolean;\n\n  /**\n   * When true, render children only when the screen size is large\n   */\n  large?: boolean;\n\n  /**\n   * When true, render children only when the screen size is xlarge\n   */\n  xlarge?: boolean;\n}\n\nexport interface VisibleProps extends VisibleConfig {\n  children?: React.ReactNode;\n}\n\nconst combineConfig = (config: VisibleConfig) => {\n  const { xsmall, small, medium, large, xlarge } = config;\n\n  return [xsmall, small, medium, large, xlarge];\n};\n\nconst isVisible = (config: VisibleConfig, currentScreenSize: ScreenSize) => {\n  const visibles = combineConfig(config);\n  const currentScreenSizeIndex = ASC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  return !!visibles.find(\n    (val, index) => index === currentScreenSizeIndex && !!val,\n  );\n};\n\nexport const Visible = (props: VisibleProps) => {\n  const { children, ...config } = props;\n  const { currentScreenSize } = useLayout();\n\n  if (isVisible(config, currentScreenSize)) return <>{children}</>;\n\n  return <></>;\n};\n"],"sourceRoot":""}