{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","FormField","TextInput","___WEBPACK_IMPORTED_MODULE_5__","labelPosition","label","description","error","getStyles","theme","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","labelWrapperStyle","wrapperStyle","___WEBPACK_IMPORTED_MODULE_6__","of","isMDXComponent","getFormFieldStyles","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","children","_props$labelPosition","useTheme","_mergeStyles","mergeStyles","labelContent","react","View","style","Label","textStyle","Text","color","Icon","name","size","IconTag","Feather","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","colors","text","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","objectSpread","leftContainerStyle","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","getTextInputStyles","isDisabled","isInvalid","numberOfLines","controlHeight","controlHeights","focusedStyle","backgroundColor","background","content","borderColor","border","borderRadius","controlBorderRadius","borderWidth","controlPaddings","width","textSizes","greyDark","danger","paddingVertical","placeholderTextColor","muted","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","innerRef","textInputProps","objectWithoutProperties","esm_extends","ref","editable","React","TextInput_TextInputBase","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","rightIcon","IconTextInput_jsxFileName","TextInput_TextInput","IconTextInput","IconTextInput_IconTextInputBase","ClearableTextInputBase","onClear","onChangeText","value","isClearable","textInputWithIconProps","TouchableOpacity","onPress","ClearableTextInput_jsxFileName","Icon_web","ClearableTextInput","ClearableTextInput_ClearableTextInputBase","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","_Text__WEBPACK_IMPORTED_MODULE_4__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","accessibilityRole","Platform","OS","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","fontSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","textAlign","alignSelf","fontStyle","textTransform","_props$color","_props$fontFamily","_props$align","_props$isInline","_props$isItalic","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","palette","lightest","light","base","dark","darkest","overlay","greyLight","greyDefault","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","heading","mono","undefined","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","large","medium","small","paragraphSizes","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/17.04ccd8b9.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { FormField, TextInput } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<FormField\\n  labelPosition=\\\"top\\\"\\n  label=\\\"Email\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n  getStyles={(props, theme) => ({\\n    containerStyles: {},\\n    descriptionTextStyle: {},\\n    errorTextStyle: {},\\n    errorWrapperStyle: {},\\n    labelTextStyle: {},\\n    labelWrapperStyle: {},\\n    wrapperStyle: {},\\n  })}\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      FormField,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField labelPosition=\"top\" label=\"Email\" description=\"Description for the field\" error=\"Error message\" getStyles={(props, theme) => ({\n        containerStyles: {},\n        descriptionTextStyle: {},\n        errorTextStyle: {},\n        errorWrapperStyle: {},\n        labelTextStyle: {},\n        labelWrapperStyle: {},\n        wrapperStyle: {}\n      })} mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={FormField} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldLabelPosition } from './FormField';\n\nexport interface FormFieldStylesProps {\n  labelPosition?: FormFieldLabelPosition;\n}\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  FormFieldStylesProps: FormFieldStylesProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  error?: string;\n  label?: string;\n  labelPosition?: FormFieldLabelPosition;\n  description?: string;\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(\n    {\n      labelPosition,\n    },\n    theme,\n  );\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ textStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { TextInputStylesProps } from './TextInput.styles';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps\n  extends Partial<TextInputStylesProps> {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const controlHeight = theme.controlHeights[size];\n\n  return {\n    focusedStyle: {},\n    inputStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderRadius: theme.controlBorderRadius[size],\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      width: '100%',\n      ...theme.textSizes[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n      ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor: theme.colors.text.muted,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetIconTextInputStyles,\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetIconTextInputStyles,\n    DeepPartial<IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(\n    getIconTextInputStyles,\n    getStyles,\n    theme.components.getTextInputStyles,\n  )({ hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon }, theme);\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport { Text, TextProps } from './Text';\n\nexport const Label = (props: TextProps) => {\n  const { children, ...textProps } = props;\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? // Use system font on the Web\n      {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : // Use default font families by React Native by default. Setting it to undefined will use the default font\n      {\n        heading: undefined,\n        mono: undefined,\n        text: undefined,\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetColumnStyles } from '../components/Grid/Column.styles';\nimport { GetContainerStyles } from '../components/Grid/Container.styles';\nimport { GetRowStyles } from '../components/Grid/Row.styles';\nimport { GetIconTextInputStyles } from '../components/Inputs/IconTextInput.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading?: string;\n  mono?: string;\n  text?: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetIconTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}