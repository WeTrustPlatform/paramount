{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Responsive.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useElement.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useLockBodyScroll.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useMeasure.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","_Box","_Typography","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","Props","Collapsible","Box","Text","initial","_ref2","on","toggle","isAnimated","shouldMoveWithEndOfContent","initialIsOpen","isOpen","onOpen","onClose","getStyles","touchableStyle","outerWrapperStyle","contentWrapperStyle","textStyle","iconWrapperStyle","title","header","marginVertical","justifyContent","alignItems","height","backgroundColor","color","of","isMDXComponent","getCollapsibleStyles","theme","overflow","paddingLeft","display","flexDirection","React","_interopRequireWildcard","_reactNative","_native","_Animation","_hooks","_theme","_mergeStyles2","_Helpers","_Icon","_Collapsible","AnimatedView","animated","View","_props$isAnimated","_props$shouldMoveWith","children","_props$initialIsOpen","testID","_props$onOpen","_props$onClose","accessibilityProps","useTheme","_React$useState","useState","_React$useState2","_slicedToArray2","isOpened","setIsOpened","_React$useState3","initialMeasurements","_React$useState4","contentMeasurements","setContentMeasurements","isControlledUsage","isFinalOpened","_mergeStyles","mergeStyles","handlePress","useCallback","useSpring","config","springDefaultConfig","headerToggle","createElement","TouchableOpacity","onPress","style","Fragment","size","Icon","name","colors","text","contentWrapper","_objectSpread2","ViewMeasure","onMeasure","Object","keys","forEach","key","defineProperty","exports","enumerable","get","isWindowAboveMinWidth","minWidth","Dimensions","width","isWindowBelowMaxWidth","maxWidth","Responsive","isAboveMinWidth","isBelowMaxWidth","matches","_useMeasure2","viewProps","isRenderProp","_useMeasure","useMeasure","forwardRef","measurements","onLayout","ref","_ViewMeasure","_Responsive","Feather","IconTag","concat","result","replace","toUpperCase","charAt","slice","convertToPascal","friction","tension","_useElement","_useLockBodyScroll","_exenv","useElement","element","useRef","useEffect","rootElem","rootElement","rootContainer","document","setAttribute","body","lastElementChild","insertBefore","nextElementSibling","current","appendChild","remove","childNodes","length","canUseDOM","useLockBodyScroll","isLocked","originalStyle","window","getComputedStyle","unlock","pageX","pageY","x","y","arguments","undefined","createRef","setMeasurements","handleMeasure","layout","UIManager","measure","findNodeHandle","newMeasurements","e","nativeEvent"],"mappings":"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","file":"static/js/11.79c04a4e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Collapsible } from '.';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Collapsible\\n      isAnimated={true}\\n      // The header will move to the end of the content when revealing content\\n      shouldMoveWithEndOfContent={true}\\n      initialIsOpen={false}\\n      isOpen={on}\\n      onOpen={toggle}\\n      onClose={toggle}\\n      getStyles={() => ({\\n        touchableStyle: {},\\n        outerWrapperStyle: {},\\n        contentWrapperStyle: {},\\n        textStyle: {},\\n        iconWrapperStyle: {},\\n      })}\\n      title=\\\"Header title\\\"\\n      header={null}\\n    >\\n      <Box\\n        marginVertical={16}\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        height={300}\\n        backgroundColor=\\\"#67c6bb\\\"\\n      >\\n        <Text color=\\\"white\\\">Content of the Collapsible</Text>\\n      </Box>\\n    </Collapsible>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Collapsible,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Collapsible isAnimated={true} // The header will move to the end of the content when revealing content\n        shouldMoveWithEndOfContent={true} initialIsOpen={false} isOpen={on} onOpen={toggle} onClose={toggle} getStyles={() => ({\n          touchableStyle: {},\n          outerWrapperStyle: {},\n          contentWrapperStyle: {},\n          textStyle: {},\n          iconWrapperStyle: {}\n        })} title=\"Header title\" header={null} mdxType=\"Collapsible\">\n        <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\">\n          <Text color=\"white\" mdxType=\"Text\">Content of the Collapsible</Text>\n        </Box>\n      </Collapsible>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Collapsible} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface CollapsibleStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  contentWrapperStyle: ViewStyle;\n  textStyle: ViewStyle;\n  iconWrapperStyle: ViewStyle;\n}\n\nexport type GetCollapsibleStyles = (\n  checkboxStylesProps: object,\n  theme: Theme,\n) => CollapsibleStyles;\n\nexport const getCollapsibleStyles: GetCollapsibleStyles = (props, theme) => {\n  return {\n    contentWrapperStyle: {\n      overflow: 'hidden',\n    },\n    iconWrapperStyle: {\n      paddingLeft: 4,\n    },\n    outerWrapperStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    textStyle: {},\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { AccessibilityProps, TouchableOpacity, View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { initialMeasurements } from '../../hooks';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { ViewMeasure } from '../Helpers';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  CollapsibleStyles,\n  GetCollapsibleStyles,\n  getCollapsibleStyles,\n} from './Collapsible.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface CollapsibleProps extends AccessibilityProps {\n  /** Adds animation when revealing the content @default true */\n  isAnimated?: boolean;\n  /** The header will move to the end of the content when revealing content @default false */\n  shouldMoveWithEndOfContent?: boolean;\n  children?: React.ReactNode;\n  /** Uncontrolled usage of the component */\n  initialIsOpen?: boolean;\n  /** Controlled usage of the component */\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  getStyles?: ReplaceReturnType<\n    GetCollapsibleStyles,\n    DeepPartial<CollapsibleStyles>\n  >;\n  title?: string;\n  header?: React.ReactNode;\n  testID?: string;\n}\n\nexport const Collapsible = (props: CollapsibleProps) => {\n  const {\n    isAnimated = true,\n    shouldMoveWithEndOfContent = false,\n    title,\n    children,\n    header,\n    initialIsOpen = false,\n    isOpen,\n    getStyles,\n    testID,\n    onOpen = () => undefined,\n    onClose = () => undefined,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n  const [isOpened, setIsOpened] = React.useState(initialIsOpen);\n  const [contentMeasurements, setContentMeasurements] = React.useState(\n    initialMeasurements,\n  );\n\n  const isControlledUsage = typeof isOpen === 'boolean';\n  const isFinalOpened = isControlledUsage ? isOpen : isOpened;\n\n  const {\n    touchableStyle,\n    outerWrapperStyle,\n    contentWrapperStyle,\n    textStyle,\n    iconWrapperStyle,\n  } = mergeStyles(getCollapsibleStyles, getStyles)({}, theme);\n\n  const handlePress = React.useCallback(() => {\n    if (isControlledUsage) {\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    } else {\n      if (isOpened) {\n        setIsOpened(false);\n        onClose();\n      } else {\n        setIsOpened(true);\n        onOpen();\n      }\n    }\n  }, [isOpened, isOpen, isControlledUsage]);\n\n  const { height } = useSpring({\n    config: springDefaultConfig,\n\n    height: isFinalOpened ? contentMeasurements.height : 0,\n  });\n\n  const headerToggle = (\n    <TouchableOpacity\n      testID={testID}\n      onPress={handlePress}\n      style={touchableStyle}\n      {...accessibilityProps}\n    >\n      <View style={outerWrapperStyle}>\n        {header || (\n          <>\n            <Text size=\"large\" getStyles={() => ({ textStyle })}>\n              {title}\n            </Text>\n            <View style={iconWrapperStyle}>\n              <Icon\n                size={28}\n                name={isFinalOpened ? 'chevron-up' : 'chevron-down'}\n                color={theme.colors.text.default}\n              />\n            </View>\n          </>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  const contentWrapper = isAnimated ? (\n    // @ts-ignore\n    <AnimatedView style={{ ...contentWrapperStyle, height }}>\n      <ViewMeasure onMeasure={setContentMeasurements}>{children}</ViewMeasure>\n    </AnimatedView>\n  ) : (\n    <View style={contentWrapperStyle}>{isFinalOpened && children}</View>\n  );\n\n  if (shouldMoveWithEndOfContent) {\n    return (\n      <>\n        {contentWrapper}\n        {headerToggle}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {headerToggle}\n      {contentWrapper}\n    </>\n  );\n};\n","export * from './Collapsible';\n","import * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nexport type ResponsiveRenderPropType = (\n  props: ResponsiveChildrenProps,\n) => React.ReactNode;\n\nexport interface ResponsiveChildrenProps {\n  matches: boolean;\n}\n\nexport interface ResponsiveProps {\n  children: React.ReactNode | ResponsiveRenderPropType;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\nexport const isWindowAboveMinWidth = (minWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width > minWidth;\n};\n\nexport const isWindowBelowMaxWidth = (maxWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width < maxWidth;\n};\n\nexport const Responsive = (props: ResponsiveProps) => {\n  const { children, minWidth, maxWidth } = props;\n\n  let isAboveMinWidth = true;\n  let isBelowMaxWidth = true;\n\n  if (minWidth) {\n    isAboveMinWidth = isWindowAboveMinWidth(minWidth);\n  }\n\n  if (maxWidth) {\n    isBelowMaxWidth = isWindowBelowMaxWidth(maxWidth);\n  }\n\n  const isRenderProp = typeof children === 'function';\n  const matches = isAboveMinWidth && isBelowMaxWidth;\n\n  // @ts-ignore\n  return isRenderProp ? children({ matches }) : matches ? children : null;\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderPropType = (\n  props: Measurements,\n) => React.ReactNode;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children: React.ReactNode | ViewMeasureRenderPropType;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const { forwardRef, measurements, onLayout } = useMeasure({ onMeasure });\n\n  return (\n    <View\n      ref={forwardRef}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","export * from './ViewMeasure';\nexport * from './Responsive';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 400,\n};\n","export * from './useMeasure';\nexport * from './useElement';\nexport * from './useLockBodyScroll';\n","import { canUseDOM } from 'exenv';\nimport * as React from 'react';\n\nconst createElement = (id?: string) => {\n  const rootContainer = document.createElement('div');\n\n  if (id) rootContainer.setAttribute('id', id);\n\n  return rootContainer;\n};\n\nconst addRootElement = (rootElem: Element) => {\n  if (document.body.lastElementChild) {\n    document.body.insertBefore(\n      rootElem,\n      document.body.lastElementChild.nextElementSibling,\n    );\n  }\n};\n\nexport const useElement = (id?: string) => {\n  const element = React.useRef<Element>(null);\n\n  React.useEffect(() => {\n    const rootElement = createElement(id);\n\n    // If there is no existing DOM element, add a new one.\n    addRootElement(rootElement);\n\n    if (element.current) rootElement.appendChild(element.current);\n\n    return () => {\n      if (element.current) element.current.remove();\n      if (rootElement.childNodes.length === -1) rootElement.remove();\n    };\n  }, []);\n\n  const getRootElem = () => {\n    if (!element.current && canUseDOM) {\n      // @ts-ignore\n      element.current = document.createElement('div');\n    }\n    return element.current;\n  };\n\n  return getRootElem();\n};\n","import * as React from 'react';\n\nexport const useLockBodyScroll = ({ isLocked }: { isLocked: boolean }) => {\n  React.useEffect(() => {\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n\n    const lock = () => {\n      document.body.style.overflow = 'hidden';\n    };\n\n    const unlock = () => {\n      document.body.style.overflow = originalStyle;\n    };\n\n    if (isLocked) lock();\n    else unlock();\n\n    return () => unlock();\n  }, [isLocked]);\n};\n","import * as React from 'react';\nimport {\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps = {}) => {\n  const forwardRef = React.createRef<any>();\n  const { onMeasure } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    // Use the value from here, isntead of inside UIManager.measure callback\n    // Async behavior will nullify nativeEvent\n    const layout = e.nativeEvent.layout;\n    handleMeasure(layout);\n  };\n\n  const handleMeasure = (layout?: LayoutRectangle) => {\n    UIManager.measure(\n      // @ts-ignore\n      findNodeHandle(forwardRef.current)!,\n      (x, y, width, height, pageX, pageY) => {\n        const newMeasurements = {\n          ...measurements,\n          ...layout,\n          pageX,\n          pageY,\n        };\n\n        setMeasurements(newMeasurements);\n\n        if (onMeasure) {\n          onMeasure(newMeasurements);\n        }\n      },\n    );\n  };\n\n  return {\n    forwardRef,\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n"],"sourceRoot":""}