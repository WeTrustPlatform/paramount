{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","State","_props$initial","initial","_React$useState","React","useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Icon","TextInput","___WEBPACK_IMPORTED_MODULE_6__","value","_ref2","___WEBPACK_IMPORTED_MODULE_8__","placeholder","size","onValueChange","isInvalid","isClearable","onClear","console","log","of","isMDXComponent","_props$size","_props$isClearable","_props$isDisabled","isDisabled","_props$isInvalid","_props$onClear","_props$onValueChange","_props$onChangeText","onChangeText","_props$overrides","overrides","textInputProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__","_getOverrides","getOverrides","StyledRoot","dlv","Root","_getOverrides2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","rootProps","_getOverrides3","StyledInput","Input","_getOverrides4","inputProps","_getOverrides5","StyledLeftIconWrapper","LeftIconWrapper","_getOverrides6","leftIconWrapperProps","_getOverrides7","StyledLeftIcon","LeftIcon","_getOverrides8","leftIconProps","_getOverrides9","StyledRightIconWrapper","RightIconWrapper","_getOverrides10","rightIconWrapperProps","_getOverrides11","StyledRightIcon","RightIcon","_getOverrides12","rightIconProps","react__WEBPACK_IMPORTED_MODULE_5__","hasLeftIcon","hasRightIcon","viewProps","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_8__","numberOfLines","textContentType","placeholderTextColor","isControlSize","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","textSize","textSizes","medium","react_native_web_dist_exports_TextInput__WEBPACK_IMPORTED_MODULE_6__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","content","borderColor","border","borderWidth","text","width","greyDark","danger","paddingVertical","editable","muted","name","alignItems","display","justifyContent","left","paddingHorizontal","position","zIndex","right","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_7__","onPress","_Icon__WEBPACK_IMPORTED_MODULE_12__","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/13.0e7f48c0.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, State, Icon, TextInput } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      value={state.value}\\n      placeholder=\\\"Placeholder\\\"\\n      size=\\\"large\\\"\\n      onValueChange={value => setState({ value })}\\n      isInvalid={false}\\n      isClearable\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      State,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput value={state.value} placeholder=\"Placeholder\" size=\"large\" onValueChange={value => setState({\n          value\n        })} isInvalid={false} isClearable onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={TextInput} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { Icon } from '../Icon';\n\ninterface TextInputBaseProps extends RNTextInputProps {\n  /**\n   * Size of the text input.\n   * @default medium\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, text input is disabled\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, text input will be highlighted as invalid\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Alias for onChangeText, for API consistency\n   */\n  onValueChange?: (value: string) => void;\n\n  /**\n   * Called when clear icon is pressed.\n   */\n  onClear?: () => void;\n\n  /**\n   * When true, when value is not empty, a clear icon is displayed\n   */\n  isClearable?: boolean;\n}\n\nexport interface TextInputOverrides {\n  Root: RootProps;\n  LeftIconWrapper: LeftIconWrapperProps;\n  LeftIcon: StyledIconProps;\n  Input: InputProps;\n  RightIcon: StyledIconProps;\n  RightIconWrapper: RightIconWrapperProps;\n}\n\nexport interface TextInputProps\n  extends WithOverrides<TextInputBaseProps, TextInputOverrides> {}\n\nexport const TextInput = (props: TextInputProps) => {\n  const {\n    size = 'medium',\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    onClear = () => {\n      return;\n    },\n    onValueChange = () => {\n      return;\n    },\n    onChangeText = () => {\n      return;\n    },\n    value,\n    overrides = {},\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    dlv(theme, 'overrides.TextInput.Root'),\n    overrides.Root,\n  );\n  const [Input, inputProps] = getOverrides(\n    StyledInput,\n    props,\n    dlv(theme, 'overrides.TextInput.Input'),\n    overrides.Input,\n  );\n  const [LeftIconWrapper, leftIconWrapperProps] = getOverrides(\n    StyledLeftIconWrapper,\n    props,\n    dlv(theme, 'overrides.TextInput.LeftIconWrapper'),\n    overrides.LeftIconWrapper,\n  );\n  const [LeftIcon, leftIconProps] = getOverrides(\n    StyledLeftIcon,\n    props,\n    dlv(theme, 'overrides.TextInput.LeftIcon'),\n    overrides.LeftIcon,\n  );\n  const [RightIconWrapper, rightIconWrapperProps] = getOverrides(\n    StyledRightIconWrapper,\n    props,\n    dlv(theme, 'overrides.TextInput.RightIconWrapper'),\n    overrides.RightIconWrapper,\n  );\n  const [RightIcon, rightIconProps] = getOverrides(\n    StyledRightIcon,\n    props,\n    dlv(theme, 'overrides.TextInput.RightIcon'),\n    overrides.RightIcon,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <LeftIconWrapper {...leftIconWrapperProps}>\n        <LeftIcon\n          isClearable={isClearable}\n          onClear={onClear}\n          onValueChange={onValueChange}\n          value={value}\n          onChangeText={onChangeText}\n          {...leftIconProps}\n        />\n      </LeftIconWrapper>\n      <Input\n        hasLeftIcon={!!overrides.LeftIcon}\n        hasRightIcon={!!(isClearable || overrides.RightIcon)}\n        size={size}\n        isDisabled={isDisabled}\n        isInvalid={isInvalid}\n        onValueChange={onValueChange}\n        value={value}\n        onChangeText={onChangeText}\n        {...textInputProps}\n        {...inputProps}\n      />\n      <RightIconWrapper {...rightIconWrapperProps}>\n        <RightIcon\n          isClearable={isClearable}\n          onClear={onClear}\n          onValueChange={onValueChange}\n          value={value}\n          onChangeText={onChangeText}\n          {...rightIconProps}\n        />\n      </RightIconWrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface InputProps extends RNTextInputProps {\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n  onValueChange: (value: string) => void;\n  onChangeText: (value: string) => void;\n}\n\nconst StyledInput = (props: InputProps) => {\n  const {\n    isDisabled,\n    isInvalid,\n    onValueChange,\n    onChangeText,\n    size,\n    style,\n    numberOfLines,\n    textContentType,\n    hasLeftIcon,\n    hasRightIcon,\n    placeholderTextColor,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    borderRadius,\n    height,\n    paddingLeft,\n    paddingRight,\n    textSize,\n  } = isControlSize(size)\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size],\n        paddingRight: theme.controlPaddings[size],\n        textSize: theme.textSizes[size],\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n        textSize: theme.textSizes.medium,\n      };\n\n  return (\n    // @ts-ignore\n    <RNTextInput\n      style={[\n        {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderRadius,\n          borderWidth: 1,\n          color: theme.colors.text.default,\n          height,\n          paddingLeft,\n          paddingRight,\n          width: '100%',\n          ...textSize,\n          ...(isDisabled\n            ? { backgroundColor: theme.colors.background.greyDark }\n            : {}),\n          ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n          ...(numberOfLines\n            ? {\n                height: numberOfLines * height,\n                paddingVertical: 16,\n              }\n            : {}),\n          ...(hasLeftIcon && { paddingLeft: 40 }),\n          ...(hasRightIcon && { paddingRight: 40 }),\n        },\n        style,\n      ]}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor || theme.colors.text.muted}\n      name={textContentType}\n      numberOfLines={numberOfLines}\n      textContentType={textContentType}\n      onChangeText={text => {\n        onValueChange(text);\n        onChangeText(text);\n      }}\n      {...textInputProps}\n    />\n  );\n};\n\ninterface LeftIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledLeftIconWrapper = (props: LeftIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          left: 0,\n          paddingHorizontal: 8,\n          position: 'absolute',\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface RightIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRightIconWrapper = (props: RightIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          paddingHorizontal: 8,\n          position: 'absolute',\n          right: 0,\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface StyledIconProps {\n  onValueChange: (value: string) => void;\n  onChangeText: (text: string) => void;\n  value?: string;\n  isClearable: boolean;\n  onClear: () => void;\n}\n\nconst StyledLeftIcon = (props: StyledIconProps) => {\n  return <></>;\n};\n\nconst StyledRightIcon = (props: StyledIconProps) => {\n  const { isClearable, onClear, onValueChange, onChangeText, value } = props;\n  const theme = useTheme();\n\n  if (!value || !isClearable) return null;\n\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        onChangeText('');\n        onValueChange('');\n        onClear();\n      }}\n    >\n      <Icon name=\"x\" color={theme.colors.text.default} />\n    </TouchableOpacity>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}