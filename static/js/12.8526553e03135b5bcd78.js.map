{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","FormField","TextInput","___WEBPACK_IMPORTED_MODULE_5__","label","description","error","___WEBPACK_IMPORTED_MODULE_6__","of","parentName","className","isMDXComponent","getFormFieldStyles","theme","labelWrapperStyle","wrapperStyle","labelPosition","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","children","_props$labelPosition","getStyles","useTheme","_mergeStyles","mergeStyles","labelContent","react","View","style","Label","labelStyle","Text","color","textStyle","getTextInputStyles","_ref$size","size","_ref$isClearable","isClearable","_ref$isDisabled","isDisabled","_ref$isInvalid","isInvalid","numberOfLines","hasLeftIcon","leftIcon","hasRightIcon","rightIcon","_ref2","isControlSize","borderRadius","controlBorderRadius","height","controlHeights","controlPaddings","textSize","textSizes","medium","containerStyle","position","inputStyle","objectSpread","backgroundColor","colors","background","content","borderColor","border","borderWidth","text","width","greyDark","danger","paddingVertical","leftContainerStyle","display","justifyContent","left","paddingHorizontal","zIndex","placeholderTextColor","muted","rightContainerStyle","right","TextInputBase","innerRef","_props$isClearable","_props$isDisabled","_props$onClear","onClear","value","textContentType","_props$onChangeText","onChangeText","placeholderTextColorProp","textInputProps","objectWithoutProperties","esm_extends","ref","editable","name","TouchableOpacity","onPress","Icon_web","React","TextInput_TextInputBase","getLabelStyles","rest","getTextStyles","textProps","accessibilityRole","Platform","OS","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/12.1b7138e7.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { FormField, TextInput } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <p>{`Enriches a field in a form to contain label, description or error messages.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<FormField\\n  label=\\\"Label\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      FormField,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField label=\"Label\" description=\"Description for the field\" error=\"Error message\" mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={FormField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\ngetStyles={(FormFieldProps, Theme) => FormFieldStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`label = (\n  <View labelWrapperStyle>\n    <Label labelTextStyle>{label}</Label>\n  </View>\n)\n\n<View containerStyles>\n  {labelPosition === 'top' && label}\n  <View wrapperStyle>\n    {labelPosition === 'left' && label}\n    {children}\n    {labelPosition === 'right' && label}\n  </View>\n  <Text descriptionTextStyle>\n    {description}\n  </Text>\n  <View errorWrapperStyle>\n    <Text errorTextStyle>\n      {error}\n    </Text>\n  </View>\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldProps } from './FormField';\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  props: FormFieldProps,\n  theme: Theme,\n) => Partial<FormFieldStyles>;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport { GetFormFieldStyles, getFormFieldStyles } from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  /**\n   * Error message of the field\n   */\n  error?: React.ReactNode;\n\n  /**\n   * Label of the field.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: FormFieldLabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: React.ReactNode;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: GetFormFieldStyles;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(props, theme);\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ labelStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { TextInputProps } from './TextInput';\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  placeholderTextColor: string;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport type GetTextInputStyles = (\n  props: TextInputProps,\n  theme: Theme,\n) => Partial<TextInputStyles>;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  {\n    size = 'medium',\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    numberOfLines,\n    leftIcon,\n    rightIcon,\n  },\n  theme,\n) => {\n  const hasLeftIcon = !!leftIcon;\n  const hasRightIcon = !!(rightIcon || isClearable);\n\n  const {\n    borderRadius,\n    height,\n    paddingLeft,\n    paddingRight,\n    textSize,\n  } = isControlSize(size)\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size],\n        paddingRight: theme.controlPaddings[size],\n        textSize: theme.textSizes[size],\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n        textSize: theme.textSizes.medium,\n      };\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderRadius,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      height,\n      paddingLeft,\n      paddingRight,\n      width: '100%',\n      ...textSize,\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n      ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * height,\n            paddingVertical: 16,\n          }\n        : {}),\n      ...(hasLeftIcon && { paddingLeft: 40 }),\n      ...(hasRightIcon && { paddingRight: 40 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n      zIndex: 1,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: 1,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { GetTextInputStyles, getTextInputStyles } from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  /**\n   * Size of the text input.\n   * @default medium\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, text input is disabled\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, text input will be highlighted as invalid\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Icon placed on the left side\n   */\n  leftIcon?: React.ReactNode;\n\n  /**\n   * Icon placed on the left side\n   */\n  rightIcon?: React.ReactNode;\n\n  /**\n   * Called when clear icon is pressed.\n   */\n  onClear?: () => void;\n\n  /**\n   * When true, when value is not empty, a clear icon is displayed\n   */\n  isClearable?: boolean;\n\n  /** Use `ref` instead */\n  innerRef?: React.Ref<RNTextInput>;\n\n  /**\n   * Callback to get element styles.\n   */\n  getStyles?: GetTextInputStyles;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    getStyles,\n    innerRef,\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    leftIcon,\n    onClear = () => {\n      return;\n    },\n    rightIcon,\n    size = 'medium',\n    value,\n    textContentType,\n    onChangeText = () => {\n      return;\n    },\n    placeholderTextColor: placeholderTextColorProp,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    inputStyle,\n    placeholderTextColor,\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n  } = mergeStyles(getTextInputStyles, getStyles)(props, theme);\n\n  return (\n    <View style={containerStyle}>\n      {leftIcon && <View style={leftContainerStyle}>{leftIcon}</View>}\n      {/*\n      // @ts-ignore: name prop being passed for web */}\n      <RNTextInput\n        ref={innerRef}\n        style={inputStyle}\n        editable={!isDisabled}\n        placeholderTextColor={placeholderTextColorProp || placeholderTextColor}\n        name={textContentType}\n        value={value}\n        onChangeText={onChangeText}\n        textContentType={textContentType}\n        {...textInputProps}\n      />\n      {((value && isClearable) || rightIcon) && (\n        <View style={rightContainerStyle}>\n          {value && isClearable ? (\n            <TouchableOpacity\n              onPress={() => {\n                onChangeText('');\n                onClear();\n              }}\n            >\n              <Icon name=\"x\" color={theme.colors.text.default} />\n            </TouchableOpacity>\n          ) : (\n            rightIcon\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import { TextStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { LabelProps } from './Label';\nimport { getTextStyles } from './Text.styles';\n\nexport interface LabelStyles {\n  labelStyle: TextStyle;\n}\n\nexport type GetLabelStyles = (\n  props: LabelProps,\n  theme: Theme,\n) => Partial<LabelStyles>;\n\nexport const getLabelStyles: GetLabelStyles = (props, theme) => {\n  const { getStyles, ...rest } = props;\n  const { textStyle } = getTextStyles(rest, theme);\n\n  return { labelStyle: textStyle };\n};\n","import * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetLabelStyles, getLabelStyles } from './Label.styles';\nimport { Text, TextProps } from './Text';\n\n// tslint:disable-next-line\n// @ts-ignore\nexport interface LabelProps extends TextProps {\n  /** Callback to get element styles. */\n  getStyles?: GetLabelStyles;\n}\n\nexport const Label = (props: LabelProps) => {\n  const { children, getStyles, ...textProps } = props;\n  const theme = useTheme();\n\n  const { labelStyle } = mergeStyles(\n    getLabelStyles,\n    getStyles,\n    theme.components.getLabelStyles,\n  )(props, theme);\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      getStyles={() => ({ textStyle: labelStyle })}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}