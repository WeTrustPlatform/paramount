{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePickerItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButtonWrapper.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","Feather","Icon","_ref","name","color","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","_Icon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_react2","_interopRequireDefault","_docz","_reactPowerplug","_NativePicker","_NativePickerItem","layoutProps","MDXLayout","MDXContent","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","State","NativePicker","NativePickerItem","initial","value","_ref2","state","setState","selectedValue","onValueChange","itemValue","itemIndex","getStyles","theme","pickerStyle","itemStyle","label","isMDXComponent","_reactNative","_theme","_mergeStyles2","_PickerButton","_PickerButtonWrapper","NativePickerBase","_props$size","innerRef","pickerProps","useTheme","_mergeStyles","mergeStyles","getPickerButtonStyles","PickerButtonWrapper","Picker","ref","style","forwardRef","RNPicker","Item","getPickerButtonVariables","base","borderColor","colors","border","borderWidth","disabled","backgroundColor","background","greyDark","focus","invalid","danger","placeholderTextColor","text","muted","sizes","small","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","pickerStylesProps","pickerVariables","controlSizeStyles","textSizeStyles","textSizes","containerStyle","content","position","_objectSpread2","appearance","width","rightContainerStyle","alignItems","display","justifyContent","paddingHorizontal","right","zIndex","children","View","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles","apply","arguments"],"mappings":"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","file":"static/js/23.df044b0f.js","sourcesContent":["import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { NativePicker } from './NativePicker';\nimport { NativePickerItem } from './NativePickerItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"nativepicker\"\n    }}>{`NativePicker`}</h1>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <NativePicker\\n      selectedValue={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      size=\\\"large\\\"\\n      getStyles={(props, theme) => ({\\n        pickerStyle: {},\\n        itemStyle: {},\\n      })}\\n    >\\n      <NativePickerItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <NativePickerItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <NativePickerItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <NativePickerItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <NativePickerItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <NativePickerItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <NativePickerItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <NativePickerItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <NativePickerItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <NativePickerItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <NativePickerItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <NativePickerItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <NativePickerItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <NativePickerItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <NativePickerItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <NativePickerItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <NativePickerItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <NativePickerItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <NativePickerItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </NativePicker>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      NativePicker,\n      NativePickerItem\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <NativePicker selectedValue={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} size=\"large\" getStyles={(props, theme) => ({\n          pickerStyle: {},\n          itemStyle: {}\n        })} mdxType=\"NativePicker\">\n        <NativePickerItem label=\"C\" value=\"c\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C#\" value=\"c#\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C++\" value=\"c++\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"CSS\" value=\"css\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elixir\" value=\"elixir\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elm\" value=\"elm\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Erlang\" value=\"erlang\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Go\" value=\"go\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Haskell\" value=\"haskell\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"HTML\" value=\"html\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Java\" value=\"java\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"JavaScript\" value=\"js\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Lua\" value=\"lua\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Python\" value=\"python\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"R\" value=\"r\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Ruby\" value=\"ruby\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Rust\" value=\"rust\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Switft\" value=\"swift\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Typescript\" value=\"typescript\" mdxType=\"NativePickerItem\" />\n      </NativePicker>}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { Picker as RNPicker, PickerProps as RNPickerProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetPickerButtonStylesProp } from './PickerButton';\nimport { getPickerButtonStyles, PickerButtonSize } from './PickerButton.styles';\nimport { PickerButtonWrapper } from './PickerButtonWrapper';\n\nexport interface NativePickerProps extends RNPickerProps {\n  size?: PickerButtonSize;\n  innerRef?: React.Ref<RNPicker>;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: GetPickerButtonStylesProp;\n}\n\nconst NativePickerBase = (props: NativePickerProps) => {\n  const { size = 'medium', getStyles, innerRef, ...pickerProps } = props;\n  const theme = useTheme();\n\n  const { pickerStyle, itemStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <PickerButtonWrapper>\n      <RNPicker\n        ref={innerRef}\n        itemStyle={itemStyle}\n        style={pickerStyle}\n        {...pickerProps}\n      />\n    </PickerButtonWrapper>\n  );\n};\n\nexport const NativePicker = React.forwardRef<RNPicker, RNPickerProps>(\n  (props, ref) => {\n    return <NativePickerBase {...props} innerRef={ref} />;\n  },\n);\n","import { Picker as RNPicker, PickerItemProps } from 'react-native';\n\n// tslint:disable-next-line\nexport interface NativePickerItemProps extends PickerItemProps {}\n\nexport const NativePickerItem = RNPicker.Item;\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PickerButtonSizes {\n  small: ViewStyle;\n  medium: ViewStyle;\n  large: ViewStyle;\n}\n\nexport type PickerButtonSize = keyof PickerButtonSizes;\n\nexport interface PickerButtonTextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PickerButtonTextSize = keyof PickerButtonTextSizes;\n\nexport interface PickerButtonVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  focus: ViewStyle;\n  invalid: ViewStyle;\n  placeholderTextColor: string;\n  sizes: PickerButtonSizes;\n}\n\nexport const getPickerButtonVariables = (\n  theme: Theme,\n): PickerButtonVariables => {\n  return {\n    base: {\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: 40,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: 40,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: 40,\n      },\n    },\n  };\n};\n\nexport interface PickerButtonStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: any;\n}\n\nexport interface PickerButtonStylesProps {\n  size: PickerButtonSize;\n}\nexport type GetPickerButtonStyles = (\n  pickerStylesProps: PickerButtonStylesProps,\n  theme: Theme,\n) => PickerButtonStyles;\n\nexport const getPickerButtonStyles: GetPickerButtonStyles = (\n  pickerStylesProps,\n  theme,\n) => {\n  const pickerVariables = getPickerButtonVariables(theme);\n  const { base, sizes } = pickerVariables;\n  const { size } = pickerStylesProps;\n\n  const controlSizeStyles = sizes[size];\n  const textSizeStyles = theme.textSizes[size];\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      position: 'relative',\n    },\n    itemStyle: {\n      ...textSizeStyles,\n    },\n    pickerStyle: {\n      appearance: 'none',\n      backgroundColor: 'transparent',\n      color: theme.colors.text.default,\n      width: '100%',\n      ...textSizeStyles,\n      ...base,\n      ...controlSizeStyles,\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: -1,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { GetPickerButtonStylesProp } from './PickerButton';\nimport { getPickerButtonStyles, PickerButtonSize } from './PickerButton.styles';\n\nexport interface PickerButtonWrapperProps {\n  getStyles?: GetPickerButtonStylesProp;\n  size?: PickerButtonSize;\n  children: React.ReactNode;\n}\n\nexport const PickerButtonWrapper = (props: PickerButtonWrapperProps) => {\n  const { getStyles, children, size = 'medium' } = props;\n  const theme = useTheme();\n\n  const { containerStyle, rightContainerStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <View style={containerStyle}>\n      {children}\n      <View style={rightContainerStyle}>\n        <Icon name=\"chevron-down\" size={32} color={theme.colors.text.default} />\n      </View>\n    </View>\n  );\n};\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}