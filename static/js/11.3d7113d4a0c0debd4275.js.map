{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts"],"names":["getCheckboxStyles","_ref","theme","isChecked","isDisabled","shape","hasLabel","labelPosition","checkColor","size","sizeValue","controlHeights","checkboxFocusBackgroundColor","colors","background","primaryDark","greyLight","checkboxStyle","_objectSpread2","alignItems","backgroundColor","content","borderColor","border","borderWidth","height","justifyContent","width","marginRight","marginLeft","primaryDefault","greyDark","circle","borderRadius","square","controlBorderRadius","small","iconColor","text","white","outerWrapperStyle","flexDirection","textStyle","touchableStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_icons","_theme","_mergeStyles2","_Typography","_Checkbox","Checkbox","props","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","_props$onChange","onChange","_props$shape","_props$labelPosition","_props$size","label","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","disabled","onPress","View","Text","Icon","name","color","getListItemVariables","base","borderBottomWidth","focusBackgroundColor","selected","sizes","fontSize","textSizes","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","sizeStyles","containerStyle","imageWrapperStyle","leftWrapperStyle","textWrapperStyle","wrapperStyle","_ListItem","ListItem","description","_props$rightIcon","rightIcon","leftIcon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_react2","_interopRequireDefault","_countriesList","_docz","_Box","_SelectList","_SelectListItem","_reactPowerplug","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","Playground","__position","__code","__scope","this","countryList","Props","Box","SelectList","SelectListItem","State","isMulti","selectedValue","onValueChange","newValue","itemIndex","console","log","value","initial","_ref2","state","setState","_ref3","map","countryCode","data","_ref4","of","isMDXComponent","SelectListBase","children","innerRef","flatListProps","handleOnPress","itemValue","Array","isArray","filter","val","concat","childrenArray","Children","toArray","child","FlatList","ref","keyExtractor","item","getItemLayout","_","index","length","offset","renderItem","selectListItem","some","selVal","cloneElement","onSelect","forwardRef","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault","Feather","IconTag","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon"],"mappings":"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","file":"static/js/11.b67655c4.js","sourcesContent":["import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\nimport { CheckboxLabelPosition, CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n  labelPosition: CheckboxLabelPosition;\n  hasLabel: boolean;\n  checkColor: string;\n  size: ControlSize;\n}\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  textStyle: TextStyle;\n  iconColor: string;\n  checkboxFocusBackgroundColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape, hasLabel, labelPosition, checkColor, size },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? theme.colors.background.primaryDark\n      : theme.colors.background.greyLight,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(hasLabel\n        ? labelPosition === 'right'\n          ? { marginRight: 8 }\n          : { marginLeft: 8 }\n        : {}),\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...{\n        circle: {\n          borderRadius: 999,\n        },\n        square: {\n          borderRadius: theme.controlBorderRadius.small,\n        },\n      }[shape],\n    },\n    iconColor: checkColor || theme.colors.text.white,\n\n    outerWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: {},\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\nexport type CheckboxLabelPosition = 'left' | 'right';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n  checkColor?: string;\n  label?: string;\n  size?: ControlSize;\n  labelPosition?: 'left' | 'right';\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'square',\n    labelPosition = 'right',\n    size = 'medium',\n    label,\n    checkColor,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    touchableStyle,\n    outerWrapperStyle,\n    checkboxStyle,\n    textStyle,\n    iconColor,\n    checkboxFocusBackgroundColor,\n  } = mergeStyles(getCheckboxStyles, getStyles)(\n    {\n      checkColor,\n      hasLabel: !!label,\n      isChecked,\n      isDisabled,\n      labelPosition,\n      shape,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible={isInteractive}\n      style={touchableStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={outerWrapperStyle}>\n        {labelPosition === 'left' && (\n          <Text size={size} getStyles={() => ({ textStyle })}>\n            {label}\n          </Text>\n        )}\n\n        <View style={checkboxStyle}>\n          {isChecked ? <Icon name=\"check\" size={20} color={iconColor} /> : null}\n        </View>\n\n        {labelPosition === 'right' && (\n          <Text size={size} getStyles={() => ({ textStyle })}>\n            {label}\n          </Text>\n        )}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export { Checkbox, CheckboxProps } from './Checkbox';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { countries as countryList } from 'countries-list';\nimport { Playground, Props } from 'docz';\nimport { Box } from '../Box';\nimport { SelectList } from './SelectList';\nimport { SelectListItem } from './SelectListItem';\nimport { State } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item. `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` is a compound component, which means that its children can be any component, and it will implicitly inject props such as `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` to them.\n`}<inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<SelectList\\n  isMulti={false}\\n  selectedValue=\\\"c\\\"\\n  onValueChange={(newValue, itemIndex) => {\\n    console.log(newValue, itemIndex)\\n  }}\\n>\\n  <SelectListItem\\n    label=\\\"Usage\\\"\\n    value=\\\"c\\\"\\n    // Props below are passed from `SelectList`, so it is not necessary to pass them here\\n    // isSelected\\n    // onSelect\\n    // index\\n  />\\n</SelectList>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <SelectList isMulti={false} selectedValue=\"c\" onValueChange={(newValue, itemIndex) => {\n        console.log(newValue, itemIndex);\n      }} mdxType=\"SelectList\">\n    <SelectListItem label=\"Usage\" value=\"c\" // Props below are passed from `SelectList`, so it is not necessary to pass them here\n        // isSelected\n        // onSelect\n        // index\n        mdxType=\"SelectListItem\" />\n  </SelectList>\n    </Playground>\n    <h3 {...{\n      \"id\": \"multi-select\"\n    }}>{`Multi select`}</h3>\n    <Playground __position={1} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      isMulti\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"large-selectlist\"\n    }}>{`Large SelectList`}</h3>\n    <p><inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`react-native`}</inlineCode></p>\n    <Playground __position={2} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={400}>\\n      <SelectList\\n        isMulti\\n        selectedValue={state.selectedValue}\\n        onValueChange={(newValue, itemIndex) => {\\n          setState({ selectedValue: newValue })\\n        }}\\n      >\\n        {Object.keys(countryList)\\n          .map(countryCode => ({\\n            countryCode,\\n            value: countryCode,\\n            label: countryList[countryCode].name,\\n            ...countryList[countryCode],\\n          }))\\n          .map(data => (\\n            <SelectListItem\\n              key={data.value}\\n              label={data.label}\\n              value={data.label}\\n            />\\n          ))}\\n      </SelectList>\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={400} mdxType=\"Box\">\n        <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n            setState({\n              selectedValue: newValue\n            });\n          }} mdxType=\"SelectList\">\n          {Object.keys(countryList).map(countryCode => ({\n              countryCode,\n              value: countryCode,\n              label: countryList[countryCode].name,\n              ...countryList[countryCode]\n            })).map(data => <SelectListItem key={data.value} label={data.label} value={data.label} mdxType=\"SelectListItem\" />)}\n        </SelectList>\n      </Box>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"single-select\"\n    }}>{`Single select`}</h3>\n    <Playground __position={3} __code={'<State initial={{ selectedValue: \\'go\\' }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      countryList,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: 'go'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <h3 {...{\n      \"id\": \"select-list\"\n    }}>{`Select List`}</h3>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n"],"sourceRoot":""}