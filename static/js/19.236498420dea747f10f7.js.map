{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Button/BackButton.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/LoadingDots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_icons","_theme","_Button","BackButton","props","theme","useTheme","createElement","Button","_extends2","default","appearance","isInline","iconBefore","Icon","name","size","color","colors","text","getButtonVariables","appearances","minimal","backgroundColor","background","white","focusColor","greyDefault","danger","primary","secondary","greyLight","borderColor","border","loadingBackgroundColor","overlay","dangerDefault","dangerDark","dangerLight","primaryDefault","primaryDark","primaryLight","secondaryDefault","secondaryDark","secondaryLight","outline","borderWidth","disabled","greyDark","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","getButtonStyles","buttonStyleProps","isDisabled","isLoading","_getButtonVariables","baseStyles","_objectWithoutProperties2","_appearances$appearan","textColor","buttonStyle","_sizes$size","shapeStyles","disabledButtonTextColor","disabledButtonStyles","_objectSpread2","alignSelf","flexDirection","flexWrap","textStyle","alignItems","display","fontWeight","justifyContent","textAlign","_reactNative","_mergeStyles2","_Layout","_Loading","_Typography","_props$appearance","_props$color","title","getStyles","iconAfter","icon","_props$isDisabled","iconLoading","isActive","_props$isInline","_props$isLoading","_props$onPress","onPress","_props$size","testID","accessibilityProps","_mergeStyles","mergeStyles","TouchableHighlight","accessible","accessibilityRole","underlayColor","style","View","Spacing","ButtonContent","LoadingDots","Text","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_BackButton","_react2","_interopRequireDefault","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","mdx","mdxType","id","Playground","__position","__code","__scope","this","Toggle","TouchableOpacity","Props","Dialog","Box","Heading","initial","_ref2","on","toggle","header","padding","footer","console","log","isVisible","onRequestClose","useHistory","modalContainerStyle","containerStyle","bodyStyle","of","isMDXComponent","getDialogVariables","body","maxHeight","container","elevation","maxWidth","minWidth","position","zIndex","modalContainer","width","getDialogStyles","dialogVariables","_Modal","_Overlay","_Dialog","children","_props$isBackgroundSc","isBackgroundScrollable","_props$onRequestClose","Modal","visible","transparent","animationType","Overlay","_native","AnimatedView","animated","items","trail","useTrail","length","config","duration","from","opacity","reset","to","_to","_asyncToGenerator2","_regenerator","mark","_callee","next","wrap","_context","prev","stop","_x","apply","arguments","map","index","marginLeft","marginRight","_LoadingDots"],"mappings":"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","file":"static/js/19.af385f68.js","sourcesContent":["import * as React from 'react';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { Button, ButtonProps } from './Button';\n\nexport const BackButton = (props: ButtonProps) => {\n  const theme = useTheme();\n\n  return (\n    <Button\n      appearance=\"minimal\"\n      isInline\n      iconBefore={\n        <Icon name=\"arrow-left\" size={24} color={theme.colors.text.default} />\n      }\n      size=\"small\"\n      {...props}\n    />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type ButtonColorProps = ViewStyle & {\n  color: string;\n  focusColor: string;\n  loadingBackgroundColor?: string;\n};\n\nexport interface ButtonColors {\n  default: ButtonColorProps;\n  danger: ButtonColorProps;\n  primary: ButtonColorProps;\n  secondary: ButtonColorProps;\n}\n\nexport type ButtonColor = keyof ButtonColors;\n\nexport interface ButtonAppearances {\n  minimal: ButtonColors;\n  primary: ButtonColors;\n  outline: ButtonColors;\n}\n\nexport type ButtonAppearance = keyof ButtonAppearances;\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface ButtonSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type ButtonSize = keyof ButtonSizes;\n\nexport interface ButtonVariables {\n  appearances: ButtonAppearances;\n  disabled: {\n    backgroundColor: string;\n    color: string;\n  };\n  sizes: ButtonSizes;\n}\n\nexport const getButtonVariables = (theme: Theme): ButtonVariables => {\n  return {\n    appearances: {\n      minimal: {\n        default: {\n          backgroundColor: theme.colors.background.white,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.white,\n          color: theme.colors.text.danger,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n        primary: {\n          backgroundColor: theme.colors.background.white,\n          color: theme.colors.text.primary,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n        secondary: {\n          backgroundColor: theme.colors.background.white,\n          color: theme.colors.text.secondary\n            ? theme.colors.text.secondary\n            : theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n      },\n      primary: {\n        default: {\n          backgroundColor: theme.colors.background.greyLight,\n          borderColor: theme.colors.border.default,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n          loadingBackgroundColor: theme.colors.background.overlay,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.dangerDefault,\n          borderColor: theme.colors.border.danger,\n          color: 'white',\n\n          focusColor: theme.colors.background.dangerDark,\n          loadingBackgroundColor: theme.colors.background.dangerLight,\n        },\n\n        primary: {\n          backgroundColor: theme.colors.background.primaryDefault,\n          borderColor: theme.colors.border.primary,\n          color: 'white',\n\n          focusColor: theme.colors.background.primaryDark,\n          loadingBackgroundColor: theme.colors.background.primaryLight,\n        },\n\n        secondary: {\n          backgroundColor: theme.colors.background.secondaryDefault,\n          borderColor: theme.colors.border.secondary,\n          color: 'white',\n\n          focusColor: theme.colors.background.secondaryDark,\n          loadingBackgroundColor: theme.colors.background.secondaryLight,\n        },\n      },\n\n      outline: {\n        default: {\n          backgroundColor: theme.colors.background.white,\n          borderColor: theme.colors.text.default,\n          borderWidth: 3,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.white,\n          borderColor: theme.colors.border.danger,\n          borderWidth: 3,\n          color: theme.colors.text.danger,\n\n          focusColor: theme.colors.background.dangerLight,\n        },\n\n        primary: {\n          backgroundColor: theme.colors.background.white,\n          borderColor: theme.colors.border.primary,\n          borderWidth: 3,\n          color: theme.colors.text.primary,\n\n          focusColor: theme.colors.background.primaryLight,\n        },\n\n        secondary: {\n          backgroundColor: theme.colors.background.white,\n          borderColor: theme.colors.border.secondary,\n          borderWidth: 3,\n          color: theme.colors.text.secondary,\n\n          focusColor: theme.colors.background.secondaryLight,\n        },\n      },\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n\n      color: theme.colors.text.muted,\n    },\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 20,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface ButtonStyles {\n  buttonStyle: ViewStyle;\n  textStyle: TextStyle;\n  focusColor: string;\n}\n\nexport interface ButtonStylesProps {\n  appearance: ButtonAppearance;\n  color: ButtonColor;\n  size: ButtonSize;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isInline: boolean;\n}\nexport type GetButtonStyles = (\n  buttonStylesProps: ButtonStylesProps,\n  theme: Theme,\n) => ButtonStyles;\n\nexport const getButtonStyles: GetButtonStyles = (buttonStyleProps, theme) => {\n  const {\n    appearance,\n    color,\n    size,\n    isDisabled,\n    isLoading,\n    isInline,\n  } = buttonStyleProps;\n\n  const { appearances, sizes, disabled, ...baseStyles } = getButtonVariables(\n    theme,\n  );\n\n  const {\n    color: textColor,\n    focusColor,\n    loadingBackgroundColor,\n    ...buttonStyle\n  } = appearances[appearance][color];\n\n  const { fontSize, ...shapeStyles } = sizes[size];\n  const { color: disabledButtonTextColor, ...disabledButtonStyles } = disabled;\n\n  return {\n    buttonStyle: {\n      ...(isDisabled\n        ? {\n            ...disabledButtonStyles,\n            ...shapeStyles,\n          }\n        : {\n            ...shapeStyles,\n            ...baseStyles,\n            ...buttonStyle,\n            ...(isLoading ? { backgroundColor: loadingBackgroundColor } : {}),\n          }),\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }\n        : {}),\n    },\n    focusColor,\n    textStyle: {\n      alignItems: 'center',\n      color: isDisabled ? disabledButtonTextColor : textColor,\n      display: 'flex',\n      fontSize,\n      fontWeight: '600',\n      justifyContent: 'center',\n      textAlign: 'center',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TextStyle,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Spacing } from '../Layout';\nimport { LoadingDots } from '../Loading';\nimport { Text } from '../Typography';\nimport {\n  ButtonAppearance,\n  ButtonColor,\n  ButtonSize,\n  ButtonStyles,\n  GetButtonStyles,\n  getButtonStyles,\n} from './Button.styles';\n\nexport interface ButtonProps extends AccessibilityProps {\n  title?: string;\n\n  /**\n   * Icon in place of title\n   * @default \"null\"\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * The intent of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ButtonSize;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Forcefully set the active state of a button.\n   * @default false\n   */\n  isActive?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, the button will not stretch full width\n   * @default false\n   */\n  isInline?: boolean;\n\n  /**\n   * Button press handler\n   * @default () => {}\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /**\n   * Sets an icon before the text.\n   * @default undefined\n   */\n  iconBefore?: React.ReactNode;\n\n  /**\n   * Sets an icon after the text.\n   * @default undefined\n   */\n  iconAfter?: React.ReactNode;\n\n  /**\n   * Sets an icon at loading state.\n   * @default undefined\n   */\n  iconLoading?: React.ReactNode;\n\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetButtonStyles, DeepPartial<ButtonStyles>>;\n\n  testID?: string;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    title,\n    color = 'default',\n    getStyles,\n    icon,\n    iconAfter,\n    iconBefore,\n    iconLoading,\n    isActive = false,\n    isDisabled = false,\n    isInline = false,\n    isLoading = false,\n    onPress = () => {\n      return;\n    },\n    size = 'medium',\n    testID,\n\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { buttonStyle, textStyle, focusColor } = mergeStyles(\n    getButtonStyles,\n    getStyles,\n  )(\n    {\n      appearance,\n      color,\n      isDisabled,\n      isInline,\n      isLoading,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible\n      accessibilityRole=\"button\"\n      underlayColor={focusColor}\n      disabled={!!(isDisabled || isLoading)}\n      onPress={onPress}\n      style={buttonStyle}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          flexDirection: 'row',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {iconBefore}\n        <Spacing\n          paddingLeft={iconBefore ? 1 : 0}\n          paddingRight={iconAfter ? 1 : 0}\n        >\n          {/*\n        // @ts-ignore */}\n          <ButtonContent {...props} textStyle={textStyle} />\n        </Spacing>\n        {iconAfter}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport interface ButtonContentProps extends ButtonProps {\n  textStyle: TextStyle;\n}\n\nconst ButtonContent = (props: ButtonContentProps) => {\n  const { isLoading, iconLoading, icon, title, textStyle } = props;\n\n  if (isLoading) return iconLoading || <LoadingDots color={textStyle.color} />;\n  if (icon) return icon;\n  if (title) return <Text getStyles={() => ({ textStyle })}>{title}</Text>;\n\n  return null;\n};\n","export * from './Button';\nexport * from './BackButton';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { TouchableOpacity } from 'react-native';\nimport { Playground, Props } from 'docz';\nimport { Icon } from '../../icons';\nimport { Dialog } from '.';\nimport { Button } from '../Button';\nimport { Box, Spacing } from '../Layout';\nimport { Text, Heading } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n    <p>{`Dialog has no predefined styling and handlers. The content, header and footer is completely in your control.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Box>\\n      <Dialog\\n        header={\\n          <Spacing\\n            padding={2}\\n            flexDirection=\\\"row\\\"\\n            justifyContent=\\\"space-between\\\"\\n            alignItems=\\\"center\\\"\\n          >\\n            <Heading>Title</Heading>\\n            <TouchableOpacity onPress={toggle}>\\n              <Icon name=\\\"x\\\" size={24} />\\n            </TouchableOpacity>\\n          </Spacing>\\n        }\\n        footer={\\n          <Spacing padding={2} flexDirection=\\\"row\\\" justifyContent=\\\"flex-end\\\">\\n            <Button appearance=\\\"minimal\\\" onPress={toggle} title=\\\"Cancel\\\" />\\n            <Spacing paddingLeft={2}>\\n              <Button\\n                color=\\\"primary\\\"\\n                onPress={() => console.log(\\'Button clicked\\')}\\n                title=\\\"Accept\\\"\\n              />\\n            </Spacing>\\n          </Spacing>\\n        }\\n        isVisible={on}\\n        onRequestClose={toggle}\\n        useHistory={false}\\n        getStyles={(props, theme) => ({\\n          modalContainerStyle: {},\\n          containerStyle: {},\\n          bodyStyle: {},\\n        })}\\n      >\\n        <Box height={1800}>\\n          <Text>Put any content in the dialog</Text>\\n        </Box>\\n      </Dialog>\\n      <Button onPress={toggle} title=\\\"Open dialog\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      TouchableOpacity,\n      Playground,\n      Props,\n      Icon,\n      Dialog,\n      Button,\n      Box,\n      Spacing,\n      Text,\n      Heading\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Box mdxType=\"Box\">\n        <Dialog header={<Spacing padding={2} flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mdxType=\"Spacing\">\n              <Heading mdxType=\"Heading\">Title</Heading>\n              <TouchableOpacity onPress={toggle} mdxType=\"TouchableOpacity\">\n                <Icon name=\"x\" size={24} mdxType=\"Icon\" />\n              </TouchableOpacity>\n            </Spacing>} footer={<Spacing padding={2} flexDirection=\"row\" justifyContent=\"flex-end\" mdxType=\"Spacing\">\n              <Button appearance=\"minimal\" onPress={toggle} title=\"Cancel\" mdxType=\"Button\" />\n              <Spacing paddingLeft={2} mdxType=\"Spacing\">\n                <Button color=\"primary\" onPress={() => console.log('Button clicked')} title=\"Accept\" mdxType=\"Button\" />\n              </Spacing>\n            </Spacing>} isVisible={on} onRequestClose={toggle} useHistory={false} getStyles={(props, theme) => ({\n            modalContainerStyle: {},\n            containerStyle: {},\n            bodyStyle: {}\n          })} mdxType=\"Dialog\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Put any content in the dialog</Text>\n          </Box>\n        </Dialog>\n        <Button onPress={toggle} title=\"Open dialog\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"dialog-props\"\n    }}>{`Dialog Props`}</h3>\n    <Props of={Dialog} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DialogVariables {\n  body: ViewStyle;\n  container: ViewStyle;\n  modalContainer: ViewStyle;\n}\n\nexport const getDialogVariables = (theme: Theme): DialogVariables => {\n  return {\n    body: {\n      maxHeight: 400,\n    },\n    container: {\n      backgroundColor: 'white',\n      borderRadius: theme.controlBorderRadius.medium,\n      elevation: 1,\n      maxWidth: 600,\n      minWidth: 280,\n      position: 'relative',\n      zIndex: 1,\n    },\n    modalContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n\nexport interface DialogStyles {\n  bodyStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDialogStyles = (theme: Theme) => DialogStyles;\n\nexport const getDialogStyles: GetDialogStyles = theme => {\n  const dialogVariables = getDialogVariables(theme);\n\n  return {\n    bodyStyle: dialogVariables.body,\n    containerStyle: dialogVariables.container,\n    modalContainerStyle: dialogVariables.modalContainer,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DialogStyles,\n  GetDialogStyles,\n  getDialogStyles,\n} from './Dialog.styles';\n\n// TODO: Import from react-native when react-native-web implementation is ready\n\nexport interface DialogProps {\n  children: React.ReactNode;\n  /** Prop to be passed to Modal */\n  useHistory?: boolean;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** WWhether body can scroll while dialog is opened */\n  isBackgroundScrollable?: boolean;\n  /** Called when clicking on overlay or pressing Esc, or using back button (requires useHistory to be true) */\n  onRequestClose?: () => void;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  header?: React.ReactNode;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  footer?: React.ReactNode;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetDialogStyles, DeepPartial<DialogStyles>>;\n}\n\nexport const Dialog = (props: DialogProps) => {\n  const {\n    children,\n    footer,\n    header,\n    isBackgroundScrollable = false,\n    isVisible,\n    onRequestClose = () => null,\n    getStyles,\n    useHistory,\n  } = props;\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle, bodyStyle } = mergeStyles(\n    getDialogStyles,\n    getStyles,\n  )(theme);\n\n  return (\n    <Modal\n      useHistory={useHistory}\n      visible={isVisible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={onRequestClose}\n      isBackgroundScrollable={isBackgroundScrollable}\n    >\n      <View style={modalContainerStyle}>\n        <View style={containerStyle}>\n          {header}\n          <View style={bodyStyle}>{children}</View>\n          {footer}\n        </View>\n        <Overlay onPress={onRequestClose} />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Dialog';\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nconst AnimatedView = animated(View);\n\nexport interface LoadingDotsProps {\n  color?: string;\n  size?: number;\n}\n\nconst items = ['1', '2', '3'];\n\nexport const LoadingDots = (props: LoadingDotsProps) => {\n  const { size = 10, color = '#aaa' } = props;\n\n  const trail = useTrail(items.length, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    reset: true,\n    to: async next => {\n      while (true) {\n        // tslint:disable-next-line\n        await next({ opacity: 1 });\n        // tslint:disable-next-line\n        await next({ opacity: 0 });\n      }\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={items[index]}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: '50%',\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","export * from './LoadingDots';\n"],"sourceRoot":""}