{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_","_Button","_Layout","_Typography","_reactPowerplug","layoutProps","MDXLayout","_ref","children","document","body","style","height","position","mdx","MDXContent","_ref2","components","props","_objectWithoutProperties2","default","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","Popover","Button","Box","Spacing","Text","Toggle","isVisible","onClose","console","log","content","width","getStyles","theme","popoverStyle","title","paddingBottom","zIndex","flexDirection","justifyContent","_ref3","on","toggle","onPress","isInline","_ref4","_ref5","of","isMDXComponent","getPopoverVariables","popover","_objectSpread2","backgroundColor","colors","background","white","padding","elevations","getPopoverStyles","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Positioner","_Popover","getContentStyles","useTheme","mergeStyles","createElement","Positioner","params","View","Object","keys","forEach","key","defineProperty","exports","enumerable","get"],"mappings":"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","file":"static/js/30.57beadb1.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Popover } from '.';\nimport { Button } from '../Button';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\nimport { Toggle } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = ({ children }) => {\n  document.body.style.height = 'initial';\n  document.body.style.position = 'relative';\n  return <div>{children}</div>;\n}\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <p><inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`Positioner`}</inlineCode>{` and adds only a white box wrapping. Content that can be anything. Popover just applies some styles for the content. For more low-level usage, use `}<inlineCode parentName=\"p\">{`Positioner`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Popover\\n  isVisible={false}\\n  onClose={() => console.log(\\'Close\\')}\\n  position=\\\"top-right\\\"\\n  content={() => <Box width={200} height={200} />}\\n  getStyles={(props, theme) => ({\\n    popoverStyle: {},\\n  })}\\n  // ...Positioner props\\n>\\n  <Button title=\\\"Child\\\" />\\n</Popover>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Spacing,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Popover isVisible={false} onClose={() => console.log('Close')} position=\"top-right\" content={() => <Box width={200} height={200} mdxType=\"Box\" />} getStyles={(props, theme) => ({\n        popoverStyle: {}\n      })} // ...Positioner props\n      mdxType=\"Popover\">\n    <Button title=\"Child\" mdxType=\"Button\" />\n  </Popover>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. Popover just applies some styles\\n                for the content. For more low-level usage, use `Positioner`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. Popover just applies some styles\\n                for the content. For more low-level usage, use `Positioner`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. Popover just applies some styles\\n                for the content. For more low-level usage, use `Positioner`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Spacing,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Spacing paddingBottom={8} zIndex={1} mdxType=\"Spacing\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top-right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. Popover just applies some styles\n                  for the content. For more low-level usage, use `Positioner`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top right\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. Popover just applies some styles\n                  for the content. For more low-level usage, use `Positioner`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top-left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. Popover just applies some styles\n                  for the content. For more low-level usage, use `Positioner`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top left\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Spacing>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Popover} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PopoverVariables {\n  popover: ViewStyle;\n}\n\nexport const getPopoverVariables = (theme: Theme): PopoverVariables => {\n  return {\n    popover: {\n      backgroundColor: theme.colors.background.white,\n      padding: 16,\n      ...theme.elevations[2],\n    },\n  };\n};\n\nexport interface PopoverStyles {\n  popoverStyle: TextStyle;\n}\n\nexport type GetPopoverStyles = (theme: Theme) => PopoverStyles;\n\nexport const getPopoverStyles: GetPopoverStyles = theme => {\n  const popoverVariables = getPopoverVariables(theme);\n\n  return {\n    popoverStyle: popoverVariables.popover,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Positioner, PositionerProps } from '../Positioner';\nimport {\n  GetPopoverStyles,\n  getPopoverStyles,\n  PopoverStyles,\n} from './Popover.styles';\n\nexport interface PopoverProps extends PositionerProps {\n  getContentStyles?: ReplaceReturnType<\n    GetPopoverStyles,\n    DeepPartial<PopoverStyles>\n  >;\n}\n\nexport const Popover = (props: PopoverProps) => {\n  const { content, getContentStyles } = props;\n  const theme = useTheme();\n  const { popoverStyle } = mergeStyles(getPopoverStyles, getContentStyles)(\n    theme,\n  );\n\n  return (\n    <Positioner\n      {...props}\n      content={params => <View style={popoverStyle}>{content(params)}</View>}\n    />\n  );\n};\n","export * from './Popover';\n"],"sourceRoot":""}