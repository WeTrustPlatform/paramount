{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Collapsible","Toggle","___WEBPACK_IMPORTED_MODULE_7__","initial","_ref2","on","toggle","___WEBPACK_IMPORTED_MODULE_6__","title","isOpen","onOpen","onClose","___WEBPACK_IMPORTED_MODULE_5__","marginVertical","justifyContent","alignItems","height","of","isMDXComponent","_props$initialIsOpen","initialIsOpen","_props$onOpen","_props$onClose","_props$overrides","overrides","_React$useState","React","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","isOpened","setIsOpened","isControlledUsage","isFinalOpened","handlePress","_getOverrides","getOverrides","StyledTouchable","dlv","Touchable","_getOverrides2","touchableProps","_getOverrides3","StyledTitle","Title","_getOverrides4","titleProps","_getOverrides5","StyledContent","Content","_getOverrides6","contentProps","_getOverrides7","StyledIconOpen","IconOpen","_getOverrides8","iconOpenProps","_getOverrides9","StyledIconClose","IconClose","_getOverrides10","iconCloseProps","react__WEBPACK_IMPORTED_MODULE_4__","onPress","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_5__","display","flexDirection","textProps","_Typography__WEBPACK_IMPORTED_MODULE_10__","size","getStyle","viewProps","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_6__","paddingLeft","StyledIcon","showOpen","_Icon__WEBPACK_IMPORTED_MODULE_9__","name","text","_props$initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","set"],"mappings":"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","file":"static/js/24.57ac2990.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Collapsible, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <p>{`Component to reveal and hide content`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Collapsible\\n      title={\\n        on ? \\'Close controlled collapsible\\' : \\'Open controlled collapsible\\'\\n      }\\n      isOpen={on}\\n      onOpen={toggle}\\n      onClose={toggle}\\n    >\\n      <Box\\n        marginVertical={16}\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        height={300}\\n        backgroundColor=\\\"#67c6bb\\\"\\n      />\\n    </Collapsible>\\n  )}\\n</Toggle>\\n<Collapsible title=\\\"Uncontrolled collapsible\\\">\\n  <Box\\n    marginVertical={16}\\n    justifyContent=\\\"center\\\"\\n    alignItems=\\\"center\\\"\\n    height={300}\\n    backgroundColor=\\\"#67c6bb\\\"\\n  />\\n</Collapsible>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Collapsible,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Collapsible title={on ? 'Close controlled collapsible' : 'Open controlled collapsible'} isOpen={on} onOpen={toggle} onClose={toggle} mdxType=\"Collapsible\">\n        <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n      </Collapsible>}\n  </Toggle>\n  <Collapsible title=\"Uncontrolled collapsible\" mdxType=\"Collapsible\">\n    <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n  </Collapsible>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Collapsible} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Icon } from '../Icon';\nimport { Text, TextProps } from '../Typography';\n\ninterface CollapsibleBaseProps {\n  /** Title of the collapsible */\n  title?: OptionalString;\n\n  /** Content revealed when collapsible is opened */\n  children?: React.ReactNode;\n\n  /**\n   * Set whether it is opened initially, for uncontrolled usage.\n   * @default false\n   */\n  initialIsOpen?: boolean;\n\n  /**\n   * When true, content of Collapsible is revealed\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /** Called when header is pressed to open collapsible */\n  onOpen?: () => void;\n\n  /** Called when header is pressed to close collapsible */\n  onClose?: () => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CollapsibleOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconOpen: IconProps;\n  IconClose: IconProps;\n  Content: ContentProps;\n}\n\nexport interface CollapsibleProps\n  extends WithOverrides<CollapsibleBaseProps, CollapsibleOverrides> {}\n\nexport const Collapsible = (props: CollapsibleProps) => {\n  const {\n    title,\n    children,\n    initialIsOpen = false,\n    isOpen,\n    testID,\n    onOpen = () => {\n      return;\n    },\n    onClose = () => {\n      return;\n    },\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n  const [isOpened, setIsOpened] = React.useState(initialIsOpen);\n\n  const isControlledUsage = typeof isOpen === 'boolean';\n  const isFinalOpened = isControlledUsage ? isOpen : isOpened;\n\n  const handlePress = React.useCallback(() => {\n    if (isControlledUsage) {\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    } else {\n      if (isOpened) {\n        setIsOpened(false);\n        onClose();\n      } else {\n        setIsOpened(true);\n        onOpen();\n      }\n    }\n  }, [isOpened, setIsOpened, isOpen, onClose, isControlledUsage]);\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Collapsible.Touchable'),\n    overrides.Touchable,\n  );\n\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.Collapsible.Title'),\n    overrides.Title,\n  );\n  const [Content, contentProps] = getOverrides(\n    StyledContent,\n    props,\n    dlv(theme, 'overrides.Collapsible.Content'),\n    overrides.Content,\n  );\n  const [IconOpen, iconOpenProps] = getOverrides(\n    StyledIconOpen,\n    props,\n    dlv(theme, 'overrides.Collapsible.IconOpen'),\n    overrides.IconOpen,\n  );\n  const [IconClose, iconCloseProps] = getOverrides(\n    StyledIconClose,\n    props,\n    dlv(theme, 'overrides.Collapsible.IconClose'),\n    overrides.IconClose,\n  );\n\n  return (\n    <>\n      <Touchable testID={testID} onPress={handlePress} {...touchableProps}>\n        <Title title={title} {...titleProps} />\n        {isFinalOpened ? (\n          <IconClose {...iconCloseProps} />\n        ) : (\n          <IconOpen {...iconOpenProps} />\n        )}\n      </Touchable>\n      <Content {...contentProps}>{isFinalOpened && children}</Content>\n    </>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { style, children, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: OptionalString;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text size=\"large\" style={[{}, getStyle(props, style)]} {...textProps}>\n      {title}\n    </Text>\n  );\n};\n\ninterface ContentProps extends ViewProps {\n  children?: React.ReactNode;\n}\n\nconst StyledContent = (props: ContentProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[{ paddingLeft: 4 }, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface StyledIconProps {\n  showOpen?: boolean;\n}\n\nconst StyledIcon = (props: StyledIconProps) => {\n  const { showOpen } = props;\n  const theme = useTheme();\n\n  return (\n    <View style={{ paddingLeft: 4 }}>\n      <Icon\n        size=\"large\"\n        name={showOpen ? 'chevron-up' : 'chevron-down'}\n        color={theme.colors.text.default}\n      />\n    </View>\n  );\n};\n\n// tslint:disable-next-line\ninterface IconProps {}\n\nconst StyledIconOpen = () => <StyledIcon showOpen={false} />;\n\nconst StyledIconClose = () => <StyledIcon showOpen={true} />;\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n"],"sourceRoot":""}