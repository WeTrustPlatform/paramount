{"version":3,"sources":["webpack:///./src/components/Positioner/Positioner.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_docz","_Positioner","_PositionerController","_Button","_Layout","_Helpers","_Typography","_reactPowerplug","layoutProps","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_ref","children","document","body","style","height","position","createElement","_this$props","components","_objectWithoutProperties2","MDXTag","name","Layout","_extends2","id","parentName","Playground","__position","__code","__scope","Positioner","PositionerController","Button","Box","Spacing","RefMeasure","Text","Toggle","isVisible","onClose","console","log","isDynamicContent","content","isFullWidth","parentHeight","targetMeasurements","getStyles","theme","positionerStyle","modalContainerStyle","title","paddingBottom","zIndex","flexDirection","justifyContent","_ref2","on","toggle","width","onPress","isInline","_ref3","_ref4","paddingVertical","_ref5","_ref6","paddingTop","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","openPositioner","closePositioner","isPositionerVisible","setTarget","onTargetLayout","Fragment","onLayout","ref","flex","_ref19","_ref20","PropsTable","of","React","Component"],"mappings":"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","file":"static/js/46.31a67d69.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport Positioner from './Positioner';\nimport PositionerController from './PositionerController';\nimport { Button } from '../Button';\nimport { Box, Spacing } from '../Layout';\nimport { RefMeasure } from '../Helpers';\nimport { Text } from '../Typography';\nimport { Toggle } from 'react-powerplug';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = ({ children }) => {\n  document.body.style.height = 'initial';\n  document.body.style.position = 'relative';\n  return <div>{children}</div>;\n}\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)}\n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"positioner\"}}>{`Positioner`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A base component for manipulating the position of the element on the screen. Used by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Popover`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<Positioner\\n  isVisible={false}\\n  onClose={() => console.log(\\'Close\\')}\\n  isDynamicContent={false}\\n  position=\\\"top-right\\\"\\n  content={props => null}\\n  isFullWidth={false}\\n  parentHeight={1000}\\n  targetMeasurements={{}}\\n  getStyles={(props, theme) => ({\\n    positionerStyle: {},\\n    modalContainerStyle: {},\\n  })}\\n>\\n  <Button title=\\\"Usage\\\" />\\n</Positioner>'} __scope={{props: this ? this.props : props,Positioner,PositionerController,Button,Box,Spacing,RefMeasure,Text,Toggle}}>\n  <Positioner\n    isVisible={false}\n    onClose={() => console.log('Close')}\n    isDynamicContent={false}\n    position=\"top-right\"\n    content={props => null}\n    isFullWidth={false}\n    parentHeight={1000}\n    targetMeasurements={{}}\n    getStyles={(props, theme) => ({\n      positionerStyle: {},\n      modalContainerStyle: {},\n    })}\n  >\n    <Button title=\"Usage\" />\n  </Positioner>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"variants\"}}>{`Variants`}</MDXTag>\n<Playground __position={1} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{props: this ? this.props : props,Positioner,PositionerController,Button,Box,Spacing,RefMeasure,Text,Toggle}}>\n  <Spacing paddingBottom={8} zIndex={1}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top-right\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top-left\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection=\"row\" justifyContent=\"space-between\">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position=\"left\"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Left\" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position=\"right\"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Right\" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n  <Spacing paddingTop={8} zIndex={3}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom\"\n            parentHeight={2480}\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>This has parent height set to 2480</Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom-left\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"dynamically-sized-content\"}}>{`Dynamically sized content`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isDynamicContent`}</MDXTag>{` to props to give time for Positioner to calculate its layout of dynamic content prior to displaying it`}</MDXTag>\n<Playground __position={2} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{props: this ? this.props : props,Positioner,PositionerController,Button,Box,Spacing,RefMeasure,Text,Toggle}}>\n  <Spacing paddingBottom={8} zIndex={1}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top-right\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top-left\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection=\"row\" justifyContent=\"space-between\">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position=\"left\"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Left\" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position=\"right\"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Right\" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n  <Spacing paddingTop={8} zIndex={3}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom\"\n            parentHeight={2480}\n            content={() =>\n              <Box >\n                <Text>This has parent height set to 2480</Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom-left\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"positioner-with-positionercontroller\"}}>{`Positioner with PositionerController`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For more advanced usage, you can use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PositionerController`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`Adds convenient methods for opening/closing Positioner`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You must use this for compatibility in React-Native. (It gets correct targetMeasurements on open)`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`You do want to separate `}<MDXTag name=\"inlineCode\" components={components} parentName=\"li\">{`Positioner`}</MDXTag>{` and the anchor`}</MDXTag>\n</MDXTag>\n<Playground __position={3} __code={'<Spacing paddingVertical={10}>\\n  <PositionerController>\\n    {({\\n      openPositioner,\\n      closePositioner,\\n      isPositionerVisible,\\n      setTarget,\\n      onTargetLayout,\\n      targetMeasurements,\\n    }) => {\\n      return (\\n        <>\\n          <Positioner\\n            targetMeasurements={targetMeasurements}\\n            isVisible={isPositionerVisible}\\n            onClose={closePositioner}\\n            position=\\\"top-right\\\"\\n            content={() => (\\n              <Box>\\n                <Text>\\n                  Content that can be anything. By default it has no styling\\n                  at all. You can use `Popover` that comes with predefined\\n                  styles. Positioner is used as a base for `Popovers`,\\n                  `Tooltips`, `DropdownMenus`\\n                </Text>\\n              </Box>\\n            )}\\n          />\\n          <Button\\n            onLayout={onTargetLayout}\\n            ref={setTarget}\\n            onPress={openPositioner}\\n            isInline\\n            title=\\\"Some Button\\\"\\n          />\\n        </>\\n      )\\n    }}\\n  </PositionerController>\\n</Spacing>'} __scope={{props: this ? this.props : props,Positioner,PositionerController,Button,Box,Spacing,RefMeasure,Text,Toggle}}>\n  <Spacing paddingVertical={10}>\n    <PositionerController>\n      {({\n        openPositioner,\n        closePositioner,\n        isPositionerVisible,\n        setTarget,\n        onTargetLayout,\n        targetMeasurements,\n      }) => {\n        return (\n          <>\n            <Positioner\n              targetMeasurements={targetMeasurements}\n              isVisible={isPositionerVisible}\n              onClose={closePositioner}\n              position=\"top-right\"\n              content={() => (\n                <Box>\n                  <Text>\n                    Content that can be anything. By default it has no styling\n                    at all. You can use `Popover` that comes with predefined\n                    styles. Positioner is used as a base for `Popovers`,\n                    `Tooltips`, `DropdownMenus`\n                  </Text>\n                </Box>\n              )}\n            />\n            <Button\n              onLayout={onTargetLayout}\n              ref={setTarget}\n              onPress={openPositioner}\n              isInline\n              title=\"Some Button\"\n            />\n          </>\n        );\n      }}\n    </PositionerController>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"positioner-with-full-width\"}}>{`Positioner with full width`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`On Mobile sometimes we want the content to stretch full width of the window. There is the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isFullWidth`}</MDXTag>{` for that`}</MDXTag>\n<Playground __position={4} __code={'<Spacing flexDirection=\\\"row\\\">\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n</Spacing>'} __scope={{props: this ? this.props : props,Positioner,PositionerController,Button,Box,Spacing,RefMeasure,Text,Toggle}}>\n  <Spacing flexDirection=\"row\">\n    <Spacing flex={1}>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isFullWidth\n            onClose={toggle}\n            position=\"top-left\"\n            content={() => (\n              <Box>\n                <Text>\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>\n            )}\n          >\n            <Button onPress={toggle} title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Spacing>\n    <Spacing flex={1}>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isFullWidth\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() => (\n              <Box>\n                <Text>\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>\n            )}\n          >\n            <Button onPress={toggle} title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Spacing>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Positioner} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}