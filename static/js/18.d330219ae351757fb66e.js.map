{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/MonthBody.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/MonthCalendar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/MonthCalendar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/MonthDay.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/WeekDays.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/constants.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/utils/chunk.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/Month/utils/getWeeksInMonth.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/constants.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Calendars/utils.ts"],"names":["_dateFns","__webpack_require__","React","_interopRequireWildcard","_theme","_Layout","_constants","_MonthDay","_interopRequireDefault","memo","props","onSelect","month","theme","useTheme","createElement","Box","weeks","map","week","flexDirection","key","index","days","day","date","isCurrentMonth","isSelected","isSelectedStart","isSelectedEnd","flex","justifyContent","alignItems","format","DATE_FORMAT","default","isSelectionStart","isSelectionEnd","toISOString","paddingVertical","zIndex","backgroundColor","colors","background","primaryDark","height","width","prevProps","nextProps","selectedRange","_react2","_docz","_reactPowerplug","_Typography","_MonthCalendar","_WeekDays","layoutProps","MDXLayout","MDXContent","_ref","components","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","isSameDay","isBefore","Props","State","Spacing","Heading","MonthCalendar","WeekDays","paddingBottom","size","Date","initial","selectedStartDate","selectedEndDate","_ref2","_ref2$state","state","setState","of","isMDXComponent","_utils","_MonthBody","_getWeeksInMonth","_props$date","_props$firstDayOfWeek","firstDayOfWeekIndex","DEFAULT_FIRST_DAY_OF_WEEK","_props$selectedStartD","propSelectedStartDate","_props$selectedEndDat","propSelectedEndDate","_marshalTimeRange","marshalTimeRange","_marshalTimeRange2","_slicedToArray2","getWeeksInMonth","_reactNative","MonthDay","_props$onSelect","TouchableHighlight","style","underlayColor","onPress","View","DEFAULT_MONTH_DAY_HEIGHT","position","right","left","borderRadius","Text","color","dates","firstDayOfWeek","addDays","startOfWeek","push","getDaysInWeek","padding","chunk","array","Math","max","length","resIndex","result","Array","ceil","slice","_chunk","getMonthDatesFromDate","eachDay","startOfMonth","endOfMonth","getDatesBefore","startOfMonthDate","getFirstDayOfWeek","beforeDates","fromDate","getDay","subDays","getDatesAfter","endOfMonthDate","afterDates","lastDayOfWeek","getLastDayOfWeek","toDate","isAfter","monthPageInDates","monthDates","concat","chunkBySeven","monthPageInWeeks","monthDate","arguments","undefined","transformDateToDay","getDaysInMonth","currentDays","selectedStartDateIndex","findIndex","isSelectedStartDateWithinMonth","selectedEndDateIndex","isSelectedEndDateWithinMonth","beforeSelectedDays","selectedDays","afterSelectedDays","_objectSpread2","getCurrentMonthDays","beforeDays","hasSelectedDatesBeforeMonth","getBeforeMonthDays","afterDays","hasSelectedDatesAfterMonth","getAfterMonthDays","formattedMonth","getISOWeek","getWeeksInMultiMonth","startMonthDate","endMonthDate","startDate","endDate","monthsCount","differenceInMonths","monthsDates","addMonths","getMonthsDates","isWithinRange","areRangesOverlapping","console","error"],"mappings":"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","file":"static/js/18.04470c19.js","sourcesContent":["import { format } from 'date-fns';\nimport * as React from 'react';\n\nimport { useTheme } from '../../../theme';\nimport { Box } from '../../Layout';\nimport { Month } from '../types';\nimport { DATE_FORMAT } from './constants';\nimport MonthDay, { MonthDayBaseProps } from './MonthDay';\n\nexport interface MonthBodyProps extends MonthDayBaseProps {\n  month: Month;\n}\n\nconst MonthBody = (props: MonthBodyProps) => {\n  const { onSelect, month } = props;\n\n  const theme = useTheme();\n\n  return (\n    <Box>\n      {month.weeks.map(week => (\n        <Box flexDirection=\"row\" key={week.index}>\n          {week.days.map(day => {\n            const {\n              date,\n              isCurrentMonth,\n              isSelected,\n              isSelectedStart,\n              isSelectedEnd,\n            } = day;\n\n            if (!isCurrentMonth) {\n              return (\n                <Box\n                  flex={1}\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  key={date.toISOString()}\n                  paddingVertical={4}\n                  zIndex={-1}\n                >\n                  <Box\n                    backgroundColor={\n                      isSelected\n                        ? theme.colors.background.primaryDark\n                        : 'transparent'\n                    }\n                    flex={1}\n                    height={40}\n                    width=\"100%\"\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <Box\n                flex={1}\n                justifyContent=\"center\"\n                alignItems=\"flex-start\"\n                key={format(date, DATE_FORMAT)}\n              >\n                <MonthDay\n                  onSelect={onSelect}\n                  date={date}\n                  isSelected={isSelected}\n                  isSelectionStart={isSelectedStart}\n                  isSelectionEnd={isSelectedEnd}\n                />\n              </Box>\n            );\n          })}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nconst propsAreEqual = (\n  prevProps: MonthBodyProps,\n  nextProps: MonthBodyProps,\n) => {\n  return (\n    prevProps.month.selectedRange === nextProps.month.selectedRange &&\n    prevProps.onSelect === nextProps.onSelect\n  );\n};\n\nexport default React.memo(MonthBody, propsAreEqual);\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { format, isSameDay, isBefore } from 'date-fns';\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { Spacing } from '../../Layout';\nimport { Heading } from '../../Typography';\nimport { MonthCalendar } from './MonthCalendar';\nimport { WeekDays } from './WeekDays';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"monthcalendar\"\n    }}>{`MonthCalendar`}</h1>\n    <Playground __position={0} __code={'<Spacing paddingBottom={4}>\\n  <Heading size=\\\"xxxlarge\\\">{format(new Date(), \\'MMMM YYYY\\')}</Heading>\\n</Spacing>\\n<WeekDays />\\n<State\\n  initial={{\\n    selectedStartDate: null,\\n    selectedEndDate: null,\\n  }}\\n>\\n  {({ state: { selectedStartDate, selectedEndDate }, setState }) => (\\n    <MonthCalendar\\n      selectedStartDate={selectedStartDate}\\n      selectedEndDate={selectedEndDate}\\n      // MUST SEE https://github.com/facebook/react/issues/14972\\n      onSelect={date => {\\n        if (!selectedStartDate && !selectedEndDate) {\\n          setState({\\n            selectedStartDate: date,\\n            selectedEndDate: null,\\n          })\\n        } else if (selectedStartDate && !selectedEndDate) {\\n          if (isBefore(date, selectedStartDate)) {\\n            setState({\\n              selectedStartDate: date,\\n              selectedEndDate: null,\\n            })\\n          } else if (!isSameDay(selectedStartDate, date)) {\\n            setState({\\n              selectedEndDate: date,\\n            })\\n          }\\n        } else {\\n          setState({\\n            selectedStartDate: date,\\n            selectedEndDate: null,\\n          })\\n        }\\n      }}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      format,\n      isSameDay,\n      isBefore,\n      Playground,\n      Props,\n      State,\n      Spacing,\n      Heading,\n      MonthCalendar,\n      WeekDays\n    }} mdxType=\"Playground\">\n  <Spacing paddingBottom={4} mdxType=\"Spacing\">\n    <Heading size=\"xxxlarge\" mdxType=\"Heading\">{format(new Date(), 'MMMM YYYY')}</Heading>\n  </Spacing>\n  <WeekDays mdxType=\"WeekDays\" />\n  <State initial={{\n        selectedStartDate: null,\n        selectedEndDate: null\n      }} mdxType=\"State\">\n    {({\n          state: {\n            selectedStartDate,\n            selectedEndDate\n          },\n          setState\n        }) => <MonthCalendar selectedStartDate={selectedStartDate} selectedEndDate={selectedEndDate} // MUST SEE https://github.com/facebook/react/issues/14972\n        onSelect={date => {\n          if (!selectedStartDate && !selectedEndDate) {\n            setState({\n              selectedStartDate: date,\n              selectedEndDate: null\n            });\n          } else if (selectedStartDate && !selectedEndDate) {\n            if (isBefore(date, selectedStartDate)) {\n              setState({\n                selectedStartDate: date,\n                selectedEndDate: null\n              });\n            } else if (!isSameDay(selectedStartDate, date)) {\n              setState({\n                selectedEndDate: date\n              });\n            }\n          } else {\n            setState({\n              selectedStartDate: date,\n              selectedEndDate: null\n            });\n          }\n        }} mdxType=\"MonthCalendar\" />}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={MonthCalendar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { Box } from '../../Layout';\nimport { DEFAULT_FIRST_DAY_OF_WEEK } from '../constants';\nimport { marshalTimeRange } from '../utils';\nimport MonthBody from './MonthBody';\nimport { MonthDayBaseProps } from './MonthDay';\nimport { getWeeksInMonth } from './utils/getWeeksInMonth';\n\nexport interface MonthCalendarProps extends MonthDayBaseProps {\n  /** Date to which display its month for. @default Date */\n  date?: Date;\n  /** Highlights the date or start date on the calendar */\n  selectedStartDate?: Date | null;\n  /** Highlights the end date on the calendar. Will created a selected range */\n  selectedEndDate?: Date | null;\n  firstDayOfWeekIndex?: number;\n}\n\nexport const MonthCalendar = (props: MonthCalendarProps) => {\n  const {\n    date = new Date(),\n    firstDayOfWeekIndex = DEFAULT_FIRST_DAY_OF_WEEK,\n    selectedStartDate: propSelectedStartDate = null,\n    selectedEndDate: propSelectedEndDate = null,\n    onSelect,\n  } = props;\n\n  const [selectedStartDate, selectedEndDate] = marshalTimeRange(\n    propSelectedStartDate,\n    propSelectedEndDate,\n  );\n\n  const month = getWeeksInMonth(\n    date,\n    selectedStartDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  return (\n    <Box flex={1} width=\"100%\">\n      <MonthBody onSelect={onSelect} month={month} />\n    </Box>\n  );\n};\n","import { format } from 'date-fns';\nimport * as React from 'react';\nimport { TouchableHighlight, View } from 'react-native';\n\nimport { useTheme } from '../../../theme';\nimport { Text } from '../../Typography';\nimport { DEFAULT_MONTH_DAY_HEIGHT } from './constants';\n\nexport interface MonthDayBaseProps {\n  onSelect?: (date: Date) => void;\n}\n\nexport interface MonthDayProps extends MonthDayBaseProps {\n  date: Date;\n  isSelected: boolean;\n  isSelectionStart: boolean;\n  isSelectionEnd: boolean;\n}\n\nconst MonthDay = (props: MonthDayProps) => {\n  const {\n    isSelected,\n    isSelectionStart,\n    isSelectionEnd,\n    date,\n    onSelect = () => null,\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableHighlight\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingVertical: 4,\n        width: '100%',\n      }}\n      underlayColor=\"transparent\"\n      onPress={() => onSelect(date)}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          backgroundColor:\n            isSelected && !isSelectionStart && !isSelectionEnd\n              ? theme.colors.background.primaryDark\n              : 'transparent',\n          flex: 1,\n          flexDirection: 'row',\n          height: DEFAULT_MONTH_DAY_HEIGHT - 4,\n          justifyContent: 'center',\n          position: 'relative',\n        }}\n      >\n        {isSelectionStart && !isSelectionEnd && (\n          <View\n            style={{\n              backgroundColor: theme.colors.background.primaryDark,\n              height: '100%',\n              position: 'absolute',\n              right: 0,\n              width: '50%',\n            }}\n          />\n        )}\n        {isSelectionEnd && !isSelectionStart && (\n          <View\n            style={{\n              backgroundColor: theme.colors.background.primaryDark,\n              height: '100%',\n              left: 0,\n              position: 'absolute',\n              width: '50%',\n            }}\n          />\n        )}\n        <View\n          style={{\n            alignItems: 'center',\n            backgroundColor: isSelected\n              ? theme.colors.background.primaryDark\n              : 'transparent',\n            borderRadius: 999,\n            flexDirection: 'row',\n            height: DEFAULT_MONTH_DAY_HEIGHT - 4,\n            justifyContent: 'center',\n            width: DEFAULT_MONTH_DAY_HEIGHT - 4,\n          }}\n        >\n          <Text color={isSelected ? 'plain' : 'default'}>\n            {format(date, 'D')}\n          </Text>\n        </View>\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport default MonthDay;\n","import { addDays, format, startOfWeek } from 'date-fns';\nimport * as React from 'react';\n\nimport { Box, Spacing } from '../../Layout';\nimport { Text } from '../../Typography';\nimport { DEFAULT_FIRST_DAY_OF_WEEK } from '../constants';\n\nexport interface WeekDaysProps {\n  firstDayOfWeekIndex?: number;\n}\n\nconst getDaysInWeek = (firstDayOfWeekIndex: number) => {\n  const week = [];\n  const firstDayOfWeek = addDays(startOfWeek(new Date()), firstDayOfWeekIndex);\n\n  for (let index = 0; index < 7; index++) {\n    week.push(addDays(firstDayOfWeek, index));\n  }\n\n  return week;\n};\n\nexport const WeekDays = (props: WeekDaysProps) => {\n  const { firstDayOfWeekIndex = DEFAULT_FIRST_DAY_OF_WEEK } = props;\n  const dates = getDaysInWeek(firstDayOfWeekIndex);\n\n  return (\n    <Box flex={1} flexDirection=\"row\">\n      {dates.map(date => {\n        return (\n          <Spacing\n            key={date.toISOString()}\n            flex={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            padding={1}\n          >\n            <Text>{format(date, 'dd')}</Text>\n          </Spacing>\n        );\n      })}\n    </Box>\n  );\n};\n","export const DATE_FORMAT = 'YYYY-MM-DD';\nexport const DEFAULT_MONTH_DAY_HEIGHT = 48;\n","// From Lodash\n\nexport const chunk = <TArrayElement = any>(\n  array: TArrayElement[],\n  size: number,\n): TArrayElement[][] => {\n  size = Math.max(size, 0);\n  const length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  let index = 0;\n  let resIndex = 0;\n  const result = new Array(Math.ceil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = array.slice(index, (index += size));\n  }\n\n  return result;\n};\n","import {\n  addDays,\n  addMonths,\n  areRangesOverlapping,\n  differenceInMonths,\n  eachDay,\n  endOfMonth,\n  format,\n  getISOWeek,\n  isAfter,\n  isBefore,\n  isSameDay,\n  isWithinRange,\n  startOfMonth,\n  subDays,\n} from 'date-fns';\n\nimport { Day, Month } from '../../types';\nimport { DATE_FORMAT } from '../constants';\nimport { chunk } from './chunk';\n\nconst getFirstDayOfWeek = (firstDayOfWeekIndex: number) =>\n  (7 + firstDayOfWeekIndex) % 7 || 7;\n\nconst getLastDayOfWeek = (firstDayOfWeekIndex: number) =>\n  (firstDayOfWeekIndex + 6) % 7;\n\nconst getMonthDatesFromDate = (date: Date): Date[] =>\n  eachDay(startOfMonth(date), endOfMonth(date));\n\nconst getDatesBefore = (\n  startOfMonthDate: Date,\n  firstDayOfWeekIndex: number,\n) => {\n  const firstDayOfWeek = getFirstDayOfWeek(firstDayOfWeekIndex);\n  let beforeDates: Date[] = [];\n\n  let fromDate = startOfMonthDate;\n\n  if (fromDate.getDay() !== firstDayOfWeek) {\n    fromDate = addDays(fromDate, -(fromDate.getDay() + 7 - firstDayOfWeek) % 7);\n  }\n\n  if (isBefore(fromDate, startOfMonthDate)) {\n    beforeDates = eachDay(fromDate, subDays(startOfMonthDate, 1));\n  }\n\n  return beforeDates;\n};\n\nconst getDatesAfter = (endOfMonthDate: Date, firstDayOfWeekIndex: number) => {\n  let afterDates: Date[] = [];\n\n  const lastDayOfWeek = getLastDayOfWeek(firstDayOfWeekIndex);\n\n  let toDate = endOfMonthDate;\n\n  if (toDate.getDay() !== lastDayOfWeek) {\n    toDate = addDays(toDate, (lastDayOfWeek + 7 - toDate.getDay()) % 7);\n  }\n\n  if (isAfter(toDate, endOfMonthDate)) {\n    afterDates = eachDay(addDays(endOfMonthDate, 1), toDate);\n  }\n\n  return afterDates;\n};\n\nexport const monthPageInDates = (\n  date: Date,\n  firstDayOfWeekIndex: number,\n): Date[] => {\n  const monthDates = getMonthDatesFromDate(date);\n  const startOfMonthDate = monthDates[0];\n  const endOfMonthDate = monthDates[monthDates.length - 1];\n\n  const beforeDates = getDatesBefore(startOfMonthDate, firstDayOfWeekIndex);\n  const afterDates = getDatesAfter(endOfMonthDate, firstDayOfWeekIndex);\n\n  return beforeDates.concat(monthDates, afterDates);\n};\n\nconst chunkBySeven = <TData = any>(array: TData[]) => chunk(array, 7);\n\nexport const monthPageInWeeks = (\n  monthDate: Date,\n  firstDayOfWeekIndex: number = 1,\n) => chunkBySeven(monthPageInDates(monthDate, firstDayOfWeekIndex));\n\nconst transformDateToDay = (\n  isSelected: boolean,\n  isCurrentMonth: boolean = true,\n) => (date: Date): Day => ({\n  date,\n  isCurrentMonth,\n  isSelected,\n  isSelectedEnd: false,\n  isSelectedStart: false,\n});\n\nconst getCurrentMonthDays = (\n  monthDates: Date[],\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n) => {\n  if (!selectedStartDate) return monthDates.map(transformDateToDay(false));\n\n  const selectedStartDateIndex = monthDates.findIndex(date =>\n    isSameDay(date, selectedStartDate),\n  );\n  const isSelectedStartDateWithinMonth = selectedStartDateIndex !== -1;\n\n  const selectedEndDateIndex = selectedEndDate\n    ? monthDates.findIndex(date => isSameDay(date, selectedEndDate))\n    : selectedStartDateIndex;\n\n  const isSelectedEndDateWithinMonth = selectedEndDateIndex !== -1;\n\n  const beforeSelectedDays = isSelectedStartDateWithinMonth\n    ? monthDates.slice(0, selectedStartDateIndex).map(transformDateToDay(false))\n    : [];\n\n  const selectedDates = monthDates.slice(\n    isSelectedStartDateWithinMonth ? selectedStartDateIndex : 0,\n    isSelectedEndDateWithinMonth ? selectedEndDateIndex : monthDates.length,\n  );\n\n  const selectedDays = selectedDates.map(transformDateToDay(true));\n\n  const afterSelectedDays = isSelectedEndDateWithinMonth\n    ? monthDates.slice(selectedEndDateIndex).map(transformDateToDay(false))\n    : [];\n\n  const days = beforeSelectedDays.concat(selectedDays, afterSelectedDays);\n\n  days[selectedStartDateIndex] = {\n    ...days[selectedStartDateIndex],\n    isSelected: true,\n    isSelectedStart: true,\n  };\n\n  days[selectedEndDateIndex] = {\n    ...days[selectedEndDateIndex],\n    isSelected: true,\n    isSelectedEnd: true,\n  };\n\n  return days;\n};\n\nconst getBeforeMonthDays = (\n  startOfMonthDate: Date,\n  selectedStartDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const hasSelectedDatesBeforeMonth = !!(\n    selectedStartDate && isBefore(selectedStartDate, startOfMonthDate)\n  );\n  const beforeDates = getDatesBefore(startOfMonthDate, firstDayOfWeekIndex);\n\n  return beforeDates.map(\n    transformDateToDay(hasSelectedDatesBeforeMonth, false),\n  );\n};\n\nconst getAfterMonthDays = (\n  endOfMonthDate: Date,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const hasSelectedDatesAfterMonth = !!(\n    selectedEndDate && isAfter(selectedEndDate, endOfMonthDate)\n  );\n  const afterDates = getDatesAfter(endOfMonthDate, firstDayOfWeekIndex);\n\n  return afterDates.map(transformDateToDay(hasSelectedDatesAfterMonth, false));\n};\n\nexport const getDaysInMonth = (\n  monthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const monthDates = getMonthDatesFromDate(monthDate);\n  const startOfMonthDate = monthDates[0];\n  const endOfMonthDate = monthDates[monthDates.length - 1];\n\n  const currentDays = getCurrentMonthDays(\n    monthDates,\n    selectedStartDate,\n    selectedEndDate,\n  );\n  const beforeDays = getBeforeMonthDays(\n    startOfMonthDate,\n    selectedStartDate,\n    firstDayOfWeekIndex,\n  );\n  const afterDays = getAfterMonthDays(\n    endOfMonthDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  return beforeDays.concat(currentDays, afterDays);\n};\n\nexport const getWeeksInMonth = (\n  monthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n): Month => {\n  const days = getDaysInMonth(\n    monthDate,\n    selectedStartDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  const selectedRange = `${\n    selectedStartDate ? format(selectedStartDate, DATE_FORMAT) : ''\n  }-${selectedEndDate ? format(selectedEndDate, DATE_FORMAT) : ''}`;\n\n  return {\n    formattedMonth: format(monthDate, DATE_FORMAT),\n    month: monthDate,\n    selectedRange,\n    weeks: chunkBySeven(days).map(week => ({\n      days: week,\n      index: getISOWeek(week[0].date),\n    })),\n  };\n};\n\nconst getMonthsDates = (startDate: Date, endDate: Date) => {\n  const monthsCount = differenceInMonths(endDate, startDate);\n\n  const monthsDates: Date[] = [];\n\n  for (let index = 0; index < monthsCount; index++) {\n    monthsDates.push(addMonths(startDate, index));\n  }\n\n  return monthsDates;\n};\n\nexport const getWeeksInMultiMonth = (\n  startMonthDate: Date,\n  endMonthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n): Month[] => {\n  const monthsDates = getMonthsDates(startMonthDate, endMonthDate);\n\n  return monthsDates.map(monthDate => {\n    if (!selectedStartDate) {\n      return getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n    }\n\n    const startOfMonthDate = startOfMonth(monthDate);\n    const endOfMonthDate = endOfMonth(monthDate);\n\n    if (!selectedEndDate) {\n      const isSelectedStartDateWithinMonth = isWithinRange(\n        selectedStartDate,\n        startOfMonthDate,\n        endOfMonthDate,\n      );\n\n      return isSelectedStartDateWithinMonth\n        ? getWeeksInMonth(\n            monthDate,\n            selectedStartDate,\n            null,\n            firstDayOfWeekIndex,\n          )\n        : getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n    }\n\n    const isMonthOverlappingWithSelectedRange =\n      areRangesOverlapping(\n        startOfMonthDate,\n        endOfMonthDate,\n        selectedStartDate,\n        selectedEndDate,\n      ) || isSameDay(selectedEndDate, startOfMonthDate);\n\n    return isMonthOverlappingWithSelectedRange\n      ? getWeeksInMonth(\n          monthDate,\n          selectedStartDate,\n          selectedEndDate,\n          firstDayOfWeekIndex,\n        )\n      : getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n  });\n};\n","export const DAY_DATE_FORMAT = 'YYYY-MM-DD';\nexport const TOTAL_MINUTES_IN_DAY = 24 * 60;\nexport const DEFAULT_FIRST_DAY_OF_WEEK = 1;\n","import { isBefore } from 'date-fns';\n\nexport const marshalTimeRange = (\n  startDate: Date | null = null,\n  endDate: Date | null = null,\n): [Date | null, Date | null] => {\n  if (endDate && startDate && isBefore(endDate, startDate)) {\n    console.error('Selected end date cannot be before selected start date');\n    return [null, null];\n  }\n\n  if (endDate && !startDate) {\n    console.error('Selected end date cannot exist without selected start date');\n    return [null, null];\n  }\n\n  return [startDate, endDate];\n};\n"],"sourceRoot":""}