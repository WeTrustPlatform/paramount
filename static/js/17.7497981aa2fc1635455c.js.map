{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","shapeMapping","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","elevation","theme","elevations","shape","_shape","_x","apply","this","arguments","toString","Box","props","children","propStyle","style","testID","viewStyles","_objectWithoutProperties2","useTheme","transformedStyles","pureStyles","prop","styleFn","push","createElement","View","_Box","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","Icon","_ref","name","color","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","Props","Toggle","Switch","initial","_ref2","on","toggle","isSwitchedOn","onChange","isDisabled","onIcon","offIcon","duration","getStyles","circleStyle","containerStyle","backgroundColorOff","backgroundColorOn","circleColorOff","circleColorOn","of","isMDXComponent","getSwitchVariables","colors","background","greyDefault","primaryDefault","content","alignItems","backgroundColor","display","height","justifyContent","padding","width","container","greyLight","flexDirection","getSwitchStyles","switchVariables","_native","_Animation","_mergeStyles2","_Switch","AnimatedView","animated","accessibilityProps","_mergeStyles","mergeStyles","_useSpring","useSpring","config","springDefaultConfig","circleColor","circlePosition","TouchableOpacity","accessible","accessibilityLabel","onPress","activeOpacity","alignSelf","flexWrap","transform","translateX","text","primary","friction","tension","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/17.77896502.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","export * from './Box';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Switch } from '.';\nimport { Box } from '../Box';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle }) => (\\n      <Switch\\n        isSwitchedOn={on}\\n        onChange={toggle}\\n        isDisabled={false}\\n        onIcon={null}\\n        offIcon={null}\\n        duration={300}\\n        getStyles={(props, theme) => ({\\n          circleStyle: {},\\n          containerStyle: {},\\n          backgroundColorOff: \\'#F5F6F7\\',\\n          backgroundColorOn: \\'#67c6bb\\',\\n          circleColorOff: \\'white\\',\\n          circleColorOn: \\'white\\',\\n        })}\\n      />\\n    )}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Switch,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Switch isSwitchedOn={on} onChange={toggle} isDisabled={false} onIcon={null} offIcon={null} duration={300} getStyles={(props, theme) => ({\n            circleStyle: {},\n            containerStyle: {},\n            backgroundColorOff: '#F5F6F7',\n            backgroundColorOn: '#67c6bb',\n            circleColorOff: 'white',\n            circleColorOn: 'white'\n          })} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface SwitchVariables {\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n\n  container: ViewStyle & SwitchStylesRequired;\n  circle: ViewStyle & SwitchStylesRequired;\n}\n\nexport const getSwitchVariables = (theme: Theme): SwitchVariables => {\n  return {\n    backgroundColorOff: theme.colors.background.greyDefault,\n    backgroundColorOn: theme.colors.background.primaryDefault,\n    circleColorOff: theme.colors.background.content,\n    circleColorOn: theme.colors.background.content,\n\n    circle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderRadius: 24,\n      display: 'flex',\n      height: 38,\n      justifyContent: 'center',\n      padding: 0,\n      width: 38,\n    },\n\n    container: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.greyLight,\n      borderRadius: 24,\n      flexDirection: 'row',\n      height: 44,\n      padding: 3,\n      width: 72,\n    },\n  };\n};\n\nexport interface SwitchStylesRequired {\n  width: number;\n  padding: number;\n}\n\nexport interface SwitchStyles {\n  containerStyle: ViewStyle & SwitchStylesRequired;\n  circleStyle: ViewStyle & SwitchStylesRequired;\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n}\nexport type GetSwitchStyles = (theme: Theme) => SwitchStyles;\n\nexport const getSwitchStyles: GetSwitchStyles = (theme: Theme) => {\n  const switchVariables = getSwitchVariables(theme);\n\n  return {\n    backgroundColorOff: switchVariables.backgroundColorOff,\n    backgroundColorOn: switchVariables.backgroundColorOn,\n    circleColorOff: switchVariables.circleColorOff,\n    circleColorOn: switchVariables.circleColorOn,\n    circleStyle: switchVariables.circle,\n    containerStyle: switchVariables.container,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  GetSwitchStyles,\n  getSwitchStyles,\n  SwitchStyles,\n} from './Switch.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface SwitchProps extends AccessibilityProps {\n  isSwitchedOn?: boolean;\n  isDisabled?: boolean;\n  onChange?: (event: GestureResponderEvent) => void;\n  onIcon?: React.ReactNode;\n  offIcon?: React.ReactNode;\n  testID?: string;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetSwitchStyles, DeepPartial<SwitchStyles>>;\n}\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    onIcon,\n    offIcon,\n    onChange,\n    isSwitchedOn,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n  const {\n    circleStyle,\n    containerStyle,\n    backgroundColorOff,\n    backgroundColorOn,\n    circleColorOff,\n    circleColorOn,\n  } = mergeStyles(getSwitchStyles, getStyles)(theme);\n\n  const { backgroundColor, circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: isSwitchedOn ? backgroundColorOn : backgroundColorOff,\n    circleColor: isSwitchedOn ? circleColorOn : circleColorOff,\n    circlePosition: isSwitchedOn\n      ? containerStyle.width - (circleStyle.width + containerStyle.padding * 2)\n      : 0,\n  });\n\n  return (\n    <TouchableOpacity\n      accessible\n      accessibilityLabel=\"switch\"\n      onPress={onChange}\n      activeOpacity={1}\n      style={{\n        alignSelf: 'flex-start',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      }}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      {/*\n      // @ts-ignore */}\n      <AnimatedView style={[containerStyle, { backgroundColor }]}>\n        <AnimatedView\n          // @ts-ignore\n          style={[\n            circleStyle,\n            { backgroundColor: circleColor },\n            { transform: [{ translateX: circlePosition }] },\n          ]}\n        >\n          {isSwitchedOn\n            ? onIcon || (\n                <Icon\n                  name=\"check\"\n                  size={20}\n                  color={theme.colors.text.primary}\n                />\n              )\n            : offIcon || (\n                <Icon name=\"x\" size={20} color={theme.colors.text.default} />\n              )}\n        </AnimatedView>\n      </AnimatedView>\n    </TouchableOpacity>\n  );\n};\n","export * from './Switch';\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 450,\n};\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}