{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/SearchTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_Icon","_IconTextInput","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","_objectWithoutProperties2","theme","useTheme","createElement","IconTextInput","_extends2","ref","TouchableOpacity","onPress","Icon","name","size","color","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","getPhoneNumberInputStyles","_ref","flexDirection","_countriesList","_Button","_ListItem","_Modal","_PhoneNumberInput","countries","Object","keys","countryList","map","countryCode","key","PhoneNumberInputBase","_props$countryCode","phoneNumber","onChangeCountryCode","onChangePhoneNumber","header","_props$useHistory","useHistory","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","Button","appearance","buttonStyle","borderBottomRightRadius","borderColor","border","borderTopRightRadius","borderWidth","iconAfter","title","concat","phone","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","country","ListItem","label","event","preventDefault","borderBottomLeftRadius","borderTopLeftRadius","keyboardType","PhoneNumberInput","_ClearableTextInput","SearchTextInputBase","SearchTextInput","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","isInvalid","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","getTextInputVariables","base","backgroundColor","background","content","width","disabled","greyDark","focus","invalid","danger","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlPaddings","large","getTextInputStyles","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","forEach","prototype","hasOwnProperty","call","_exportNames","defineProperty","exports","enumerable","get","_SearchTextInput","getListItemVariables","borderBottomWidth","focusBackgroundColor","greyLight","selected","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","_Typography","description","testID","accessibilityProps","TouchableHighlight","underlayColor","Text"],"mappings":"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","file":"static/js/13.545e22f3.js","sourcesContent":["import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import { countries as countryList } from 'countries-list';\nimport * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n}\n\nconst countries = (() => {\n  return Object.keys(countryList).map(countryCode => ({\n    countryCode,\n    key: countryCode,\n    ...countryList[countryCode],\n  }));\n})();\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = 'US',\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.default,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={`+${countryList[countryCode].phone}`}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.key}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countries}\n          renderItem={({ item: country }) => {\n            return (\n              <ListItem\n                key={country.countryCode}\n                label={country.name}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(country.countryCode);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport {\n  ClearableTextInput,\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../Icon';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export * from './PhoneNumberInput';\nexport {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\nexport * from './SearchTextInput';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n"],"sourceRoot":""}