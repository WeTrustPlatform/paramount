{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/changeColor.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/Counter.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/Counter.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/LoadingDots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts"],"names":["_changeColor","__webpack_require__","getButtonAppearances","theme","minimal","default","backgroundColor","colors","background","content","color","text","danger","primary","secondary","button","defaultText","loadingBackgroundColor","overlay","dangerText","dangerLight","primaryText","primaryLight","secondaryText","secondaryLight","outline","borderColor","borderWidth","border","getButtonStyles","buttonStyleProps","appearance","size","isDisabled","isLoading","isInline","iconBefore","iconAfter","_buttonAppearances$ap","textColor","buttonStyle","_objectWithoutProperties2","_objectSpread2","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","disabled","alignSelf","flexDirection","flexWrap","focusColor","darken","textStyle","alignItems","muted","display","fontWeight","justifyContent","textAlign","innerButtonWrapperStyle","buttonContentWrapperStyle","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Loading","_Typography","_Button","Button","props","_props$appearance","_props$color","title","getStyles","icon","_props$isDisabled","iconLoading","isActive","_props$isInline","_props$isLoading","_props$onPress","onPress","_props$size","testID","accessibilityProps","useTheme","_mergeStyles","mergeStyles","components","createElement","TouchableHighlight","_extends2","accessible","accessibilityRole","underlayColor","style","View","ButtonContent","LoadingDots","Text","pad","num","totalChars","length","changeColor","ratio","darker","replace","difference","Math","round","rgbValue","rgb","match","RegExp","alpha","decimal","substring","arg1","arg2","arg3","parseInt","split","toString","join","lighten","Object","keys","forEach","key","defineProperty","exports","enumerable","get","getCounterStyles","containerStyle","countStyle","counterStyle","width","disabledStyle","_Box","_Icon","_Counter","Counter","count","component","max","min","onIncrement","onDecrement","isDecrementDisabled","isIncrementDisabled","Box","TouchableOpacity","activeOpacity","undefined","Icon","name","concat","Feather","_Text","_ref","IconTag","result","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","_native","AnimatedView","animated","items","trail","useTrail","config","duration","from","opacity","reset","to","_to","_asyncToGenerator2","_regenerator","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","map","index","marginLeft","marginRight","_LoadingDots","_react2","_interopRequireDefault","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","mdx","mdxType","id","Playground","__position","__code","__scope","CounterContainer","Props","ProgressBar","initial","_ref2","incBy","decBy","percent","progressStyle","of","isMDXComponent","getProgressBarStyles","greyDefault","overflow","primaryDefault","_Animation","_ProgressBar","_props$percent","boundPercent","useSpring","springDefaultConfig","Platform","OS","interpolate","w","friction","tension"],"mappings":"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","file":"static/js/7.4f3feef0.js","sourcesContent":["import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme } from '../../theme/Theme';\nimport { darken } from './changeColor';\n\nexport interface ButtonColorProps {\n  backgroundColor: string;\n  color: string;\n  borderWidth?: number;\n  borderColor?: string;\n  loadingBackgroundColor?: string;\n}\n\nexport interface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ButtonColorProps };\n  primary: { [size in ButtonColor]: ButtonColorProps };\n  outline: { [size in ButtonColor]: ButtonColorProps };\n}\n\nexport type ButtonAppearance = keyof ButtonAppearances;\n\nexport const getButtonAppearances = (theme: Theme): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.danger,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.primary,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.secondary,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: theme.colors.button.default,\n        color: theme.colors.button.defaultText,\n\n        loadingBackgroundColor: theme.colors.background.overlay,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.button.danger,\n        color: theme.colors.button.dangerText,\n\n        loadingBackgroundColor: theme.colors.background.dangerLight,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.button.primary,\n        color: theme.colors.button.primaryText,\n\n        loadingBackgroundColor: theme.colors.background.primaryLight,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.button.secondary,\n        color: theme.colors.button.secondaryText,\n\n        loadingBackgroundColor: theme.colors.background.secondaryLight,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n        color: theme.colors.text.danger,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n        color: theme.colors.text.primary,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n        color: theme.colors.text.secondary,\n      },\n    },\n  };\n};\n\nexport interface ButtonStyles {\n  buttonStyle: ViewStyle;\n  textStyle: TextStyle;\n  focusColor: string;\n  innerButtonWrapperStyle: ViewStyle;\n  buttonContentWrapperStyle: ViewStyle;\n}\n\nexport interface ButtonStylesProps {\n  appearance: ButtonAppearance;\n  color: ButtonColor;\n  size: ControlSize;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isInline: boolean;\n  iconBefore?: any;\n  iconAfter?: any;\n}\nexport type GetButtonStyles = (\n  buttonStylesProps: ButtonStylesProps,\n  theme: Theme,\n) => ButtonStyles;\n\nexport const getButtonStyles: GetButtonStyles = (buttonStyleProps, theme) => {\n  const {\n    appearance,\n    color,\n    size,\n    isDisabled,\n    isLoading,\n    isInline,\n    iconBefore,\n    iconAfter,\n  } = buttonStyleProps;\n\n  const buttonAppearances = getButtonAppearances(theme);\n\n  const {\n    color: textColor,\n    loadingBackgroundColor,\n    ...buttonStyle\n  } = buttonAppearances[appearance][color];\n\n  return {\n    buttonStyle: {\n      borderRadius: theme.controlBorderRadius[size],\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size] * 2,\n      paddingRight: theme.controlPaddings[size] * 2,\n      ...buttonStyle,\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.button.disabled,\n          }\n        : {\n            ...(isLoading ? { backgroundColor: loadingBackgroundColor } : {}),\n          }),\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }\n        : {}),\n    },\n    focusColor:\n      appearance === 'minimal' || appearance === 'outline'\n        ? theme.colors.button.default\n        : darken(buttonStyle.backgroundColor, 0.05),\n    textStyle: {\n      alignItems: 'center',\n      color: isDisabled ? theme.colors.text.muted : textColor,\n      display: 'flex',\n      fontWeight: '600',\n      justifyContent: 'center',\n      textAlign: 'center',\n    },\n\n    innerButtonWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      height: '100%',\n      justifyContent: 'center',\n    },\n\n    buttonContentWrapperStyle: {\n      paddingLeft: iconBefore ? 8 : 0,\n      paddingRight: iconAfter ? 8 : 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TextStyle,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ButtonColor, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { LoadingDots } from '../Loading';\nimport { Text } from '../Typography';\nimport {\n  ButtonAppearance,\n  ButtonStyles,\n  GetButtonStyles,\n  getButtonStyles,\n} from './Button.styles';\n\nexport interface ButtonProps extends AccessibilityProps {\n  title?: string;\n\n  /**\n   * Icon in place of title\n   * @default \"null\"\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * The intent of the button.\n   * @default \"primary\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Forcefully set the active state of a button.\n   * @default false\n   */\n  isActive?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, the button will not stretch full width\n   * @default false\n   */\n  isInline?: boolean;\n\n  /**\n   * Button press handler\n   * @default () => {}\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /**\n   * Sets an icon before the text.\n   * @default undefined\n   */\n  iconBefore?: React.ReactNode;\n\n  /**\n   * Sets an icon after the text.\n   * @default undefined\n   */\n  iconAfter?: React.ReactNode;\n\n  /**\n   * Sets an icon at loading state.\n   * @default undefined\n   */\n  iconLoading?: React.ReactNode;\n\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetButtonStyles, DeepPartial<ButtonStyles>>;\n\n  testID?: string;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    title,\n    color = 'primary',\n    getStyles,\n    icon,\n    iconAfter,\n    iconBefore,\n    iconLoading,\n    isActive = false,\n    isDisabled = false,\n    isInline = false,\n    isLoading = false,\n    onPress = () => {\n      return;\n    },\n    size = 'medium',\n    testID,\n\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    buttonStyle,\n    textStyle,\n    focusColor,\n    innerButtonWrapperStyle,\n    buttonContentWrapperStyle,\n  } = mergeStyles(getButtonStyles, getStyles, theme.components.getButtonStyles)(\n    {\n      appearance,\n      color,\n      iconAfter,\n      iconBefore,\n      isDisabled,\n      isInline,\n      isLoading,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible\n      accessibilityRole=\"button\"\n      underlayColor={focusColor}\n      disabled={!!(isDisabled || isLoading)}\n      onPress={onPress}\n      style={buttonStyle}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={innerButtonWrapperStyle}>\n        {iconBefore}\n        <View style={buttonContentWrapperStyle}>\n          {/*\n        // @ts-ignore */}\n          <ButtonContent {...props} textStyle={textStyle} />\n        </View>\n        {iconAfter}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport interface ButtonContentProps extends ButtonProps {\n  textStyle: TextStyle;\n}\n\nconst ButtonContent = (props: ButtonContentProps) => {\n  const { isLoading, iconLoading, icon, title, textStyle, size } = props;\n\n  if (isLoading) return iconLoading || <LoadingDots color={textStyle.color} />;\n  if (icon) return icon;\n  if (title) {\n    return (\n      <Text size={size} getStyles={() => ({ textStyle })}>\n        {title}\n      </Text>\n    );\n  }\n\n  return null;\n};\n","// From https://stackoverflow.com/questions/1507931/generate-lighter-darker-color-in-css-using-javascript\n\nconst pad = (num: string, totalChars: number) => {\n  num = num + '';\n  while (num.length < totalChars) {\n    num = '0' + num;\n  }\n  return num;\n};\n\n// Ratio is between 0 and 1\nconst changeColor = (color: string, ratio: number, darker: boolean) => {\n  // Trim trailing/leading whitespace\n  color = color.replace(/^\\s*|\\s*$/, '');\n\n  // Expand three-digit hex\n  color = color.replace(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i, '#$1$1$2$2$3$3');\n\n  // Calculate ratio\n  const difference = Math.round(ratio * 256) * (darker ? -1 : 1);\n  // Determine if input is RGB(A)\n  const rgbValue = '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])';\n  const rgb = color.match(\n    new RegExp(\n      '^rgba?\\\\(\\\\s*' +\n        rgbValue +\n        '\\\\s*,\\\\s*' +\n        rgbValue +\n        '\\\\s*,\\\\s*' +\n        rgbValue +\n        '(?:\\\\s*,\\\\s*' +\n        '(0|1|0?\\\\.\\\\d+))?' +\n        '\\\\s*\\\\)$',\n      'i',\n    ),\n  );\n\n  const alpha = !!rgb && rgb[4] != null ? rgb[4] : null;\n  // Convert hex to decimal\n  const decimal = !!rgb\n    ? [rgb[1], rgb[2], rgb[3]]\n    : color\n        .replace(\n          /^#?([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])/i,\n          (substring, arg1, arg2, arg3) => {\n            return (\n              parseInt(arg1, 16) +\n              ',' +\n              parseInt(arg2, 16) +\n              ',' +\n              parseInt(arg3, 16)\n            );\n          },\n        )\n        .split(/,/);\n\n  // Return RGB(A)\n  return !!rgb\n    ? 'rgb' +\n        (alpha !== null ? 'a' : '') +\n        '(' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[0], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[1], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[2], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        (alpha !== null ? ', ' + alpha : '') +\n        ')'\n    : // Return hex\n      [\n        '#',\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[0], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[1], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[2], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n      ].join('');\n};\n\nexport const darken = (color: string, ratio: number) => {\n  return changeColor(color, ratio, true);\n};\n\nexport const lighten = (color: string, ratio: number) => {\n  return changeColor(color, ratio, false);\n};\n","export * from './Button';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\n\nexport interface CounterStyles {\n  containerStyle: ViewStyle;\n  countStyle: ViewStyle;\n  counterStyle: ViewStyle;\n  disabledStyle: ViewStyle;\n  textStyle: TextStyle;\n}\n\nexport type GetCounterStyles = (props: {}, theme: Theme) => CounterStyles;\n\nexport const getCounterStyles: GetCounterStyles = (props, theme) => {\n  return {\n    containerStyle: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    countStyle: {\n      justifyContent: 'center',\n    },\n    counterStyle: {\n      alignItems: 'center',\n      borderColor: theme.colors.border.primary,\n      borderRadius: 999,\n      borderWidth: 1,\n      display: 'flex',\n      height: 40,\n      justifyContent: 'center',\n      width: 40,\n    },\n    disabledStyle: {\n      borderColor: theme.colors.border.default,\n    },\n    textStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Box } from '../Box';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  CounterStyles,\n  GetCounterStyles,\n  getCounterStyles,\n} from './Counter.styles';\n\nexport interface CounterProps {\n  count: number;\n  min?: number;\n  max?: number;\n  /* custom component in place of count */\n  component?: React.ReactNode;\n  onIncrement?: () => void;\n  onDecrement?: () => void;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetCounterStyles, DeepPartial<CounterStyles>>;\n}\n\nexport const Counter = (props: CounterProps) => {\n  const {\n    count,\n    component,\n    max,\n    min,\n    onIncrement,\n    onDecrement,\n    getStyles,\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    counterStyle,\n    countStyle,\n    textStyle,\n    disabledStyle,\n  } = mergeStyles(\n    getCounterStyles,\n    getStyles,\n    theme.components.getCounterStyles,\n  )({}, theme);\n\n  const isDecrementDisabled = min === count;\n  const isIncrementDisabled = max === count;\n\n  return (\n    <View style={containerStyle}>\n      <Box paddingRight={16}>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          style={{\n            ...counterStyle,\n            ...(isDecrementDisabled && disabledStyle),\n          }}\n          disabled={isDecrementDisabled}\n          onPress={!isDecrementDisabled ? onDecrement : undefined}\n        >\n          <Icon\n            name=\"minus\"\n            size={16}\n            color={\n              isDecrementDisabled\n                ? theme.colors.text.muted\n                : theme.colors.text.primary\n            }\n          />\n        </TouchableOpacity>\n      </Box>\n      {component || (\n        <View style={countStyle}>\n          <Text getStyles={() => ({ textStyle })}>{`${count}`}</Text>\n        </View>\n      )}\n      <Box paddingLeft={16}>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          style={{\n            ...counterStyle,\n            ...(isIncrementDisabled && disabledStyle),\n          }}\n          disabled={isIncrementDisabled}\n          onPress={!isIncrementDisabled ? onIncrement : undefined}\n        >\n          <Icon\n            name=\"plus\"\n            size={16}\n            color={\n              isIncrementDisabled\n                ? theme.colors.text.muted\n                : theme.colors.text.primary\n            }\n          />\n        </TouchableOpacity>\n      </Box>\n    </View>\n  );\n};\n","export * from './Counter';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nconst AnimatedView = animated(View);\n\nexport interface LoadingDotsProps {\n  color?: string;\n  size?: number;\n}\n\nconst items = ['1', '2', '3'];\n\nexport const LoadingDots = (props: LoadingDotsProps) => {\n  const { size = 10, color = '#aaa' } = props;\n\n  const trail = useTrail(items.length, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    reset: true,\n    to: async next => {\n      while (true) {\n        // tslint:disable-next-line\n        await next({ opacity: 1 });\n        // tslint:disable-next-line\n        await next({ opacity: 0 });\n      }\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={items[index]}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: '50%',\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","export * from './LoadingDots';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Counter as CounterContainer } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { ProgressBar } from '.';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Counter } from '../Counter';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"progressbar\"\n    }}>{`ProgressBar`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<CounterContainer initial={0}>\\n  {({ count, incBy, decBy }) => (\\n    <Box>\\n      <ProgressBar\\n        percent={count}\\n        size=\\\"large\\\"\\n        getStyles={(props, theme) => ({\\n          containerStyle: {},\\n          progressStyle: {},\\n        })}\\n      />\\n      <Counter\\n        count={count}\\n        onDecrement={() => decBy(10)}\\n        onIncrement={() => incBy(10)}\\n        min={0}\\n        max={100}\\n      />\\n    </Box>\\n  )}\\n</CounterContainer>'} __scope={{\n      props: this ? this.props : props,\n      CounterContainer,\n      Playground,\n      Props,\n      ProgressBar,\n      Box,\n      Button,\n      Counter\n    }} mdxType=\"Playground\">\n  <CounterContainer initial={0} mdxType=\"CounterContainer\">\n    {({\n          count,\n          incBy,\n          decBy\n        }) => <Box mdxType=\"Box\">\n        <ProgressBar percent={count} size=\"large\" getStyles={(props, theme) => ({\n            containerStyle: {},\n            progressStyle: {}\n          })} mdxType=\"ProgressBar\" />\n        <Counter count={count} onDecrement={() => decBy(10)} onIncrement={() => incBy(10)} min={0} max={100} mdxType=\"Counter\" />\n      </Box>}\n  </CounterContainer>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ProgressBar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ProgressBarStylesProps {\n  size: ControlSize;\n}\n\nexport type GetProgressBarStyles = (\n  progressStylesProps: ProgressBarStylesProps,\n  theme: Theme,\n) => ProgressBarStyles;\n\nexport interface ProgressBarStyles {\n  progressStyle: ViewStyle;\n  containerStyle: ViewStyle;\n}\n\nexport const getProgressBarStyles: GetProgressBarStyles = ({ size }, theme) => {\n  const height = theme.controlHeights[size] - 16;\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.greyDefault,\n      borderRadius: 999,\n      height,\n      overflow: 'hidden',\n    },\n    progressStyle: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderRadius: 999,\n      height: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetProgressBarStyles,\n  getProgressBarStyles,\n  ProgressBarStyles,\n} from './ProgressBar.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface ProgressBarProps {\n  percent?: number;\n  size?: ControlSize;\n  getStyles?: ReplaceReturnType<\n    GetProgressBarStyles,\n    DeepPartial<ProgressBarStyles>\n  >;\n  testID?: string;\n}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { percent = 0, size = 'medium', getStyles, testID } = props;\n  const theme = useTheme();\n\n  const { containerStyle, progressStyle } = mergeStyles(\n    getProgressBarStyles,\n    getStyles,\n    theme.components.getProgressBarStyles,\n  )({ size }, theme);\n\n  const boundPercent = Math.max(Math.min(percent, 100), 0);\n  const { width } = useSpring({\n    config: springDefaultConfig,\n    from: { width: boundPercent },\n    width: boundPercent,\n  });\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      <AnimatedView\n        // @ts-ignore\n        accessibilityRole={Platform.OS === 'web' ? 'progress' : 'none'}\n        // @ts-ignore\n        style={{\n          ...progressStyle,\n          width: width.interpolate(w => `${w}%`),\n        }}\n      />\n    </View>\n  );\n};\n","export * from './ProgressBar';\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 450,\n};\n"],"sourceRoot":""}