{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","Props","Checkbox","initial","_ref2","on","toggle","shape","isChecked","isDisabled","isInteractive","onChange","size","getStyles","theme","checkboxStyle","checkboxFocusBackgroundColor","labelPosition","label","of","isMDXComponent","getCheckboxStyles","hasLabel","checkColor","sizeValue","controlHeights","colors","background","primaryDark","greyLight","_objectSpread2","alignItems","backgroundColor","content","borderColor","border","borderWidth","height","justifyContent","width","marginRight","marginLeft","primaryDefault","greyDark","circle","borderRadius","square","controlBorderRadius","small","iconColor","text","white","outerWrapperStyle","flexDirection","textStyle","touchableStyle","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Icon","_Typography","_Checkbox","_props$isChecked","_props$isDisabled","_props$isInteractive","_props$onChange","_props$shape","_props$labelPosition","_props$size","testID","accessibilityProps","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","accessible","style","underlayColor","disabled","onPress","View","Text","Icon","name","color","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","Object","keys","forEach","key","defineProperty","exports","enumerable","get"],"mappings":"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","file":"static/js/24.9bd63351.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Checkbox\\n      shape=\\\"square\\\" // or \\\"circle\\\"\\n      isChecked={on}\\n      isDisabled={false}\\n      isInteractive={true}\\n      onChange={toggle}\\n      size=\\\"medium\\\"\\n      getStyles={(props, theme) => ({\\n        checkboxStyle: {},\\n        checkboxFocusBackgroundColor: \\'\\',\\n      })}\\n      labelPosition=\\\"right\\\" // or left\\n      label=\\\"Label\\\"\\n    />\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Checkbox\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Checkbox shape=\"square\" // or \"circle\"\n        isChecked={on} isDisabled={false} isInteractive={true} onChange={toggle} size=\"medium\" getStyles={(props, theme) => ({\n          checkboxStyle: {},\n          checkboxFocusBackgroundColor: ''\n        })} labelPosition=\"right\" // or left\n        label=\"Label\" mdxType=\"Checkbox\" />}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\nimport { CheckboxLabelPosition, CheckboxShape } from './Checkbox';\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n  labelPosition: CheckboxLabelPosition;\n  hasLabel: boolean;\n  checkColor: string;\n  size: ControlSize;\n}\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  textStyle: TextStyle;\n  iconColor: string;\n  checkboxFocusBackgroundColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape, hasLabel, labelPosition, checkColor, size },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? theme.colors.background.primaryDark\n      : theme.colors.background.greyLight,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(hasLabel\n        ? labelPosition === 'right'\n          ? { marginRight: 8 }\n          : { marginLeft: 8 }\n        : {}),\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...{\n        circle: {\n          borderRadius: 999,\n        },\n        square: {\n          borderRadius: theme.controlBorderRadius.small,\n        },\n      }[shape],\n    },\n    iconColor: checkColor || theme.colors.text.white,\n\n    outerWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: {},\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\nexport type CheckboxLabelPosition = 'left' | 'right';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n  checkColor?: string;\n  label?: string;\n  size?: ControlSize;\n  labelPosition?: 'left' | 'right';\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'square',\n    labelPosition = 'right',\n    size = 'medium',\n    label,\n    checkColor,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    touchableStyle,\n    outerWrapperStyle,\n    checkboxStyle,\n    textStyle,\n    iconColor,\n    checkboxFocusBackgroundColor,\n  } = mergeStyles(getCheckboxStyles, getStyles)(\n    {\n      checkColor,\n      hasLabel: !!label,\n      isChecked,\n      isDisabled,\n      labelPosition,\n      shape,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible={isInteractive}\n      style={touchableStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={outerWrapperStyle}>\n        {labelPosition === 'left' && (\n          <Text size={size} getStyles={() => ({ textStyle })}>\n            {label}\n          </Text>\n        )}\n\n        <View style={checkboxStyle}>\n          {isChecked ? <Icon name=\"check\" size={20} color={iconColor} /> : null}\n        </View>\n\n        {labelPosition === 'right' && (\n          <Text size={size} getStyles={() => ({ textStyle })}>\n            {label}\n          </Text>\n        )}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export { Checkbox, CheckboxProps } from './Checkbox';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n"],"sourceRoot":""}