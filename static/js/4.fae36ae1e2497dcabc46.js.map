{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","_props$size","_props$sizeLimitOneCh","getStyles","testID","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","substring","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","propToFn","colors","background","elevation","elevations","shape","containerShapes","Box","children","viewStyles","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","transformedStyles","pureStyles","prop","styleFn","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","getCheckboxStyles","isChecked","isDisabled","_ref$shape","_ref$size","sizeValue","controlHeights","checkColor","text","white","checkboxStyle","objectSpread","content","borderColor","border","borderWidth","primaryDefault","greyDark","touchableStyle","Checkbox","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","_props$onChange","onChange","accessibilityProps","objectWithoutProperties","TouchableOpacity","esm_extends","accessible","disabled","onPress","Icon_web","State","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","Icon","IconTag","Feather","concat","result","matches","charAt","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","getListItemStyles","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexDirection","textWrapperStyle","titleStyle","borderBottomWidth","paddingLeft","paddingRight","wrapperStyle","iconSize","large","medium","small","avatarSize","titleSize","descriptionSize","ListItem","avatarProps","title","description","rightIcon","leftIcon","weight","layoutProps","MDXLayout","MDXContent","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","SelectList","SelectListItem","___WEBPACK_IMPORTED_MODULE_6__","isMulti","selectedValue","onValueChange","newValue","itemIndex","console","log","___WEBPACK_IMPORTED_MODULE_7__","label","value","___WEBPACK_IMPORTED_MODULE_8__","of","isMDXComponent","SelectListBase","innerRef","flatListProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","handleOnPress","itemValue","isSelected","Array","isArray","filter","val","childrenArray","toArray","data","child","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","ref","keyExtractor","item","getItemLayout","_","index","offset","renderItem","selectListItem","some","selVal","onSelect","_props$index","_props$isSelected","_props$onSelect","listItemProps","_ListItem__WEBPACK_IMPORTED_MODULE_4__","e","preventDefault","_Checkbox__WEBPACK_IMPORTED_MODULE_3__","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","getTextStyles","_ref$color","_ref$align","align","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","textProps","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","palette","lightest","light","base","dark","darkest","controlBorderRadius","overlay","greyLight","greyDefault","primaryLight","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","selected","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","merge","all"],"mappings":"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","file":"static/js/4.7616b41b.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  {\n    name,\n    color = 'automatic',\n    isSolid = false,\n    size = 48,\n    sizeLimitOneCharacter = 20,\n  },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColor } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /** The size of the avatar. */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   * @default 48\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid avatar.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   * @default 20\n   */\n  sizeLimitOneCharacter?: number;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = theme.controlHeights[size] - 16;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(isChecked\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  isChecked?: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /** Called when checkbox is pressed. */\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    onChange = () => null,\n    shape = 'rounded',\n    size = 'medium',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={checkboxStyle}>\n        {isChecked ? <Icon name=\"check\" size={20} color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size = 'medium', isDisabled },\n  theme,\n) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textWrapperStyle: {\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights[size],\n      justifyContent: 'center',\n      paddingLeft: 16,\n      paddingRight: 8,\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, TextSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Size of the list item.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Title of the list item\n   */\n  title?: string;\n\n  /**\n   * Description of the list item\n   */\n  description?: string;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * Icon replacing `Avatar` on the left hand-side\n   */\n  leftIcon?: React.ReactNode;\n\n  /**\n   * Icon replacing right hand-side icon\n   */\n  rightIcon?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nconst iconSize: {\n  [size in ControlSize]: number;\n} = {\n  large: 32,\n  medium: 24,\n  small: 16,\n};\n\nconst avatarSize: {\n  [size in ControlSize]: number;\n} = {\n  large: 40,\n  medium: 32,\n  small: 24,\n};\n\nconst titleSize: {\n  [size in ControlSize]: TextSize;\n} = {\n  large: 'large',\n  medium: 'medium',\n  small: 'small',\n};\n\nconst descriptionSize: {\n  [size in ControlSize]: TextSize;\n} = {\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n};\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>\n            {leftIcon || avatarProps ? (\n              <Avatar size={avatarSize[size]} {...avatarProps} />\n            ) : null}\n          </View>\n          <View style={textWrapperStyle}>\n            {title && (\n              <Text\n                getStyles={() => ({ textStyle: titleStyle })}\n                size={titleSize[size]}\n                weight=\"500\"\n              >\n                {title}\n              </Text>\n            )}\n            {description && (\n              <Text\n                getStyles={() => ({ textStyle: descriptionStyle })}\n                size={descriptionSize[size]}\n                color=\"muted\"\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n        </View>\n        {rightIcon === null\n          ? null\n          : rightIcon || (\n              <Icon\n                color=\"default\"\n                size={iconSize[size]}\n                name=\"chevron-right\"\n              />\n            )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, SelectList, SelectListItem, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"selectlist\"\n    }}>{`SelectList`}</h1>\n    <p>{`SelectList that supports single value or multiple values selected at the same item. `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` is a compound component, which means that its children can be any component, and it will implicitly inject props such as `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`onSelect`}</inlineCode>{` to them.\n`}<inlineCode parentName=\"p\">{`SelectListItem`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`ListItem`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`SelectList`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<SelectList\\n  isMulti={false} // Single select\\n  selectedValue=\\\"c\\\"\\n  onValueChange={(newValue, itemIndex) => {\\n    console.log(newValue, itemIndex)\\n  }}\\n>\\n  <SelectListItem\\n    label=\\\"Usage\\\"\\n    value=\\\"c\\\"\\n    // Props below are passed from `SelectList`, so it is not necessary to pass them here\\n    // isSelected\\n    // onSelect\\n    // index\\n  />\\n</SelectList>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <SelectList isMulti={false} // Single select\n      selectedValue=\"c\" onValueChange={(newValue, itemIndex) => {\n        console.log(newValue, itemIndex);\n      }} mdxType=\"SelectList\">\n    <SelectListItem label=\"Usage\" value=\"c\" // Props below are passed from `SelectList`, so it is not necessary to pass them here\n        // isSelected\n        // onSelect\n        // index\n        mdxType=\"SelectListItem\" />\n  </SelectList>\n    </Playground>\n    <h3 {...{\n      \"id\": \"multi-select\"\n    }}>{`Multi select`}</h3>\n    <Playground __position={1} __code={'<State initial={{ selectedValue: [\\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <SelectList\\n      isMulti\\n      selectedValue={state.selectedValue}\\n      onValueChange={(newValue, itemIndex) => {\\n        setState({ selectedValue: newValue })\\n      }}\\n    >\\n      <SelectListItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <SelectListItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <SelectListItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <SelectListItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <SelectListItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <SelectListItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <SelectListItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <SelectListItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <SelectListItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <SelectListItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <SelectListItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <SelectListItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <SelectListItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <SelectListItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <SelectListItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <SelectListItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <SelectListItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <SelectListItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <SelectListItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </SelectList>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      SelectList,\n      SelectListItem,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        selectedValue: ['js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <SelectList isMulti selectedValue={state.selectedValue} onValueChange={(newValue, itemIndex) => {\n          setState({\n            selectedValue: newValue\n          });\n        }} mdxType=\"SelectList\">\n        <SelectListItem label=\"C\" value=\"c\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C#\" value=\"c#\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"C++\" value=\"c++\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"CSS\" value=\"css\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elixir\" value=\"elixir\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Elm\" value=\"elm\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Erlang\" value=\"erlang\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Go\" value=\"go\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Haskell\" value=\"haskell\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"HTML\" value=\"html\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Java\" value=\"java\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"JavaScript\" value=\"js\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Lua\" value=\"lua\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Python\" value=\"python\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"R\" value=\"r\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Ruby\" value=\"ruby\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Rust\" value=\"rust\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Switft\" value=\"swift\" mdxType=\"SelectListItem\" />\n        <SelectListItem label=\"Typescript\" value=\"typescript\" mdxType=\"SelectListItem\" />\n      </SelectList>}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={SelectList} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children:\n    | Array<React.ReactElement<SelectListItemBaseProps>>\n    | React.ReactElement<SelectListItemBaseProps>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      title={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}