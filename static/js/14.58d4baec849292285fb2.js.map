{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactNative","_reactPowerplug","_","_docz","_Inputs","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Text","Toggle","FormField","Props","TextInput","labelPosition","label","description","error","getStyles","theme","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","labelWrapperStyle","wrapperStyle","of","isMDXComponent","getFormFieldStyles","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","React","_interopRequireWildcard","_theme","_mergeStyles2","_Typography","_FormField","children","_props$labelPosition","useTheme","_mergeStyles","mergeStyles","labelContent","createElement","View","style","Label","textStyle","color","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","Icon","name","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","colors","text","_Icon","_IconTextInput","ClearableTextInputBase","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","IconTextInput","ref","TouchableOpacity","onPress","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","leftContainerStyle","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","textInputProps","getTextInputStyles","isDisabled","isInvalid","numberOfLines","controlHeight","controlHeights","focusedStyle","backgroundColor","background","content","borderColor","border","borderRadius","controlBorderRadius","borderWidth","controlPaddings","width","textSizes","greyDark","danger","paddingVertical","placeholderTextColor","muted","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","_ClearableTextInput"],"mappings":"iYAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,iDACAE,EAAAF,EAAA,8DACAG,EAAAH,EAAA,kCACAI,EAAAJ,EAAA,yCACAK,EAAAL,EAAA,oCAOMM,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAA,SAAAH,EAAA,gBACD,OAAO,EAAAX,EAAAe,KAACN,GAAD,EAAAO,EAAA,YAAeR,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAG5E,EAAAjB,EAAAe,KAAA,KAAQ,CACNG,GAAM,aADR,cAGA,EAAAlB,EAAAe,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAlB,EAAAe,KAACT,EAAAa,WAAD,CAAYC,WAAY,EAAGC,OAAQ,+XAAwYC,QAAS,CAClbT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BW,YACAC,gBACAC,sBACAP,wBACAQ,cACAC,uBACCX,QAAQ,eACb,EAAAjB,EAAAe,KAACV,EAAAqB,UAAD,CAAWG,cAAc,MAAMC,MAAM,QAAQC,YAAY,4BAA4BC,MAAM,gBAAgBC,UAAW,SAACpB,EAAOqB,GAAR,MAAmB,CACnIC,gBAAiB,GACjBC,qBAAsB,GACtBC,eAAgB,GAChBC,kBAAmB,GACnBC,eAAgB,GAChBC,kBAAmB,GACnBC,aAAc,KACZxB,QAAQ,cACd,EAAAjB,EAAAe,KAACR,EAAAqB,UAAD,CAAWX,QAAQ,iBAGnB,EAAAjB,EAAAe,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAlB,EAAAe,KAACT,EAAAqB,MAAD,CAAOe,GAAIhB,YAAWT,QAAQ,kMAIlCP,EAAWiC,gBAAiB,glCCpCrB,IAAMC,EAAyC,SAAAjC,EAEpDuB,GACG,IACCM,EAA+B,GAC/BC,EAA0B,GAE9B,OAJG9B,EAFDkB,eAOA,IAAK,OACHW,EAAoB,CAAEK,aAAc,GACpCJ,EAAe,CAAEK,cAAe,MAAOC,WAAY,UACnD,MACF,IAAK,QACHP,EAAoB,CAAEQ,YAAa,GACnCP,EAAe,CAAEK,cAAe,MAAOC,WAAY,UACnD,MACF,QACEP,EAAoB,CAAES,cAAe,GACrCR,EAAe,CAAEQ,cAAe,GAIpC,MAAO,CACLd,gBAAiB,GACjBC,qBAAsB,CAAEa,cAAe,GACvCZ,eAAgB,GAChBC,kBAAmB,GACnBC,eAAgB,GAChBC,oBACAC,obCrDJ,IAAAS,EAAAC,EAAAjD,EAAA,kCACAC,EAAAD,EAAA,iDAGAkD,EAAAlD,EAAA,wBACAmD,EAAAnD,EAAA,8BACAoD,EAAApD,EAAA,wCACAqD,EAAArD,EAAA,wqBAoBO,IAAMwB,EAAY,SAACb,GAA0B,IAEhDiB,EAMEjB,EANFiB,MACAE,EAKEnB,EALFmB,MACAwB,EAIE3C,EAJF2C,SACAzB,EAGElB,EAHFkB,YALgD0B,EAQ9C5C,EAFFgB,qBANgD,IAAA4B,EAMhC,MANgCA,EAOhDxB,EACEpB,EADFoB,UAEIC,GAAQ,EAAAkB,EAAAM,YAToCC,GAmB9C,EAAAN,EAAAO,aACFhB,qBACAX,EACAC,EAAMtB,WAAWgC,mBAHf,CAKF,CACEf,iBAEFK,GAfAC,EAZgDwB,EAYhDxB,gBACAC,EAbgDuB,EAahDvB,qBACAC,EAdgDsB,EAchDtB,eACAC,EAfgDqB,EAehDrB,kBACAC,EAhBgDoB,EAgBhDpB,eACAC,EAjBgDmB,EAiBhDnB,kBACAC,EAlBgDkB,EAkBhDlB,aAYIoB,EACJX,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAOxB,GACXU,EAAAY,cAACR,EAAAW,MAAD,CAAOhC,UAAW,iBAAO,CAAEiC,UAAW3B,KAAoBT,IAI9D,OACEoB,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAO7B,GACVL,GAA2B,QAAlBD,GAA2BgC,EACrCX,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAOvB,GACVX,GAA2B,SAAlBD,GAA4BgC,EACrCL,EACA1B,GAA2B,UAAlBD,GAA6BgC,GAExC9B,GACCmB,EAAAY,cAACR,EAAA9B,KAAD,CACE2C,MAAM,QACNlC,UAAW,iBAAO,CAAEiC,UAAW9B,KAE9BL,GAGJC,GACCkB,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAO1B,GACXY,EAAAY,cAACR,EAAA9B,KAAD,CACE2C,MAAM,SACNlC,UAAW,iBAAO,CAAEiC,UAAW7B,KAE9BL,6SCrFb,IAAAuB,EAAArD,EAAA,uCAAAkE,OAAAC,KAAAd,GAAAe,QAAA,SAAAC,GAAA,YAAAA,GAAA,eAAAA,GAAAH,OAAAI,eAAAC,EAAAF,EAAA,CAAAG,YAAA,EAAAC,IAAA,kBAAApB,EAAAgB,wMCAA,IAAArB,EAAAC,EAAAjD,EAAA,kCACA0E,EAAAzB,EAAAjD,EAAA,+CAEAkD,EAAAlD,EAAA,wBACA2E,EAAA3E,EAAA,8CAYO,IAAM4E,EAAO,SAAAnE,GAAsC,IAAnCoE,EAAmCpE,EAAnCoE,KAAMZ,EAA6BxD,EAA7BwD,MAAOa,EAAsBrE,EAAtBqE,KAC5B9C,GAAQ,EAAAkB,EAAAM,YAERuB,EAAUL,EAAO,KAAAM,OAZzB,SAAyBH,GACvB,IAIMI,EAASJ,EAAKK,QAAQ,UAJV,SAACC,GACjB,OAAOA,EAAQ,GAAGC,gBAIpB,OAAOH,EAAOI,OAAO,GAAGD,cAAgBH,EAAOK,MAAM,GAMxBC,CAAgBV,KAE7C,OACE7B,EAAAY,cAACmB,EAAD,CACEd,MAAOA,GAAQ,EAAAU,EAAAa,cAAaxD,EAAMyD,OAAOC,KAA1B,CAAgCzB,GAASA,EACxDa,KAAMA,iSCxBZ,IAAAa,EAAA3F,EAAA,sCAAAkE,OAAAC,KAAAwB,GAAAvB,QAAA,SAAAC,GAAA,YAAAA,GAAA,eAAAA,GAAAH,OAAAI,eAAAC,EAAAF,EAAA,CAAAG,YAAA,EAAAC,IAAA,kBAAAkB,EAAAtB,kbCAArB,EAAAC,EAAAjD,EAAA,kCACAC,EAAAD,EAAA,iDAEAkD,EAAAlD,EAAA,wBACA2F,EAAA3F,EAAA,kCACA4F,EAAA5F,EAAA,wZAOA,IAAM6F,EAAyB,SAAClF,GAAmC,IAE/DmF,EAOEnF,EAPFmF,QACAC,EAMEpF,EANFoF,SACAC,EAKErF,EALFqF,aACAC,EAIEtF,EAJFsF,MACAC,EAGEvF,EAHFuF,YACAC,EAEExF,EAFFwF,UACGC,GAR4D,EAAAxF,EAAA,SAS7DD,EAT6D,yEAU3DqB,GAAQ,EAAAkB,EAAAM,YAEd,OACER,EAAAY,cAACgC,EAAAS,eAAD,EAAAvF,EAAA,UACEwF,IAAKP,EACLC,aAAcA,EACdC,MAAOA,EACPE,UACEF,GAASC,EACPlD,EAAAY,cAAC3D,EAAAsG,iBAAD,CACEC,QAAS,WACHR,GAAcA,EAAa,IAC3BF,GAASA,MAGf9C,EAAAY,cAAC+B,EAAAf,KAAD,CAAMC,KAAK,IAAIC,KAAM,GAAIb,MAAOjC,EAAMyD,OAAOC,KAAb,WAGlCS,GAAa,MAGbC,KAKGK,EAAqBzD,EAAM0D,WAGtC,SAAC/F,EAAO2F,GAAR,OAAgBtD,EAAAY,cAACiC,GAAD,EAAA/E,EAAA,YAA4BH,EAA5B,CAAmCoF,SAAUO,+lDC5BxD,IAAMK,EAAiD,SAC5DhG,EACAqB,GACG,IACK4E,EAA8BjG,EAA9BiG,YAAaC,EAAiBlG,EAAjBkG,aAErB,MAAO,CACLC,eAAgB,CACdC,SAAU,YAEZC,YAAU,EAAAC,EAAA,YACJL,GAAe,CAAE9D,YAAa,IAC9B+D,GAAgB,CAAElE,aAAc,KAEtCuE,mBAAoB,CAClBrE,WAAY,SACZsE,QAAS,OACTC,OAAQ,OACRC,eAAgB,SAChBC,KAAM,EACNC,kBAAmB,EACnBR,SAAU,YAEZS,oBAAqB,CACnB3E,WAAY,SACZsE,QAAS,OACTC,OAAQ,OACRC,eAAgB,SAChBE,kBAAmB,EACnBR,SAAU,WACVU,MAAO,+oBCrDbzE,EAAAC,EAAAjD,EAAA,kCACAC,EAAAD,EAAA,iDAGAkD,EAAAlD,EAAA,wBACAmD,EAAAnD,EAAA,8BACA4F,EAAA5F,EAAA,mDAKA0H,EAAA1H,EAAA,4WAWA,IAAM2H,EAAoB,SAAChH,GAA8B,IAAAiH,EAOnDjH,EALFkH,gBAFqD,IAAAD,EAE1C,KAF0CA,EAAAE,EAOnDnH,EAJFwF,iBAHqD,IAAA2B,EAGzC,KAHyCA,EAIrD/F,EAGEpB,EAHFoB,UACAgE,EAEEpF,EAFFoF,SACGgC,GANkD,EAAAnH,EAAA,SAOnDD,EAPmD,iDASjDqB,GAAQ,EAAAkB,EAAAM,YATyCC,GAgBnD,EAAAN,EAAAO,aACFiD,yBACA5E,EACAC,EAAMtB,WAAWsH,mBAHf,CAIF,CAAEpB,cAAeiB,EAAUhB,eAAgBV,GAAanE,GARxD8E,EAZqDrD,EAYrDqD,eACAI,EAbqDzD,EAarDyD,mBACAM,EAdqD/D,EAcrD+D,oBACAR,EAfqDvD,EAerDuD,WAOF,OACEhE,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAOgD,GACX9D,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAOoD,GAAqBW,GAClC7E,EAAAY,cAAC8D,EAAAhG,WAAD,EAAAZ,EAAA,UACEwF,IAAKP,EACLhE,UAAW,iBAAO,CAChBiF,gBAEEe,IAEN/E,EAAAY,cAAC3D,EAAA4D,KAAD,CAAMC,MAAO0D,GAAsBrB,KAK5BE,EAAgBrD,EAAM0D,WACjC,SAAC/F,EAAO2F,GAAR,OAAgBtD,EAAAY,cAAC+D,GAAD,EAAA7G,EAAA,YAAuBH,EAAvB,CAA8BoF,SAAUO,m9CCtCnD,IAAM0B,EAAyC,SAAAvH,EAEpDuB,GACG,IAFD8C,EAECrE,EAFDqE,KAAMmD,EAELxH,EAFKwH,WAAYC,EAEjBzH,EAFiByH,UAAWC,EAE5B1H,EAF4B0H,cAGzBC,EAAgBpG,EAAMqG,eAAevD,GAE3C,MAAO,CACLwD,aAAc,GACdtB,YAAU,EAAAC,EAAA,UACRsB,gBAAiBvG,EAAMyD,OAAO+C,WAAWC,QACzCC,YAAa1G,EAAMyD,OAAOkD,OAAb,QACbC,aAAc5G,EAAM6G,oBAAoB/D,GACxCgE,YAAa,EACb7E,MAAOjC,EAAMyD,OAAOC,KAAb,QACP0B,OAAQpF,EAAMqG,eAAevD,GAC7BhC,YAAad,EAAM+G,gBAAgBjE,GACnCnC,aAAcX,EAAM+G,gBAAgBjE,GACpCkE,MAAO,QACJhH,EAAMiH,UAAUnE,GACfmD,EACA,CAAEM,gBAAiBvG,EAAMyD,OAAO+C,WAAWU,UAC3C,GACAhB,EAAY,CAAEQ,YAAa1G,EAAMyD,OAAOkD,OAAOQ,QAAW,GAC1DhB,EACA,CACEf,OAAQe,EAAgBC,EACxBgB,gBAAiB,IAEnB,IAENC,qBAAsBrH,EAAMyD,OAAOC,KAAK4D,8nBCpD5CtG,EAAAC,EAAAjD,EAAA,kCACAC,EAAAD,EAAA,iDAMAkD,EAAAlD,EAAA,wBACAmD,EAAAnD,EAAA,8BACA0H,EAAA1H,EAAA,kVAmBA,IAAMuJ,EAAgB,SAAC5I,GAA0B,IAAA6I,EAU3C7I,EARFsH,kBAF6C,IAAAuB,KAAAC,EAU3C9I,EAPFuH,iBAH6C,IAAAuB,KAAAC,EAU3C/I,EANFmE,YAJ6C,IAAA4E,EAItC,SAJsCA,EAK7C3H,EAKEpB,EALFoB,UACA8C,EAIElE,EAJFkE,KACAkB,EAGEpF,EAHFoF,SACAoC,EAEExH,EAFFwH,cACGJ,GAT0C,EAAAnH,EAAA,SAU3CD,EAV2C,iFAWzCqB,GAAQ,EAAAkB,EAAAM,YAXiCC,GAaF,EAAAN,EAAAO,aAC3CsE,qBACAjG,EAF2C,CAI3C,CACEkG,aACAC,YACAC,gBACArD,QAEF9C,GAVMgF,EAbuCvD,EAavCuD,WAAYqC,EAb2B5F,EAa3B4F,qBAapB,OAEErG,EAAAY,cAAC3D,EAAAyB,WAAD,EAAAZ,EAAA,UACEwF,IAAKP,EACLjC,MAAOkD,EACP2C,UAAW1B,EACXoB,qBAAsBA,EACtBxE,KAAMA,EACNsD,cAAeA,GACXJ,KAKGrG,EAAYsB,EAAM0D,WAC7B,SAAC/F,EAAO2F,GACN,OAAOtD,EAAAY,cAAC2F,GAAD,EAAAzI,EAAA,YAAmBH,EAAnB,CAA0BoF,SAAUO,shBCtE/C,IAAAsD,EAAA5J,EAAA","file":"static/js/14.f32f271f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Text } from 'react-native';\nimport { Toggle } from 'react-powerplug';\nimport { FormField } from '.';\nimport { Playground, Props } from 'docz';\nimport { TextInput } from '../Inputs';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<FormField\\n  labelPosition=\\\"top\\\"\\n  label=\\\"Email\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n  getStyles={(props, theme) => ({\\n    containerStyles: {},\\n    descriptionTextStyle: {},\\n    errorTextStyle: {},\\n    errorWrapperStyle: {},\\n    labelTextStyle: {},\\n    labelWrapperStyle: {},\\n    wrapperStyle: {},\\n  })}\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Text,\n      Toggle,\n      FormField,\n      Playground,\n      Props,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField labelPosition=\"top\" label=\"Email\" description=\"Description for the field\" error=\"Error message\" getStyles={(props, theme) => ({\n        containerStyles: {},\n        descriptionTextStyle: {},\n        errorTextStyle: {},\n        errorWrapperStyle: {},\n        labelTextStyle: {},\n        labelWrapperStyle: {},\n        wrapperStyle: {}\n      })} mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={FormField} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldLabelPosition } from './FormField';\n\nexport interface FormFieldStylesProps {\n  labelPosition?: FormFieldLabelPosition;\n}\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  FormFieldStylesProps: FormFieldStylesProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  error?: string;\n  label?: string;\n  labelPosition?: FormFieldLabelPosition;\n  description?: string;\n  children?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(\n    {\n      labelPosition,\n    },\n    theme,\n  );\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ textStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { TextInputStylesProps } from './TextInput.styles';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps\n  extends Partial<TextInputStylesProps> {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetIconTextInputStyles,\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetIconTextInputStyles,\n    DeepPartial<IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(\n    getIconTextInputStyles,\n    getStyles,\n    theme.components.getTextInputStyles,\n  )({ hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon }, theme);\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const controlHeight = theme.controlHeights[size];\n\n  return {\n    focusedStyle: {},\n    inputStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderRadius: theme.controlBorderRadius[size],\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      width: '100%',\n      ...theme.textSizes[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n      ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor: theme.colors.text.muted,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\n"],"sourceRoot":""}