{"version":3,"sources":["webpack:///./src/components/Checkbox/Checkbox.mdx","webpack:///./src/components/Checkbox/Checkbox.styles.ts","webpack:///./src/components/Checkbox/Checkbox.tsx","webpack:///./src/components/Checkbox/LabeledCheckbox.tsx","webpack:///./src/icons/Icon.web.tsx","webpack:///./src/icons/index.ts"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_reactPowerplug","_docz","_Checkbox","_LabeledCheckbox","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","name","id","Playground","__position","__code","__scope","Toggle","Checkbox","LabeledCheckbox","initial","_ref","on","toggle","shape","isChecked","isDisabled","isInteractive","checkedIcon","onChange","getStyles","theme","checkboxStyle","checkboxFocusBackgroundColor","label","PropsTable","of","React","Component","getCheckboxVariables","base","backgroundColor","colors","background","white","borderColor","border","borderWidth","height","width","checked","primaryDefault","checkedFocus","primaryDark","disabled","greyDark","circle","borderRadius","square","controlBorderRadius","small","uncheckedFocus","greyLight","checkboxVariables","_objectSpread2","displayName","__docgenInfo","description","defaultValue","required","type","fills","fontFamilies","fontWeights","headingSizes","paragraphSizes","textSizes","elevations","controlPaddings","controlHeights","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","_interopRequireWildcard","_reactNative","_icons","_theme","_mergeStyles2","withTheme","_props$isChecked","_props$isDisabled","_props$isInteractive","_props$onChange","_props$shape","testID","accessibilityProps","_mergeStyles","mergeStyles","getCheckboxStyles","TouchableHighlight","_extends2","accessible","style","underlayColor","onPress","View","alignItems","display","justifyContent","Icon","size","color","text","_Layout","_Typography","_props$position","position","restProps","Box","flexDirection","Text","Spacing","paddingHorizontal","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","Iconweb","_Icon"],"mappings":"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","file":"static/js/19.e9386376.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Toggle } from 'react-powerplug';\nimport { Playground, PropsTable } from 'docz';\nimport Checkbox from './Checkbox';\nimport LabeledCheckbox from './LabeledCheckbox';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage-1\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Checkbox\\n      shape=\\\"square\\\" // or \\\"circle\\\"\\n      isChecked={on}\\n      isDisabled={false}\\n      isInteractive={true}\\n      checkedIcon={null}\\n      onChange={toggle}\\n      getStyles={(props, theme) => ({\\n        checkboxStyle: {},\\n        checkboxFocusBackgroundColor: \\'\\',\\n      })}\\n    />\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,Checkbox,LabeledCheckbox}}>\n  <Toggle initial={false}>\n    {({ on, toggle }) => (\n      <Checkbox\n        shape=\"square\" // or \"circle\"\n        isChecked={on}\n        isDisabled={false}\n        isInteractive={true}\n        checkedIcon={null}\n        onChange={toggle}\n        getStyles={(props, theme) => ({\n          checkboxStyle: {},\n          checkboxFocusBackgroundColor: '',\n        })}\n      />\n    )}\n  </Toggle>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"labeled-checkboxes\"}}>{`Labeled Checkboxes`}</MDXTag>\n<Playground __position={1} __code={'<LabeledCheckbox shape=\\\"circle\\\" label=\\\"Default\\\" />'} __scope={{props: this ? this.props : props,Toggle,Checkbox,LabeledCheckbox}}>\n  <LabeledCheckbox shape=\"circle\" label=\"Default\" />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Checkbox} />\n           </MDXTag>\n  }\n}\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport const getCheckboxVariables = (theme: Theme): CheckboxVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: 32,\n      width: 32,\n    },\n    checked: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderColor: 'transparent',\n    },\n    checkedFocus: {\n      backgroundColor: theme.colors.background.primaryDark,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderColor: theme.colors.border.default,\n    },\n    shape: {\n      circle: {\n        borderRadius: 999,\n      },\n      square: {\n        borderRadius: theme.controlBorderRadius.small,\n      },\n    },\n    uncheckedFocus: {\n      backgroundColor: theme.colors.background.greyLight,\n    },\n  };\n};\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n}\n\nexport interface CheckboxStyles {\n  checkboxStyle: ViewStyle;\n  checkboxFocusBackgroundColor?: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape },\n  theme,\n) => {\n  const checkboxVariables = getCheckboxVariables(theme);\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? checkboxVariables.checkedFocus.backgroundColor\n      : checkboxVariables.uncheckedFocus.backgroundColor,\n    checkboxStyle: {\n      ...checkboxVariables.base,\n      ...(isChecked ? checkboxVariables.checked : {}),\n      ...(isDisabled ? checkboxVariables.disabled : {}),\n      ...checkboxVariables.shape[shape],\n    },\n  };\n};\ntry {\n    // @ts-ignore\n    getCheckboxVariables.displayName = \"getCheckboxVariables\";\n    // @ts-ignore\n    getCheckboxVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getCheckboxVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Checkbox/Checkbox.styles.ts#getCheckboxVariables\"] = { docgenInfo: getCheckboxVariables.__docgenInfo, name: \"getCheckboxVariables\", path: \"src/components/Checkbox/Checkbox.styles.ts#getCheckboxVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { Theme, withTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  theme: Theme;\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  checkedIcon?: React.ReactNode;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n}\n\nconst CheckboxBase = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    checkedIcon,\n    onChange = () => null,\n    shape = 'square',\n    theme,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const { checkboxStyle, checkboxFocusBackgroundColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n  )({ isChecked, isDisabled, shape }, theme);\n\n  return (\n    <TouchableHighlight\n      accessible\n      style={checkboxStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {isChecked\n          ? checkedIcon || (\n              <Icon name=\"check\" size={20} color={theme.colors.text.white} />\n            )\n          : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport const Checkbox = withTheme(CheckboxBase);\nexport default Checkbox;\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { TextColor, TextSize } from '../../theme/ThemeInterface';\nimport Checkbox, { CheckboxProps } from '../Checkbox/Checkbox';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\n\nexport interface LabeledCheckboxProps extends CheckboxProps {\n  label?: string;\n  position?: 'left' | 'right';\n  color?: TextColor;\n  size?: TextSize;\n}\n\nconst LabeledCheckboxBase = (props: LabeledCheckboxProps) => {\n  const { label, position = 'right', color, size, ...restProps } = props;\n\n  if (!label) {\n    return <Checkbox {...restProps} />;\n  }\n\n  return (\n    <Box flexDirection=\"row\" alignItems=\"center\">\n      {position === 'left' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n      <Spacing paddingHorizontal={1}>\n        <Checkbox {...restProps} />\n      </Spacing>\n      {position === 'right' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n    </Box>\n  );\n};\n\nexport const LabeledCheckbox = withTheme(LabeledCheckboxBase);\nexport default LabeledCheckbox;\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\ntry {\n    // @ts-ignore\n    Iconweb.displayName = \"Iconweb\";\n    // @ts-ignore\n    Iconweb.__docgenInfo = { \"description\": \"\", \"displayName\": \"Iconweb\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/icons/Icon.web.tsx#Iconweb\"] = { docgenInfo: Iconweb.__docgenInfo, name: \"Iconweb\", path: \"src/icons/Icon.web.tsx#Iconweb\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { default as Icon } from './Icon';\n"],"sourceRoot":""}