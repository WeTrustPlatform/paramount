{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/SearchTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_Icon","_IconTextInput","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","_objectWithoutProperties2","theme","useTheme","createElement","IconTextInput","_extends2","ref","TouchableOpacity","onPress","Icon","name","size","color","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","_react2","_interopRequireDefault","_docz","_countriesList","_reactPowerplug","_Typography","_Box","_PhoneNumberInput","layoutProps","MDXLayout","MDXContent","_ref","components","mdx","mdxType","id","Playground","__position","__code","__scope","this","Props","countries","State","Heading","Box","PhoneNumberInput","initial","countryCode","phoneNumber","_ref2","state","setState","header","marginVertical","onChangeCountryCode","onChangePhoneNumber","countryCodes","Object","keys","map","phone","label","placeholder","getCountryCodeTitle","concat","of","isMDXComponent","getPhoneNumberInputStyles","flexDirection","_","_Button","_ListItem","_Modal","PhoneNumberInputBase","_props$countryCode","_props$countryCodes","_props$useHistory","useHistory","_props$getCountryCode","code","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","Button","appearance","buttonStyle","borderBottomRightRadius","borderColor","border","borderTopRightRadius","borderWidth","iconAfter","title","flex","borderBottomLeftRadius","borderTopLeftRadius","keyboardType","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","ListItem","key","event","preventDefault","_ClearableTextInput","SearchTextInputBase","SearchTextInput","getTextInputVariables","base","backgroundColor","background","content","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlPaddings","large","getTextInputStyles","isDisabled","isInvalid","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","forEach","prototype","hasOwnProperty","call","_exportNames","defineProperty","exports","enumerable","get","_SearchTextInput","getListItemVariables","borderBottomWidth","focusBackgroundColor","greyLight","selected","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","description","testID","accessibilityProps","TouchableHighlight","underlayColor","Text"],"mappings":"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","file":"static/js/13.d3250a4e.js","sourcesContent":["import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { countries } from 'countries-list';\nimport { State } from 'react-powerplug';\nimport { Heading } from '../Typography';\nimport { Box } from '../Box';\nimport { PhoneNumberInput } from './PhoneNumberInput';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"phonenumberinput\"\n    }}>{`PhoneNumberInput`}</h1>\n    <p>{`Appends a button to select country code`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ countryCode: \\'1\\', phoneNumber: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <PhoneNumberInput\\n      header={\\n        <Box marginVertical={24} paddingHorizontal={16}>\\n          <Heading size=\\\"xxxlarge\\\">Select your country</Heading>\\n        </Box>\\n      }\\n      onChangeCountryCode={countryCode => setState({ countryCode })}\\n      onChangePhoneNumber={phoneNumber => setState({ phoneNumber })}\\n      phoneNumber={state.phoneNumber}\\n      countryCode={state.countryCode}\\n      countryCodes={Object.keys(countries).map(countryCode => ({\\n        value: countries[countryCode].phone,\\n        label: countries[countryCode].name,\\n      }))}\\n      placeholder=\\\"Enter your phone number\\\"\\n      getCountryCodeTitle={countryCode => `+${countryCode}`}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      countries,\n      State,\n      Heading,\n      Box,\n      PhoneNumberInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        countryCode: '1',\n        phoneNumber: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <PhoneNumberInput header={<Box marginVertical={24} paddingHorizontal={16} mdxType=\"Box\">\n            <Heading size=\"xxxlarge\" mdxType=\"Heading\">Select your country</Heading>\n          </Box>} onChangeCountryCode={countryCode => setState({\n          countryCode\n        })} onChangePhoneNumber={phoneNumber => setState({\n          phoneNumber\n        })} phoneNumber={state.phoneNumber} countryCode={state.countryCode} countryCodes={Object.keys(countries).map(countryCode => ({\n          value: countries[countryCode].phone,\n          label: countries[countryCode].name\n        }))} placeholder=\"Enter your phone number\" getCountryCodeTitle={countryCode => `+${countryCode}`} mdxType=\"PhoneNumberInput\" />}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={PhoneNumberInput} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { TextInput, TextInputProps } from '.';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n  countryCodes?: CountryCode[];\n  getCountryCodeTitle?: (countryCode: string) => string;\n}\n\nexport interface CountryCode {\n  /** The value for countryCode */\n  value: string;\n  /** Labels used in the list of countries to select the country code from */\n  label: string;\n}\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = '1',\n    countryCodes = [],\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    getCountryCodeTitle = (code: string) => code,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.default,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={getCountryCodeTitle(countryCode)}\n      />\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          containerStyle: {\n            flex: 1,\n          },\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.label}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countryCodes}\n          renderItem={({ item }) => {\n            return (\n              <ListItem\n                key={item.label}\n                label={item.label}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(item.value);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<\n  RNTextInput,\n  PhoneNumberInputProps\n>((props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />);\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport {\n  ClearableTextInput,\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\n","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export * from './PhoneNumberInput';\nexport {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\nexport * from './SearchTextInput';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n"],"sourceRoot":""}