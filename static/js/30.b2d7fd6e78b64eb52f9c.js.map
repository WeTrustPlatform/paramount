{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Slider/Slider.mdx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Slider","size","initialValue","step","isRange","minimumValue","maximumValue","onValueChange","value","console","log","onSlidingComplete","onSlidingStart","getStyles","theme","containerStyle","selectedTrackStyle","thumbStyle","unselectedTrackStyle","parentName","of","isMDXComponent"],"mappings":"gYAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,6BAOMG,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAA,SAAAH,EAAA,gBACD,OAAO,EAAAR,EAAAY,KAACN,GAAD,EAAAO,EAAA,YAAeR,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAG5E,EAAAd,EAAAY,KAAA,KAAQ,CACNG,GAAM,UADR,WAGA,EAAAf,EAAAY,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAf,EAAAY,KAACT,EAAAa,WAAD,CAAYC,WAAY,EAAGC,OAAQ,qlBAA4lBC,QAAS,CACtoBT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BM,wBACAK,cACAC,iBACCR,QAAQ,eACb,EAAAd,EAAAY,KAACR,EAAAkB,OAAD,CAAQC,KAAM,GAAIC,aAAc,GAC5BC,KAAM,EAAGC,SAAS,EAClBC,aAAc,EAAGC,aAAc,EAAGC,cAAe,SAAAC,GAAK,OAAIC,QAAQC,IAAI,gBAAiBF,IAAQG,kBAAmB,SAAAH,GAAK,OAAIC,QAAQC,IAAI,oBAAqBF,IAAQI,eAAgB,SAAAJ,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,IAAQK,UAAW,SAACzB,EAAO0B,GAAR,MAAmB,CAC/PC,eAAgB,GAChBC,mBAAoB,GACpBC,WAAY,GACZC,qBAAsB,KACpB1B,QAAQ,aAEd,EAAAd,EAAAY,KAAA,KAAQ,CACNG,GAAM,cADR,eAGA,EAAAf,EAAAY,KAAA,sBAAgB,EAAAZ,EAAAY,KAAA,cAAY6B,WAAW,KAAvB,gBAAhB,oBAA4F,EAAAzC,EAAAY,KAAA,cAAY6B,WAAW,KAAvB,oBAA5F,yGACA,EAAAzC,EAAAY,KAACT,EAAAa,WAAD,CAAYC,WAAY,EAAGC,OAAQ,4VAAmWC,QAAS,CAC7YT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BM,wBACAK,cACAC,iBACCR,QAAQ,eACb,EAAAd,EAAAY,KAACR,EAAAkB,OAAD,CAAQE,aAAc,CAAC,GAAI,IACvBC,KAAM,EAAGE,aAAc,EAAGC,aAAc,IAAKC,cAAe,SAAAC,GAAK,OAAIC,QAAQC,IAAI,gBAAiBF,IAAQG,kBAAmB,SAAAH,GAAK,OAAIC,QAAQC,IAAI,oBAAqBF,IAAQI,eAAgB,SAAAJ,GAAK,OAAIC,QAAQC,IAAI,iBAAkBF,IAAQhB,QAAQ,aAExP,EAAAd,EAAAY,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAf,EAAAY,KAACT,EAAAkB,MAAD,CAAOqB,GAAIpB,SAAQR,QAAQ,iMAI/BP,EAAWoC,gBAAiB","file":"static/js/30.60c802f5.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Slider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Slider\\n  size={40}\\n  initialValue={0.3} // either number for single thumb slider or [number, number] for range slider\\n  step={0}\\n  isRange={false} // Only used if you are not passing initialValue\\n  minimumValue={0}\\n  maximumValue={1}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n  getStyles={(props, theme) => ({\\n    containerStyle: {},\\n    selectedTrackStyle: {},\\n    thumbStyle: {},\\n    unselectedTrackStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider size={40} initialValue={0.3} // either number for single thumb slider or [number, number] for range slider\n      step={0} isRange={false} // Only used if you are not passing initialValue\n      minimumValue={0} maximumValue={1} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} getStyles={(props, theme) => ({\n        containerStyle: {},\n        selectedTrackStyle: {},\n        thumbStyle: {},\n        unselectedTrackStyle: {}\n      })} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"with-range\"\n    }}>{`With Range`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`initialValue`}</inlineCode>{` as an array of `}<inlineCode parentName=\"p\">{`[number, number]`}</inlineCode>{`, it will automatically translate it into a range slider. The minimum range is the value of the step`}</p>\n    <Playground __position={1} __code={'<Slider\\n  initialValue={[30, 60]} // This is an [number, number] instead of a number\\n  step={5}\\n  minimumValue={0}\\n  maximumValue={100}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider initialValue={[30, 60]} // This is an [number, number] instead of a number\n      step={5} minimumValue={0} maximumValue={100} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Slider} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}