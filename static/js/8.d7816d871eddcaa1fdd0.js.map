{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Checkbox","FormField","Toggle","___WEBPACK_IMPORTED_MODULE_7__","initial","_ref2","on","toggle","___WEBPACK_IMPORTED_MODULE_6__","label","labelPosition","___WEBPACK_IMPORTED_MODULE_5__","shape","value","onPress","size","of","parentName","className","isMDXComponent","getCheckboxStyles","theme","isDisabled","_ref$shape","_ref$size","sizeValue","isControlSize","controlHeights","checkColor","colors","text","white","checkboxStyle","objectSpread","alignItems","backgroundColor","background","content","borderColor","border","borderWidth","height","justifyContent","width","primaryDefault","greyDark","containerShapes","touchableStyle","_props$value","_props$isDisabled","_props$isInteractive","isInteractive","getStyles","testID","accessibilityLabel","useTheme","_mergeStyles","mergeStyles","react","TouchableOpacity","accessible","style","disabled","View","Icon_web","name","color","getFormFieldStyles","labelWrapperStyle","wrapperStyle","paddingRight","flexDirection","paddingLeft","paddingBottom","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","error","children","description","_props$labelPosition","labelContent","Label","labelStyle","Text","textStyle","_props$initial","_React$useState","React","useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","set","Icon","IconTag","Feather","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","getLabelStyles","rest","objectWithoutProperties","getTextStyles","textProps","esm_extends","accessibilityRole","Platform","OS","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","fontSize","_ref$color","_ref$align","align","weight","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","controlBorderRadius","small","medium","large","overlay","greyLight","greyDefault","primaryLight","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","paragraphSizes","xsmall","controlPaddings","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/8.578fed95.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Checkbox, FormField, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`Checkbox for boolean values`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <FormField label=\\\"Checkbox\\\" labelPosition=\\\"right\\\">\\n      <Checkbox shape=\\\"circle\\\" value={on} onPress={toggle} size=\\\"medium\\\" />\\n    </FormField>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Checkbox,\n      FormField,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <FormField label=\"Checkbox\" labelPosition=\"right\" mdxType=\"FormField\">\n        <Checkbox shape=\"circle\" value={on} onPress={toggle} size=\"medium\" mdxType=\"Checkbox\" />\n      </FormField>}\n  </Toggle>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\ngetStyles={(CheckboxProps, Theme) => CheckboxStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<TouchableOpacity touchableStyle>\n  <View checkboxStyle>{icon}</View>\n</TouchableOpacity>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { value, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(value\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    value = false,\n    isDisabled = false,\n    isInteractive = true,\n    onPress,\n    getStyles,\n    testID,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      disabled={isDisabled || !isInteractive}\n      testID={testID}\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <View style={checkboxStyle}>\n        {value ? <Icon name=\"check\" size={20} color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldProps } from './FormField';\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  props: FormFieldProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  /**\n   * Error message of the field\n   */\n  error?: React.ReactNode;\n\n  /**\n   * Label of the field.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: FormFieldLabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: React.ReactNode;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(props, theme);\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ labelStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size = 24 }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { LabelProps } from './Label';\nimport { getTextStyles } from './Text.styles';\n\nexport interface LabelStyles {\n  labelStyle: TextStyle;\n}\n\nexport type GetLabelStyles = (props: LabelProps, theme: Theme) => LabelStyles;\n\nexport const getLabelStyles: GetLabelStyles = (props, theme) => {\n  const { getStyles, ...rest } = props;\n  const { textStyle } = getTextStyles(rest, theme);\n\n  return { labelStyle: textStyle };\n};\n","import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetLabelStyles, getLabelStyles, LabelStyles } from './Label.styles';\nimport { Text, TextProps } from './Text';\n\n// tslint:disable-next-line\n// @ts-ignore\nexport interface LabelProps extends TextProps {\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetLabelStyles, DeepPartial<LabelStyles>>;\n}\n\nexport const Label = (props: LabelProps) => {\n  const { children, getStyles, ...textProps } = props;\n  const theme = useTheme();\n\n  const { labelStyle } = mergeStyles(\n    getLabelStyles,\n    getStyles,\n    theme.components.getLabelStyles,\n  )(props, theme);\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      getStyles={() => ({ textStyle: labelStyle })}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { GetWheelPickerStyles } from '../components/WheelPicker/WheelPicker.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getWheelPickerStyles?: GetWheelPickerStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}