{"version":3,"sources":["webpack:///./src/components/Badge/Badge.mdx","webpack:///./src/components/Badge/Badge.styles.ts","webpack:///./src/components/Badge/Badge.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_docz","_Badge","_theme","_Layout","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","name","id","parentName","Playground","__position","__code","__scope","Badge","ThemeContext","Box","Consumer","theme","Object","keys","fills","solid","map","color","flexDirection","key","isSolid","shape","PropsTable","of","React","Component","_Box","getBadgeVariables","sizes","small","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","getBadgeStyles","_ref","size","badgeVariables","shapeStyles","shapeMapping","colors","subtle","_badgeVariables$sizes","containerStyle","_objectSpread2","alignItems","alignSelf","backgroundColor","display","justifyContent","textStyle","textTransform","displayName","__docgenInfo","description","defaultValue","required","type","fontFamilies","fontWeights","headingSizes","paragraphSizes","textSizes","elevations","controlBorderRadius","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","_interopRequireWildcard","_reactNative","_mergeStyles2","_Typography","withTheme","children","_props$color","getStyles","_props$isSolid","_props$shape","_props$size","testID","_mergeStyles","mergeStyles","View","style","Strong","__class"],"mappings":"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","file":"static/js/26.d2ecd6f6.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport Badge from './Badge';\nimport { ThemeContext } from '../../theme';\nimport { Box } from '../Layout';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"strong\" components={components} parentName=\"p\">{`Note`}</MDXTag>{` Accessibility/Interactivity is a responsibility of a wrapping component`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"default\"}}>{`Default`}</MDXTag>\n<Playground __position={0} __code={'<ThemeContext.Consumer>\\n  {theme => (\\n    <Box>\\n      {Object.keys(theme.fills.solid).map(color => (\\n        <Box flexDirection=\\\"row\\\" key={color}>\\n          <Badge color={color}>{color}</Badge>\\n          <Badge color={color} isSolid>\\n            {color}\\n          </Badge>\\n        </Box>\\n      ))}\\n    </Box>\\n  )}\\n</ThemeContext.Consumer>'} __scope={{props: this ? this.props : props,Badge,ThemeContext,Box}}>\n  <ThemeContext.Consumer>\n    {theme => (\n      <Box>\n        {Object.keys(theme.fills.solid).map(color => (\n          <Box flexDirection=\"row\" key={color}>\n            <Badge color={color}>{color}</Badge>\n            <Badge color={color} isSolid>\n              {color}\n            </Badge>\n          </Box>\n        ))}\n      </Box>\n    )}\n  </ThemeContext.Consumer>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"pills\"}}>{`Pills`}</MDXTag>\n<Playground __position={1} __code={'<ThemeContext.Consumer>\\n  {theme => (\\n    <Box>\\n      {Object.keys(theme.fills.solid).map(color => (\\n        <Box flexDirection=\\\"row\\\" key={color}>\\n          <Badge shape=\\\"pill\\\" color={color}>\\n            {color}\\n          </Badge>\\n          <Badge shape=\\\"pill\\\" color={color} isSolid>\\n            {color}\\n          </Badge>\\n        </Box>\\n      ))}\\n    </Box>\\n  )}\\n</ThemeContext.Consumer>'} __scope={{props: this ? this.props : props,Badge,ThemeContext,Box}}>\n  <ThemeContext.Consumer>\n    {theme => (\n      <Box>\n        {Object.keys(theme.fills.solid).map(color => (\n          <Box flexDirection=\"row\" key={color}>\n            <Badge shape=\"pill\" color={color}>\n              {color}\n            </Badge>\n            <Badge shape=\"pill\" color={color} isSolid>\n              {color}\n            </Badge>\n          </Box>\n        ))}\n      </Box>\n    )}\n  </ThemeContext.Consumer>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Badge} />\n           </MDXTag>\n  }\n}\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColor, Fills, Theme } from '../../theme/ThemeInterface';\nimport { Shape, shapeMapping } from '../Layout/Box';\n\nexport interface BadgeSizes {\n  small: ViewStyle;\n  medium: ViewStyle;\n  large: ViewStyle;\n}\n\nexport type BadgeSize = keyof BadgeSizes;\n\nexport interface BadgeVariables {\n  fills: Fills;\n  sizes: BadgeSizes;\n}\nexport const getBadgeVariables = (theme: Theme): BadgeVariables => {\n  return {\n    fills: theme.fills,\n\n    sizes: {\n      small: {\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface BadgeStylesProps {\n  shape: Shape;\n  size: BadgeSize;\n  color: FillColor;\n  isSolid: boolean;\n}\n\nexport interface BadgeStyles {\n  textStyle: TextStyle;\n  containerStyle: ViewStyle;\n}\n\nexport type GetBadgeStyles = (\n  props: BadgeStylesProps,\n  theme: Theme,\n) => BadgeStyles;\n\nexport const getBadgeStyles: GetBadgeStyles = (\n  { size, color, isSolid, shape },\n  theme,\n) => {\n  const badgeVariables = getBadgeVariables(theme);\n\n  const shapeStyles = shapeMapping[shape];\n  const fills = isSolid\n    ? badgeVariables.fills.solid\n    : badgeVariables.fills.subtle;\n\n  const colors = fills[color];\n  const { height, paddingLeft, paddingRight } = badgeVariables.sizes[size];\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      alignSelf: 'flex-start',\n      backgroundColor: colors.backgroundColor,\n      display: 'flex',\n      flexDirection: 'row',\n      height,\n      justifyContent: 'center',\n      paddingLeft,\n      paddingRight,\n      ...shapeStyles,\n    },\n    textStyle: {\n      color: colors.color,\n      textTransform: 'uppercase',\n    },\n  };\n};\ntry {\n    // @ts-ignore\n    getBadgeVariables.displayName = \"getBadgeVariables\";\n    // @ts-ignore\n    getBadgeVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getBadgeVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Badge/Badge.styles.ts#getBadgeVariables\"] = { docgenInfo: getBadgeVariables.__docgenInfo, name: \"getBadgeVariables\", path: \"src/components/Badge/Badge.styles.ts#getBadgeVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    getBadgeStyles.displayName = \"getBadgeStyles\";\n    // @ts-ignore\n    getBadgeStyles.__docgenInfo = { \"description\": \"\", \"displayName\": \"getBadgeStyles\", \"props\": { \"shape\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shape\", \"required\": true, \"type\": { \"name\": \"Shape\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": true, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": true, \"type\": { \"name\": \"\\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSolid\", \"required\": true, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Badge/Badge.styles.ts#getBadgeStyles\"] = { docgenInfo: getBadgeStyles.__docgenInfo, name: \"getBadgeStyles\", path: \"src/components/Badge/Badge.styles.ts#getBadgeStyles\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme, withTheme } from '../../theme';\nimport { FillColor } from '../../theme/ThemeInterface';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport Box, { Shape } from '../Layout/Box';\nimport { Strong } from '../Typography';\nimport {\n  BadgeSize,\n  BadgeStyles,\n  GetBadgeStyles,\n  getBadgeStyles,\n} from './Badge.styles';\n\nexport interface BadgeProps {\n  children: React.ReactNode;\n  theme: Theme;\n  color?: FillColor;\n  size?: BadgeSize;\n  shape?: Shape;\n  isSolid?: boolean;\n  getStyles?: ReplaceReturnType<GetBadgeStyles, DeepPartial<BadgeStyles>>;\n  testID?: string;\n}\n\nconst BadgeBase = (props: BadgeProps) => {\n  const {\n    children,\n    color = 'neutral',\n    getStyles,\n    isSolid = false,\n    shape = 'rounded',\n    size = 'small',\n    theme,\n    testID,\n  } = props;\n\n  const { containerStyle, textStyle } = mergeStyles(getBadgeStyles, getStyles)(\n    { size, color, isSolid, shape },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      <Strong\n        size={size}\n        getStyles={() => ({\n          textStyle,\n        })}\n      >\n        {children}\n      </Strong>\n    </View>\n  );\n};\n\nexport const Badge = withTheme(BadgeBase);\nexport default Badge;\ntry {\n    // @ts-ignore\n    Badge.displayName = \"Badge\";\n    // @ts-ignore\n    Badge.__docgenInfo = { \"description\": \"\", \"displayName\": \"Badge\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"shape\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shape\", \"required\": false, \"type\": { \"name\": \"Shape\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetBadgeStyles, DeepPartial<BadgeStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Badge/Badge.tsx#Badge\"] = { docgenInfo: Badge.__docgenInfo, name: \"Badge\", path: \"src/components/Badge/Badge.tsx#Badge\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    __class.displayName = \"__class\";\n    // @ts-ignore\n    __class.__docgenInfo = { \"description\": \"\", \"displayName\": \"__class\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"shape\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"shape\", \"required\": false, \"type\": { \"name\": \"Shape\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetBadgeStyles, DeepPartial<BadgeStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Badge/Badge.tsx#__class\"] = { docgenInfo: __class.__docgenInfo, name: \"__class\", path: \"src/components/Badge/Badge.tsx#__class\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}