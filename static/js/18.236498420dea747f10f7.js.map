{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/CopyTextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/CopyTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Spacing.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_reactPowerplug","_Layout","_CopyTextInput","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","State","Box","CopyTextInput","marginBottom","initial","value","_ref2","state","setState","onChangeText","text","onCopy","console","log","placeholder","isMDXComponent","React","_interopRequireWildcard","_reactNative","_icons","_theme","_IconTextInput","CopyTextInputBase","innerRef","textInputWithIconProps","theme","useTheme","createElement","IconTextInput","ref","rightIcon","TouchableOpacity","onPress","Clipboard","setString","Icon","name","size","color","colors","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","getTextInputVariables","base","backgroundColor","background","white","borderColor","border","borderWidth","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlHeights","controlPaddings","medium","large","getTextInputStyles","isDisabled","isInvalid","textInputVariables","sizeStyles","focusedStyle","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","shapeMapping","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","elevation","elevations","shape","_shape","_x","apply","arguments","toString","children","propStyle","testID","viewStyles","transformedStyles","pureStyles","prop","styleFn","push","_Box","hasGrid","margin","marginEnd","marginHorizontal","marginLeft","marginRight","marginStart","marginTop","marginVertical","padding","paddingBottom","paddingEnd","paddingStart","paddingTop","paddingVertical","Spacing","marshalledProps","gridPointMultiplier","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_Spacing","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles"],"mappings":"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","file":"static/js/18.8e13567e.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { Box } from '../Layout';\nimport { CopyTextInput } from './CopyTextInput';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"copytextinput\"\n    }}>{`CopyTextInput`}</h1>\n    <p>{`Adds a Copy icon when there is an input, and upon clicking it, it will save the content to clipboard. Composes `}<inlineCode parentName=\"p\">{`IconTextInput`}</inlineCode></p>\n    <Playground __position={0} __code={'<Box marginBottom={24}>\\n  <State initial={{ value: \\'\\' }}>\\n    {({ state, setState }) => (\\n      <CopyTextInput\\n        onChangeText={text => setState({ value: text })}\\n        value={state.value}\\n        onCopy={text => console.log(\\'Copied\\', text)}\\n        placeholder=\\\"Text input wiht copy\\\"\\n        // ...TextInput props\\n      />\\n    )}\\n  </State>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      Box,\n      CopyTextInput\n    }} mdxType=\"Playground\">\n  <Box marginBottom={24} mdxType=\"Box\">\n    <State initial={{\n          value: ''\n        }} mdxType=\"State\">\n      {({\n            state,\n            setState\n          }) => <CopyTextInput onChangeText={text => setState({\n            value: text\n          })} value={state.value} onCopy={text => console.log('Copied', text)} placeholder=\"Text input wiht copy\" // ...TextInput props\n          mdxType=\"CopyTextInput\" />}\n    </State>\n  </Box>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport {\n  Clipboard,\n  TextInput as RNTextInput,\n  TouchableOpacity,\n} from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface CopyTextInputProps extends IconTextInputProps {\n  onCopy?: (text: string) => void;\n}\n\nconst CopyTextInputBase = (props: CopyTextInputProps) => {\n  const { onCopy, innerRef, value, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      rightIcon={\n        value ? (\n          <TouchableOpacity\n            onPress={() => {\n              Clipboard.setString(value);\n              if (onCopy) {\n                onCopy(value);\n              }\n            }}\n          >\n            <Icon name=\"copy\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : null\n      }\n      value={value}\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const CopyTextInput = React.forwardRef<RNTextInput, CopyTextInputProps>(\n  (props, ref) => <CopyTextInputBase {...props} innerRef={ref} />,\n);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface TextInputSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type TextInputSize = keyof TextInputSizes;\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: TextInputSizes;\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: TextInputSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputSize,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: TextInputSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","import * as React from 'react';\n\nimport { Box, BoxProps } from './Box';\n\nexport type GridScale =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18;\n\nconst DEFAULT_GRD_POINT_MULTPLIER = 8;\n\nexport interface SpacingProps extends BoxProps {\n  gridPointMultiplier?: number;\n  height?: GridScale;\n\n  margin?: GridScale;\n  marginBottom?: GridScale;\n  marginEnd?: GridScale;\n  marginHorizontal?: GridScale;\n  marginLeft?: GridScale;\n  marginRight?: GridScale;\n  marginStart?: GridScale;\n  marginTop?: GridScale;\n  marginVertical?: GridScale;\n\n  padding?: GridScale;\n  paddingBottom?: GridScale;\n  paddingEnd?: GridScale;\n  paddingHorizontal?: GridScale;\n  paddingLeft?: GridScale;\n  paddingRight?: GridScale;\n  paddingStart?: GridScale;\n  paddingTop?: GridScale;\n  paddingVertical?: GridScale;\n}\n\nconst hasGrid = {\n  height: true,\n\n  margin: true,\n  marginBottom: true,\n  marginEnd: true,\n  marginHorizontal: true,\n  marginLeft: true,\n  marginRight: true,\n  marginStart: true,\n  marginTop: true,\n  marginVertical: true,\n\n  padding: true,\n  paddingBottom: true,\n  paddingEnd: true,\n  paddingHorizontal: true,\n  paddingLeft: true,\n  paddingRight: true,\n  paddingStart: true,\n  paddingTop: true,\n  paddingVertical: true,\n};\n\nexport const Spacing = (props: SpacingProps) => {\n  const marshalledProps = { ...props };\n\n  for (const prop in props) {\n    // @ts-ignore\n    if (hasGrid[prop]) {\n      // @ts-ignore\n      marshalledProps[prop] =\n        // @ts-ignore\n        props[prop] *\n        (props.gridPointMultiplier || DEFAULT_GRD_POINT_MULTPLIER);\n    }\n  }\n\n  return <Box {...marshalledProps} />;\n};\n","export * from './Box';\nexport * from './Spacing';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}