{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/Collapsible.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Collapsible/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Responsive.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useElement.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useLockBodyScroll.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useMeasure.ts","/home/travis/build/WeTrustPlatform/paramount/src/hooks/usePrevious.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_docz","_","_Box","_Typography","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","Props","Collapsible","Box","Text","initial","_ref2","on","toggle","isAnimated","shouldMoveWithEndOfContent","initialIsOpen","isOpen","onOpen","onClose","getStyles","touchableStyle","outerWrapperStyle","contentWrapperStyle","textStyle","iconWrapperStyle","title","header","marginVertical","justifyContent","alignItems","height","backgroundColor","color","paddingTop","_ref3","of","isMDXComponent","getCollapsibleStyles","theme","overflow","paddingLeft","display","flexDirection","React","_interopRequireWildcard","_reactNative","_native","_Animation","_hooks","_theme","_mergeStyles2","_Helpers","_Icon","_Collapsible","AnimatedView","animated","View","_props$isAnimated","_props$shouldMoveWith","children","_props$initialIsOpen","testID","_props$onOpen","_props$onClose","accessibilityProps","useTheme","_React$useState","useState","_React$useState2","_slicedToArray2","isOpened","setIsOpened","_React$useState3","initialMeasurements","_React$useState4","contentMeasurements","setContentMeasurements","isControlledUsage","isFinalOpened","_mergeStyles","mergeStyles","handlePress","useCallback","useSpring","config","springDefaultConfig","headerToggle","createElement","TouchableOpacity","onPress","style","Fragment","size","Icon","name","colors","text","contentWrapper","_objectSpread2","ViewMeasure","onMeasure","Object","keys","forEach","key","defineProperty","exports","enumerable","get","isWindowAboveMinWidth","minWidth","Dimensions","width","isWindowBelowMaxWidth","maxWidth","Responsive","isAboveMinWidth","isBelowMaxWidth","matches","_useMeasure2","viewProps","isRenderProp","_useMeasure","useMeasure","forwardRef","measurements","onLayout","ref","_ViewMeasure","_Responsive","Feather","_Text","IconTag","concat","result","replace","toUpperCase","charAt","slice","convertToPascal","getTextColor","friction","tension","_usePrevious","_useElement","_useLockBodyScroll","_exenv","useElement","element","useRef","useEffect","rootElem","rootElement","rootContainer","document","setAttribute","body","lastElementChild","insertBefore","nextElementSibling","current","appendChild","remove","childNodes","length","canUseDOM","useLockBodyScroll","isLocked","originalStyle","window","getComputedStyle","unlock","pageX","pageY","x","y","arguments","undefined","createRef","setMeasurements","handleMeasure","layout","UIManager","measure","findNodeHandle","newMeasurements","e","nativeEvent","usePrevious","value"],"mappings":"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","file":"static/js/10.ebbf8167.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { Collapsible } from '.';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Collapsible\\n      isAnimated={true}\\n      // The header will move to the end of the content when revealing content\\n      shouldMoveWithEndOfContent={false}\\n      initialIsOpen={false}\\n      isOpen={on}\\n      onOpen={toggle}\\n      onClose={toggle}\\n      getStyles={() => ({\\n        touchableStyle: {},\\n        outerWrapperStyle: {},\\n        contentWrapperStyle: {},\\n        textStyle: {},\\n        iconWrapperStyle: {},\\n      })}\\n      title=\\\"Stays at top of content\\\"\\n      header={null}\\n    >\\n      <Box\\n        marginVertical={16}\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        height={300}\\n        backgroundColor=\\\"#67c6bb\\\"\\n      >\\n        <Text color=\\\"white\\\">Content of the Collapsible</Text>\\n      </Box>\\n    </Collapsible>\\n  )}\\n</Toggle>\\n<Box paddingTop={24}>\\n  <Toggle initial={false}>\\n    {({ on, toggle }) => (\\n      <Collapsible\\n        isAnimated={true}\\n        shouldMoveWithEndOfContent\\n        isOpen={on}\\n        onOpen={toggle}\\n        onClose={toggle}\\n        title=\\\"Moves with end of content\\\"\\n      >\\n        <Box\\n          marginVertical={16}\\n          justifyContent=\\\"center\\\"\\n          alignItems=\\\"center\\\"\\n          height={300}\\n          backgroundColor=\\\"#67c6bb\\\"\\n        >\\n          <Text color=\\\"white\\\">Content of the Collapsible</Text>\\n        </Box>\\n      </Collapsible>\\n    )}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      Playground,\n      Props,\n      Collapsible,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Collapsible isAnimated={true} // The header will move to the end of the content when revealing content\n        shouldMoveWithEndOfContent={false} initialIsOpen={false} isOpen={on} onOpen={toggle} onClose={toggle} getStyles={() => ({\n          touchableStyle: {},\n          outerWrapperStyle: {},\n          contentWrapperStyle: {},\n          textStyle: {},\n          iconWrapperStyle: {}\n        })} title=\"Stays at top of content\" header={null} mdxType=\"Collapsible\">\n        <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\">\n          <Text color=\"white\" mdxType=\"Text\">Content of the Collapsible</Text>\n        </Box>\n      </Collapsible>}\n  </Toggle>\n  <Box paddingTop={24} mdxType=\"Box\">\n    <Toggle initial={false} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Collapsible isAnimated={true} shouldMoveWithEndOfContent isOpen={on} onOpen={toggle} onClose={toggle} title=\"Moves with end of content\" mdxType=\"Collapsible\">\n          <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\">\n            <Text color=\"white\" mdxType=\"Text\">Content of the Collapsible</Text>\n          </Box>\n        </Collapsible>}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Collapsible} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface CollapsibleStyles {\n  touchableStyle: ViewStyle;\n  outerWrapperStyle: ViewStyle;\n  contentWrapperStyle: ViewStyle;\n  textStyle: ViewStyle;\n  iconWrapperStyle: ViewStyle;\n}\n\nexport type GetCollapsibleStyles = (\n  checkboxStylesProps: {},\n  theme: Theme,\n) => CollapsibleStyles;\n\nexport const getCollapsibleStyles: GetCollapsibleStyles = (props, theme) => {\n  return {\n    contentWrapperStyle: {\n      overflow: 'hidden',\n    },\n    iconWrapperStyle: {\n      paddingLeft: 4,\n    },\n    outerWrapperStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    textStyle: {},\n    touchableStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { AccessibilityProps, TouchableOpacity, View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { initialMeasurements } from '../../hooks';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { ViewMeasure } from '../Helpers';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  CollapsibleStyles,\n  GetCollapsibleStyles,\n  getCollapsibleStyles,\n} from './Collapsible.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface CollapsibleProps extends AccessibilityProps {\n  /** Adds animation when revealing the content @default true */\n  isAnimated?: boolean;\n  /** The header will move to the end of the content when revealing content @default false */\n  shouldMoveWithEndOfContent?: boolean;\n  children?: React.ReactNode;\n  /** Uncontrolled usage of the component */\n  initialIsOpen?: boolean;\n  /** Controlled usage of the component */\n  isOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n  getStyles?: ReplaceReturnType<\n    GetCollapsibleStyles,\n    DeepPartial<CollapsibleStyles>\n  >;\n  title?: string;\n  header?: React.ReactNode;\n  testID?: string;\n}\n\nexport const Collapsible = (props: CollapsibleProps) => {\n  const {\n    isAnimated = true,\n    shouldMoveWithEndOfContent = false,\n    title,\n    children,\n    header,\n    initialIsOpen = false,\n    isOpen,\n    getStyles,\n    testID,\n    onOpen = () => undefined,\n    onClose = () => undefined,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n  const [isOpened, setIsOpened] = React.useState(initialIsOpen);\n  const [contentMeasurements, setContentMeasurements] = React.useState(\n    initialMeasurements,\n  );\n\n  const isControlledUsage = typeof isOpen === 'boolean';\n  const isFinalOpened = isControlledUsage ? isOpen : isOpened;\n\n  const {\n    touchableStyle,\n    outerWrapperStyle,\n    contentWrapperStyle,\n    textStyle,\n    iconWrapperStyle,\n  } = mergeStyles(getCollapsibleStyles, getStyles)({}, theme);\n\n  const handlePress = React.useCallback(() => {\n    if (isControlledUsage) {\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    } else {\n      if (isOpened) {\n        setIsOpened(false);\n        onClose();\n      } else {\n        setIsOpened(true);\n        onOpen();\n      }\n    }\n  }, [isOpened, isOpen, isControlledUsage]);\n\n  const { height } = useSpring({\n    config: springDefaultConfig,\n\n    height: isFinalOpened ? contentMeasurements.height : 0,\n  });\n\n  const headerToggle = (\n    <TouchableOpacity\n      testID={testID}\n      onPress={handlePress}\n      style={touchableStyle}\n      {...accessibilityProps}\n    >\n      <View style={outerWrapperStyle}>\n        {header || (\n          <>\n            <Text size=\"large\" getStyles={() => ({ textStyle })}>\n              {title}\n            </Text>\n            <View style={iconWrapperStyle}>\n              <Icon\n                size={28}\n                name={isFinalOpened ? 'chevron-up' : 'chevron-down'}\n                color={theme.colors.text.default}\n              />\n            </View>\n          </>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  const contentWrapper = isAnimated ? (\n    // @ts-ignore\n    <AnimatedView style={{ ...contentWrapperStyle, height }}>\n      <ViewMeasure onMeasure={setContentMeasurements}>{children}</ViewMeasure>\n    </AnimatedView>\n  ) : (\n    <View style={contentWrapperStyle}>{isFinalOpened && children}</View>\n  );\n\n  if (shouldMoveWithEndOfContent) {\n    return (\n      <>\n        {contentWrapper}\n        {headerToggle}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {headerToggle}\n      {contentWrapper}\n    </>\n  );\n};\n","export * from './Collapsible';\n","import * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nexport type ResponsiveRenderPropType = (\n  props: ResponsiveChildrenProps,\n) => React.ReactNode;\n\nexport interface ResponsiveChildrenProps {\n  matches: boolean;\n}\n\nexport interface ResponsiveProps {\n  children: React.ReactNode | ResponsiveRenderPropType;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\nexport const isWindowAboveMinWidth = (minWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width > minWidth;\n};\n\nexport const isWindowBelowMaxWidth = (maxWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width < maxWidth;\n};\n\nexport const Responsive = (props: ResponsiveProps) => {\n  const { children, minWidth, maxWidth } = props;\n\n  let isAboveMinWidth = true;\n  let isBelowMaxWidth = true;\n\n  if (minWidth) {\n    isAboveMinWidth = isWindowAboveMinWidth(minWidth);\n  }\n\n  if (maxWidth) {\n    isBelowMaxWidth = isWindowBelowMaxWidth(maxWidth);\n  }\n\n  const isRenderProp = typeof children === 'function';\n  const matches = isAboveMinWidth && isBelowMaxWidth;\n\n  // @ts-ignore\n  return isRenderProp ? children({ matches }) : matches ? children : null;\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderPropType = (\n  props: Measurements,\n) => React.ReactNode;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children: React.ReactNode | ViewMeasureRenderPropType;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const { forwardRef, measurements, onLayout } = useMeasure({ onMeasure });\n\n  return (\n    <View\n      ref={forwardRef}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","export * from './ViewMeasure';\nexport * from './Responsive';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 450,\n};\n","export * from './usePrevious';\nexport * from './useMeasure';\nexport * from './useElement';\nexport * from './useLockBodyScroll';\n","import { canUseDOM } from 'exenv';\nimport * as React from 'react';\n\nconst createElement = (id?: string) => {\n  const rootContainer = document.createElement('div');\n\n  if (id) rootContainer.setAttribute('id', id);\n\n  return rootContainer;\n};\n\nconst addRootElement = (rootElem: Element) => {\n  if (document.body.lastElementChild) {\n    document.body.insertBefore(\n      rootElem,\n      document.body.lastElementChild.nextElementSibling,\n    );\n  }\n};\n\nexport const useElement = (id?: string) => {\n  const element = React.useRef<Element>(null);\n\n  React.useEffect(() => {\n    const rootElement = createElement(id);\n\n    // If there is no existing DOM element, add a new one.\n    addRootElement(rootElement);\n\n    if (element.current) rootElement.appendChild(element.current);\n\n    return () => {\n      if (element.current) element.current.remove();\n      if (rootElement.childNodes.length === -1) rootElement.remove();\n    };\n  }, []);\n\n  const getRootElem = () => {\n    if (!element.current && canUseDOM) {\n      // @ts-ignore\n      element.current = document.createElement('div');\n    }\n    return element.current;\n  };\n\n  return getRootElem();\n};\n","import * as React from 'react';\n\nexport const useLockBodyScroll = ({ isLocked }: { isLocked: boolean }) => {\n  React.useEffect(() => {\n    const originalStyle = window.getComputedStyle(document.body).overflow;\n\n    const lock = () => {\n      document.body.style.overflow = 'hidden';\n    };\n\n    const unlock = () => {\n      document.body.style.overflow = originalStyle;\n    };\n\n    if (isLocked) lock();\n    else unlock();\n\n    return () => unlock();\n  }, [isLocked]);\n};\n","import * as React from 'react';\nimport {\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps = {}) => {\n  const forwardRef = React.createRef<any>();\n  const { onMeasure } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    // Use the value from here, isntead of inside UIManager.measure callback\n    // Async behavior will nullify nativeEvent\n    const layout = e.nativeEvent.layout;\n    handleMeasure(layout);\n  };\n\n  const handleMeasure = (layout?: LayoutRectangle) => {\n    UIManager.measure(\n      // @ts-ignore\n      findNodeHandle(forwardRef.current)!,\n      (x, y, width, height, pageX, pageY) => {\n        const newMeasurements = {\n          ...measurements,\n          ...layout,\n          pageX,\n          pageY,\n        };\n\n        setMeasurements(newMeasurements);\n\n        if (onMeasure) {\n          onMeasure(newMeasurements);\n        }\n      },\n    );\n  };\n\n  return {\n    forwardRef,\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n","import * as React from 'react';\n\nexport const usePrevious = <TValue = any>(value: TValue) => {\n  const ref = React.useRef<TValue>(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n"],"sourceRoot":""}