{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$size","size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","globalGetInitials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","Avatar","props","source","_props$size","_props$isSolid","_props$getInitials","getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","getStyles","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","Icon","IconTag","Feather","concat","result","matches","charAt","convertToPascal","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","colors","text","layoutProps","MDXLayout","MDXContent","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","ListItem","___WEBPACK_IMPORTED_MODULE_7__","onPress","console","log","rightIcon","___WEBPACK_IMPORTED_MODULE_6__","leftIcon","___WEBPACK_IMPORTED_MODULE_5__","uri","label","description","isDisabled","imageWrapperStyle","leftWrapperStyle","textWrapperStyle","focusBackgroundColor","wrapperStyle","of","isMDXComponent","getListItemStyles","objectSpread","background","content","borderBottomWidth","borderColor","border","controlHeights","paddingLeft","controlPaddings","paddingRight","greyDark","greyLight","marginRight","flexDirection","textSizes","_props$isDisabled","_props$rightIcon","accessibilityProps","objectWithoutProperties","TouchableHighlight","esm_extends","disabled","underlayColor","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","textAlign","alignSelf","fontStyle","textTransform","children","_props$fontFamily","_props$align","_props$isInline","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","overlay","greyDefault","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","danger","info","success","warning","button","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","large","medium","small","paragraphSizes","controlBorderRadius","ThemeContext","React","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/20.6a366468.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar, Icon, ListItem } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  rightIcon={<Icon color=\\\"#7e7e7e\\\" size={24} name=\\\"chevron-right\\\" />}\\n  leftIcon={\\n    <Avatar size={45} source={{ uri: \\'https://picsum.photos/200/200\\' }} />\\n  }\\n  label=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  getStyles={(props, theme) => ({\\n    imageWrapperStyle: {},\\n    leftWrapperStyle: {},\\n    textWrapperStyle: {},\\n    containerStyle: {},\\n    textStyle: {},\\n    focusBackgroundColor: \\'#fafafa\\',\\n    wrapperStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar,\n      Icon,\n      ListItem\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} rightIcon={<Icon color=\"#7e7e7e\" size={24} name=\"chevron-right\" mdxType=\"Icon\" />} leftIcon={<Avatar size={45} source={{\n        uri: 'https://picsum.photos/200/200'\n      }} mdxType=\"Avatar\" />} label=\"Some label\" description=\"Some description\" size=\"large\" isDisabled={false} getStyles={(props, theme) => ({\n        imageWrapperStyle: {},\n        leftWrapperStyle: {},\n        textWrapperStyle: {},\n        containerStyle: {},\n        textStyle: {},\n        focusBackgroundColor: '#fafafa',\n        wrapperStyle: {}\n      })} mdxType=\"ListItem\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ListItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights[size],\n      justifyContent: 'center',\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ControlSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? // Use system font on the Web\n      {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : // Use default font families by React Native by default. Setting it to undefined will use the default font\n      {\n        heading: undefined,\n        mono: undefined,\n        text: undefined,\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetColumnStyles } from '../components/Grid/Column.styles';\nimport { GetContainerStyles } from '../components/Grid/Container.styles';\nimport { GetRowStyles } from '../components/Grid/Row.styles';\nimport { GetIconTextInputStyles } from '../components/Inputs/IconTextInput.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading?: string;\n  mono?: string;\n  text?: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetIconTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}