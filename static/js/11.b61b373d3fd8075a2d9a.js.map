{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/LabeledCheckbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/DialogPicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/DialogPicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButtonWrapper.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectList.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/SelectListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/SelectList/index.ts"],"names":["getCheckboxVariables","theme","base","backgroundColor","colors","background","white","borderColor","border","default","borderWidth","height","width","checked","primaryDefault","checkedFocus","primaryDark","disabled","greyDark","shape","circle","borderRadius","square","controlBorderRadius","small","uncheckedFocus","greyLight","getCheckboxStyles","_ref","isChecked","isDisabled","checkboxVariables","checkboxFocusBackgroundColor","checkboxStyle","_objectSpread2","React","_interopRequireWildcard","__webpack_require__","_reactNative","_icons","_theme","_mergeStyles2","_Checkbox","Checkbox","props","_props$isChecked","_props$isDisabled","_props$isInteractive","isInteractive","checkedIcon","_props$onChange","onChange","_props$shape","getStyles","testID","accessibilityProps","_objectWithoutProperties2","useTheme","_mergeStyles","mergeStyles","createElement","TouchableHighlight","_extends2","accessible","style","underlayColor","onPress","View","alignItems","display","justifyContent","Icon","name","size","color","text","_Layout","_Typography","LabeledCheckbox","label","_props$position","position","restProps","Box","flexDirection","Text","Spacing","paddingHorizontal","_LabeledCheckbox","getDialogVariables","body","maxHeight","container","elevation","maxWidth","minWidth","zIndex","modalContainer","getDialogStyles","dialogVariables","bodyStyle","containerStyle","modalContainerStyle","_Modal","_Overlay","_Dialog","Dialog","children","footer","header","_props$isBackgroundSc","isBackgroundScrollable","isVisible","_props$onRequestClose","onRequestClose","useHistory","Modal","visible","transparent","Overlay","Object","keys","forEach","key","defineProperty","exports","enumerable","get","FormField","error","description","passThroughProps","marginBottom","Label","cloneElement","_FormField","getListItemVariables","borderBottomWidth","focusBackgroundColor","selected","sizes","fontSize","textSizes","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","sizeStyles","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","_ListItem","ListItem","_props$size","_props$rightIcon","rightIcon","leftIcon","_react2","_interopRequireDefault","_docz","_reactPowerplug","_DialogPicker","_PickerItem","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","Playground","__position","__code","__scope","this","Props","State","DialogPicker","PickerItem","initial","value","_ref2","state","setState","selectedValue","onValueChange","itemValue","itemIndex","pickerStyle","itemStyle","isMDXComponent","_SelectList","_PickerButton","_props$useHistory","_props$selectedValue","_React$useState","useState","_React$useState2","_slicedToArray2","isDialogOpen","setIsDialogOpen","data","Children","toArray","map","child","selectedIndex","findIndex","d","selectedData","selectedLabel","Fragment","PickerButton","title","SelectList","initialScrollIndex","index","getPickerButtonVariables","focus","invalid","danger","placeholderTextColor","muted","getPickerButtonStyles","pickerStylesProps","pickerVariables","controlSizeStyles","textSizeStyles","rightContainerStyle","right","_PickerButtonWrapper","PickerButtonWrapper","TouchableOpacity","SelectListItem","SelectListBase","isMulti","innerRef","flatListProps","handleOnPress","Array","isArray","filter","val","concat","childrenArray","FlatList","ref","keyExtractor","item","getItemLayout","_","length","offset","renderItem","selectListItem","some","selVal","onSelect","forwardRef","_Form","SelectListField","withTheme","memo","_props$index","_props$isSelected","_props$onSelect","listItemProps","e","preventDefault","_SelectListItem","_SelectListField"],"mappings":"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","file":"static/js/11.c3533ebc.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { CheckboxShape } from './Checkbox';\n\nexport interface ShapeStyle {\n  circle: ViewStyle;\n  square: ViewStyle;\n}\n\nexport interface CheckboxVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  checked: ViewStyle;\n  checkedFocus: ViewStyle;\n  uncheckedFocus: ViewStyle;\n  shape: ShapeStyle;\n}\n\nexport const getCheckboxVariables = (theme: Theme): CheckboxVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: 32,\n      width: 32,\n    },\n    checked: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderColor: 'transparent',\n    },\n    checkedFocus: {\n      backgroundColor: theme.colors.background.primaryDark,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n      borderColor: theme.colors.border.default,\n    },\n    shape: {\n      circle: {\n        borderRadius: 999,\n      },\n      square: {\n        borderRadius: theme.controlBorderRadius.small,\n      },\n    },\n    uncheckedFocus: {\n      backgroundColor: theme.colors.background.greyLight,\n    },\n  };\n};\n\nexport interface CheckboxStylesProps {\n  isChecked: boolean;\n  isDisabled: boolean;\n  shape: CheckboxShape;\n}\n\nexport interface CheckboxStyles {\n  checkboxStyle: ViewStyle;\n  checkboxFocusBackgroundColor?: string;\n}\n\nexport type GetCheckboxStyles = (\n  checkboxStylesProps: CheckboxStylesProps,\n  theme: Theme,\n) => CheckboxStyles;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { isChecked, isDisabled, shape },\n  theme,\n) => {\n  const checkboxVariables = getCheckboxVariables(theme);\n\n  return {\n    checkboxFocusBackgroundColor: isChecked\n      ? checkboxVariables.checkedFocus.backgroundColor\n      : checkboxVariables.uncheckedFocus.backgroundColor,\n    checkboxStyle: {\n      ...checkboxVariables.base,\n      ...(isChecked ? checkboxVariables.checked : {}),\n      ...(isDisabled ? checkboxVariables.disabled : {}),\n      ...checkboxVariables.shape[shape],\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  CheckboxStyles,\n  GetCheckboxStyles,\n  getCheckboxStyles,\n} from './Checkbox.styles';\n\nexport type CheckboxShape = 'circle' | 'square';\n\nexport interface CheckboxProps extends AccessibilityProps {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n  /** Sometimes we just want the display of the checkbox  */\n  isInteractive?: boolean;\n  checkedIcon?: React.ReactNode;\n  /** @default square */\n  shape?: CheckboxShape;\n  onChange?: (e: GestureResponderEvent) => void | undefined;\n  getStyles?: ReplaceReturnType<GetCheckboxStyles, DeepPartial<CheckboxStyles>>;\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    isChecked = false,\n    isDisabled = false,\n    isInteractive = true,\n    checkedIcon,\n    onChange = () => null,\n    shape = 'square',\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { checkboxStyle, checkboxFocusBackgroundColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n  )({ isChecked, isDisabled, shape }, theme);\n\n  return (\n    <TouchableHighlight\n      accessible\n      style={checkboxStyle}\n      underlayColor={checkboxFocusBackgroundColor}\n      {...(isInteractive\n        ? {\n            disabled: isDisabled,\n            onPress: onChange,\n          }\n        : {\n            disabled: true,\n          })}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {isChecked\n          ? checkedIcon || (\n              <Icon name=\"check\" size={20} color={theme.colors.text.white} />\n            )\n          : null}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","import * as React from 'react';\n\nimport { TextColor, TextSize } from '../../theme/ThemeInterface';\nimport { Checkbox, CheckboxProps } from '../Checkbox/Checkbox';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\n\nexport interface LabeledCheckboxProps extends CheckboxProps {\n  label?: string;\n  position?: 'left' | 'right';\n  color?: TextColor;\n  size?: TextSize;\n}\n\nexport const LabeledCheckbox = (props: LabeledCheckboxProps) => {\n  const { label, position = 'right', color, size, ...restProps } = props;\n\n  if (!label) {\n    return <Checkbox {...restProps} />;\n  }\n\n  return (\n    <Box flexDirection=\"row\" alignItems=\"center\">\n      {position === 'left' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n      <Spacing paddingHorizontal={1}>\n        <Checkbox {...restProps} />\n      </Spacing>\n      {position === 'right' && (\n        <Text size={size} color={color}>\n          {label}\n        </Text>\n      )}\n    </Box>\n  );\n};\n","export {\n  LabeledCheckbox as Checkbox,\n  LabeledCheckboxProps as CheckboxProps,\n} from './LabeledCheckbox';\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DialogVariables {\n  body: ViewStyle;\n  container: ViewStyle;\n  modalContainer: ViewStyle;\n}\n\nexport const getDialogVariables = (theme: Theme): DialogVariables => {\n  return {\n    body: {\n      maxHeight: 400,\n    },\n    container: {\n      backgroundColor: 'white',\n      elevation: 1,\n      maxWidth: 600,\n      minWidth: 280,\n      position: 'relative',\n      zIndex: 1,\n    },\n    modalContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n\nexport interface DialogStyles {\n  bodyStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDialogStyles = (theme: Theme) => DialogStyles;\n\nexport const getDialogStyles: GetDialogStyles = theme => {\n  const dialogVariables = getDialogVariables(theme);\n\n  return {\n    bodyStyle: dialogVariables.body,\n    containerStyle: dialogVariables.container,\n    modalContainerStyle: dialogVariables.modalContainer,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DialogStyles,\n  GetDialogStyles,\n  getDialogStyles,\n} from './Dialog.styles';\n\n// TODO: Import from react-native when react-native-web implementation is ready\n\nexport interface DialogProps {\n  children: React.ReactNode;\n  /** Prop to be passed to Modal */\n  useHistory?: boolean;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** WWhether body can scroll while dialog is opened */\n  isBackgroundScrollable?: boolean;\n  /** Called when clicking on overlay or pressing Esc, or using back button (requires useHistory to be true) */\n  onRequestClose?: () => void;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  header?: React.ReactNode;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  footer?: React.ReactNode;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetDialogStyles, DeepPartial<DialogStyles>>;\n}\n\nexport const Dialog = (props: DialogProps) => {\n  const {\n    children,\n    footer,\n    header,\n    isBackgroundScrollable = false,\n    isVisible,\n    onRequestClose = () => null,\n    getStyles,\n    useHistory,\n  } = props;\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle, bodyStyle } = mergeStyles(\n    getDialogStyles,\n    getStyles,\n  )(theme);\n\n  return (\n    <Modal\n      useHistory={useHistory}\n      visible={isVisible}\n      transparent\n      onRequestClose={onRequestClose}\n      isBackgroundScrollable={isBackgroundScrollable}\n    >\n      <View style={modalContainerStyle}>\n        <View style={containerStyle}>\n          {header}\n          <View style={bodyStyle}>{children}</View>\n          {footer}\n        </View>\n        <Overlay onPress={onRequestClose} />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Dialog';\n","import * as React from 'react';\n\nimport { Box } from '../Layout';\nimport { Label, Text } from '../Typography';\n\nexport interface FormFieldProps {\n  error?: string | null;\n  label?: string | null;\n  description?: string | null;\n  children?: React.ReactNode;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const { label, error, children, description, ...passThroughProps } = props;\n\n  return (\n    <Box>\n      {label && (\n        <Box marginBottom={4}>\n          <Label>{label}</Label>\n        </Box>\n      )}\n      <Box marginBottom={4}>\n        {/*\n        // @ts-ignore: TODO: Find right way to type this */}\n        {React.cloneElement(children, passThroughProps)}\n      </Box>\n      {error && (\n        <Box marginBottom={4}>\n          <Text color=\"danger\">{error}</Text>\n        </Box>\n      )}\n      {description && <Text>{description}</Text>}\n    </Box>\n  );\n};\n","export * from './FormField';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.white,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { DialogPicker } from './DialogPicker';\nimport { PickerItem } from './PickerItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"dialogpicker\"\n    }}>{`DialogPicker`}</h1>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <DialogPicker\\n      useHistory={false}\\n      header={null}\\n      size=\\\"large\\\"\\n      selectedValue={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      getStyles={(props, theme) => ({\\n        pickerStyle: {},\\n        itemStyle: {},\\n      })}\\n    >\\n      <PickerItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <PickerItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <PickerItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <PickerItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <PickerItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <PickerItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <PickerItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <PickerItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <PickerItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <PickerItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <PickerItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <PickerItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <PickerItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <PickerItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <PickerItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <PickerItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <PickerItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <PickerItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <PickerItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </DialogPicker>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      DialogPicker,\n      PickerItem\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <DialogPicker useHistory={false} header={null} size=\"large\" selectedValue={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} getStyles={(props, theme) => ({\n          pickerStyle: {},\n          itemStyle: {}\n        })} mdxType=\"DialogPicker\">\n        <PickerItem label=\"C\" value=\"c\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"C#\" value=\"c#\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"C++\" value=\"c++\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"CSS\" value=\"css\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Elixir\" value=\"elixir\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Elm\" value=\"elm\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Erlang\" value=\"erlang\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Go\" value=\"go\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Haskell\" value=\"haskell\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"HTML\" value=\"html\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Java\" value=\"java\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"JavaScript\" value=\"js\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Lua\" value=\"lua\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Python\" value=\"python\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"R\" value=\"r\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Ruby\" value=\"ruby\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Rust\" value=\"rust\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Switft\" value=\"swift\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Typescript\" value=\"typescript\" mdxType=\"PickerItem\" />\n      </DialogPicker>}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { PickerProps as RNPickerProps } from 'react-native';\n\nimport { Dialog } from '../Dialog';\nimport { SelectList, SelectListItemBaseProps } from '../SelectList';\nimport { GetPickerButtonStylesProp, PickerButton } from './PickerButton';\nimport { PickerButtonSize } from './PickerButton.styles';\n\nexport interface DialogPickerProps extends RNPickerProps {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  /** Prop to be passed to Dialog */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactNode;\n  getStyles?: GetPickerButtonStylesProp;\n  size?: PickerButtonSize;\n}\n\nconst SELECTED_INDEX_OFFSET = 3;\n\nexport const DialogPicker = (props: DialogPickerProps) => {\n  const {\n    header,\n    getStyles,\n    useHistory = false,\n    selectedValue = null,\n    onValueChange,\n    children,\n    size = 'medium',\n  } = props;\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n  const selectedIndex = data.findIndex(d => d.value === selectedValue);\n  const selectedData = selectedIndex >= 0 ? data[selectedIndex] : null;\n  const selectedLabel = selectedData ? selectedData.label : null;\n\n  return (\n    <>\n      <PickerButton\n        onPress={() => setIsDialogOpen(true)}\n        getStyles={getStyles}\n        size={size}\n        title={selectedLabel}\n      />\n      <Dialog\n        header={header}\n        isVisible={isDialogOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsDialogOpen(false)}\n      >\n        <SelectList\n          initialScrollIndex={selectedIndex - SELECTED_INDEX_OFFSET}\n          selectedValue={selectedValue}\n          onValueChange={(value, index) => {\n            if (onValueChange) onValueChange(value, index);\n            setIsDialogOpen(false);\n          }}\n        >\n          {children}\n        </SelectList>\n      </Dialog>\n    </>\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PickerButtonSizes {\n  small: ViewStyle;\n  medium: ViewStyle;\n  large: ViewStyle;\n}\n\nexport type PickerButtonSize = keyof PickerButtonSizes;\n\nexport interface PickerButtonTextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PickerButtonTextSize = keyof PickerButtonTextSizes;\n\nexport interface PickerButtonVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  focus: ViewStyle;\n  invalid: ViewStyle;\n  placeholderTextColor: string;\n  sizes: PickerButtonSizes;\n}\n\nexport const getPickerButtonVariables = (\n  theme: Theme,\n): PickerButtonVariables => {\n  return {\n    base: {\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: 40,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: 40,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: 40,\n      },\n    },\n  };\n};\n\nexport interface PickerButtonStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: any;\n}\n\nexport interface PickerButtonStylesProps {\n  size: PickerButtonSize;\n}\nexport type GetPickerButtonStyles = (\n  pickerStylesProps: PickerButtonStylesProps,\n  theme: Theme,\n) => PickerButtonStyles;\n\nexport const getPickerButtonStyles: GetPickerButtonStyles = (\n  pickerStylesProps,\n  theme,\n) => {\n  const pickerVariables = getPickerButtonVariables(theme);\n  const { base, sizes } = pickerVariables;\n  const { size } = pickerStylesProps;\n\n  const controlSizeStyles = sizes[size];\n  const textSizeStyles = theme.textSizes[size];\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.white,\n      position: 'relative',\n    },\n    itemStyle: {\n      ...textSizeStyles,\n    },\n    pickerStyle: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      ...base,\n      ...controlSizeStyles,\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: -1,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableOpacity,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  GetPickerButtonStyles,\n  getPickerButtonStyles,\n  PickerButtonSize,\n} from './PickerButton.styles';\nimport { PickerButtonWrapper } from './PickerButtonWrapper';\n\nexport type GetPickerButtonStylesProp = ReplaceReturnType<\n  GetPickerButtonStyles,\n  DeepPartial<PickerButtonStyles>\n>;\n\nexport interface PickerButtonStyles extends AccessibilityProps {\n  title?: string | null;\n  onPress?: (event: GestureResponderEvent) => void;\n  size?: PickerButtonSize;\n  getStyles?: GetPickerButtonStylesProp;\n}\n\nexport const PickerButton = (props: PickerButtonStyles) => {\n  const {\n    getStyles,\n    onPress,\n    size = 'medium',\n    title,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const { pickerStyle, itemStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <PickerButtonWrapper getStyles={getStyles}>\n      <TouchableOpacity\n        style={[{ justifyContent: 'center' }, pickerStyle]}\n        onPress={onPress}\n        {...accessibilityProps}\n      >\n        <Text style={itemStyle}>{title}</Text>\n      </TouchableOpacity>\n    </PickerButtonWrapper>\n  );\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetPickerButtonStylesProp } from './PickerButton';\nimport { getPickerButtonStyles, PickerButtonSize } from './PickerButton.styles';\n\nexport interface PickerButtonWrapperProps {\n  getStyles?: GetPickerButtonStylesProp;\n  size?: PickerButtonSize;\n  children: React.ReactNode;\n}\n\nexport const PickerButtonWrapper = (props: PickerButtonWrapperProps) => {\n  const { getStyles, children, size = 'medium' } = props;\n  const theme = useTheme();\n\n  const { containerStyle, rightContainerStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <View style={containerStyle}>\n      {children}\n      <View style={rightContainerStyle}>\n        <Icon name=\"chevron-down\" size={32} color={theme.colors.text.default} />\n      </View>\n    </View>\n  );\n};\n","import * as React from 'react';\n\nimport { SelectListItem } from '../SelectList';\n\nexport const PickerItem = SelectListItem;\n","import * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\nimport { Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListProps\n  extends Omit<\n    Omit<FlatListProps<SelectListItemBaseProps>, 'data'>,\n    'renderItem'\n  > {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  selectedValue: string | string[];\n  innerRef?: React.Ref<FlatList<SelectListItemBaseProps>>;\n  isMulti?: boolean;\n  onValueChange: (\n    itemValue: string | string[],\n    itemIndex: number,\n  ) => void | undefined;\n}\n\nconst SelectListBase = (props: SelectListProps): any => {\n  const {\n    selectedValue,\n    onValueChange,\n    isMulti,\n    children,\n    innerRef,\n    ...flatListProps\n  } = props;\n  const theme = useTheme();\n\n  const handleOnPress = (\n    itemValue: string,\n    itemIndex: number,\n    isSelected: boolean,\n  ) => {\n    if (isMulti && Array.isArray(selectedValue)) {\n      if (isSelected) {\n        onValueChange(\n          selectedValue.filter(val => val !== itemValue),\n          itemIndex,\n        );\n      } else {\n        onValueChange(selectedValue.concat(itemValue), itemIndex);\n      }\n    } else {\n      onValueChange(itemValue, itemIndex);\n    }\n  };\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => item.value}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={data}\n      renderItem={({ item, index }) => {\n        const selectListItem = childrenArray[index];\n\n        const isSelected =\n          isMulti && Array.isArray(selectedValue)\n            ? selectedValue.some(selVal => selVal === item.value)\n            : selectedValue === item.value;\n\n        return React.cloneElement(selectListItem, {\n          index,\n          isSelected,\n          onSelect: handleOnPress,\n        });\n      }}\n      {...flatListProps}\n    />\n  );\n};\n\nexport const SelectList = React.forwardRef<\n  FlatList<SelectListItemBaseProps>,\n  SelectListProps\n>((props, ref) => {\n  return <SelectListBase {...props} innerRef={ref} />;\n});\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { SelectList, SelectListProps } from './SelectList';\nimport { SelectListItemBaseProps } from './SelectListItem';\n\nexport interface SelectListFieldProps extends FormFieldProps, SelectListProps {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n}\n\nconst SelectListFieldBase = (props: SelectListFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <SelectList {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const SelectListField = withTheme(SelectListFieldBase);\nexport default SelectListField;\n","import * as React from 'react';\n\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\nexport interface SelectListItemBaseProps {\n  index?: number;\n  isSelected?: boolean;\n  onSelect?: (value: string, index: number, isSelected: boolean) => void;\n  value: string;\n  label: string;\n}\n\nexport interface SelectListItemProps\n  extends SelectListItemBaseProps,\n    ListItemProps {\n  isDisabled?: boolean;\n}\n\nconst SelectListItemBase = (props: SelectListItemProps) => {\n  const {\n    index = 0,\n    isDisabled = false,\n    isSelected = false,\n    label,\n    onSelect = () => null,\n    size = 'medium',\n    value,\n    ...listItemProps\n  } = props;\n\n  return (\n    <ListItem\n      onPress={e => {\n        e.preventDefault();\n        onSelect(value, index, isSelected);\n      }}\n      label={label}\n      rightIcon={\n        <Checkbox isInteractive={false} shape=\"circle\" isChecked={isSelected} />\n      }\n      {...listItemProps}\n    />\n  );\n};\n\nexport const SelectListItem = React.memo(SelectListItemBase);\n","export * from './SelectList';\nexport * from './SelectListItem';\nexport * from './SelectListField';\n"],"sourceRoot":""}