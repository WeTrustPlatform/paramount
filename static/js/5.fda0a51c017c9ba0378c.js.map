{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListPicker/ListPicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListPicker/ListPicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","newHashValue","controlSize","isControlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","getCheckboxStyles","value","isDisabled","_ref$shape","shape","_ref$size","sizeValue","checkColor","colors","text","white","checkboxStyle","objectSpread","background","content","borderColor","border","borderWidth","primaryDefault","greyDark","containerShapes","touchableStyle","Checkbox","_props$value","_props$isDisabled","_props$isInteractive","isInteractive","onPress","TouchableOpacity","accessible","disabled","Icon_web","State","children","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","getListItemStyles","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexBasis","flexDirection","rightWrapperStyle","right","zIndex","textWrapperStyle","flex","titleStyle","greyLight","wrapperStyle","ListItem","avatarProps","title","description","rightNode","leftNode","accessibilityHint","_props$accessible","esm_extends","layoutProps","MDXLayout","MDXContent","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","ListPicker","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_6__","isMulti","onValueChange","newValue","itemIndex","options","label","of","isMDXComponent","ListPickerItem","_props$index","index","_props$isSelected","isSelected","_props$onPress","react__WEBPACK_IMPORTED_MODULE_1__","_ListItem__WEBPACK_IMPORTED_MODULE_5__","_Checkbox__WEBPACK_IMPORTED_MODULE_4__","Array","isArray","_props$options","innerRef","handleOnPress","itemValue","filter","val","concat","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_2__","ref","keyExtractor","item","getItemLayout","_","offset","data","renderItem","some","selVal","ListPickerWithRef","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/5.17c2d465.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => Partial<AvatarStyles>;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport { GetAvatarStyles, getAvatarStyles } from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: GetAvatarStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { CheckboxProps } from './Checkbox';\n\nexport interface CheckboxStyles {\n  touchableStyle: ViewStyle;\n  checkboxStyle: ViewStyle;\n  checkColor: string;\n}\n\nexport type GetCheckboxStyles = (\n  props: CheckboxProps,\n  theme: Theme,\n) => Partial<CheckboxStyles>;\n\nexport const getCheckboxStyles: GetCheckboxStyles = (\n  { value, isDisabled, shape = 'rounded', size = 'medium' },\n  theme,\n) => {\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return {\n    checkColor: theme.colors.text.white,\n\n    checkboxStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      height: sizeValue,\n      justifyContent: 'center',\n      width: sizeValue,\n      ...(value\n        ? {\n            backgroundColor: theme.colors.background.primaryDefault,\n            borderColor: 'transparent',\n          }\n        : {}),\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.background.greyDark,\n            borderColor: theme.colors.border.default,\n          }\n        : {}),\n      ...theme.containerShapes[shape],\n    },\n\n    touchableStyle: theme.containerShapes[shape],\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport { GetCheckboxStyles, getCheckboxStyles } from './Checkbox.styles';\n\nexport interface CheckboxProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, checkbox will be interactive.\n   * @default true\n   */\n  isInteractive?: boolean;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n\n  /** Callback to get element styles. */\n  getStyles?: GetCheckboxStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    value = false,\n    isDisabled = false,\n    isInteractive = true,\n    onPress,\n    getStyles,\n    testID,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const { touchableStyle, checkboxStyle, checkColor } = mergeStyles(\n    getCheckboxStyles,\n    getStyles,\n    theme.components.getCheckboxStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      accessible={isInteractive}\n      style={touchableStyle}\n      disabled={isDisabled || !isInteractive}\n      testID={testID}\n      onPress={onPress}\n      accessibilityLabel={accessibilityLabel}\n    >\n      <View style={checkboxStyle}>\n        {value ? <Icon name=\"check\" size=\"xsmall\" color={checkColor} /> : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  rightWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => Partial<ListItemStyles>;\n\nexport const getListItemStyles: GetListItemStyles = ({ isDisabled }, theme) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexBasis: '85%',\n      flexDirection: 'row',\n    },\n    rightWrapperStyle: {\n      position: 'absolute',\n      right: 0,\n      zIndex: 2,\n    },\n    textWrapperStyle: {\n      flex: 1,\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: isDisabled\n        ? theme.colors.background.greyLight\n        : theme.colors.background.content,\n      height: 72,\n      justifyContent: 'center',\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport { GetListItemStyles, getListItemStyles } from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Title of the list item\n   */\n  title?: React.ReactNode;\n\n  /**\n   * Description of the list item\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * React node replacing `Avatar` on the left hand-side\n   */\n  leftNode?: React.ReactNode;\n\n  /**\n   * React node replacing right hand-side icon\n   */\n  rightNode?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: GetListItemStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    rightNode,\n    leftNode,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    rightWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {leftNode || avatarProps ? (\n            <View style={imageWrapperStyle}>\n              {leftNode || <Avatar size=\"small\" {...avatarProps} />}\n            </View>\n          ) : null}\n          <View style={textWrapperStyle}>\n            {title ? (\n              typeof title === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: titleStyle })}\n                  size=\"large\"\n                >\n                  {title}\n                </Text>\n              ) : (\n                title\n              )\n            ) : null}\n            {description ? (\n              typeof description === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: descriptionStyle })}\n                  size=\"small\"\n                  color=\"muted\"\n                >\n                  {description}\n                </Text>\n              ) : (\n                description\n              )\n            ) : null}\n          </View>\n        </View>\n        {rightNode === null ? null : (\n          <View style={rightWrapperStyle}>\n            {rightNode || <Icon name=\"chevron-right\" />}\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, ListPicker, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listpicker\"\n    }}>{`ListPicker`}</h1>\n    <p>{`ListPicker that supports single value or multiple values selected at the same item.`}</p>\n    <p><inlineCode parentName=\"p\">{`ListPicker`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{`. To use `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`, import `}<inlineCode parentName=\"p\">{`ListPickerWithRef`}</inlineCode>{` instead`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: [\\'c\\', \\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={300}>\\n      <ListPicker\\n        isMulti\\n        value={state.value}\\n        onValueChange={(newValue, itemIndex) => setState({ value: newValue })}\\n        options={[\\n          {\\n            label: \\'C\\',\\n            value: \\'c\\',\\n            description:\\n              \\'C is a general-purpose, procedural computer programming language.\\',\\n          },\\n          {\\n            label: \\'C#\\',\\n            value: \\'c#\\',\\n            description:\\n              \\'C# is a general-purpose, multi-paradigm programming language.\\',\\n          },\\n          { label: \\'C++\\', value: \\'c++\\' },\\n          { label: \\'CSS\\', value: \\'css\\' },\\n          { label: \\'Elixir\\', value: \\'elixir\\' },\\n          { label: \\'Elm\\', value: \\'elm\\' },\\n          { label: \\'Erlang\\', value: \\'erlang\\' },\\n          { label: \\'Go\\', value: \\'go\\' },\\n          { label: \\'Haskell\\', value: \\'haskell\\' },\\n          { label: \\'HTML\\', value: \\'html\\' },\\n          { label: \\'Java\\', value: \\'java\\' },\\n          { label: \\'JavaScript\\', value: \\'js\\' },\\n          { label: \\'Lua\\', value: \\'lua\\' },\\n          { label: \\'Python\\', value: \\'python\\' },\\n          { label: \\'R\\', value: \\'r\\' },\\n          { label: \\'Ruby\\', value: \\'ruby\\' },\\n          { label: \\'Rust\\', value: \\'rust\\' },\\n          { label: \\'Switft\\', value: \\'swift\\' },\\n          { label: \\'Typescript\\', value: \\'typescript\\' },\\n        ]}\\n      />\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      ListPicker,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ['c', 'js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={300} mdxType=\"Box\">\n        <ListPicker isMulti value={state.value} onValueChange={(newValue, itemIndex) => setState({\n            value: newValue\n          })} options={[{\n            label: 'C',\n            value: 'c',\n            description: 'C is a general-purpose, procedural computer programming language.'\n          }, {\n            label: 'C#',\n            value: 'c#',\n            description: 'C# is a general-purpose, multi-paradigm programming language.'\n          }, {\n            label: 'C++',\n            value: 'c++'\n          }, {\n            label: 'CSS',\n            value: 'css'\n          }, {\n            label: 'Elixir',\n            value: 'elixir'\n          }, {\n            label: 'Elm',\n            value: 'elm'\n          }, {\n            label: 'Erlang',\n            value: 'erlang'\n          }, {\n            label: 'Go',\n            value: 'go'\n          }, {\n            label: 'Haskell',\n            value: 'haskell'\n          }, {\n            label: 'HTML',\n            value: 'html'\n          }, {\n            label: 'Java',\n            value: 'java'\n          }, {\n            label: 'JavaScript',\n            value: 'js'\n          }, {\n            label: 'Lua',\n            value: 'lua'\n          }, {\n            label: 'Python',\n            value: 'python'\n          }, {\n            label: 'R',\n            value: 'r'\n          }, {\n            label: 'Ruby',\n            value: 'ruby'\n          }, {\n            label: 'Rust',\n            value: 'rust'\n          }, {\n            label: 'Switft',\n            value: 'swift'\n          }, {\n            label: 'Typescript',\n            value: 'typescript'\n          }]} mdxType=\"ListPicker\" />\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"listpicker-props\"\n    }}>{`ListPicker Props`}</h2>\n    <Props of={ListPicker} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { FlatList } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Checkbox } from '../Checkbox';\nimport { ListItem } from '../ListItem';\n\nexport interface ListPickerItemProps<TValue extends any> {\n  /**\n   * Injected by ListPicker. Index of the item on the list.\n   * @default 0\n   */\n  index?: number;\n\n  /**\n   * Injected by ListPicker. When true, it will be marked as checked\n   * @default false\n   */\n  isSelected?: boolean;\n\n  /**\n   * Injected by ListPicker. Called when pressed select list item\n   */\n  onPress?: (value: TValue, index: number, isSelected: boolean) => void;\n\n  /**\n   * Value of the select list item\n   */\n  value: TValue;\n\n  /**\n   * Label of the select list item\n   */\n  label: string;\n\n  /**\n   * Description of the field\n   */\n  description?: string;\n}\n\nexport const ListPickerItem = <TValue extends any = any>(\n  props: ListPickerItemProps<TValue>,\n) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    description,\n  } = props;\n\n  return (\n    <ListItem\n      onPress={() => onPress(value, index, isSelected)}\n      title={label}\n      description={isSelected && description}\n      rightNode={\n        <Checkbox isInteractive={false} shape=\"circle\" value={isSelected} />\n      }\n    />\n  );\n};\n\ntype Value<TIsMulti extends boolean, TValue extends any> = TIsMulti extends true\n  ? TValue[]\n  : TValue;\n\nexport interface ListPickerOption<TValue extends any> {\n  value: TValue;\n  label: string;\n  description?: string;\n}\n\nexport interface ListPickerProps<TIsMulti extends boolean, TValue extends any> {\n  /**\n   * Set whether it should allow multiple selections. You should specify the value to get proper type-checking.\n   * @default false\n   */\n  isMulti?: TIsMulti;\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value: Value<TIsMulti, TValue>;\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange: (\n    itemValue: Value<TIsMulti, TValue>,\n    itemIndex: number,\n  ) => void | undefined;\n\n  /**\n   * `ListPickerItem` components\n   */\n  options?: Array<ListPickerOption<TValue>>;\n\n  /**\n   * Use `ref` prop instead for using `FlatList` methods\n   */\n  innerRef?: React.Ref<FlatList<ListPickerItemProps<TValue>>>;\n}\n\nconst isMulti = <TValue extends any>(\n  value: TValue | TValue[],\n): value is TValue[] => Array.isArray(value);\n\nexport const ListPicker = <TIsMulti extends boolean, TValue extends any>(\n  props: ListPickerProps<TIsMulti, TValue>,\n) => {\n  const { value, onValueChange, options = [], innerRef } = props;\n  const theme = useTheme();\n\n  const handleOnPress = React.useCallback(\n    (itemValue: TValue, itemIndex: number, isSelected: boolean) => {\n      if (isMulti(value)) {\n        if (isSelected) {\n          onValueChange(\n            // @ts-ignore: TODO: make this work\n            value.filter(val => val !== itemValue) as Value<TIsMulti, TValue>,\n            itemIndex,\n          );\n        } else {\n          onValueChange(\n            value.concat(itemValue) as Value<TIsMulti, TValue>,\n            itemIndex,\n          );\n        }\n      } else {\n        onValueChange(itemValue as Value<TIsMulti, TValue>, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  return (\n    <FlatList\n      ref={innerRef}\n      keyExtractor={item => `${item.value}`}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={options}\n      renderItem={({ item, index }) => {\n        const isSelected = isMulti(value)\n          ? //\n            // @ts-ignore: TODO: make this work\n            value.some(selVal => selVal === item.value)\n          : value === item.value;\n\n        return (\n          <ListPickerItem\n            value={item.value}\n            label={item.label}\n            description={item.description}\n            index={index}\n            isSelected={isSelected}\n            onPress={handleOnPress}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport const ListPickerWithRef = React.forwardRef(\n  <TIsMulti extends boolean, TValue extends any>(\n    props: ListPickerProps<TIsMulti, TValue>,\n    ref: React.Ref<FlatList<ListPickerItemProps<TValue>>>,\n  ) => {\n    return <ListPicker<TIsMulti, TValue> {...props} innerRef={ref} />;\n  },\n);\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}