{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInputField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/SearchTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextArea.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextAreaField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInputField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_Box","_Typography","FormField","props","label","error","children","description","passThroughProps","_objectWithoutProperties2","createElement","Box","marginBottom","Label","cloneElement","Text","color","_FormField","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_reactNative","_icons","_theme","_IconTextInput","ClearableTextInputBase","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","theme","useTheme","IconTextInput","_extends2","ref","TouchableOpacity","onPress","Icon","name","size","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","getPhoneNumberInputStyles","_ref","flexDirection","_countriesList","_Button","_ListItem","_Modal","_PhoneNumberInput","countries","countryList","map","countryCode","PhoneNumberInputBase","_props$countryCode","phoneNumber","onChangeCountryCode","onChangePhoneNumber","header","_props$useHistory","useHistory","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","Button","appearance","buttonStyle","borderBottomRightRadius","borderColor","border","borderTopRightRadius","borderWidth","iconAfter","title","concat","phone","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","country","ListItem","event","preventDefault","borderBottomLeftRadius","borderTopLeftRadius","keyboardType","PhoneNumberInput","_Form","PhoneNumberInputField","withTheme","isInvalid","_ClearableTextInput","SearchTextInputBase","SearchTextInput","TextAreaBase","_props$numberOfLines","numberOfLines","_props$size","controlHeight","multiline","paddingBottom","paddingTop","TextArea","_TextArea","TextAreaField","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","getTextInputVariables","base","backgroundColor","background","content","width","disabled","greyDark","focus","invalid","danger","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlPaddings","large","getTextInputStyles","textInputVariables","sizeStyles","focusedStyle","TextInputBase","_props$isDisabled","_props$isInvalid","editable","TextInputField","_TextInputField","prototype","hasOwnProperty","call","_exportNames","_TextAreaField","_PhoneNumberInputField","_SearchTextInput","getListItemVariables","borderBottomWidth","focusBackgroundColor","greyLight","selected","wrapper","getListItemStyles","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","testID","accessibilityProps","TouchableHighlight","underlayColor"],"mappings":"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","file":"static/js/5.a0910b6c.js","sourcesContent":["import * as React from 'react';\n\nimport { Box } from '../Box';\nimport { Label, Text } from '../Typography';\n\nexport interface FormFieldProps {\n  error?: string | null;\n  label?: string | null;\n  description?: string | null;\n  children?: React.ReactNode;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const { label, error, children, description, ...passThroughProps } = props;\n\n  return (\n    <Box>\n      {label && (\n        <Box marginBottom={4}>\n          <Label>{label}</Label>\n        </Box>\n      )}\n      <Box marginBottom={4}>\n        {/*\n        // @ts-ignore: TODO: Find right way to type this */}\n        {React.cloneElement(children, passThroughProps)}\n      </Box>\n      {error && (\n        <Box marginBottom={4}>\n          <Text color=\"danger\">{error}</Text>\n        </Box>\n      )}\n      {description && <Text>{description}</Text>}\n    </Box>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import { countries as countryList } from 'countries-list';\nimport * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n}\n\nconst countries = (() => {\n  return Object.keys(countryList).map(countryCode => ({\n    countryCode,\n    key: countryCode,\n    ...countryList[countryCode],\n  }));\n})();\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = 'US',\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.default,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={`+${countryList[countryCode].phone}`}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.key}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countries}\n          renderItem={({ item: country }) => {\n            return (\n              <ListItem\n                key={country.countryCode}\n                label={country.name}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(country.countryCode);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { PhoneNumberInput, PhoneNumberInputProps } from './PhoneNumberInput';\n\nexport interface PhoneNumberInputFieldProps\n  extends FormFieldProps,\n    PhoneNumberInputProps {}\n\nconst PhoneNumberInputFieldBase = (props: PhoneNumberInputFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <PhoneNumberInput isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const PhoneNumberInputField = withTheme(PhoneNumberInputFieldBase);\nexport default PhoneNumberInputField;\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport {\n  ClearableTextInput,\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\n","import * as React from 'react';\nimport { TextInput as RNTextInput } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface TextAreaProps extends TextInputProps {\n  numberOfLines?: number;\n}\n\nconst TextAreaBase = (props: TextAreaProps) => {\n  const { numberOfLines = 3, size = 'medium', ...textInputProps } = props;\n  const theme = useTheme();\n  const controlHeight = theme.controlHeights[size];\n\n  return (\n    <TextInput\n      multiline\n      size={size}\n      numberOfLines={numberOfLines}\n      getStyles={() => ({\n        inputStyle: {\n          height: numberOfLines * controlHeight,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n      })}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextArea = React.forwardRef<RNTextInput, TextAreaProps>(\n  (props, ref) => <TextAreaBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { TextArea, TextAreaProps } from './TextArea';\n\nexport interface TextAreaFieldProps extends FormFieldProps, TextAreaProps {}\n\nconst TextAreaFieldBase = (props: TextAreaFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <TextArea isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const TextAreaField = withTheme(TextAreaFieldBase);\nexport default TextAreaField;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../../icons';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface TextInputSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type TextInputSize = keyof TextInputSizes;\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: TextInputSizes;\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: TextInputSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputSize,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: TextInputSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface TextInputFieldProps extends FormFieldProps, TextInputProps {}\n\nconst TextInputFieldBase = (props: TextInputFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <TextInput isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const TextInputField = withTheme(TextInputFieldBase);\nexport default TextInputField;\n","export * from './TextInputField';\nexport * from './TextArea';\nexport * from './TextAreaField';\nexport * from './PhoneNumberInput';\nexport * from './PhoneNumberInputField';\nexport {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\nexport * from './SearchTextInput';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n"],"sourceRoot":""}