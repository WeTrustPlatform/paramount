{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/Positioner.mdx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_reactPowerplug","_","_Button","_Layout","_Typography","layoutProps","MDXLayout","_ref","children","document","body","style","height","position","mdx","MDXContent","_ref2","components","props","_objectWithoutProperties2","default","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","Toggle","Positioner","Button","Box","Spacing","Text","_ref3","on","toggle","isVisible","onClose","isDynamicContent","content","width","isFullWidth","parentHeight","getStyles","theme","positionerStyle","modalContainerStyle","onPress","title","paddingBottom","zIndex","flexDirection","justifyContent","_ref4","isInline","_ref5","_ref6","paddingVertical","_ref7","_ref8","paddingTop","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","flex","_ref20","_ref21","of","isMDXComponent"],"mappings":"wYAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,8DACAG,EAAAH,EAAA,wCACAI,EAAAJ,EAAA,oCACAK,EAAAL,EAAA,oCACAM,EAAAN,EAAA,wCAOMO,EAAc,GAGdC,EAAY,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAGnB,OAFAC,SAASC,KAAKC,MAAMC,OAAS,UAC7BH,SAASC,KAAKC,MAAME,SAAW,YACxB,EAAAjB,EAAAkB,KAAA,WAAMN,IAEA,SAASO,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAAC,SAAAJ,EAAA,gBACD,OAAO,EAAApB,EAAAkB,KAACR,GAAD,EAAAe,EAAAD,SAAA,GAAef,EAAiBa,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAI5E,EAAA1B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,cADR,eAGA,EAAA3B,EAAAkB,KAAA,kGAA4F,EAAAlB,EAAAkB,KAAA,cAAYU,WAAW,KAAvB,aAC5F,EAAA5B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,SADR,UAGA,EAAA3B,EAAAkB,KAACf,EAAA0B,WAAD,CAAYC,WAAY,EAAGC,OAAQ,m6BAAw6BC,QAAS,CACl9BV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,gBACAC,wBACAC,gBACAC,UACAC,kBACAC,aACCd,QAAQ,eACb,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAe,GAAA,IACKC,EADLD,EACKC,GACAC,EAFLF,EAEKE,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQG,kBAAkB,EAAO7B,SAAS,YAAY8B,QAAS,SAAAzB,GAAK,OAAI,EAAAtB,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACpJ,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMuB,aAAa,EAAOC,aAAc,IAE5CC,UAAW,SAAC7B,EAAO8B,GAAR,MAAmB,CAC5BC,gBAAiB,GACjBC,oBAAqB,KACnB5B,QAAQ,eACZ,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,QAAQ9B,QAAQ,gBAInD,EAAA1B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,YADR,aAGA,EAAA3B,EAAAkB,KAACf,EAAA0B,WAAD,CAAYC,WAAY,EAAGC,OAAQ,0hLAAukLC,QAAS,CACjnLV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,gBACAC,wBACAC,gBACAC,UACAC,kBACAC,aACCd,QAAQ,eACb,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAASkB,cAAe,EAAGC,OAAQ,EAAGhC,QAAQ,YAC5C,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAmC,GAAA,IACKnB,EADLmB,EACKnB,GACAC,EAFLkB,EAEKlB,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,YAAY8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACxH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,YAAY9B,QAAQ,eAGlE,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAqC,GAAA,IACKrB,EADLqB,EACKrB,GACAC,EAFLoB,EAEKpB,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,MAAM8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QAClH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,MAAM9B,QAAQ,eAG5D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAsC,GAAA,IACKtB,EADLsB,EACKtB,GACAC,EAFLqB,EAEKrB,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,WAAW8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACvH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,WAAW9B,QAAQ,iBAKjE,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAAS0B,gBAAiB,EAAGP,OAAQ,EAAGhC,QAAQ,YACpD,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAwC,GAAA,IACOxB,EADPwB,EACOxB,GACAC,EAFPuB,EAEOvB,OAFP,OAGW,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,OAAO8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACrH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,OAAO9B,QAAQ,eAG7D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAyC,GAAA,IACOzB,EADPyB,EACOzB,GACAC,EAFPwB,EAEOxB,OAFP,OAGW,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,QAAQ8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACtH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,QAAQ9B,QAAQ,iBAKhE,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAAS6B,WAAY,EAAGV,OAAQ,EAAGhC,QAAQ,YACzC,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAA2C,GAAA,IACK3B,EADL2B,EACK3B,GACAC,EAFL0B,EAEK1B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,eAAe8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QAC3H,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,eAAe9B,QAAQ,eAGrE,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAA4C,GAAA,IACK5B,EADL4B,EACK5B,GACAC,EAFL2B,EAEK3B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,SAASiC,aAAc,KAAMH,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QACzI,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,wCACMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,SAAS9B,QAAQ,eAG/D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAA6C,GAAA,IACK7B,EADL6B,EACK7B,GACAC,EAFL4B,EAEK5B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIG,QAASF,EAAQ1B,SAAS,cAAc8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKU,MAAO,IAAKhC,OAAQ,IAAKU,QAAQ,QAC1H,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,cAAc9B,QAAQ,kBAMtE,EAAA1B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,6BADR,8BAGA,EAAA3B,EAAAkB,KAAA,iBAAW,EAAAlB,EAAAkB,KAAA,cAAYU,WAAW,KAAvB,oBAAX,4GACA,EAAA5B,EAAAkB,KAACf,EAAA0B,WAAD,CAAYC,WAAY,EAAGC,OAAQ,kjLAA+lLC,QAAS,CACzoLV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,gBACAC,wBACAC,gBACAC,UACAC,kBACAC,aACCd,QAAQ,eACb,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAASkB,cAAe,EAAGC,OAAQ,EAAGhC,QAAQ,YAC5C,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAA8C,GAAA,IACK9B,EADL8B,EACK9B,GACAC,EAFL6B,EAEK7B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,YAAY8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAChH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,YAAY9B,QAAQ,eAGlE,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAA+C,GAAA,IACK/B,EADL+B,EACK/B,GACAC,EAFL8B,EAEK9B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,MAAM8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC1G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,MAAM9B,QAAQ,eAG5D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAgD,GAAA,IACKhC,EADLgC,EACKhC,GACAC,EAFL+B,EAEK/B,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,WAAW8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC/G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,WAAW9B,QAAQ,iBAKjE,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAAS0B,gBAAiB,EAAGP,OAAQ,EAAGhC,QAAQ,YACpD,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAiD,GAAA,IACOjC,EADPiC,EACOjC,GACAC,EAFPgC,EAEOhC,OAFP,OAGW,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,OAAO8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC7G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,OAAO9B,QAAQ,eAG7D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAkD,GAAA,IACOlC,EADPkC,EACOlC,GACAC,EAFPiC,EAEOjC,OAFP,OAGW,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,QAAQ8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC9G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,QAAQ9B,QAAQ,iBAKhE,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAAS6B,WAAY,EAAGV,OAAQ,EAAGhC,QAAQ,YACzC,EAAA1B,EAAAkB,KAACX,EAAA+B,IAAD,CAAKqB,cAAc,MAAMC,eAAe,gBAAgBlC,QAAQ,QAC9D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAmD,GAAA,IACKnC,EADLmC,EACKnC,GACAC,EAFLkC,EAEKlC,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,eAAe8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QACnH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,eAAe9B,QAAQ,eAGrE,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAoD,GAAA,IACKpC,EADLoC,EACKpC,GACAC,EAFLmC,EAEKnC,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,SAASiC,aAAc,KAAMH,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QACjI,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,wCACMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,SAAS9B,QAAQ,eAG/D,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAqD,GAAA,IACKrC,EADLqC,EACKrC,GACAC,EAFLoC,EAEKpC,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAII,kBAAgB,EAACD,QAASF,EAAQ1B,SAAS,cAAc8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAClH,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAGMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,cAAc9B,QAAQ,kBAMtE,EAAA1B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,8BADR,+BAGA,EAAA3B,EAAAkB,KAAA,4GAAsG,EAAAlB,EAAAkB,KAAA,cAAYU,WAAW,KAAvB,eAAtG,cACA,EAAA5B,EAAAkB,KAACf,EAAA0B,WAAD,CAAYC,WAAY,EAAGC,OAAQ,k8CAA68CC,QAAS,CACv/CV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,gBACAC,wBACAC,gBACAC,UACAC,kBACAC,aACCd,QAAQ,eACb,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAASoB,cAAc,MAAMjC,QAAQ,YACnC,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAASyC,KAAM,EAAGtD,QAAQ,YACxB,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAuD,GAAA,IACKvC,EADLuC,EACKvC,GACAC,EAFLsC,EAEKtC,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIO,aAAW,EAACJ,QAASF,EAAQ1B,SAAS,WAAW8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC1G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,SAAS9B,QAAQ,gBAIxD,EAAA1B,EAAAkB,KAACX,EAAAgC,QAAD,CAASyC,KAAM,EAAGtD,QAAQ,YACxB,EAAA1B,EAAAkB,KAACd,EAAA+B,OAAD,CAAQT,QAAQ,UACb,SAAAwD,GAAA,IACKxC,EADLwC,EACKxC,GACAC,EAFLuC,EAEKvC,OAFL,OAGS,EAAA3C,EAAAkB,KAACb,EAAA+B,WAAD,CAAYQ,UAAWF,EAAIO,aAAW,EAACJ,QAASF,EAAQ1B,SAAS,eAAe8B,QAAS,kBAAM,EAAA/C,EAAAkB,KAACX,EAAA+B,IAAD,CAAKZ,QAAQ,QAC9G,EAAA1B,EAAAkB,KAACV,EAAAgC,KAAD,CAAMd,QAAQ,QAAd,0MAMMA,QAAQ,eAClB,EAAA1B,EAAAkB,KAACZ,EAAA+B,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,SAAS9B,QAAQ,kBAMxD,EAAA1B,EAAAkB,KAAA,KAAQ,CACNS,GAAM,SADR,UAGA,EAAA3B,EAAAkB,KAACf,EAAA+B,MAAD,CAAOiD,GAAI/C,aAAYV,QAAQ,yMAInCP,EAAWiE,gBAAiB","file":"static/js/41.a5d1cc4b.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Positioner } from '.';\nimport { Button } from '../Button';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = ({ children }) => {\n  document.body.style.height = 'initial';\n  document.body.style.position = 'relative';\n  return <div>{children}</div>;\n}\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"positioner\"\n    }}>{`Positioner`}</h1>\n    <p>{`A base component for manipulating the position of the element on the screen. Used by `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <Positioner\\n      isVisible={on}\\n      onClose={toggle}\\n      isDynamicContent={false}\\n      position=\\\"top-right\\\"\\n      content={props => (\\n        <Box width={200} height={200}>\\n          <Text>\\n            Content that can be anything. By default it has no styling at all.\\n            You can use `Popover` that comes with predefined styles.\\n            Positioner is used as a base for `Popovers`, `Tooltips`,\\n            `DropdownMenus`\\n          </Text>\\n        </Box>\\n      )}\\n      isFullWidth={false}\\n      parentHeight={1000}\\n      // Use this prop to specify the position of a component u want to wrap with the positioner\\n      // targetMeasurements={{}}\\n      getStyles={(props, theme) => ({\\n        positionerStyle: {},\\n        modalContainerStyle: {},\\n      })}\\n    >\\n      <Button onPress={toggle} title=\\\"Usage\\\" />\\n    </Positioner>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Positioner,\n      Button,\n      Box,\n      Spacing,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Positioner isVisible={on} onClose={toggle} isDynamicContent={false} position=\"top-right\" content={props => <Box width={200} height={200} mdxType=\"Box\">\n            <Text mdxType=\"Text\">\n              Content that can be anything. By default it has no styling at all.\n              You can use `Popover` that comes with predefined styles.\n              Positioner is used as a base for `Popovers`, `Tooltips`,\n              `DropdownMenus`\n            </Text>\n          </Box>} isFullWidth={false} parentHeight={1000} // Use this prop to specify the position of a component u want to wrap with the positioner\n        // targetMeasurements={{}}\n        getStyles={(props, theme) => ({\n          positionerStyle: {},\n          modalContainerStyle: {}\n        })} mdxType=\"Positioner\">\n        <Button onPress={toggle} title=\"Usage\" mdxType=\"Button\" />\n      </Positioner>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Positioner,\n      Button,\n      Box,\n      Spacing,\n      Text\n    }} mdxType=\"Playground\">\n  <Spacing paddingBottom={8} zIndex={1} mdxType=\"Spacing\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"top-right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top right\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"top\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"top-left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top left\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Box>\n  </Spacing>\n      <Spacing paddingVertical={8} zIndex={2} mdxType=\"Spacing\">\n  <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Positioner\">\n          <Button onPress={toggle} isInline title=\"Left\" mdxType=\"Button\" />\n        </Positioner>}\n    </Toggle>\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Positioner\">\n          <Button onPress={toggle} isInline title=\"Right\" mdxType=\"Button\" />\n        </Positioner>}\n    </Toggle>\n  </Box>\n      </Spacing>\n  <Spacing paddingTop={8} zIndex={3} mdxType=\"Spacing\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"bottom-right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom right\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"bottom\" parentHeight={2480} content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">This has parent height set to 2480</Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} onClose={toggle} position=\"bottom-left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom left\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Box>\n  </Spacing>\n    </Playground>\n    <h3 {...{\n      \"id\": \"dynamically-sized-content\"\n    }}>{`Dynamically sized content`}</h3>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`isDynamicContent`}</inlineCode>{` to props to give time for Positioner to calculate its layout of dynamic content prior to displaying it`}</p>\n    <Playground __position={2} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Positioner,\n      Button,\n      Box,\n      Spacing,\n      Text\n    }} mdxType=\"Playground\">\n  <Spacing paddingBottom={8} zIndex={1} mdxType=\"Spacing\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"top-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top right\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"top\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"top-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Top left\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Box>\n  </Spacing>\n      <Spacing paddingVertical={8} zIndex={2} mdxType=\"Spacing\">\n  <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"left\" content={() => <Box mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Positioner\">\n          <Button onPress={toggle} isInline title=\"Left\" mdxType=\"Button\" />\n        </Positioner>}\n    </Toggle>\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"right\" content={() => <Box mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Positioner\">\n          <Button onPress={toggle} isInline title=\"Right\" mdxType=\"Button\" />\n        </Positioner>}\n    </Toggle>\n  </Box>\n      </Spacing>\n  <Spacing paddingTop={8} zIndex={3} mdxType=\"Spacing\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"bottom-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom right\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"bottom\" parentHeight={2480} content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">This has parent height set to 2480</Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isDynamicContent onClose={toggle} position=\"bottom-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} isInline title=\"Bottom left\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Box>\n  </Spacing>\n    </Playground>\n    <h3 {...{\n      \"id\": \"positioner-with-full-width\"\n    }}>{`Positioner with full width`}</h3>\n    <p>{`On Mobile sometimes we want the content to stretch full width of the window. There is the prop `}<inlineCode parentName=\"p\">{`isFullWidth`}</inlineCode>{` for that`}</p>\n    <Playground __position={3} __code={'<Spacing flexDirection=\\\"row\\\">\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n</Spacing>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Positioner,\n      Button,\n      Box,\n      Spacing,\n      Text\n    }} mdxType=\"Playground\">\n  <Spacing flexDirection=\"row\" mdxType=\"Spacing\">\n    <Spacing flex={1} mdxType=\"Spacing\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isFullWidth onClose={toggle} position=\"top-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} title=\"Bottom\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Spacing>\n    <Spacing flex={1} mdxType=\"Spacing\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Positioner isVisible={on} isFullWidth onClose={toggle} position=\"bottom-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Positioner\">\n            <Button onPress={toggle} title=\"Bottom\" mdxType=\"Button\" />\n          </Positioner>}\n      </Toggle>\n    </Spacing>\n  </Spacing>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Positioner} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}