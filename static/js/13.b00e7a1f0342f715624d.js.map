{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","Toggle","_props$initial","initial","_React$useState","React","useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","on","toggle","set","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Switch","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_7__","_ref2","___WEBPACK_IMPORTED_MODULE_6__","value","onValueChange","of","isMDXComponent","AnimatedView","animated","View","defaultProps","size","isDisabled","_props$size","_props$value","_props$isDisabled","_props$onValueChange","_props$overrides","overrides","_getOverrides","getOverrides","StyledTouchable","dlv","Touchable","_getOverrides2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","touchableProps","_getOverrides3","StyledBackground","Background","_getOverrides4","backgroundProps","_getOverrides5","StyledCircle","Circle","_getOverrides6","circleProps","react__WEBPACK_IMPORTED_MODULE_4__","onPress","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_5__","activeOpacity","disabled","alignSelf","flexDirection","flexWrap","getCircleSize","isControlSize","controlHeights","getContainerSize","_props$size2","_props$isDisabled2","viewProps","useSpring","config","springDefaultConfig","greyDefault","primaryDefault","circleSize","containerSize","alignItems","greyLight","borderRadius","height","padding","width","_props$size3","_useSpring2","circleColor","content","circlePosition","display","justifyContent","transform","translateX","_Icon__WEBPACK_IMPORTED_MODULE_12__","name","text","white","primary","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/13.c4a6b3d2.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Switch, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle, set }) => <Switch value={on} onValueChange={set} />}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Switch,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle,\n            set\n          }) => <Switch value={on} onValueChange={set} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { Icon } from '../Icon';\n\nconst AnimatedView = animated(View);\n\ninterface SwitchBaseProps {\n  /**\n   * The size of the switch.\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as switched on.\n   * @default false\n   */\n  value?: boolean;\n\n  /**\n   * When true, the switch is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface SwitchOverrides {\n  Touchable: TouchableProps;\n  Background: BackgroundProps;\n  Circle: CircleProps;\n}\n\nexport interface SwitchProps\n  extends WithOverrides<SwitchBaseProps, SwitchOverrides> {}\n\nconst defaultProps = {\n  size: 'medium' as const,\n  value: false,\n  isDisabled: false,\n  onValueChange: () => {\n    return;\n  },\n};\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    size = defaultProps.size,\n    value = defaultProps.value,\n    isDisabled = defaultProps.isDisabled,\n    onValueChange = defaultProps.onValueChange,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Switch.Touchable'),\n    overrides.Touchable,\n  );\n  const [Background, backgroundProps] = getOverrides(\n    StyledBackground,\n    props,\n    dlv(theme, 'overrides.Switch.Background'),\n    overrides.Background,\n  );\n  const [Circle, circleProps] = getOverrides(\n    StyledCircle,\n    props,\n    dlv(theme, 'overrides.Switch.Circle'),\n    overrides.Circle,\n  );\n\n  return (\n    <Touchable\n      isDisabled={isDisabled}\n      size={size}\n      onPress={() => onValueChange(!value)}\n      {...touchableProps}\n    >\n      <Background\n        isDisabled={isDisabled}\n        size={size}\n        value={value}\n        {...backgroundProps}\n      >\n        <Circle\n          isDisabled={isDisabled}\n          size={size}\n          value={value}\n          {...circleProps}\n        />\n      </Background>\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { size, isDisabled, children, style, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      disabled={isDisabled}\n      style={[\n        {\n          alignSelf: 'flex-start',\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface BackgroundProps extends ViewProps {\n  children?: React.ReactNode;\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n  value?: boolean;\n}\n\nconst getCircleSize = (size: ControlSize | number, theme: Theme) => {\n  return isControlSize(size) ? theme.controlHeights[size] - 8 : size;\n};\n\nconst getContainerSize = (size: ControlSize | number, theme: Theme) => {\n  return getCircleSize(size, theme) * 2;\n};\n\nconst StyledBackground = (props: BackgroundProps) => {\n  const {\n    size = defaultProps.size,\n    isDisabled = defaultProps.isDisabled,\n    children,\n    value,\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n  const { backgroundColor } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: value\n      ? isDisabled\n        ? theme.colors.background.greyDefault\n        : theme.colors.background.primaryDefault\n      : theme.colors.background.greyDefault,\n  });\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  return (\n    <AnimatedView\n      // @ts-ignore\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.greyLight,\n          borderRadius: 24,\n          flexDirection: 'row',\n          height: circleSize + 8,\n          padding: 3,\n          width: containerSize,\n        },\n        { backgroundColor },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </AnimatedView>\n  );\n};\n\ninterface CircleProps extends ViewProps {\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n  value?: boolean;\n}\n\nconst StyledCircle = (props: CircleProps) => {\n  const {\n    size = defaultProps.size,\n    isDisabled,\n    value,\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  const { circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    circleColor: theme.colors.background.content,\n    circlePosition: value ? containerSize - (circleSize + 6) : 0,\n  });\n\n  return (\n    <AnimatedView\n      // @ts-ignore\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderRadius: 24,\n          display: 'flex',\n          height: circleSize,\n          justifyContent: 'center',\n          padding: 0,\n          width: circleSize,\n        },\n        { backgroundColor: circleColor },\n        { transform: [{ translateX: circlePosition }] },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon\n          name=\"check\"\n          size=\"xsmall\"\n          color={\n            isDisabled ? theme.colors.text.white : theme.colors.text.primary\n          }\n        />\n      ) : (\n        <Icon\n          name=\"x\"\n          size=\"xsmall\"\n          color={\n            isDisabled ? theme.colors.text.white : theme.colors.text.default\n          }\n        />\n      )}\n    </AnimatedView>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}