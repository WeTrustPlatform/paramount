{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","Object","slicedToArray","useCallback","AnimatedView","animated","View","Dots","props","theme","useTheme","_props$size","size","_props$color","color","colors","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","react","style","alignItems","flexDirection","justifyContent","__source","fileName","_jsxFileName","lineNumber","map","index","key","backgroundColor","borderRadius","height","marginLeft","marginRight","width","getButtonAppearances","minimal","default","background","content","danger","secondary","button","defaultText","loadingBackgroundColor","overlay","dangerText","dangerLight","primaryText","primaryLight","secondaryText","secondaryLight","outline","borderColor","borderWidth","border","getButtonStyles","buttonStyleProps","appearance","isDisabled","isLoading","isInline","hasIconAfter","hasIconBefore","_buttonAppearances$ap","textColor","buttonStyle","objectWithoutProperties","objectSpread","controlBorderRadius","controlHeights","paddingLeft","controlPaddings","paddingRight","disabled","alignSelf","flexWrap","textStyle","muted","display","fontWeight","textAlign","innerButtonWrapperStyle","buttonContentWrapperStyle","Button","_props$appearance","title","getStyles","iconAfter","icon","iconBefore","_props$isDisabled","iconLoading","isActive","_props$isInline","_props$isLoading","_props$onPress","onPress","testID","accessibilityProps","_mergeStyles","mergeStyles","components","TouchableOpacity","esm_extends","accessibilityRole","Button_jsxFileName","Button_ButtonContent","ButtonContent","Dots_Dots","Text","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","getTextColor","textColors","getTextSize","textSizes","fontSize","getTextStyles","_ref","isItalic","align","transform","weight","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontStyle","textTransform","children","_props$fontFamily","_props$align","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","small","medium","large","greyLight","greyDefault","greyDark","primaryDefault","primaryDark","secondaryDefault","secondaryDark","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","info","success","warning","disabledText","link","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","paragraphSizes","xsmall","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/1.b4ed00f1.js","sourcesContent":["import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ButtonColorProps {\n  backgroundColor: string;\n  color: string;\n  borderWidth?: number;\n  borderColor?: string;\n  loadingBackgroundColor?: string;\n}\n\nexport interface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ButtonColorProps };\n  primary: { [size in ButtonColor]: ButtonColorProps };\n  outline: { [size in ButtonColor]: ButtonColorProps };\n}\n\nexport type ButtonAppearance = keyof ButtonAppearances;\n\nexport const getButtonAppearances = (theme: Theme): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.danger,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.primary,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.secondary,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: theme.colors.button.default,\n        color: theme.colors.button.defaultText,\n\n        loadingBackgroundColor: theme.colors.background.overlay,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.button.danger,\n        color: theme.colors.button.dangerText,\n\n        loadingBackgroundColor: theme.colors.background.dangerLight,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.button.primary,\n        color: theme.colors.button.primaryText,\n\n        loadingBackgroundColor: theme.colors.background.primaryLight,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.button.secondary,\n        color: theme.colors.button.secondaryText,\n\n        loadingBackgroundColor: theme.colors.background.secondaryLight,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n        color: theme.colors.text.danger,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n        color: theme.colors.text.primary,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n        color: theme.colors.text.secondary,\n      },\n    },\n  };\n};\n\nexport interface ButtonStylesProps {\n  appearance: ButtonAppearance;\n  color: ButtonColor;\n  size: ControlSize;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isInline: boolean;\n  hasIconAfter?: boolean;\n  hasIconBefore?: boolean;\n}\n\nexport interface ButtonStyles {\n  buttonStyle: ViewStyle;\n  textStyle: TextStyle;\n  innerButtonWrapperStyle: ViewStyle;\n  buttonContentWrapperStyle: ViewStyle;\n}\n\nexport type GetButtonStyles = (\n  buttonStylesProps: ButtonStylesProps,\n  theme: Theme,\n) => ButtonStyles;\n\nexport const getButtonStyles: GetButtonStyles = (buttonStyleProps, theme) => {\n  const {\n    appearance,\n    color,\n    size,\n    isDisabled,\n    isLoading,\n    isInline,\n    hasIconAfter,\n    hasIconBefore,\n  } = buttonStyleProps;\n\n  const buttonAppearances = getButtonAppearances(theme);\n\n  const {\n    color: textColor,\n    loadingBackgroundColor,\n    ...buttonStyle\n  } = buttonAppearances[appearance][color];\n\n  return {\n    buttonStyle: {\n      borderRadius: theme.controlBorderRadius[size],\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size] * 2,\n      paddingRight: theme.controlPaddings[size] * 2,\n      ...buttonStyle,\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.button.disabled,\n          }\n        : {\n            ...(isLoading ? { backgroundColor: loadingBackgroundColor } : {}),\n          }),\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }\n        : {}),\n    },\n    textStyle: {\n      alignItems: 'center',\n      color: isDisabled ? theme.colors.text.muted : textColor,\n      display: 'flex',\n      fontWeight: '600',\n      justifyContent: 'center',\n      textAlign: 'center',\n    },\n\n    innerButtonWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      height: '100%',\n      justifyContent: 'center',\n    },\n\n    buttonContentWrapperStyle: {\n      paddingLeft: hasIconBefore ? 8 : 0,\n      paddingRight: hasIconAfter ? 8 : 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  TextStyle,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ButtonColor, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Dots } from '../LoadingIndicators';\nimport { Text } from '../Typography';\nimport {\n  ButtonAppearance,\n  ButtonStyles,\n  GetButtonStyles,\n  getButtonStyles,\n} from './Button.styles';\n\nexport interface ButtonProps {\n  /** Title of the button */\n  title?: string;\n\n  /** Icon in place of title */\n  icon?: React.ReactNode;\n\n  /**\n   * The color of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Forcefully set the active state of a button.\n   * @default false\n   */\n  isActive?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, the button will not stretch full width\n   * @default false\n   */\n  isInline?: boolean;\n\n  /** Called when button is pressed */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Sets an icon before the text. */\n  iconBefore?: React.ReactNode;\n\n  /** Sets an icon after the text. */\n  iconAfter?: React.ReactNode;\n\n  /** Sets an icon at loading state. */\n  iconLoading?: React.ReactNode;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetButtonStyles, DeepPartial<ButtonStyles>>;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    title,\n    color = 'default',\n    getStyles,\n    icon,\n    iconAfter,\n    iconBefore,\n    iconLoading,\n    isActive = false,\n    isDisabled = false,\n    isInline = false,\n    isLoading = false,\n    onPress = () => {\n      return;\n    },\n    size = 'medium',\n    testID,\n\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    buttonStyle,\n    textStyle,\n    innerButtonWrapperStyle,\n    buttonContentWrapperStyle,\n  } = mergeStyles(getButtonStyles, getStyles, theme.components.getButtonStyles)(\n    {\n      appearance,\n      color,\n      hasIconAfter: !!iconAfter,\n      hasIconBefore: !!iconBefore,\n      isDisabled,\n      isInline,\n      isLoading,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"button\"\n      disabled={!!(isDisabled || isLoading)}\n      onPress={onPress}\n      style={buttonStyle}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={innerButtonWrapperStyle}>\n        {iconBefore}\n        <View style={buttonContentWrapperStyle}>\n          <ButtonContent {...props} textStyle={textStyle} />\n        </View>\n        {iconAfter}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport interface ButtonContentProps extends ButtonProps {\n  textStyle: TextStyle;\n}\n\nconst ButtonContent = (props: ButtonContentProps) => {\n  const { isLoading, iconLoading, icon, title, textStyle, size } = props;\n\n  if (isLoading) {\n    return <>{iconLoading || <Dots color={textStyle.color} />}</>;\n  }\n  if (icon) return <>{icon}</>;\n  if (title) {\n    return (\n      <Text size={size} getStyles={() => ({ textStyle })}>\n        {title}\n      </Text>\n    );\n  }\n\n  return <></>;\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}