{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Responsive.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/ViewMeasure.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/Popover.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Popover/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/ArrowedPositioner.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/Positioner.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/Positioner.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/getPositionerArrow.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Positioner/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Intent.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Position.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/StackingOrder.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/index.ts"],"names":["_reactNative","__webpack_require__","isWindowAboveMinWidth","minWidth","Dimensions","get","width","isWindowBelowMaxWidth","maxWidth","Responsive","props","children","isAboveMinWidth","isBelowMaxWidth","matches","React","_interopRequireWildcard","_useMeasure2","ViewMeasure","onMeasure","viewProps","_objectWithoutProperties2","isRenderProp","ref","useRef","_useMeasure","useMeasure","measurements","onLayout","createElement","View","_extends2","_ViewMeasure","Object","keys","forEach","key","defineProperty","exports","enumerable","_Responsive","getOverlayVariables","theme","overlay","bottom","cursor","height","left","position","right","top","getOverlayStyles","_ref","transparent","overlayVariables","overlayStyle","_objectSpread2","backgroundColor","colors","background","_theme","_mergeStyles2","_Overlay","Overlay","onPress","_props$transparent","getStyles","useTheme","mergeStyles","TouchableWithoutFeedback","event","preventDefault","style","_react2","_interopRequireDefault","_docz","_","_Button","_Box","_Typography","_reactPowerplug","layoutProps","MDXLayout","document","body","mdx","MDXContent","_ref2","components","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","Popover","Button","Box","Text","Toggle","_ref3","on","toggle","isVisible","onClose","isDynamicContent","content","isFullWidth","parentHeight","positionerStyle","modalContainerStyle","title","paddingBottom","zIndex","flexDirection","justifyContent","_ref4","isInline","_ref5","_ref6","paddingVertical","_ref7","_ref8","paddingTop","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","flex","_ref20","_ref21","of","isMDXComponent","_Positioner","getPopoverStyles","popoverStyle","padding","elevations","getPositionerStyles","_Popover","restProps","_mergeStyles","Positioner","params","_getPositionerArrow","ArrowedPositioned","getPositionerArrowParams","targetMeasurements","arrow","getFullWidthPositionerArrow","getPositionerArrow","Fragment","alignItems","display","_constants","_Helpers","_Modal","resolveCorrectPosition","shouldFlipBottomToTop","shouldFlipLeftToRight","shouldFlipRightToLeft","shouldFlipTopToBottom","newPosition","includes","POSITION","BOTTOM","replace","TOP","LEFT","RIGHT","getIsOverflowing","positionerMeasurements","screenLayout","defaultProps","initialMeasurements","pageX","pageY","x","y","hasOverflowedCounter","_props$isFullWidth","_props$onClose","_props$position","_props$isDynamicConte","_React$useState","useState","_React$useState2","_slicedToArray2","setPositionerMeasurements","_React$useState3","_React$useState4","childrenMeasurements","setChildrenMeasurements","_React$useState5","_React$useState6","isAdjustingContent","setIsAdjustingContent","useEffect","setTimeout","finalTargetMeasurements","hasPositionerMeasurementsMeasured","getPositionerPositionParams","offset","BOTTOM_RIGHT","getPositionerFullWidthPosition","isOverflowing","TOP_LEFT","marginRight","transform","translateX","TOP_RIGHT","marginLeft","translateY","BOTTOM_LEFT","getPositionerPosition","correctedPosition","positionerPositionStyle","Modal","visible","onRequestClose","shouldLockBodyScroll","opacity","commonStyle","borderColor","borderWidth","TopLeftArrow","borderTopColor","border","marginBottom","TopArrow","TopRightArrow","LeftArrow","borderLeftColor","RightArrow","borderRightColor","BottomRightArrow","borderBottomColor","marginTop","BottomArrow","BottomLeftArrow","FullWidthTopArrow","FullWidthBottomArrow","_ArrowedPositioner","INTENT","danger","info","success","warning","FOCUSED","STACKING_CONTEXT","POSITIONER","OVERLAY","TOASTER","_StackingOrder","_Intent","_Position","prototype","hasOwnProperty","call","_exportNames"],"mappings":"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","file":"static/js/5.3c5a5a20.js","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nexport type ResponsiveRenderPropType = (\n  props: ResponsiveChildrenProps,\n) => React.ReactNode;\n\nexport interface ResponsiveChildrenProps {\n  matches: boolean;\n}\n\nexport interface ResponsiveProps {\n  children: React.ReactNode | ResponsiveRenderPropType;\n  minWidth?: number;\n  maxWidth?: number;\n}\n\nexport const isWindowAboveMinWidth = (minWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width > minWidth;\n};\n\nexport const isWindowBelowMaxWidth = (maxWidth: number) => {\n  const scaledSize = Dimensions.get('window');\n\n  return scaledSize.width < maxWidth;\n};\n\nexport const Responsive = (props: ResponsiveProps) => {\n  const { children, minWidth, maxWidth } = props;\n\n  let isAboveMinWidth = true;\n  let isBelowMaxWidth = true;\n\n  if (minWidth) {\n    isAboveMinWidth = isWindowAboveMinWidth(minWidth);\n  }\n\n  if (maxWidth) {\n    isBelowMaxWidth = isWindowBelowMaxWidth(maxWidth);\n  }\n\n  const isRenderProp = typeof children === 'function';\n  const matches = isAboveMinWidth && isBelowMaxWidth;\n\n  // @ts-ignore\n  return isRenderProp ? children({ matches }) : matches ? children : null;\n};\n","import * as React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderPropType = (\n  props: Measurements,\n) => React.ReactNode;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children: React.ReactNode | ViewMeasureRenderPropType;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const ref = React.useRef<View>(null);\n  const { measurements, onLayout } = useMeasure({ onMeasure, ref });\n\n  return (\n    <View\n      ref={ref}\n      onLayout={onLayout}\n      // @ts-ignore\n      children={isRenderProp ? children(measurements) : children}\n      {...viewProps}\n    />\n  );\n};\n","export * from './ViewMeasure';\nexport * from './Responsive';\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface OverlayVariables {\n  overlay: ViewStyle & { cursor?: string };\n}\n\nexport const getOverlayVariables = (theme: Theme): OverlayVariables => {\n  return {\n    overlay: {\n      bottom: 0,\n      cursor: 'auto',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      width: '100%',\n    },\n  };\n};\n\nexport interface OverlayStyles {\n  overlayStyle: ViewStyle;\n}\n\nexport interface OverlayStylesProps {\n  transparent: boolean;\n}\n\nexport type GetOverlayStyles = (\n  { transparent }: OverlayStylesProps,\n  theme: Theme,\n) => OverlayStyles;\n\nexport const getOverlayStyles: GetOverlayStyles = ({ transparent }, theme) => {\n  const overlayVariables = getOverlayVariables(theme);\n\n  return {\n    overlayStyle: {\n      ...overlayVariables.overlay,\n      backgroundColor: transparent\n        ? 'transparent'\n        : theme.colors.background.overlay,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TouchableWithoutFeedback, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetOverlayStyles,\n  getOverlayStyles,\n  OverlayStyles,\n} from './Overlay.styles';\n\ninterface OverlayProps {\n  onPress: () => void;\n  transparent?: boolean;\n  getStyles?: ReplaceReturnType<GetOverlayStyles, DeepPartial<OverlayStyles>>;\n}\n\nexport const Overlay = (props: OverlayProps) => {\n  const { onPress, transparent = false, getStyles } = props;\n  const theme = useTheme();\n\n  const { overlayStyle } = mergeStyles(getOverlayStyles, getStyles)(\n    { transparent },\n    theme,\n  );\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <View style={overlayStyle} />\n    </TouchableWithoutFeedback>\n  );\n};\n","export * from './Overlay';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Popover } from '.';\nimport { Button } from '../Button';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\nimport { Toggle } from 'react-powerplug';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = ({ children }) => {\n  document.body.style.height = 'initial';\n  document.body.style.position = 'relative';\n  return <div>{children}</div>;\n}\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <p>{`Composes `}<inlineCode parentName=\"p\">{`Positioner`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <Popover\\n      isVisible={on}\\n      onClose={toggle}\\n      isDynamicContent={false}\\n      position=\\\"top\\\"\\n      content={props => (\\n        <Box width={200} height={200}>\\n          <Text>\\n            Content that can be anything. By default it has no styling at all.\\n            You can use `Popover` that comes with predefined styles. Popover\\n            is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\\n          </Text>\\n        </Box>\\n      )}\\n      isFullWidth={false}\\n      parentHeight={1000}\\n      // Use this prop to specify the position of a component u want to wrap with the positioner\\n      // targetMeasurements={{}}\\n      getStyles={(props, theme) => ({\\n        positionerStyle: {},\\n        modalContainerStyle: {},\\n      })}\\n    >\\n      <Button onPress={toggle} title=\\\"Usage\\\" />\\n    </Popover>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Popover isVisible={on} onClose={toggle} isDynamicContent={false} position=\"top\" content={props => <Box width={200} height={200} mdxType=\"Box\">\n            <Text mdxType=\"Text\">\n              Content that can be anything. By default it has no styling at all.\n              You can use `Popover` that comes with predefined styles. Popover\n              is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n            </Text>\n          </Box>} isFullWidth={false} parentHeight={1000} // Use this prop to specify the position of a component u want to wrap with the positioner\n        // targetMeasurements={{}}\n        getStyles={(props, theme) => ({\n          positionerStyle: {},\n          modalContainerStyle: {}\n        })} mdxType=\"Popover\">\n        <Button onPress={toggle} title=\"Usage\" mdxType=\"Button\" />\n      </Popover>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Box paddingBottom={64} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>\\n<Box paddingVertical={64} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>\\n<Box paddingTop={64} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box paddingBottom={64} zIndex={1} mdxType=\"Box\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top-right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top right\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"top-left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top left\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Box>\n      <Box paddingVertical={64} zIndex={2} mdxType=\"Box\">\n  <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Popover is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Popover\">\n          <Button onPress={toggle} isInline title=\"Left\" mdxType=\"Button\" />\n        </Popover>}\n    </Toggle>\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Popover is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Popover\">\n          <Button onPress={toggle} isInline title=\"Right\" mdxType=\"Button\" />\n        </Popover>}\n    </Toggle>\n  </Box>\n      </Box>\n  <Box paddingTop={64} zIndex={3} mdxType=\"Box\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"bottom-right\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom right\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"bottom\" parentHeight={2480} content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">This has parent height set to 2480</Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} onClose={toggle} position=\"bottom-left\" content={() => <Box width={200} height={200} mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom left\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"dynamically-sized-content\"\n    }}>{`Dynamically sized content`}</h3>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`isDynamicContent`}</inlineCode>{` to props to give time for Popover to calculate its layout of dynamic content prior to displaying it`}</p>\n    <Playground __position={2} __code={'<Box paddingBottom={64} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>\\n<Box paddingVertical={64} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>\\n<Box paddingTop={64} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box paddingBottom={64} zIndex={1} mdxType=\"Box\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"top-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top right\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"top\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"top-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Top left\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Box>\n      <Box paddingVertical={64} zIndex={2} mdxType=\"Box\">\n  <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"left\" content={() => <Box mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Popover is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Popover\">\n          <Button onPress={toggle} isInline title=\"Left\" mdxType=\"Button\" />\n        </Popover>}\n    </Toggle>\n    <Toggle mdxType=\"Toggle\">\n      {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"right\" content={() => <Box mdxType=\"Box\">\n              <Text mdxType=\"Text\">\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Popover is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>} mdxType=\"Popover\">\n          <Button onPress={toggle} isInline title=\"Right\" mdxType=\"Button\" />\n        </Popover>}\n    </Toggle>\n  </Box>\n      </Box>\n  <Box paddingTop={64} zIndex={3} mdxType=\"Box\">\n    <Box flexDirection=\"row\" justifyContent=\"space-between\" mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"bottom-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom right\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"bottom\" parentHeight={2480} content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">This has parent height set to 2480</Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isDynamicContent onClose={toggle} position=\"bottom-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Popover is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} isInline title=\"Bottom left\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"popover-with-full-width\"\n    }}>{`Popover with full width`}</h3>\n    <p>{`On Mobile sometimes we want the content to stretch full width of the window. There is the prop `}<inlineCode parentName=\"p\">{`isFullWidth`}</inlineCode>{` for that`}</p>\n    <Playground __position={3} __code={'<Box flexDirection=\\\"row\\\">\\n  <Box flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n  <Box flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Popover\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Popover is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Popover>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Popover,\n      Button,\n      Box,\n      Text,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box flexDirection=\"row\" mdxType=\"Box\">\n    <Box flex={1} mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isFullWidth onClose={toggle} position=\"top-left\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Popover is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} title=\"Bottom\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n    <Box flex={1} mdxType=\"Box\">\n      <Toggle mdxType=\"Toggle\">\n        {({\n              on,\n              toggle\n            }) => <Popover isVisible={on} isFullWidth onClose={toggle} position=\"bottom-right\" content={() => <Box mdxType=\"Box\">\n                <Text mdxType=\"Text\">\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Popover is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>} mdxType=\"Popover\">\n            <Button onPress={toggle} title=\"Bottom\" mdxType=\"Button\" />\n          </Popover>}\n      </Toggle>\n    </Box>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Popover} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport {\n  getPositionerStyles,\n  PositionerStyles,\n} from '../Positioner/Positioner.styles';\n\nexport interface PopoverStyles extends PositionerStyles {\n  popoverStyle: TextStyle;\n}\n\nexport type GetPopoverStyles = (props: {}, theme: Theme) => PopoverStyles;\n\nexport const getPopoverStyles: GetPopoverStyles = (props, theme) => {\n  return {\n    popoverStyle: {\n      backgroundColor: theme.colors.background.content,\n      padding: 16,\n      ...theme.elevations[2],\n    },\n    ...getPositionerStyles({}, theme),\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Positioner, PositionerProps } from '../Positioner';\nimport {\n  GetPopoverStyles,\n  getPopoverStyles,\n  PopoverStyles,\n} from './Popover.styles';\n\nexport interface PopoverProps extends PositionerProps {\n  getStyles?: ReplaceReturnType<GetPopoverStyles, DeepPartial<PopoverStyles>>;\n}\n\nexport const Popover = (props: PopoverProps) => {\n  const { content, getStyles, ...restProps } = props;\n  const theme = useTheme();\n  const { popoverStyle, modalContainerStyle, positionerStyle } = mergeStyles(\n    getPopoverStyles,\n    getStyles,\n  )({}, theme);\n\n  return (\n    <Positioner\n      {...restProps}\n      getStyles={() => ({ modalContainerStyle, positionerStyle })}\n      content={params => <View style={popoverStyle}>{content(params)}</View>}\n    />\n  );\n};\n","export * from './Popover';\n","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Positioner, PositionerProps } from '../Positioner';\nimport {\n  getFullWidthPositionerArrow,\n  getPositionerArrow,\n} from './getPositionerArrow';\n\nexport const ArrowedPositioned = (props: PositionerProps) => {\n  const { content, isFullWidth } = props;\n  const theme = useTheme();\n\n  return (\n    <Positioner\n      {...props}\n      content={({ position, targetMeasurements }) => {\n        const getPositionerArrowParams = {\n          position,\n          targetMeasurements,\n          theme,\n        };\n        const arrow = isFullWidth\n          ? getFullWidthPositionerArrow(getPositionerArrowParams)\n          : getPositionerArrow(getPositionerArrowParams);\n        return (\n          <>\n            {content}\n            {arrow}\n          </>\n        );\n      }}\n    />\n  );\n};\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PositionerStyles {\n  positionerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\n\nexport type GetPositionerStyles = (props: {}, theme: Theme) => PositionerStyles;\n\nexport const getPositionerStyles: GetPositionerStyles = (props, theme) => {\n  return {\n    modalContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n    positionerStyle: {\n      position: 'absolute',\n      zIndex: 1,\n    },\n  };\n};\n","import * as React from 'react';\nimport { Dimensions, ScaledSize, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { POSITION, Position } from '../../constants';\nimport { Measurements } from '../../hooks';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { ViewMeasure } from '../Helpers';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  GetPositionerStyles,\n  getPositionerStyles,\n  PositionerStyles,\n} from './Positioner.styles';\n\nexport interface ContentProps {\n  positionerMeasurements: Measurements;\n  targetMeasurements: Measurements;\n  position: Position;\n}\n\nexport interface PositionerProps {\n  onClose?: () => void;\n  /** For dynamic size content of positioners we have to render all the items first so it precalculates positioner position and layout, so that when user opens positioner there is no flash of adjusting positioner but immediately shows it. This is not `true` by default because it may causes small delay for the Positioner to be properly available. @default false */\n  isDynamicContent?: boolean;\n  /** Sets the positioner to cover full width. Useful when wanting to display on mobile devices a full menu. Overrides `isDynamicContent`. Ignores `right` and `left` positions. */\n  isFullWidth?: boolean;\n  children: React.ReactNode;\n  content: (props: ContentProps) => React.ReactNode;\n  /**\n   * Positioner uses window height to calculate its position, and whether it should flip to top if it at the bottom (So that it does not pop up outside the window height).\n   * However, sometimes window.height is shorter than the parent container, unnecessarily flipping it to `top`. To fix this behavior,\n   * you can pass in height of the parent so that it will use that instead of window's height\n   */\n  parentHeight?: number;\n  isVisible?: boolean;\n  position?: Position;\n  targetMeasurements?: Measurements;\n  getStyles?: ReplaceReturnType<\n    GetPositionerStyles,\n    DeepPartial<PositionerStyles>\n  >;\n}\n\nconst DEFAULT_MARGIN = 24;\nconst DEFAULT_OFFSET = 14;\n/** Time to allow all the calculation to be done */\nconst RENDER_CALCULATION_DURATION = 700;\n\nconst resolveCorrectPosition = (position: Position) => ({\n  shouldFlipBottomToTop,\n  shouldFlipLeftToRight,\n  shouldFlipRightToLeft,\n  shouldFlipTopToBottom,\n}: {\n  shouldFlipBottomToTop: boolean;\n  shouldFlipLeftToRight: boolean;\n  shouldFlipRightToLeft: boolean;\n  shouldFlipTopToBottom: boolean;\n}) => {\n  let newPosition = position;\n\n  if (position.includes(POSITION.BOTTOM) && shouldFlipBottomToTop) {\n    newPosition = newPosition.replace(\n      POSITION.BOTTOM,\n      POSITION.TOP,\n    ) as Position;\n  }\n\n  if (position.includes(POSITION.TOP) && shouldFlipTopToBottom) {\n    newPosition = newPosition.replace(\n      POSITION.TOP,\n      POSITION.BOTTOM,\n    ) as Position;\n  }\n\n  if (position.includes(POSITION.LEFT) && shouldFlipLeftToRight) {\n    newPosition = newPosition.replace(\n      POSITION.LEFT,\n      POSITION.RIGHT,\n    ) as Position;\n  }\n\n  if (position.includes(POSITION.RIGHT) && shouldFlipRightToLeft) {\n    newPosition = newPosition.replace(\n      POSITION.RIGHT,\n      POSITION.LEFT,\n    ) as Position;\n  }\n\n  return newPosition;\n};\n\ninterface GetPositionerPositionParams {\n  screenLayout: ScaledSize;\n  position: Position;\n  targetMeasurements: Measurements;\n  positionerMeasurements: Measurements;\n  offset: number;\n}\nconst getPositionerPosition = (params: GetPositionerPositionParams) => {\n  const {\n    screenLayout,\n    position,\n    targetMeasurements,\n    positionerMeasurements,\n    offset,\n  } = params;\n\n  const newPosition = resolveCorrectPosition(position)({\n    shouldFlipBottomToTop:\n      positionerMeasurements.height + offset >\n      screenLayout.height -\n        targetMeasurements.pageY +\n        targetMeasurements.height -\n        offset,\n    shouldFlipLeftToRight:\n      position === POSITION.LEFT\n        ? positionerMeasurements.width + offset + DEFAULT_MARGIN >\n          targetMeasurements.pageX - offset\n        : positionerMeasurements.width + offset >\n          screenLayout.width - targetMeasurements.pageX,\n    shouldFlipRightToLeft:\n      position === POSITION.RIGHT\n        ? targetMeasurements.pageX +\n            targetMeasurements.width +\n            positionerMeasurements.width +\n            offset >\n          screenLayout.width - offset\n        : targetMeasurements.pageX <\n          positionerMeasurements.width + DEFAULT_MARGIN,\n    shouldFlipTopToBottom:\n      positionerMeasurements.height + offset > targetMeasurements.pageY,\n  });\n\n  const isOverflowing = getIsOverflowing({\n    position,\n    positionerMeasurements,\n    screenLayout,\n  });\n\n  switch (newPosition) {\n    case POSITION.TOP_LEFT:\n      return {\n        position: POSITION.TOP_LEFT,\n\n        left: targetMeasurements.pageX,\n        marginRight: DEFAULT_MARGIN,\n        top: targetMeasurements.pageY - positionerMeasurements.height - offset,\n      };\n    case POSITION.TOP:\n      return {\n        position: POSITION.TOP,\n\n        left: targetMeasurements.pageX,\n        top: targetMeasurements.pageY - positionerMeasurements.height - offset,\n        transform: [\n          {\n            translateX:\n              -positionerMeasurements.width / 2 + targetMeasurements.width / 2,\n          },\n        ],\n      };\n    case POSITION.TOP_RIGHT:\n      return {\n        position: POSITION.TOP_RIGHT,\n\n        ...(isOverflowing\n          ? {\n              left: 0,\n              marginLeft: DEFAULT_MARGIN,\n              marginRight:\n                screenLayout.width -\n                targetMeasurements.pageX -\n                targetMeasurements.width,\n            }\n          : {\n              left:\n                targetMeasurements.pageX -\n                positionerMeasurements.width +\n                targetMeasurements.width,\n            }),\n        top: targetMeasurements.pageY - positionerMeasurements.height - offset,\n      };\n    case POSITION.LEFT:\n      return {\n        position: POSITION.LEFT,\n\n        ...(isOverflowing\n          ? {\n              left: 0,\n              marginLeft: DEFAULT_MARGIN,\n              marginRight:\n                screenLayout.width - targetMeasurements.pageX + offset,\n            }\n          : {\n              left:\n                targetMeasurements.pageX -\n                positionerMeasurements.width -\n                offset,\n            }),\n        top: targetMeasurements.pageY,\n        transform: [\n          {\n            translateY:\n              -positionerMeasurements.height / 2 +\n              targetMeasurements.height / 2,\n          },\n        ],\n      };\n    case POSITION.RIGHT:\n      return {\n        position: POSITION.RIGHT,\n\n        left: targetMeasurements.pageX + targetMeasurements.width + offset,\n        marginRight: DEFAULT_MARGIN,\n        top: targetMeasurements.pageY,\n        transform: [\n          {\n            translateY:\n              -positionerMeasurements.height / 2 +\n              targetMeasurements.height / 2,\n          },\n        ],\n      };\n    case POSITION.BOTTOM_RIGHT:\n      return {\n        position: POSITION.BOTTOM_RIGHT,\n\n        left:\n          targetMeasurements.pageX -\n          positionerMeasurements.width +\n          targetMeasurements.width,\n        top: targetMeasurements.pageY + targetMeasurements.height + offset,\n      };\n    case POSITION.BOTTOM:\n      return {\n        position: POSITION.BOTTOM,\n\n        left: targetMeasurements.pageX,\n        top: targetMeasurements.pageY + targetMeasurements.height + offset,\n        transform: [\n          {\n            translateX:\n              -positionerMeasurements.width / 2 + targetMeasurements.width / 2,\n          },\n        ],\n      };\n    case POSITION.BOTTOM_LEFT:\n      return {\n        position: POSITION.BOTTOM_LEFT,\n\n        left: targetMeasurements.pageX,\n        marginRight: DEFAULT_MARGIN,\n        top: targetMeasurements.pageY + targetMeasurements.height + offset,\n      };\n    default:\n      return {\n        position: POSITION.BOTTOM_RIGHT,\n      };\n  }\n};\n\nconst getPositionerFullWidthPosition = (\n  params: GetPositionerPositionParams,\n) => {\n  const {\n    screenLayout,\n    position,\n    targetMeasurements,\n    positionerMeasurements,\n    offset,\n  } = params;\n\n  const newPosition = resolveCorrectPosition(position)({\n    shouldFlipBottomToTop:\n      positionerMeasurements.height + offset >\n      screenLayout.height -\n        targetMeasurements.pageY +\n        targetMeasurements.height -\n        offset,\n    shouldFlipLeftToRight: false,\n    shouldFlipRightToLeft: false,\n    shouldFlipTopToBottom:\n      positionerMeasurements.height + offset > targetMeasurements.pageY,\n  })\n    .replace('-left', '')\n    .replace('-right', '');\n\n  switch (newPosition) {\n    case POSITION.TOP:\n      return {\n        position: POSITION.TOP,\n\n        left: 0,\n        right: 0,\n        top: targetMeasurements.pageY - positionerMeasurements.height - offset,\n      };\n    case POSITION.BOTTOM:\n      return {\n        position: POSITION.BOTTOM,\n\n        left: 0,\n        right: 0,\n        top: targetMeasurements.pageY + targetMeasurements.height + offset,\n      };\n    default:\n      return {\n        position: POSITION.BOTTOM_RIGHT,\n      };\n  }\n};\n\nexport const getIsOverflowing = ({\n  positionerMeasurements,\n  screenLayout,\n  position,\n}: {\n  positionerMeasurements: Measurements;\n  screenLayout: ScaledSize;\n  position: Position;\n}) => {\n  if (positionerMeasurements.width > screenLayout.width - 48) {\n    return true;\n  }\n\n  return false;\n};\n\nexport interface PositionerState {\n  /** This is the adjusted measurements of the positioner when the content is of dynamic size. It adjusts several times when its position is being calculated to account for things like window overflow, margins and other layout calculations */\n  positionerMeasurements: Measurements;\n  /** Measurements of the wrapped component */\n  childrenMeasurements: Measurements;\n  /** HACK: For dynamic size content of positioners we have to render all the items first so it precalculates positioner position and layout, so that when user opens positioner there is no flash of adjusting positioner but immediately shows it */\n  isAdjustingContent: boolean;\n}\n\nconst defaultProps = {\n  isDynamicContent: false,\n  isFullWidth: false,\n  position: POSITION.BOTTOM,\n};\n\nconst initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nexport const Positioner = (props: PositionerProps) => {\n  let hasOverflowedCounter = 0;\n  const {\n    getStyles,\n    children,\n    content,\n    parentHeight,\n    isVisible,\n    isFullWidth = defaultProps.isFullWidth,\n    onClose = () => null,\n    position = defaultProps.position,\n    targetMeasurements,\n    isDynamicContent = defaultProps.isDynamicContent,\n  } = props;\n  const [positionerMeasurements, setPositionerMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const [childrenMeasurements, setChildrenMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const [isAdjustingContent, setIsAdjustingContent] = React.useState(\n    isDynamicContent,\n  );\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (isDynamicContent) {\n      setTimeout(() => {\n        setIsAdjustingContent(false);\n      }, RENDER_CALCULATION_DURATION);\n    }\n  });\n\n  const { positionerStyle, modalContainerStyle } = mergeStyles(\n    getPositionerStyles,\n    getStyles,\n  )({}, theme);\n\n  const screenLayout = Dimensions.get('window');\n\n  const finalTargetMeasurements = targetMeasurements || childrenMeasurements;\n  const hasPositionerMeasurementsMeasured =\n    positionerMeasurements.width !== 0 && positionerMeasurements.height !== 0;\n  const getPositionerPositionParams = {\n    offset: DEFAULT_OFFSET,\n    position,\n    positionerMeasurements,\n    screenLayout: {\n      ...screenLayout,\n      height: parentHeight || screenLayout.height,\n    },\n    targetMeasurements: finalTargetMeasurements,\n  };\n\n  const {\n    position: correctedPosition,\n    ...positionerPositionStyle\n  } = isFullWidth\n    ? getPositionerFullWidthPosition(getPositionerPositionParams)\n    : getPositionerPosition(getPositionerPositionParams);\n\n  return (\n    <>\n      {targetMeasurements ? (\n        children\n      ) : (\n        <ViewMeasure onMeasure={setChildrenMeasurements}>\n          {children}\n        </ViewMeasure>\n      )}\n      <Modal\n        visible={isAdjustingContent || isVisible}\n        transparent\n        onRequestClose={onClose}\n        shouldLockBodyScroll={false}\n      >\n        <View style={modalContainerStyle}>\n          <ViewMeasure\n            style={{\n              ...positionerStyle,\n              ...positionerPositionStyle,\n              // Hide flash mis-positioned content\n              opacity:\n                hasPositionerMeasurementsMeasured && !isAdjustingContent\n                  ? 1\n                  : 0,\n            }}\n            onMeasure={measurements => {\n              const isOverflowing = getIsOverflowing({\n                position,\n                positionerMeasurements,\n                screenLayout,\n              });\n              /**\n               * Positioner usually gets expected positioning after it has overflowed once.\n               */\n\n              if (hasOverflowedCounter === 0 || !isOverflowing) {\n                setPositionerMeasurements(measurements);\n              }\n\n              if (isOverflowing) {\n                hasOverflowedCounter++;\n              }\n            }}\n          >\n            {content({\n              position: correctedPosition,\n              positionerMeasurements,\n              targetMeasurements: finalTargetMeasurements,\n            })}\n          </ViewMeasure>\n          <Overlay transparent onPress={onClose} />\n        </View>\n      </Modal>\n    </>\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { Position } from '../../constants';\nimport { Measurements } from '../../hooks';\nimport { Theme } from '../../theme';\n\nconst arrowWidth = 11;\nconst commonStyle = {\n  borderColor: 'transparent',\n  borderWidth: 11,\n  height: 0,\n  position: 'absolute',\n  width: 0,\n} as ViewStyle;\n\nexport const TopLeftArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: theme.colors.border.default,\n        bottom: 0,\n        left: targetMeasurements.width / 2,\n        marginBottom: -arrowWidth * 2,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: 'white',\n        bottom: 0,\n        left: targetMeasurements.width / 2,\n        marginBottom: -arrowWidth * 2 + 1,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const TopArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: theme.colors.border.default,\n        bottom: 0,\n        left: '50%',\n        marginBottom: -arrowWidth * 2,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: 'white',\n        bottom: 0,\n        left: '50%',\n        marginBottom: -arrowWidth * 2 + 1,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const TopRightArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: theme.colors.border.default,\n        bottom: 0,\n        marginBottom: -arrowWidth * 2,\n        right: targetMeasurements.width / 2,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: 'white',\n        bottom: 0,\n        marginBottom: -arrowWidth * 2 + 1,\n        right: targetMeasurements.width / 2,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const LeftArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderLeftColor: theme.colors.border.default,\n        marginRight: -arrowWidth * 2,\n        right: 0,\n        top: '50%',\n        transform: [{ translateY: -arrowWidth + 1 }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderLeftColor: 'white',\n        marginRight: -arrowWidth * 2 + 1,\n        right: 0,\n        top: '50%',\n        transform: [{ translateY: -arrowWidth + 1 }],\n      }}\n    />\n  </>\n);\n\nexport const RightArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderRightColor: theme.colors.border.default,\n        left: 0,\n        marginLeft: -arrowWidth * 2,\n        top: '50%',\n        transform: [{ translateY: -arrowWidth + 1 }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderRightColor: 'white',\n        left: 0,\n        marginLeft: -arrowWidth * 2 + 1,\n        top: '50%',\n        transform: [{ translateY: -arrowWidth + 1 }],\n      }}\n    />\n  </>\n);\n\nexport const BottomRightArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: theme.colors.border.default,\n        marginTop: -arrowWidth * 2,\n        right: targetMeasurements.width / 2,\n        top: 0,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: 'white',\n        marginTop: -arrowWidth * 2 + 1,\n        right: targetMeasurements.width / 2,\n        top: 0,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const BottomArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: theme.colors.border.default,\n        marginTop: -arrowWidth * 2,\n        right: '50%',\n        top: 0,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: 'white',\n        marginTop: -arrowWidth * 2 + 1,\n        right: '50%',\n        top: 0,\n        transform: [{ translateX: arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const BottomLeftArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: theme.colors.border.default,\n        left: targetMeasurements.width / 2,\n        marginTop: -arrowWidth * 2,\n        top: 0,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: 'white',\n        left: targetMeasurements.width / 2,\n        marginTop: -arrowWidth * 2 + 1,\n        top: 0,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const getPositionerArrow = ({\n  position,\n  targetMeasurements,\n  theme,\n}: {\n  position: Position;\n  targetMeasurements: Measurements;\n  theme: Theme;\n}) => {\n  switch (position) {\n    case 'top-left':\n      return (\n        <TopLeftArrow theme={theme} targetMeasurements={targetMeasurements} />\n      );\n    case 'top':\n      return <TopArrow theme={theme} targetMeasurements={targetMeasurements} />;\n    case 'top-right':\n      return (\n        <TopRightArrow theme={theme} targetMeasurements={targetMeasurements} />\n      );\n    case 'left':\n      return (\n        <LeftArrow theme={theme} targetMeasurements={targetMeasurements} />\n      );\n    case 'right':\n      return (\n        <RightArrow theme={theme} targetMeasurements={targetMeasurements} />\n      );\n    case 'bottom-right':\n      return (\n        <BottomRightArrow\n          theme={theme}\n          targetMeasurements={targetMeasurements}\n        />\n      );\n    case 'bottom':\n      return (\n        <BottomArrow theme={theme} targetMeasurements={targetMeasurements} />\n      );\n    case 'bottom-left':\n      return (\n        <BottomLeftArrow\n          theme={theme}\n          targetMeasurements={targetMeasurements}\n        />\n      );\n    default:\n      return <View />;\n  }\n};\n\nexport const FullWidthTopArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: theme.colors.border.default,\n        bottom: 0,\n        left: targetMeasurements.pageX + targetMeasurements.width / 2,\n        marginBottom: -arrowWidth * 2,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderTopColor: 'white',\n        bottom: 0,\n        left: targetMeasurements.pageX + targetMeasurements.width / 2,\n        marginBottom: -arrowWidth * 2 + 1,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const FullWidthBottomArrow = ({\n  theme,\n  targetMeasurements,\n}: {\n  theme: Theme;\n  targetMeasurements: Measurements;\n}) => (\n  <>\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: theme.colors.border.default,\n        left: targetMeasurements.pageX + targetMeasurements.width / 2,\n        marginTop: -arrowWidth * 2,\n        top: 0,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n    <View\n      style={{\n        ...commonStyle,\n        borderBottomColor: 'white',\n        left: targetMeasurements.pageX + targetMeasurements.width / 2,\n        marginTop: -arrowWidth * 2 + 1,\n        top: 0,\n        transform: [{ translateX: -arrowWidth }],\n      }}\n    />\n  </>\n);\n\nexport const getFullWidthPositionerArrow = ({\n  position,\n  targetMeasurements,\n  theme,\n}: {\n  position: Position;\n  targetMeasurements: Measurements;\n  theme: Theme;\n}) => {\n  switch (position) {\n    case 'top':\n      return (\n        <FullWidthTopArrow\n          theme={theme}\n          targetMeasurements={targetMeasurements}\n        />\n      );\n    case 'bottom':\n      return (\n        <FullWidthBottomArrow\n          theme={theme}\n          targetMeasurements={targetMeasurements}\n        />\n      );\n    default:\n      return <View />;\n  }\n};\n","export * from './Positioner';\nexport * from './ArrowedPositioner';\n","export interface Intents {\n  danger: 'danger';\n  info: 'info';\n  success: 'success';\n  warning: 'warning';\n}\n\nexport type Intent = keyof Intents;\n\nexport const INTENT: Intents = {\n  danger: 'danger',\n  info: 'info',\n  success: 'success',\n  warning: 'warning',\n};\n","type TOP = 'top';\ntype TOP_LEFT = 'top-left';\ntype TOP_RIGHT = 'top-right';\ntype BOTTOM = 'bottom';\ntype BOTTOM_LEFT = 'bottom-left';\ntype BOTTOM_RIGHT = 'bottom-right';\ntype LEFT = 'left';\ntype RIGHT = 'right';\n\nexport interface PositionInterface {\n  TOP: TOP;\n  TOP_LEFT: TOP_LEFT;\n  TOP_RIGHT: TOP_RIGHT;\n  BOTTOM: BOTTOM;\n  BOTTOM_LEFT: BOTTOM_LEFT;\n  BOTTOM_RIGHT: BOTTOM_RIGHT;\n  LEFT: LEFT;\n  RIGHT: RIGHT;\n}\n\nexport const POSITION: PositionInterface = {\n  TOP: 'top',\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n\n  BOTTOM: 'bottom',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n\n  LEFT: 'left',\n  RIGHT: 'right',\n};\n\nexport type Position =\n  | TOP\n  | TOP_LEFT\n  | TOP_RIGHT\n  | BOTTOM\n  | BOTTOM_LEFT\n  | BOTTOM_RIGHT\n  | LEFT\n  | RIGHT;\n","/**\n * Stacking order contains z-index values that are used through.\n * Note that the Stack component might increase the z-index for certain components.\n */\nexport default {\n  /**\n   * Used for focused buttons and controls.\n   */\n  FOCUSED: 2,\n\n  /**\n   * Used as the default for the StackingContext.\n   */\n  STACKING_CONTEXT: 5,\n\n  /**\n   * Used as the default for the Positioner.\n   */\n  POSITIONER: 10,\n\n  /**\n   * Used for the Overlay and everything that's inside such as Dialog + SideSheet.\n   */\n  OVERLAY: 20,\n\n  /**\n   * Used for the toasts in the toaster. Appears on top of everything else.\n   */\n  TOASTER: 30,\n};\n","export { default as StackingOrder } from './StackingOrder';\nexport { Intent, Intents } from './Intent';\nexport * from './Position';\n"],"sourceRoot":""}