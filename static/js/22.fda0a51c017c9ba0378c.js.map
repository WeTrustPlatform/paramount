{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Badge/Badge.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Badge","Box","___WEBPACK_IMPORTED_MODULE_6__","___WEBPACK_IMPORTED_MODULE_5__","title","color","isSolid","size","shape","of","parentName","className","isMDXComponent","getBadgeStyles","theme","_ref$size","_ref$color","_ref$isSolid","_ref$shape","shapeStyles","containerShapes","colors","fills","solid","subtle","_ref2","isControlSize","small","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","textSize","textSizes","containerStyle","objectSpread","alignItems","alignSelf","backgroundColor","display","flexDirection","justifyContent","textStyle","textTransform","getStyles","testID","useTheme","_mergeStyles","mergeStyles","react","View","style","Text","weight","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/22.b02fb170.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Badge, Box } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"badge\"\n    }}>{`Badge`}</h1>\n    <p>{`Display to indicate status or feat of service`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Badge title=\\\"Badge\\\" color=\\\"teal\\\" isSolid size=\\\"large\\\" shape=\\\"pill\\\" />\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Badge,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Badge title=\"Badge\" color=\"teal\" isSolid size=\"large\" shape=\"pill\" mdxType=\"Badge\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Badge} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`BadgeStyles {\n  textStyle: TextStyle;\n  containerStyle: ViewStyle;\n}\n\ngetStyles={(BadgeProps, Theme) => BadgeStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View containerStyle>\n  <Text textStyle>{title}</Text>\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { BadgeProps } from './Badge';\n\nexport interface BadgeStyles {\n  textStyle: TextStyle;\n  containerStyle: ViewStyle;\n}\n\nexport type GetBadgeStyles = (\n  props: BadgeProps,\n  theme: Theme,\n) => Partial<BadgeStyles>;\n\nexport const getBadgeStyles: GetBadgeStyles = (\n  { size = 'medium', color = 'neutral', isSolid = false, shape = 'rounded' },\n  theme,\n) => {\n  const shapeStyles = theme.containerShapes[shape];\n  const fills = isSolid ? theme.fills.solid : theme.fills.subtle;\n\n  const colors = fills[color];\n  const { height, paddingLeft, paddingRight } = isControlSize(size)\n    ? {\n        small: {\n          height: theme.controlHeights.small,\n          paddingLeft: theme.controlPaddings.small,\n          paddingRight: theme.controlPaddings.small,\n        },\n\n        medium: {\n          height: theme.controlHeights.medium,\n          paddingLeft: theme.controlPaddings.medium,\n          paddingRight: theme.controlPaddings.medium,\n        },\n\n        large: {\n          height: theme.controlHeights.large,\n          paddingLeft: theme.controlPaddings.large,\n          paddingRight: theme.controlPaddings.large,\n        },\n      }[size]\n    : {\n        height: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      };\n\n  const textSize = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      alignSelf: 'flex-start',\n      backgroundColor: colors.backgroundColor,\n      display: 'flex',\n      flexDirection: 'row',\n      height,\n      justifyContent: 'center',\n      paddingLeft,\n      paddingRight,\n      ...shapeStyles,\n    },\n    textStyle: {\n      color: colors.color,\n      textTransform: 'uppercase',\n      ...textSize,\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ContainerShape, ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport { GetBadgeStyles, getBadgeStyles } from './Badge.styles';\n\nexport interface BadgeProps {\n  /** Title of the badge */\n  title?: string;\n\n  /**\n   * Color of the badge\n   * @default \"neutral\"\n   */\n  color?: FillColor;\n\n  /**\n   * Size of the badge\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Shape of the container\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * When true, display in solid mode\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: GetBadgeStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Badge = (props: BadgeProps) => {\n  const { getStyles, title, testID } = props;\n\n  const theme = useTheme();\n\n  const { containerStyle, textStyle } = mergeStyles(\n    getBadgeStyles,\n    getStyles,\n    theme.components.getBadgeStyles,\n  )(props, theme);\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      <Text weight=\"bold\" getStyles={() => ({ textStyle })}>\n        {title}\n      </Text>\n    </View>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}