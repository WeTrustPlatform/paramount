{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Layout.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","parentName","href","className","isMDXComponent"],"mappings":"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","file":"static/js/40.f13ed443.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h1>\n    <p>{`Paramount provides building blocks to create responsive layout via components `}<inlineCode parentName=\"p\">{`Visible`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Row and Column`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Container`}</inlineCode>{` and convenience functions (`}<a parentName=\"p\" {...{\n        \"href\": \"#api\"\n      }}>{`see API`}</a>{`)`}</p>\n    <h3 {...{\n      \"id\": \"setup-and-usage\"\n    }}>{`Setup and usage`}</h3>\n    <p>{`Put `}<inlineCode parentName=\"p\">{`LayoutProvider`}</inlineCode>{` at the top level component to wrap components that make use of `}<inlineCode parentName=\"p\">{`LayoutContext`}</inlineCode>{`. For options, `}<a parentName=\"p\" {...{\n        \"href\": \"#options\"\n      }}>{`see configuration options`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<LayoutProvider\n  value={{\n    breakpoints: Breakpoints,\n    gridColumnCount: ColumnCount,\n    gutterWidth: number,\n    containerSizes: ContainerSizes,\n  }}\n>\n  <Container>\n    <Row>\n      <Column />\n    </Row>\n  </Container>\n  <Visible />\n</LayoutProvider>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h3>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useLayout`}</inlineCode>{` that you can import to make use of utility functions for layout`}</p>\n    <p>{`currentScreenSize`}</p>\n    <p>{`Retrieves the current screen size`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { currentScreenSize } = useLayout();\n\nconsole.log(currentScreenSize);\n// either xsmall, small, medium, large, xlarge\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"getresponsivevalue\"\n    }}>{`getResponsiveValue`}</h4>\n    <p>{`Returns arbitrary value that matches nearest defined size that is smaller than or equal to current screen size`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { getResponsiveValue } = useLayout();\n\nconst value = getResponsiveValue({ xsmall: 'blue', large: 'red' }); // Can be strings, numbers, anything\n\nconsole.log(value);\n// If currentScreenSize is large, it will return \\`red\\`\n// If currentScreenSize is small, it will return \\`blue\\`\n// If currentScreenSize is xsmall, it will return \\`blue\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export const defaultLayout: LayoutInterface = {\n  breakpoints: {\n    small: 480,\n\n    medium: 768,\n\n    large: 992,\n\n    xlarge: 1200,\n  },\n  containerSizes: {\n    small: 540,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1140,\n  },\n  gridColumnCount: 12,\n  gutterWidth: 30,\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}