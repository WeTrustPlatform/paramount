{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/changeColor.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","Object","slicedToArray","useCallback","AnimatedView","animated","View","Dots","props","theme","useTheme","_props$size","size","_props$color","color","colors","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","react","style","alignItems","flexDirection","justifyContent","__source","fileName","_jsxFileName","lineNumber","map","index","key","backgroundColor","borderRadius","height","marginLeft","marginRight","width","pad","num","totalChars","length","changeColor","ratio","darker","replace","difference","Math","round","rgbValue","rgb","match","RegExp","alpha","decimal","substring","arg1","arg2","arg3","parseInt","split","toString","join","darken","lighten","getButtonAppearances","minimal","default","background","content","danger","secondary","button","defaultText","loadingBackgroundColor","overlay","dangerText","dangerLight","primaryText","primaryLight","secondaryText","secondaryLight","outline","borderColor","borderWidth","border","getButtonStyles","buttonStyleProps","appearance","isDisabled","isLoading","isInline","iconBefore","iconAfter","_buttonAppearances$ap","textColor","buttonStyle","objectWithoutProperties","objectSpread","controlBorderRadius","controlHeights","paddingLeft","controlPaddings","paddingRight","disabled","alignSelf","flexWrap","focusColor","textStyle","muted","display","fontWeight","textAlign","innerButtonWrapperStyle","buttonContentWrapperStyle","Button","_props$appearance","title","getStyles","icon","_props$isDisabled","iconLoading","isActive","_props$isInline","_props$isLoading","_props$onPress","onPress","testID","accessibilityProps","_mergeStyles","mergeStyles","components","TouchableHighlight","esm_extends","accessible","accessibilityRole","underlayColor","Button_jsxFileName","Button_ButtonContent","ButtonContent","Dots_Dots","Text","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","getTextColor","textColors","getTextSize","textSizes","fontSize","getTextStyles","_ref","isItalic","align","transform","weight","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontStyle","textTransform","children","_props$fontFamily","_props$align","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","small","medium","large","greyLight","greyDefault","greyDark","primaryDefault","primaryDark","secondaryDefault","secondaryDark","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","info","success","warning","disabledText","link","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","paragraphSizes","xsmall","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/1.e9322d36.js","sourcesContent":["import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","// From https://stackoverflow.com/questions/1507931/generate-lighter-darker-color-in-css-using-javascript\n\nconst pad = (num: string, totalChars: number) => {\n  num = num + '';\n  while (num.length < totalChars) {\n    num = '0' + num;\n  }\n  return num;\n};\n\n// Ratio is between 0 and 1\nconst changeColor = (color: string, ratio: number, darker: boolean) => {\n  // Trim trailing/leading whitespace\n  color = color.replace(/^\\s*|\\s*$/, '');\n\n  // Expand three-digit hex\n  color = color.replace(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i, '#$1$1$2$2$3$3');\n\n  // Calculate ratio\n  const difference = Math.round(ratio * 256) * (darker ? -1 : 1);\n  // Determine if input is RGB(A)\n  const rgbValue = '(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])';\n  const rgb = color.match(\n    new RegExp(\n      '^rgba?\\\\(\\\\s*' +\n        rgbValue +\n        '\\\\s*,\\\\s*' +\n        rgbValue +\n        '\\\\s*,\\\\s*' +\n        rgbValue +\n        '(?:\\\\s*,\\\\s*' +\n        '(0|1|0?\\\\.\\\\d+))?' +\n        '\\\\s*\\\\)$',\n      'i',\n    ),\n  );\n\n  const alpha = !!rgb && rgb[4] != null ? rgb[4] : null;\n  // Convert hex to decimal\n  const decimal = !!rgb\n    ? [rgb[1], rgb[2], rgb[3]]\n    : color\n        .replace(\n          /^#?([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])([a-f0-9][a-f0-9])/i,\n          (substring, arg1, arg2, arg3) => {\n            return (\n              parseInt(arg1, 16) +\n              ',' +\n              parseInt(arg2, 16) +\n              ',' +\n              parseInt(arg3, 16)\n            );\n          },\n        )\n        .split(/,/);\n\n  // Return RGB(A)\n  return !!rgb\n    ? 'rgb' +\n        (alpha !== null ? 'a' : '') +\n        '(' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[0], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[1], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        ', ' +\n        Math[darker ? 'max' : 'min'](\n          parseInt(decimal[2], 10) + difference,\n          darker ? 0 : 255,\n        ) +\n        (alpha !== null ? ', ' + alpha : '') +\n        ')'\n    : // Return hex\n      [\n        '#',\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[0], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[1], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n        pad(\n          Math[darker ? 'max' : 'min'](\n            parseInt(decimal[2], 10) + difference,\n            darker ? 0 : 255,\n          ).toString(16),\n          2,\n        ),\n      ].join('');\n};\n\nexport const darken = (color: string, ratio: number) => {\n  return changeColor(color, ratio, true);\n};\n\nexport const lighten = (color: string, ratio: number) => {\n  return changeColor(color, ratio, false);\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme } from '../../theme/Theme';\nimport { darken } from './changeColor';\n\nexport interface ButtonColorProps {\n  backgroundColor: string;\n  color: string;\n  borderWidth?: number;\n  borderColor?: string;\n  loadingBackgroundColor?: string;\n}\n\nexport interface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ButtonColorProps };\n  primary: { [size in ButtonColor]: ButtonColorProps };\n  outline: { [size in ButtonColor]: ButtonColorProps };\n}\n\nexport type ButtonAppearance = keyof ButtonAppearances;\n\nexport const getButtonAppearances = (theme: Theme): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.danger,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.primary,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        color: theme.colors.text.secondary,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: theme.colors.button.default,\n        color: theme.colors.button.defaultText,\n\n        loadingBackgroundColor: theme.colors.background.overlay,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.button.danger,\n        color: theme.colors.button.dangerText,\n\n        loadingBackgroundColor: theme.colors.background.dangerLight,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.button.primary,\n        color: theme.colors.button.primaryText,\n\n        loadingBackgroundColor: theme.colors.background.primaryLight,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.button.secondary,\n        color: theme.colors.button.secondaryText,\n\n        loadingBackgroundColor: theme.colors.background.secondaryLight,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n        color: theme.colors.text.default,\n      },\n\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n        color: theme.colors.text.danger,\n      },\n\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n        color: theme.colors.text.primary,\n      },\n\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n        color: theme.colors.text.secondary,\n      },\n    },\n  };\n};\n\nexport interface ButtonStyles {\n  buttonStyle: ViewStyle;\n  textStyle: TextStyle;\n  focusColor: string;\n  innerButtonWrapperStyle: ViewStyle;\n  buttonContentWrapperStyle: ViewStyle;\n}\n\nexport interface ButtonStylesProps {\n  appearance: ButtonAppearance;\n  color: ButtonColor;\n  size: ControlSize;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isInline: boolean;\n  iconBefore?: any;\n  iconAfter?: any;\n}\nexport type GetButtonStyles = (\n  buttonStylesProps: ButtonStylesProps,\n  theme: Theme,\n) => ButtonStyles;\n\nexport const getButtonStyles: GetButtonStyles = (buttonStyleProps, theme) => {\n  const {\n    appearance,\n    color,\n    size,\n    isDisabled,\n    isLoading,\n    isInline,\n    iconBefore,\n    iconAfter,\n  } = buttonStyleProps;\n\n  const buttonAppearances = getButtonAppearances(theme);\n\n  const {\n    color: textColor,\n    loadingBackgroundColor,\n    ...buttonStyle\n  } = buttonAppearances[appearance][color];\n\n  return {\n    buttonStyle: {\n      borderRadius: theme.controlBorderRadius[size],\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size] * 2,\n      paddingRight: theme.controlPaddings[size] * 2,\n      ...buttonStyle,\n      ...(isDisabled\n        ? {\n            backgroundColor: theme.colors.button.disabled,\n          }\n        : {\n            ...(isLoading ? { backgroundColor: loadingBackgroundColor } : {}),\n          }),\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }\n        : {}),\n    },\n    focusColor:\n      appearance === 'minimal' || appearance === 'outline'\n        ? theme.colors.button.default\n        : darken(buttonStyle.backgroundColor, 0.05),\n    textStyle: {\n      alignItems: 'center',\n      color: isDisabled ? theme.colors.text.muted : textColor,\n      display: 'flex',\n      fontWeight: '600',\n      justifyContent: 'center',\n      textAlign: 'center',\n    },\n\n    innerButtonWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      height: '100%',\n      justifyContent: 'center',\n    },\n\n    buttonContentWrapperStyle: {\n      paddingLeft: iconBefore ? 8 : 0,\n      paddingRight: iconAfter ? 8 : 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TextStyle,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ButtonColor, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Dots } from '../LoadingIndicators';\nimport { Text } from '../Typography';\nimport {\n  ButtonAppearance,\n  ButtonStyles,\n  GetButtonStyles,\n  getButtonStyles,\n} from './Button.styles';\n\nexport interface ButtonProps extends AccessibilityProps {\n  title?: string;\n\n  /**\n   * Icon in place of title\n   * @default \"null\"\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * The intent of the button.\n   * @default \"primary\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Forcefully set the active state of a button.\n   * @default false\n   */\n  isActive?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, the button will not stretch full width\n   * @default false\n   */\n  isInline?: boolean;\n\n  /**\n   * Button press handler\n   * @default () => {}\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /**\n   * Sets an icon before the text.\n   * @default undefined\n   */\n  iconBefore?: React.ReactNode;\n\n  /**\n   * Sets an icon after the text.\n   * @default undefined\n   */\n  iconAfter?: React.ReactNode;\n\n  /**\n   * Sets an icon at loading state.\n   * @default undefined\n   */\n  iconLoading?: React.ReactNode;\n\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetButtonStyles, DeepPartial<ButtonStyles>>;\n\n  testID?: string;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    title,\n    color = 'primary',\n    getStyles,\n    icon,\n    iconAfter,\n    iconBefore,\n    iconLoading,\n    isActive = false,\n    isDisabled = false,\n    isInline = false,\n    isLoading = false,\n    onPress = () => {\n      return;\n    },\n    size = 'medium',\n    testID,\n\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    buttonStyle,\n    textStyle,\n    focusColor,\n    innerButtonWrapperStyle,\n    buttonContentWrapperStyle,\n  } = mergeStyles(getButtonStyles, getStyles, theme.components.getButtonStyles)(\n    {\n      appearance,\n      color,\n      iconAfter,\n      iconBefore,\n      isDisabled,\n      isInline,\n      isLoading,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible\n      accessibilityRole=\"button\"\n      underlayColor={focusColor}\n      disabled={!!(isDisabled || isLoading)}\n      onPress={onPress}\n      style={buttonStyle}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View style={innerButtonWrapperStyle}>\n        {iconBefore}\n        <View style={buttonContentWrapperStyle}>\n          {/*\n        // @ts-ignore */}\n          <ButtonContent {...props} textStyle={textStyle} />\n        </View>\n        {iconAfter}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport interface ButtonContentProps extends ButtonProps {\n  textStyle: TextStyle;\n}\n\nconst ButtonContent = (props: ButtonContentProps) => {\n  const { isLoading, iconLoading, icon, title, textStyle, size } = props;\n\n  if (isLoading) return iconLoading || <Dots color={textStyle.color} />;\n  if (icon) return icon;\n  if (title) {\n    return (\n      <Text size={size} getStyles={() => ({ textStyle })}>\n        {title}\n      </Text>\n    );\n  }\n\n  return null;\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}