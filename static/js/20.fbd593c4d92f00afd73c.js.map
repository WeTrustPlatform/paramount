{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/DialogPicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/DialogPicker.tsx"],"names":["getDialogVariables","theme","body","maxHeight","container","backgroundColor","elevation","maxWidth","minWidth","position","zIndex","modalContainer","alignItems","display","height","justifyContent","width","getDialogStyles","dialogVariables","bodyStyle","containerStyle","modalContainerStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Modal","_Overlay","_Dialog","Dialog","props","children","footer","header","isVisible","_props$onRequestClose","onRequestClose","getStyles","useHistory","useTheme","_mergeStyles","mergeStyles","createElement","Modal","visible","transparent","View","style","Overlay","onPress","Object","keys","forEach","key","defineProperty","exports","enumerable","get","getOverlayVariables","overlay","bottom","cursor","left","right","top","getOverlayStyles","_ref","overlayVariables","overlayStyle","_objectSpread2","default","colors","background","_props$transparent","TouchableWithoutFeedback","event","preventDefault","_react2","_interopRequireDefault","_docz","_reactPowerplug","_DialogPicker","_PickerItem","layoutProps","MDXLayout","MDXContent","components","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","State","DialogPicker","PickerItem","initial","value","_ref2","state","setState","size","selectedValue","onValueChange","itemValue","itemIndex","pickerStyle","itemStyle","label","isMDXComponent","_SelectList","_PickerButton","_props$useHistory","_props$selectedValue","_props$size","_React$useState","useState","_React$useState2","_slicedToArray2","isDialogOpen","setIsDialogOpen","data","Children","toArray","map","child","selectedIndex","findIndex","d","selectedData","selectedLabel","Fragment","PickerButton","title","SelectList","initialScrollIndex","index"],"mappings":"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","file":"static/js/20.4ef11979.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DialogVariables {\n  body: ViewStyle;\n  container: ViewStyle;\n  modalContainer: ViewStyle;\n}\n\nexport const getDialogVariables = (theme: Theme): DialogVariables => {\n  return {\n    body: {\n      maxHeight: 400,\n    },\n    container: {\n      backgroundColor: 'white',\n      elevation: 1,\n      maxWidth: 600,\n      minWidth: 280,\n      position: 'relative',\n      zIndex: 1,\n    },\n    modalContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n\nexport interface DialogStyles {\n  bodyStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDialogStyles = (theme: Theme) => DialogStyles;\n\nexport const getDialogStyles: GetDialogStyles = theme => {\n  const dialogVariables = getDialogVariables(theme);\n\n  return {\n    bodyStyle: dialogVariables.body,\n    containerStyle: dialogVariables.container,\n    modalContainerStyle: dialogVariables.modalContainer,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DialogStyles,\n  GetDialogStyles,\n  getDialogStyles,\n} from './Dialog.styles';\n\n// TODO: Import from react-native when react-native-web implementation is ready\n\nexport interface DialogProps {\n  children: React.ReactNode;\n  /** Prop to be passed to Modal */\n  useHistory?: boolean;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc, or using back button (requires useHistory to be true) */\n  onRequestClose?: () => void;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  header?: React.ReactNode;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  footer?: React.ReactNode;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetDialogStyles, DeepPartial<DialogStyles>>;\n}\n\nexport const Dialog = (props: DialogProps) => {\n  const {\n    children,\n    footer,\n    header,\n    isVisible,\n    onRequestClose = () => null,\n    getStyles,\n    useHistory,\n  } = props;\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle, bodyStyle } = mergeStyles(\n    getDialogStyles,\n    getStyles,\n  )(theme);\n\n  return (\n    <Modal\n      useHistory={useHistory}\n      visible={isVisible}\n      transparent\n      onRequestClose={onRequestClose}\n    >\n      <View style={modalContainerStyle}>\n        <View style={containerStyle}>\n          {header}\n          <View style={bodyStyle}>{children}</View>\n          {footer}\n        </View>\n        <Overlay onPress={onRequestClose} />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Dialog';\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface OverlayVariables {\n  overlay: ViewStyle & { cursor?: string };\n}\n\nexport const getOverlayVariables = (theme: Theme): OverlayVariables => {\n  return {\n    overlay: {\n      bottom: 0,\n      cursor: 'auto',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      width: '100%',\n    },\n  };\n};\n\nexport interface OverlayStyles {\n  overlayStyle: ViewStyle;\n}\n\nexport interface OverlayStylesProps {\n  transparent: boolean;\n}\n\nexport type GetOverlayStyles = (\n  { transparent }: OverlayStylesProps,\n  theme: Theme,\n) => OverlayStyles;\n\nexport const getOverlayStyles: GetOverlayStyles = ({ transparent }, theme) => {\n  const overlayVariables = getOverlayVariables(theme);\n\n  return {\n    overlayStyle: {\n      ...overlayVariables.overlay,\n      backgroundColor: transparent\n        ? 'transparent'\n        : theme.colors.background.overlay,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TouchableWithoutFeedback, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetOverlayStyles,\n  getOverlayStyles,\n  OverlayStyles,\n} from './Overlay.styles';\n\ninterface OverlayProps {\n  onPress: () => void;\n  transparent?: boolean;\n  getStyles?: ReplaceReturnType<GetOverlayStyles, DeepPartial<OverlayStyles>>;\n}\n\nexport const Overlay = (props: OverlayProps) => {\n  const { onPress, transparent = false, getStyles } = props;\n  const theme = useTheme();\n\n  const { overlayStyle } = mergeStyles(getOverlayStyles, getStyles)(\n    { transparent },\n    theme,\n  );\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <View style={overlayStyle} />\n    </TouchableWithoutFeedback>\n  );\n};\n","export * from './Overlay';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { DialogPicker } from './DialogPicker';\nimport { PickerItem } from './PickerItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"dialogpicker\"\n    }}>{`DialogPicker`}</h1>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <DialogPicker\\n      useHistory={false}\\n      header={null}\\n      size=\\\"large\\\"\\n      selectedValue={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      getStyles={(props, theme) => ({\\n        pickerStyle: {},\\n        itemStyle: {},\\n      })}\\n    >\\n      <PickerItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <PickerItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <PickerItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <PickerItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <PickerItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <PickerItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <PickerItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <PickerItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <PickerItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <PickerItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <PickerItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <PickerItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <PickerItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <PickerItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <PickerItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <PickerItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <PickerItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <PickerItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <PickerItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </DialogPicker>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      DialogPicker,\n      PickerItem\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <DialogPicker useHistory={false} header={null} size=\"large\" selectedValue={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} getStyles={(props, theme) => ({\n          pickerStyle: {},\n          itemStyle: {}\n        })} mdxType=\"DialogPicker\">\n        <PickerItem label=\"C\" value=\"c\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"C#\" value=\"c#\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"C++\" value=\"c++\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"CSS\" value=\"css\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Elixir\" value=\"elixir\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Elm\" value=\"elm\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Erlang\" value=\"erlang\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Go\" value=\"go\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Haskell\" value=\"haskell\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"HTML\" value=\"html\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Java\" value=\"java\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"JavaScript\" value=\"js\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Lua\" value=\"lua\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Python\" value=\"python\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"R\" value=\"r\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Ruby\" value=\"ruby\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Rust\" value=\"rust\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Switft\" value=\"swift\" mdxType=\"PickerItem\" />\n        <PickerItem label=\"Typescript\" value=\"typescript\" mdxType=\"PickerItem\" />\n      </DialogPicker>}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { PickerProps as RNPickerProps } from 'react-native';\n\nimport { Dialog } from '../Dialog';\nimport { SelectList, SelectListItemBaseProps } from '../SelectList';\nimport { GetPickerButtonStylesProp, PickerButton } from './PickerButton';\nimport { PickerButtonSize } from './PickerButton.styles';\n\nexport interface DialogPickerProps extends RNPickerProps {\n  children: Array<React.ReactElement<SelectListItemBaseProps>>;\n  /** Prop to be passed to Dialog */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactNode;\n  getStyles?: GetPickerButtonStylesProp;\n  size?: PickerButtonSize;\n}\n\nconst SELECTED_INDEX_OFFSET = 3;\n\nexport const DialogPicker = (props: DialogPickerProps) => {\n  const {\n    header,\n    getStyles,\n    useHistory = false,\n    selectedValue = null,\n    onValueChange,\n    children,\n    size = 'medium',\n  } = props;\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  const childrenArray = React.Children.toArray(children);\n  const data = childrenArray.map(child => child.props);\n  const selectedIndex = data.findIndex(d => d.value === selectedValue);\n  const selectedData = selectedIndex >= 0 ? data[selectedIndex] : null;\n  const selectedLabel = selectedData ? selectedData.label : null;\n\n  return (\n    <>\n      <PickerButton\n        onPress={() => setIsDialogOpen(true)}\n        getStyles={getStyles}\n        size={size}\n        title={selectedLabel}\n      />\n      <Dialog\n        header={header}\n        isVisible={isDialogOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsDialogOpen(false)}\n      >\n        <SelectList\n          initialScrollIndex={selectedIndex - SELECTED_INDEX_OFFSET}\n          selectedValue={selectedValue}\n          onValueChange={(value, index) => {\n            if (onValueChange) onValueChange(value, index);\n            setIsDialogOpen(false);\n          }}\n        >\n          {children}\n        </SelectList>\n      </Dialog>\n    </>\n  );\n};\n"],"sourceRoot":""}