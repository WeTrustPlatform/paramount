{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Toast/Toast.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_react2","_docz","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","Box","Button","ToastContext","ToastProvider","Toast","getStyles","theme","containerStyle","Consumer","_ref2","notify","onPress","title","description","component","isCloseable","offset","duration","_ref3","Fragment","intent","color","of","isMDXComponent"],"mappings":"8XACEA,EAAAC,EAAAC,EAAA,kCACAC,EAAAD,EAAA,iDAEFE,EAAAF,EAAA,yCACAG,EAAAH,EAAA,6BAOMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAA,SAAAH,EAAA,gBACD,OAAO,EAAAN,EAAAU,KAACN,GAAD,EAAAO,EAAA,YAAeR,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAG5E,EAAAZ,EAAAU,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAb,EAAAU,KAAA,sBAAgB,EAAAV,EAAAU,KAAA,cAAYI,WAAW,KAAvB,SAAhB,MACA,EAAAd,EAAAU,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAb,EAAAU,KAACT,EAAAc,WAAD,CAAYC,WAAY,EAAGC,OAAQ,0lBAA+lBC,QAAS,CACzoBV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,UACAC,gBACAC,4BACAC,8BACAC,eACCb,QAAQ,eACb,EAAAZ,EAAAU,KAACR,EAAAsB,cAAD,CAAeE,UAAW,SAAClB,EAAOmB,GAAR,MAAmB,CACvCC,eAAgB,KACdhB,QAAQ,kBACd,EAAAZ,EAAAU,KAACR,EAAAqB,aAAaM,SAAd,KACG,SAAAC,GAAA,IACKC,EADLD,EACKC,OADL,OAES,EAAA/B,EAAAU,KAACR,EAAAoB,OAAD,CAAQU,QAAS,WACrBD,EAAO,CACLE,MAAO,QACPC,YAAa,cACbC,UAAW,KAEXC,aAAa,EACbC,OAAQ,GACRC,SAAU,OAGXL,MAAM,MAAMrB,QAAQ,gBAI7B,EAAAZ,EAAAU,KAAA,KAAQ,CACNG,GAAM,YADR,aAGA,EAAAb,EAAAU,KAACT,EAAAc,WAAD,CAAYC,WAAY,EAAGC,OAAQ,8tCAAqvCC,QAAS,CAC/xCV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,UACAC,gBACAC,4BACAC,8BACAC,eACCb,QAAQ,eACb,EAAAZ,EAAAU,KAACR,EAAAsB,cAAD,CAAeZ,QAAQ,kBACrB,EAAAZ,EAAAU,KAACR,EAAAqB,aAAaM,SAAd,KACG,SAAAU,GAAA,IACKR,EADLQ,EACKR,OADL,OAES,EAAA/B,EAAAU,KAAAb,EAAA,QAAA2C,SAAA,MACN,EAAAxC,EAAAU,KAACR,EAAAoB,OAAD,CAAQU,QAAS,kBAAMD,EAAO,CAC1BE,MAAO,QACPC,YAAa,cACbE,aAAa,KACXH,MAAM,qBAAqBrB,QAAQ,YACzC,EAAAZ,EAAAU,KAACR,EAAAoB,OAAD,CAAQU,QAAS,kBAAMD,EAAO,CAC1BG,YAAa,cACbO,OAAQ,UACRR,MAAO,WACLS,MAAM,UAAUT,MAAM,qBAAqBrB,QAAQ,YACzD,EAAAZ,EAAAU,KAACR,EAAAoB,OAAD,CAAQU,QAAS,kBAAMD,EAAO,CAC1BG,YAAa,cACbO,OAAQ,SACRR,MAAO,WACLS,MAAM,SAAST,MAAM,oBAAoBrB,QAAQ,YACvD,EAAAZ,EAAAU,KAACR,EAAAoB,OAAD,CAAQU,QAAS,kBAAMD,EAAO,CAC1BG,YAAa,cACbO,OAAQ,UACRR,MAAO,WACLS,MAAM,YAAYT,MAAM,qBAAqBrB,QAAQ,iBAKjE,EAAAZ,EAAAU,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAb,EAAAU,KAACT,EAAAmB,MAAD,CAAOuB,GAAIlB,QAAOb,QAAQ,+LAI9BP,EAAWuC,gBAAiB","file":"static/js/33.768cdcae.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, ToastContext, ToastProvider, Toast } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <p>{`Composes `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<ToastProvider\\n  getStyles={(props, theme) => ({\\n    containerStyle: {},\\n  })}\\n>\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <Button\\n        onPress={() => {\\n          notify({\\n            title: \\'Title\\',\\n            description: \\'Description\\',\\n            component: null, // A React Component that overrides title and description\\n            isCloseable: true,\\n            offset: 16,\\n            duration: 3000,\\n            // ...Alert props e.g. getStyles\\n          })\\n        }}\\n        title=\\\"Use\\\"\\n      />\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      ToastContext,\n      ToastProvider,\n      Toast\n    }} mdxType=\"Playground\">\n  <ToastProvider getStyles={(props, theme) => ({\n        containerStyle: {}\n      })} mdxType=\"ToastProvider\">\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <Button onPress={() => {\n            notify({\n              title: 'Title',\n              description: 'Description',\n              component: null,\n              // A React Component that overrides title and description\n              isCloseable: true,\n              offset: 16,\n              duration: 3000 // ...Alert props e.g. getStyles\n\n            });\n          }} title=\"Use\" mdxType=\"Button\" />}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<ToastProvider>\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <>\\n        <Button\\n          onPress={() =>\\n            notify({\\n              title: \\'Title\\',\\n              description: \\'Description\\',\\n              isCloseable: true,\\n            })\\n          }\\n          title=\\\"Open default toast\\\"\\n        />\\n        <Button\\n          onPress={() =>\\n            notify({\\n              description: \\'Description\\',\\n              intent: \\'success\\',\\n              title: \\'Title\\',\\n            })\\n          }\\n          color=\\\"primary\\\"\\n          title=\\\"Open success toast\\\"\\n        />\\n        <Button\\n          onPress={() =>\\n            notify({\\n              description: \\'Description\\',\\n              intent: \\'danger\\',\\n              title: \\'Title\\',\\n            })\\n          }\\n          color=\\\"danger\\\"\\n          title=\\\"Open danger toast\\\"\\n        />\\n        <Button\\n          onPress={() =>\\n            notify({\\n              description: \\'Description\\',\\n              intent: \\'warning\\',\\n              title: \\'Title\\',\\n            })\\n          }\\n          color=\\\"secondary\\\"\\n          title=\\\"Open warning toast\\\"\\n        />\\n      </>\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      ToastContext,\n      ToastProvider,\n      Toast\n    }} mdxType=\"Playground\">\n  <ToastProvider mdxType=\"ToastProvider\">\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <>\n          <Button onPress={() => notify({\n              title: 'Title',\n              description: 'Description',\n              isCloseable: true\n            })} title=\"Open default toast\" mdxType=\"Button\" />\n          <Button onPress={() => notify({\n              description: 'Description',\n              intent: 'success',\n              title: 'Title'\n            })} color=\"primary\" title=\"Open success toast\" mdxType=\"Button\" />\n          <Button onPress={() => notify({\n              description: 'Description',\n              intent: 'danger',\n              title: 'Title'\n            })} color=\"danger\" title=\"Open danger toast\" mdxType=\"Button\" />\n          <Button onPress={() => notify({\n              description: 'Description',\n              intent: 'warning',\n              title: 'Title'\n            })} color=\"secondary\" title=\"Open warning toast\" mdxType=\"Button\" />\n        </>}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Toast} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}