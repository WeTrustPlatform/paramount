{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","Feather","_theme","_Text","Icon","_ref","name","color","size","theme","useTheme","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","getTextColor","colors","text","_Icon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_reactNative","_IconTextInput","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","_objectWithoutProperties2","IconTextInput","_extends2","ref","TouchableOpacity","onPress","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","components","getTextInputStyles","View","style","TextInput","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","isInvalid","keyboardType","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","numberOfLines","controlHeight","controlHeights","focusedStyle","backgroundColor","background","content","borderColor","border","borderRadius","controlBorderRadius","borderWidth","controlPaddings","width","textSizes","greyDark","danger","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","_ClearableTextInput","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","fontSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","textStyle","textAlign","alignSelf","flexDirection","fontStyle","textTransform","_deepmerge","_react","_defaultTheme","ThemeContext","createContext","defaultTheme","createTheme","ThemeProvider","children","_props$value","Provider","useContext","_palette","base","overlay","greyLight","palette","neutral","lightest","greyDefault","light","primaryLight","teal","primaryDefault","primaryDark","dark","secondaryLight","orange","secondaryDefault","secondaryDark","dangerLight","red","dangerDefault","dangerDark","infoLight","blue","infoDefault","infoDark","successLight","green","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","darkest","secondary","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","fills","solid","yellow","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","large","medium","small","paragraphSizes","_Theme","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/10.7e421ffb.js","sourcesContent":["import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { TextInputStylesProps } from './TextInput.styles';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps\n  extends Partial<TextInputStylesProps> {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetIconTextInputStyles,\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetIconTextInputStyles,\n    DeepPartial<IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(\n    getIconTextInputStyles,\n    getStyles,\n    theme.components.getTextInputStyles,\n  )({ hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon }, theme);\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../Icon';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const controlHeight = theme.controlHeights[size];\n\n  return {\n    focusedStyle: {},\n    inputStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderRadius: theme.controlBorderRadius[size],\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      height: theme.controlHeights[size],\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      width: '100%',\n      ...theme.textSizes[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n      ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor: theme.colors.text.muted,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetColumnStyles } from '../components/Grid/Column.styles';\nimport { GetContainerStyles } from '../components/Grid/Container.styles';\nimport { GetRowStyles } from '../components/Grid/Row.styles';\nimport { GetIconTextInputStyles } from '../components/Inputs/IconTextInput.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading?: string;\n  mono?: string;\n  text?: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetIconTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? // Use system font on the Web\n      {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : // Use default font families by React Native by default. Setting it to undefined will use the default font\n      {\n        heading: undefined,\n        mono: undefined,\n        text: undefined,\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  components: {},\n};\n","export * from './defaultTheme';\nexport * from './Theme';\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}