{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/Toggle.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["Toggle","props","children","_props$initial","initial","_React$useState","React","useState","_React$useState2","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isOn","setIsOn","handleToggle","useCallback","handleSet","on","toggle","set","layoutProps","MDXLayout","MDXContent","_ref","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","Switch","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_7__","_ref2","___WEBPACK_IMPORTED_MODULE_6__","value","onPress","of","parentName","className","isMDXComponent","getCircleSize","size","arguments","length","undefined","theme","isControlSize","controlHeights","getContainerSize","getSwitchStyles","_props$isDisabled","isDisabled","_props$size","circleSize","containerSize","backgroundColorOff","colors","background","greyDefault","backgroundColorOn","primaryDefault","circleColorOff","content","circleColorOn","circleStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","padding","width","containerStyle","greyLight","flexDirection","touchableStyle","alignSelf","flexWrap","AnimatedView","animated","View","onIcon","offIcon","_props$value","getStyles","testID","accessibilityHint","accessibilityLabel","_props$accessible","accessible","useTheme","_mergeStyles","mergeStyles","_useSpring","useSpring","config","springDefaultConfig","circleColor","circlePosition","react","TouchableOpacity","activeOpacity","style","disabled","transform","translateX","Icon_web","name","color","text","white","primary","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/18.efb35644.js","sourcesContent":["import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Switch, Toggle } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle }) => <Switch value={on} onPress={toggle} />}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Switch,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Switch value={on} onPress={toggle} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`SwitchStyles {\n  touchableStyle: ViewStyle;\n  containerStyle: ViewStyle & SwitchStylesRequired;\n  circleStyle: ViewStyle & SwitchStylesRequired;\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n}\n\ngetStyles={(SwitchProps, Theme) => SwitchStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<TouchableOpacity touchableStyle>\n  <View containerStyle>\n    <View circleStyle>{icon}</View>\n  </View>\n</TouchableOpacity>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { SwitchProps } from './Switch';\n\nexport interface SwitchStylesRequired {\n  width: number;\n  padding: number;\n}\n\nexport interface SwitchStyles {\n  touchableStyle: ViewStyle;\n  containerStyle: ViewStyle & SwitchStylesRequired;\n  circleStyle: ViewStyle & SwitchStylesRequired;\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n}\n\nexport type GetSwitchStyles = (\n  props: SwitchProps,\n  theme: Theme,\n) => Partial<SwitchStyles>;\n\nexport const getCircleSize = (\n  size: ControlSize | number = 'medium',\n  theme: Theme,\n) => {\n  return isControlSize(size) ? theme.controlHeights[size] - 8 : size;\n};\n\nexport const getContainerSize = (\n  size: ControlSize | number = 'medium',\n  theme: Theme,\n) => {\n  return getCircleSize(size, theme) * 2;\n};\n\nexport const getSwitchStyles: GetSwitchStyles = (props, theme) => {\n  const { isDisabled = false, size = 'medium' } = props;\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  return {\n    backgroundColorOff: theme.colors.background.greyDefault,\n    backgroundColorOn: isDisabled\n      ? theme.colors.background.greyDefault\n      : theme.colors.background.primaryDefault,\n    circleColorOff: theme.colors.background.content,\n    circleColorOn: theme.colors.background.content,\n\n    circleStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderRadius: 24,\n      display: 'flex',\n      height: circleSize,\n      justifyContent: 'center',\n      padding: 0,\n      width: circleSize,\n    },\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.greyLight,\n      borderRadius: 24,\n      flexDirection: 'row',\n      height: circleSize + 8,\n      padding: 3,\n      width: containerSize,\n    },\n    touchableStyle: {\n      alignSelf: 'flex-start',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  getCircleSize,\n  getContainerSize,\n  GetSwitchStyles,\n  getSwitchStyles,\n} from './Switch.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface SwitchProps {\n  /**\n   * The size of the switch.\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as switched on.\n   * @default false\n   */\n  value?: boolean;\n\n  /**\n   * When true, the switch is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /**\n   * Replace the icon when switch is on\n   */\n  onIcon?: React.ReactNode;\n\n  /**\n   * Replace the icon when switch is off\n   */\n  offIcon?: React.ReactNode;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: GetSwitchStyles;\n}\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    size = 'medium',\n    onIcon,\n    offIcon,\n    onPress,\n    value = false,\n    isDisabled = false,\n    getStyles,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n  const {\n    circleStyle,\n    containerStyle,\n    backgroundColorOff,\n    backgroundColorOn,\n    circleColorOff,\n    circleColorOn,\n    touchableStyle,\n  } = mergeStyles(getSwitchStyles, getStyles, theme.components.getSwitchStyles)(\n    props,\n    theme,\n  );\n\n  const circleSize = getCircleSize(size, theme);\n  const containerSize = getContainerSize(size, theme);\n\n  const { backgroundColor, circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: value ? backgroundColorOn : backgroundColorOff,\n    circleColor: value ? circleColorOn : circleColorOff,\n    circlePosition: value ? containerSize - (circleSize + 6) : 0,\n  });\n\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      activeOpacity={1}\n      style={touchableStyle}\n      disabled={isDisabled}\n      testID={testID}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      {/*\n      // @ts-ignore */}\n      <AnimatedView style={[containerStyle, { backgroundColor }]}>\n        <AnimatedView\n          // @ts-ignore\n          style={[\n            circleStyle,\n            { backgroundColor: circleColor },\n            { transform: [{ translateX: circlePosition }] },\n          ]}\n        >\n          {value\n            ? onIcon || (\n                <Icon\n                  name=\"check\"\n                  size=\"xsmall\"\n                  color={\n                    isDisabled\n                      ? theme.colors.text.white\n                      : theme.colors.text.primary\n                  }\n                />\n              )\n            : offIcon || (\n                <Icon\n                  name=\"x\"\n                  size=\"xsmall\"\n                  color={\n                    isDisabled\n                      ? theme.colors.text.white\n                      : theme.colors.text.default\n                  }\n                />\n              )}\n        </AnimatedView>\n      </AnimatedView>\n    </TouchableOpacity>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}