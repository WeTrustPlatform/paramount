{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/Dialog.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Dialog/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_reactPowerplug","_reactNative","_docz","_Icon","_","_Button","_Box","_Typography","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Toggle","TouchableOpacity","Props","Icon","Dialog","Button","Box","Text","Heading","initial","_ref2","on","toggle","header","padding","flexDirection","justifyContent","alignItems","onPress","name","size","footer","appearance","title","paddingLeft","color","console","log","isVisible","onRequestClose","useHistory","getStyles","theme","modalContainerStyle","containerStyle","bodyStyle","height","of","isMDXComponent","getDialogStyles","maxHeight","backgroundColor","borderRadius","controlBorderRadius","medium","elevation","maxWidth","minWidth","position","zIndex","contentContainerStyle","display","width","overlayStyle","React","_interopRequireWildcard","_theme","_mergeStyles2","_Modal","_Overlay","_Dialog","children","_props$shouldLockBody","shouldLockBodyScroll","_props$onRequestClose","useTheme","_mergeStyles","mergeStyles","createElement","Modal","visible","transparent","animationType","View","style","ScrollView","Overlay","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","colors","text","getOverlayVariables","overlay","bottom","cursor","left","right","top","getOverlayStyles","overlayVariables","_objectSpread2","background","_props$transparent","TouchableWithoutFeedback","event","preventDefault"],"mappings":"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","file":"static/js/19.a0284a9b.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Toggle } from 'react-powerplug';\nimport { TouchableOpacity } from 'react-native';\nimport { Playground, Props } from 'docz';\nimport { Icon } from '../Icon';\nimport { Dialog } from '.';\nimport { Button } from '../Button';\nimport { Box } from '../Box';\nimport { Text, Heading } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n    <p>{`Dialog has no predefined styling and handlers. The content, header and footer is completely in your control.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Box>\\n      <Dialog\\n        header={\\n          <Box\\n            padding={16}\\n            flexDirection=\\\"row\\\"\\n            justifyContent=\\\"space-between\\\"\\n            alignItems=\\\"center\\\"\\n          >\\n            <Heading>Title</Heading>\\n            <TouchableOpacity onPress={toggle}>\\n              <Icon name=\\\"x\\\" size={24} />\\n            </TouchableOpacity>\\n          </Box>\\n        }\\n        footer={\\n          <Box padding={16} flexDirection=\\\"row\\\" justifyContent=\\\"flex-end\\\">\\n            <Button appearance=\\\"minimal\\\" onPress={toggle} title=\\\"Cancel\\\" />\\n            <Box paddingLeft={16}>\\n              <Button\\n                color=\\\"primary\\\"\\n                onPress={() => console.log(\\'Button clicked\\')}\\n                title=\\\"Accept\\\"\\n              />\\n            </Box>\\n          </Box>\\n        }\\n        isVisible={on}\\n        onRequestClose={toggle}\\n        useHistory={false}\\n        getStyles={(props, theme) => ({\\n          modalContainerStyle: {},\\n          containerStyle: {},\\n          bodyStyle: {},\\n        })}\\n      >\\n        <Box height={1800}>\\n          <Text>Put any content in the dialog</Text>\\n        </Box>\\n      </Dialog>\\n      <Button onPress={toggle} title=\\\"Open dialog\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Toggle,\n      TouchableOpacity,\n      Playground,\n      Props,\n      Icon,\n      Dialog,\n      Button,\n      Box,\n      Text,\n      Heading\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Box mdxType=\"Box\">\n        <Dialog header={<Box padding={16} flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mdxType=\"Box\">\n              <Heading mdxType=\"Heading\">Title</Heading>\n              <TouchableOpacity onPress={toggle} mdxType=\"TouchableOpacity\">\n                <Icon name=\"x\" size={24} mdxType=\"Icon\" />\n              </TouchableOpacity>\n            </Box>} footer={<Box padding={16} flexDirection=\"row\" justifyContent=\"flex-end\" mdxType=\"Box\">\n              <Button appearance=\"minimal\" onPress={toggle} title=\"Cancel\" mdxType=\"Button\" />\n              <Box paddingLeft={16} mdxType=\"Box\">\n                <Button color=\"primary\" onPress={() => console.log('Button clicked')} title=\"Accept\" mdxType=\"Button\" />\n              </Box>\n            </Box>} isVisible={on} onRequestClose={toggle} useHistory={false} getStyles={(props, theme) => ({\n            modalContainerStyle: {},\n            containerStyle: {},\n            bodyStyle: {}\n          })} mdxType=\"Dialog\">\n          <Box height={1800} mdxType=\"Box\">\n            <Text mdxType=\"Text\">Put any content in the dialog</Text>\n          </Box>\n        </Dialog>\n        <Button onPress={toggle} title=\"Open dialog\" mdxType=\"Button\" />\n      </Box>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"dialog-props\"\n    }}>{`Dialog Props`}</h3>\n    <Props of={Dialog} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DialogStyles {\n  bodyStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n  contentContainerStyle: ViewStyle;\n  overlayStyle: ViewStyle;\n}\n\nexport type GetDialogStyles = (props: {}, theme: Theme) => DialogStyles;\n\nexport const getDialogStyles: GetDialogStyles = (props, theme) => {\n  return {\n    bodyStyle: {\n      maxHeight: 400,\n    },\n    containerStyle: {\n      backgroundColor: 'white',\n      borderRadius: theme.controlBorderRadius.medium,\n      elevation: 1,\n\n      /**\n       * On iOs the navigation bar and bottom bar take roughly 10% each, maxHeight offsets\n       * that amount so that it does not overflow the window\n       */\n      maxHeight: '80%',\n      maxWidth: 600,\n      minWidth: 280,\n      position: 'relative',\n      zIndex: 1,\n    },\n    contentContainerStyle: {},\n    modalContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n    overlayStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { ScrollView, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DialogStyles,\n  GetDialogStyles,\n  getDialogStyles,\n} from './Dialog.styles';\n\n// TODO: Import from react-native when react-native-web implementation is ready\n\nexport interface DialogProps {\n  children: React.ReactNode;\n  /** Prop to be passed to Modal */\n  useHistory?: boolean;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** WWhether body can scroll while dialog is opened */\n  shouldLockBodyScroll?: boolean;\n  /** Called when clicking on overlay or pressing Esc, or using back button (requires useHistory to be true) */\n  onRequestClose?: () => void;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  header?: React.ReactNode;\n  /** In ConfirmDialog, you can pass null to render nothing. If it is undefined, it will use default value */\n  footer?: React.ReactNode;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetDialogStyles, DeepPartial<DialogStyles>>;\n}\n\nexport const Dialog = (props: DialogProps) => {\n  const {\n    children,\n    footer,\n    header,\n    shouldLockBodyScroll = true,\n    isVisible,\n    onRequestClose = () => null,\n    getStyles,\n    useHistory,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    modalContainerStyle,\n    containerStyle,\n    bodyStyle,\n    contentContainerStyle,\n    overlayStyle,\n  } = mergeStyles(getDialogStyles, getStyles)({}, theme);\n\n  return (\n    <Modal\n      useHistory={useHistory}\n      visible={isVisible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={onRequestClose}\n      shouldLockBodyScroll={shouldLockBodyScroll}\n    >\n      <View style={modalContainerStyle}>\n        <View style={containerStyle}>\n          {header}\n          <ScrollView\n            contentContainerStyle={contentContainerStyle}\n            style={bodyStyle}\n          >\n            {children}\n          </ScrollView>\n          {footer}\n        </View>\n        <Overlay\n          getStyles={() => ({ overlayStyle })}\n          onPress={onRequestClose}\n        />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Dialog';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface OverlayVariables {\n  overlay: ViewStyle & { cursor?: string };\n}\n\nexport const getOverlayVariables = (theme: Theme): OverlayVariables => {\n  return {\n    overlay: {\n      bottom: 0,\n      cursor: 'auto',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      width: '100%',\n    },\n  };\n};\n\nexport interface OverlayStyles {\n  overlayStyle: ViewStyle;\n}\n\nexport interface OverlayStylesProps {\n  transparent: boolean;\n}\n\nexport type GetOverlayStyles = (\n  { transparent }: OverlayStylesProps,\n  theme: Theme,\n) => OverlayStyles;\n\nexport const getOverlayStyles: GetOverlayStyles = ({ transparent }, theme) => {\n  const overlayVariables = getOverlayVariables(theme);\n\n  return {\n    overlayStyle: {\n      ...overlayVariables.overlay,\n      backgroundColor: transparent\n        ? 'transparent'\n        : theme.colors.background.overlay,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TouchableWithoutFeedback, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetOverlayStyles,\n  getOverlayStyles,\n  OverlayStyles,\n} from './Overlay.styles';\n\ninterface OverlayProps {\n  onPress: () => void;\n  transparent?: boolean;\n  getStyles?: ReplaceReturnType<GetOverlayStyles, DeepPartial<OverlayStyles>>;\n}\n\nexport const Overlay = (props: OverlayProps) => {\n  const { onPress, transparent = false, getStyles } = props;\n  const theme = useTheme();\n\n  const { overlayStyle } = mergeStyles(getOverlayStyles, getStyles)(\n    { transparent },\n    theme,\n  );\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <View style={overlayStyle} />\n    </TouchableWithoutFeedback>\n  );\n};\n","export * from './Overlay';\n"],"sourceRoot":""}