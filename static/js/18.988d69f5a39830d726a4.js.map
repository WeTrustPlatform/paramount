{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Alert/Alert.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_Alert","_Layout","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Alert","Spacing","title","description","isCloseable","intent","component","getStyles","theme","bodyStyle","containerStyle","paddingVertical","of","isMDXComponent","alertVariables","body","flex","container","_objectSpread2","backgroundColor","colors","background","content","borderLeftWidth","borderRadius","controlBorderRadius","medium","display","flexDirection","padding","elevations","message","danger","borderLeftColor","border","info","success","warning","getAlertStyles","_alertVariables","intentStyle","textStyle","titleStyle","React","_interopRequireWildcard","_reactNative","_icons","_theme","_mergeStyles2","_Typography","onClose","_props$isCloseable","icon","_props$intent","testID","useTheme","_mergeStyles","mergeStyles","createElement","View","style","paddingRight","justifyContent","Icon","name","size","color","text","resolveIcon","Text","isBold","TouchableOpacity","onPress","paddingLeft","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_Icon"],"mappings":"8XAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,oCACAG,EAAAH,EAAA,oCAOMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAAC,SAAAJ,EAAA,gBACD,OAAO,EAAAT,EAAAc,KAACP,GAAD,EAAAQ,EAAAF,SAAA,GAAeP,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,eAE5E,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAjB,EAAAc,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAjB,EAAAc,KAACX,EAAAe,WAAD,CAAYC,WAAY,EAAGC,OAAQ,8NAAqOC,QAAS,CAC/QV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,cACAC,mBACCT,QAAQ,eACb,EAAAhB,EAAAc,KAACV,EAAAoB,MAAD,CAAOE,MAAM,eAAeC,YAAY,UAAUC,aAAW,EAACC,OAAO,UAAUC,UAAW,KACtFC,UAAW,SAACpB,EAAOqB,GAAR,MAAmB,CAC5BC,UAAW,GACXC,eAAgB,KACdlB,QAAQ,YAEd,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,YADR,aAGA,EAAAjB,EAAAc,KAACX,EAAAe,WAAD,CAAYC,WAAY,EAAGC,OAAQ,uaAA8bC,QAAS,CACxeV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,cACAC,mBACCT,QAAQ,eACb,EAAAhB,EAAAc,KAACT,EAAAoB,QAAD,CAASU,gBAAiB,EAAGnB,QAAQ,YACnC,EAAAhB,EAAAc,KAACV,EAAAoB,MAAD,CAAOE,MAAM,OAAOC,YAAY,UAAUX,QAAQ,YAEpD,EAAAhB,EAAAc,KAACT,EAAAoB,QAAD,CAASU,gBAAiB,EAAGnB,QAAQ,YACnC,EAAAhB,EAAAc,KAACV,EAAAoB,MAAD,CAAOK,OAAO,UAAUH,MAAM,UAAUC,YAAY,UAAUX,QAAQ,YAExE,EAAAhB,EAAAc,KAACT,EAAAoB,QAAD,CAASU,gBAAiB,EAAGnB,QAAQ,YACnC,EAAAhB,EAAAc,KAACV,EAAAoB,MAAD,CAAOK,OAAO,UAAUH,MAAM,UAAUC,YAAY,UAAUX,QAAQ,YAExE,EAAAhB,EAAAc,KAACT,EAAAoB,QAAD,CAASU,gBAAiB,EAAGnB,QAAQ,YACnC,EAAAhB,EAAAc,KAACV,EAAAoB,MAAD,CAAOK,OAAO,SAASH,MAAM,SAASC,YAAY,UAAUX,QAAQ,aAGpE,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAjB,EAAAc,KAACX,EAAAoB,MAAD,CAAOa,GAAIZ,QAAOR,QAAQ,+LAI9BR,EAAW6B,gBAAiB,qwCC9CrB,IAAMC,EAAiB,SAACN,GAC7B,MAAO,CACLO,KAAM,CACJC,KAAM,GAERC,WAAS,EAAAC,EAAA7B,SAAA,CACP8B,gBAAiBX,EAAMY,OAAOC,WAAWC,QACzCC,gBAAiB,EACjBC,aAAchB,EAAMiB,oBAAoBC,OACxCC,QAAS,OACTC,cAAe,MACfC,QAAS,IACNrB,EAAMsB,WAAW,IAEtBC,QAAS,GACT7B,MAAO,GAEP8B,OAAQ,CACNjB,KAAM,GACNE,UAAW,CACTgB,gBAAiBzB,EAAMY,OAAOc,OAAOF,QAEvCD,QAAS,GACT7B,MAAO,IAETiC,KAAM,CACJpB,KAAM,GACNE,UAAW,CACTgB,gBAAiBzB,EAAMY,OAAOc,OAAOC,MAEvCJ,QAAS,GACT7B,MAAO,IAETkC,QAAS,CACPrB,KAAM,GACNE,UAAW,CACTgB,gBAAiBzB,EAAMY,OAAOc,OAAOE,SAEvCL,QAAS,GACT7B,MAAO,IAETmC,QAAS,CACPtB,KAAM,GACNE,UAAW,CACTgB,gBAAiBzB,EAAMY,OAAOc,OAAOG,SAEvCN,QAAS,GACT7B,MAAO,syBAcN,IAAMoC,EAAiC,SAAArD,EAAauB,GAAU,IAApBH,EAAoBpB,EAApBoB,OAAoBkC,EACXzB,EAAeN,GAA/DS,EAD2DsB,EAC3DtB,UAAWF,EADgDwB,EAChDxB,KAAMb,EAD0CqC,EAC1CrC,MAAO6B,EADmCQ,EACnCR,QAE1BS,GAH6D,EAAApD,EAAAC,SAAAkD,EAAA,wCAGvClC,GAE5B,MAAO,CACLI,WAAS,EAAAS,EAAA7B,SAAA,GACJ0B,EACAyB,EAAYzB,MAEjBL,gBAAc,EAAAQ,EAAA7B,SAAA,GACT4B,EACAuB,EAAYvB,WAEjBwB,WAAS,EAAAvB,EAAA7B,SAAA,GACJ0C,EACAS,EAAYT,SAEjBW,YAAU,EAAAxB,EAAA7B,SAAA,GACLa,EACAsC,EAAYtC,yZC3GrB,IAAAyC,EAAAC,EAAAlE,EAAA,kCACAmE,EAAAnE,EAAA,iDAIAoE,EAAApE,EAAA,wBACAqE,EAAArE,EAAA,wBACAsE,EAAAtE,EAAA,8BACAG,EAAAH,EAAA,oCACAuE,EAAAvE,EAAA,wCACAE,EAAAF,EAAA,4SAgBA,IAuBasB,EAAQ,SAACb,GAAsB,IAExCe,EASEf,EATFe,MACAC,EAQEhB,EARFgB,YACAG,EAOEnB,EAPFmB,UACA4C,EAME/D,EANF+D,QALwCC,EAWtChE,EALFiB,mBANwC,IAAA+C,KAOxCC,EAIEjE,EAJFiE,KAPwCC,EAWtClE,EAHFkB,cARwC,IAAAgD,EAQ/B,OAR+BA,EASxC9C,EAEEpB,EAFFoB,UACA+C,EACEnE,EADFmE,OAGI9C,GAAQ,EAAAuC,EAAAQ,YAb4BC,GAeJ,EAAAR,EAAAS,aAAYnB,iBAAgB/B,EAA5B,CACpC,CAAEF,UACFG,GAFME,EAfkC8C,EAelC9C,eAAgBD,EAfkB+C,EAelB/C,UAKxB,OACEkC,EAAAe,cAACb,EAAAc,KAAD,CAAMC,MAAOlD,EAAgB4C,OAAQA,GAClCF,GACCT,EAAAe,cAAC7E,EAAAoB,QAAD,CAAS4D,aAAc,EAAGC,eAAe,UA9C7B,SAACzD,EAAgBG,GACnC,OAAQH,GACN,IAAK,UACH,OACEsC,EAAAe,cAACZ,EAAAiB,KAAD,CAAMC,KAAK,eAAeC,KAAM,GAAIC,MAAO1D,EAAMY,OAAO+C,KAAK/B,UAEjE,IAAK,UACH,OACEO,EAAAe,cAACZ,EAAAiB,KAAD,CACEC,KAAK,iBACLC,KAAM,GACNC,MAAO1D,EAAMY,OAAO+C,KAAK9B,UAG/B,IAAK,SACH,OACEM,EAAAe,cAACZ,EAAAiB,KAAD,CAAMC,KAAK,eAAeC,KAAM,GAAIC,MAAO1D,EAAMY,OAAO+C,KAAKnC,SAEjE,QACE,OAAOW,EAAAe,cAACZ,EAAAiB,KAAD,CAAMC,KAAK,OAAOC,KAAM,GAAIC,MAAO1D,EAAMY,OAAO+C,KAAKhC,QA4BvDiC,CAAY/D,EAAQG,IAGxBF,GACCqC,EAAAe,cAACb,EAAAc,KAAD,CAAMC,MAAOnD,GACXkC,EAAAe,cAACT,EAAAoB,KAAD,CAAMC,QAAM,GAAEpE,GACdyC,EAAAe,cAACT,EAAAoB,KAAD,KAAOlE,IAGVC,GACCuC,EAAAe,cAACb,EAAA0B,iBAAD,CAAkBC,QAAStB,GACzBP,EAAAe,cAAC7E,EAAAoB,QAAD,CAASwE,YAAa,GACpB9B,EAAAe,cAACZ,EAAAiB,KAAD,CAAMC,KAAK,IAAIC,KAAM,GAAIC,MAAO1D,EAAMY,OAAO+C,KAAK9E,gYCrF9D,IAAAsD,EAAAC,EAAAlE,EAAA,kCACAgG,EAAA9B,EAAAlE,EAAA,yDAae,SAAAO,GAAsC,IAAnC+E,EAAmC/E,EAAnC+E,KAAME,EAA6BjF,EAA7BiF,MAAOD,EAAsBhF,EAAtBgF,KAEvBU,EAAUD,EAAO,KAAAE,OAXzB,SAAyBZ,GACvB,IAIMa,EAASb,EAAKc,QAAQ,UAJV,SAACC,GACjB,OAAOA,EAAQ,GAAGC,gBAIpB,OAAOH,EAAOI,OAAO,GAAGD,cAAgBH,EAAOK,MAAM,GAKxBC,CAAgBnB,KAE7C,OAAOrB,EAAAe,cAACiB,EAAD,CAAST,MAAOA,EAAOD,KAAMA,yPClBtC,IAAAmB,EAAA3G,EAAAC,EAAA","file":"static/js/18.86c744a2.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Alert } from './Alert';\nimport { Spacing } from '../Layout';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"alert\"\n    }}>{`Alert`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Alert\\n  title=\\\"Kitchen sink\\\"\\n  description=\\\"Message\\\"\\n  isCloseable\\n  intent=\\\"success\\\"\\n  component={null} // Overrides body\\n  getStyles={(props, theme) => ({\\n    bodyStyle: {},\\n    containerStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Alert,\n      Spacing\n    }} mdxType=\"Playground\">\n  <Alert title=\"Kitchen sink\" description=\"Message\" isCloseable intent=\"success\" component={null} // Overrides body\n      getStyles={(props, theme) => ({\n        bodyStyle: {},\n        containerStyle: {}\n      })} mdxType=\"Alert\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Spacing paddingVertical={2}>\\n  <Alert title=\\\"Info\\\" description=\\\"Message\\\" />\\n</Spacing>\\n<Spacing paddingVertical={2}>\\n  <Alert intent=\\\"success\\\" title=\\\"Success\\\" description=\\\"Message\\\" />\\n</Spacing>\\n<Spacing paddingVertical={2}>\\n  <Alert intent=\\\"warning\\\" title=\\\"Warning\\\" description=\\\"Message\\\" />\\n</Spacing>\\n<Spacing paddingVertical={2}>\\n  <Alert intent=\\\"danger\\\" title=\\\"Danger\\\" description=\\\"Message\\\" />\\n</Spacing>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Alert,\n      Spacing\n    }} mdxType=\"Playground\">\n  <Spacing paddingVertical={2} mdxType=\"Spacing\">\n    <Alert title=\"Info\" description=\"Message\" mdxType=\"Alert\" />\n  </Spacing>\n  <Spacing paddingVertical={2} mdxType=\"Spacing\">\n    <Alert intent=\"success\" title=\"Success\" description=\"Message\" mdxType=\"Alert\" />\n  </Spacing>\n  <Spacing paddingVertical={2} mdxType=\"Spacing\">\n    <Alert intent=\"warning\" title=\"Warning\" description=\"Message\" mdxType=\"Alert\" />\n  </Spacing>\n  <Spacing paddingVertical={2} mdxType=\"Spacing\">\n    <Alert intent=\"danger\" title=\"Danger\" description=\"Message\" mdxType=\"Alert\" />\n  </Spacing>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Alert} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Intent } from '../../constants/Intent';\nimport { Theme } from '../../theme';\n\nexport interface AlertStyles {\n  containerStyle: ViewStyle;\n  bodyStyle: ViewStyle;\n  titleStyle: TextStyle;\n  textStyle: TextStyle;\n}\n\nexport interface AlertSeparatedVariables {\n  container: ViewStyle;\n  body: ViewStyle;\n  title: TextStyle;\n  message: TextStyle;\n}\n\nexport interface AlertVariables extends AlertSeparatedVariables {\n  danger: AlertSeparatedVariables;\n  info: AlertSeparatedVariables;\n  success: AlertSeparatedVariables;\n  warning: AlertSeparatedVariables;\n}\n\nexport const alertVariables = (theme: Theme): AlertVariables => {\n  return {\n    body: {\n      flex: 1,\n    },\n    container: {\n      backgroundColor: theme.colors.background.content,\n      borderLeftWidth: 5,\n      borderRadius: theme.controlBorderRadius.medium,\n      display: 'flex',\n      flexDirection: 'row',\n      padding: 16,\n      ...theme.elevations[2],\n    },\n    message: {},\n    title: {},\n\n    danger: {\n      body: {},\n      container: {\n        borderLeftColor: theme.colors.border.danger,\n      },\n      message: {},\n      title: {},\n    },\n    info: {\n      body: {},\n      container: {\n        borderLeftColor: theme.colors.border.info,\n      },\n      message: {},\n      title: {},\n    },\n    success: {\n      body: {},\n      container: {\n        borderLeftColor: theme.colors.border.success,\n      },\n      message: {},\n      title: {},\n    },\n    warning: {\n      body: {},\n      container: {\n        borderLeftColor: theme.colors.border.warning,\n      },\n      message: {},\n      title: {},\n    },\n  };\n};\n\nexport interface AlertStyleProps {\n  intent: Intent;\n}\n\nexport type GetAlertStyles = (\n  alertStyleProps: AlertStyleProps,\n  theme: Theme,\n) => AlertStyles;\n\nexport const getAlertStyles: GetAlertStyles = ({ intent }, theme) => {\n  const { container, body, title, message, ...intents } = alertVariables(theme);\n\n  const intentStyle = intents[intent];\n\n  return {\n    bodyStyle: {\n      ...body,\n      ...intentStyle.body,\n    },\n    containerStyle: {\n      ...container,\n      ...intentStyle.container,\n    },\n    textStyle: {\n      ...message,\n      ...intentStyle.message,\n    },\n    titleStyle: {\n      ...title,\n      ...intentStyle.title,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Intent } from '../../constants/Intent';\nimport { Icon } from '../../icons';\nimport { Theme, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Spacing } from '../Layout';\nimport { Text } from '../Typography';\nimport { AlertStyles, GetAlertStyles, getAlertStyles } from './Alert.styles';\n\nexport interface AlertProps {\n  title?: string;\n  description?: string;\n  testID?: string;\n  /* custom component, will take precedence over title and description */\n  component?: React.ReactNode;\n  onClose?: () => void;\n  isCloseable?: boolean;\n  icon?: React.ReactNode | null;\n  intent?: Intent;\n\n  getStyles?: ReplaceReturnType<GetAlertStyles, DeepPartial<AlertStyles>>;\n}\n\nconst resolveIcon = (intent: Intent, theme: Theme) => {\n  switch (intent) {\n    case 'success':\n      return (\n        <Icon name=\"check-circle\" size={24} color={theme.colors.text.success} />\n      );\n    case 'warning':\n      return (\n        <Icon\n          name=\"alert-triangle\"\n          size={24}\n          color={theme.colors.text.warning}\n        />\n      );\n    case 'danger':\n      return (\n        <Icon name=\"alert-circle\" size={24} color={theme.colors.text.danger} />\n      );\n    default:\n      return <Icon name=\"info\" size={24} color={theme.colors.text.info} />;\n  }\n};\n\nexport const Alert = (props: AlertProps) => {\n  const {\n    title,\n    description,\n    component,\n    onClose,\n    isCloseable = false,\n    icon,\n    intent = 'info',\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { containerStyle, bodyStyle } = mergeStyles(getAlertStyles, getStyles)(\n    { intent },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {icon || (\n        <Spacing paddingRight={2} justifyContent=\"center\">\n          {resolveIcon(intent, theme)}\n        </Spacing>\n      )}\n      {component || (\n        <View style={bodyStyle}>\n          <Text isBold>{title}</Text>\n          <Text>{description}</Text>\n        </View>\n      )}\n      {isCloseable && (\n        <TouchableOpacity onPress={onClose}>\n          <Spacing paddingLeft={2}>\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </Spacing>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n"],"sourceRoot":""}