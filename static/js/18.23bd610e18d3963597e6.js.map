{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","Feather","Icon","_ref","name","color","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","_Icon","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_reactNative","_theme","_IconTextInput","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","_objectWithoutProperties2","theme","useTheme","IconTextInput","_extends2","ref","TouchableOpacity","onPress","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","isInvalid","keyboardType","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","getTextInputVariables","base","backgroundColor","background","content","borderColor","border","borderWidth","width","disabled","greyDark","focus","invalid","danger","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlHeights","controlPaddings","medium","large","getTextInputStyles","numberOfLines","textInputVariables","controlHeight","sizeStyles","focusedStyle","paddingVertical","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","editable","_ClearableTextInput","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles","apply","arguments"],"mappings":"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","file":"static/js/18.2f4861ab.js","sourcesContent":["import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../Icon';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: { [size in ControlSize]: TextStyle };\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n  numberOfLines?: number;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid, numberOfLines },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n  const controlHeight = theme.controlHeights[size];\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * controlHeight,\n            paddingVertical: 16,\n          }\n        : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: ControlSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    numberOfLines,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      numberOfLines,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      numberOfLines={numberOfLines}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","export {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}