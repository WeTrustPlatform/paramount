{"version":3,"sources":["webpack:///./src/components/Calendars/Month/MonthBody.tsx","webpack:///./src/components/Calendars/Month/MonthCalendar.mdx","webpack:///./src/components/Calendars/Month/MonthCalendar.tsx","webpack:///./src/components/Calendars/Month/MonthDay.tsx","webpack:///./src/components/Calendars/Month/WeekDays.tsx","webpack:///./src/components/Calendars/Month/constants.ts","webpack:///./src/components/Calendars/Month/utils/chunk.ts","webpack:///./src/components/Calendars/Month/utils/getWeeksInMonth.ts","webpack:///./src/components/Calendars/constants.ts","webpack:///./src/components/Calendars/utils.ts"],"names":["_dateFns","__webpack_require__","React","_interopRequireWildcard","_theme","_Layout","_constants","_MonthDay","_interopRequireDefault","MonthBody","props","onSelect","month","theme","useTheme","createElement","Box","weeks","map","week","flexDirection","key","index","days","day","date","isCurrentMonth","isSelected","isSelectedStart","isSelectedEnd","flex","justifyContent","alignItems","format","DATE_FORMAT","default","isSelectionStart","isSelectionEnd","toISOString","paddingVertical","zIndex","backgroundColor","colors","background","primaryDark","height","width","memo","prevProps","nextProps","selectedRange","displayName","__docgenInfo","description","defaultValue","name","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","_react","_tag","_docz","_reactPowerplug","_Typography","_MonthCalendar","_WeekDays","MDXContent","_this","_classCallCheck2","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","MDXTag","id","Playground","__position","__code","__scope","isSameDay","isBefore","State","Spacing","Heading","MonthCalendar","WeekDays","paddingBottom","size","Date","initial","selectedStartDate","selectedEndDate","_ref","_ref$state","state","setState","PropsTable","of","Component","_utils","_MonthBody","_getWeeksInMonth","_props$date","_props$firstDayOfWeek","firstDayOfWeekIndex","DEFAULT_FIRST_DAY_OF_WEEK","_props$selectedStartD","propSelectedStartDate","_props$selectedEndDat","propSelectedEndDate","_marshalTimeRange","marshalTimeRange","_marshalTimeRange2","_slicedToArray2","getWeeksInMonth","_reactNative","MonthDay","_props$onSelect","TouchableHighlight","style","underlayColor","onPress","View","DEFAULT_MONTH_DAY_HEIGHT","position","right","left","borderRadius","Text","color","dates","firstDayOfWeek","addDays","startOfWeek","push","getDaysInWeek","padding","array","Math","max","length","resIndex","result","Array","ceil","slice","_chunk","getMonthDatesFromDate","eachDay","startOfMonth","endOfMonth","getDatesBefore","startOfMonthDate","getFirstDayOfWeek","beforeDates","fromDate","getDay","subDays","getDatesAfter","endOfMonthDate","afterDates","lastDayOfWeek","getLastDayOfWeek","toDate","isAfter","monthPageInDates","monthDates","concat","chunkBySeven","chunk","monthDate","arguments","undefined","transformDateToDay","getDaysInMonth","currentDays","selectedStartDateIndex","findIndex","isSelectedStartDateWithinMonth","selectedEndDateIndex","isSelectedEndDateWithinMonth","beforeSelectedDays","selectedDays","afterSelectedDays","_objectSpread2","getCurrentMonthDays","beforeDays","hasSelectedDatesBeforeMonth","getBeforeMonthDays","afterDays","hasSelectedDatesAfterMonth","getAfterMonthDays","formattedMonth","getISOWeek","startMonthDate","endMonthDate","startDate","endDate","monthsCount","differenceInMonths","monthsDates","addMonths","getMonthsDates","isWithinRange","areRangesOverlapping","console","error"],"mappings":"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","file":"static/js/20.a117f095.js","sourcesContent":["import { format } from 'date-fns';\nimport * as React from 'react';\n\nimport { useTheme } from '../../../theme';\nimport { Box } from '../../Layout';\nimport { Month } from '../types';\nimport { DATE_FORMAT } from './constants';\nimport MonthDay, { MonthDayBaseProps } from './MonthDay';\n\nexport interface MonthBodyProps extends MonthDayBaseProps {\n  month: Month;\n}\n\nconst MonthBody = (props: MonthBodyProps) => {\n  const { onSelect, month } = props;\n\n  const theme = useTheme();\n\n  return (\n    <Box>\n      {month.weeks.map(week => (\n        <Box flexDirection=\"row\" key={week.index}>\n          {week.days.map(day => {\n            const {\n              date,\n              isCurrentMonth,\n              isSelected,\n              isSelectedStart,\n              isSelectedEnd,\n            } = day;\n\n            if (!isCurrentMonth) {\n              return (\n                <Box\n                  flex={1}\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  key={date.toISOString()}\n                  paddingVertical={4}\n                  zIndex={-1}\n                >\n                  <Box\n                    backgroundColor={\n                      isSelected\n                        ? theme.colors.background.primaryDark\n                        : 'transparent'\n                    }\n                    flex={1}\n                    height={40}\n                    width=\"100%\"\n                  />\n                </Box>\n              );\n            }\n\n            return (\n              <Box\n                flex={1}\n                justifyContent=\"center\"\n                alignItems=\"flex-start\"\n                key={format(date, DATE_FORMAT)}\n              >\n                <MonthDay\n                  onSelect={onSelect}\n                  date={date}\n                  isSelected={isSelected}\n                  isSelectionStart={isSelectedStart}\n                  isSelectionEnd={isSelectedEnd}\n                />\n              </Box>\n            );\n          })}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nconst propsAreEqual = (\n  prevProps: MonthBodyProps,\n  nextProps: MonthBodyProps,\n) => {\n  return (\n    prevProps.month.selectedRange === nextProps.month.selectedRange &&\n    prevProps.onSelect === nextProps.onSelect\n  );\n};\n\nexport default React.memo(MonthBody, propsAreEqual);\ntry {\n    // @ts-ignore\n    MonthBody.displayName = \"MonthBody\";\n    // @ts-ignore\n    MonthBody.__docgenInfo = { \"description\": \"\", \"displayName\": \"MonthBody\", \"props\": { \"month\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"month\", \"required\": true, \"type\": { \"name\": \"Month\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Calendars/Month/MonthBody.tsx#MonthBody\"] = { docgenInfo: MonthBody.__docgenInfo, name: \"MonthBody\", path: \"src/components/Calendars/Month/MonthBody.tsx#MonthBody\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { format, isSameDay, isBefore } from 'date-fns';\nimport { Playground, PropsTable } from 'docz';\nimport { State } from 'react-powerplug';\nimport { Spacing } from '../../Layout';\nimport { Heading } from '../../Typography';\nimport { MonthCalendar } from './MonthCalendar';\nimport { WeekDays } from './WeekDays';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"monthcalendar\"}}>{`MonthCalendar`}</MDXTag>\n<Playground __position={0} __code={'<Spacing paddingBottom={4}>\\n  <Heading size=\\\"xxxlarge\\\">{format(new Date(), \\'MMMM YYYY\\')}</Heading>\\n</Spacing>\\n<WeekDays />\\n<State\\n  initial={{\\n    selectedStartDate: null,\\n    selectedEndDate: null,\\n  }}\\n>\\n  {({ state: { selectedStartDate, selectedEndDate }, setState }) => (\\n    <MonthCalendar\\n      selectedStartDate={selectedStartDate}\\n      selectedEndDate={selectedEndDate}\\n      // MUST SEE https://github.com/facebook/react/issues/14972\\n      onSelect={date => {\\n        if (!selectedStartDate && !selectedEndDate) {\\n          setState({\\n            selectedStartDate: date,\\n            selectedEndDate: null,\\n          })\\n        } else if (selectedStartDate && !selectedEndDate) {\\n          if (isBefore(date, selectedStartDate)) {\\n            setState({\\n              selectedStartDate: date,\\n              selectedEndDate: null,\\n            })\\n          } else if (!isSameDay(selectedStartDate, date)) {\\n            setState({\\n              selectedEndDate: date,\\n            })\\n          }\\n        } else {\\n          setState({\\n            selectedStartDate: date,\\n            selectedEndDate: null,\\n          })\\n        }\\n      }}\\n    />\\n  )}\\n</State>'} __scope={{props: this ? this.props : props,format,isSameDay,isBefore,State,Spacing,Heading,MonthCalendar,WeekDays}}>\n  <Spacing paddingBottom={4}>\n    <Heading size=\"xxxlarge\">{format(new Date(), 'MMMM YYYY')}</Heading>\n  </Spacing>\n  <WeekDays />\n  <State\n    initial={{\n      selectedStartDate: null,\n      selectedEndDate: null,\n    }}\n  >\n    {({ state: { selectedStartDate, selectedEndDate }, setState }) => (\n      <MonthCalendar\n        selectedStartDate={selectedStartDate}\n        selectedEndDate={selectedEndDate}\n        // MUST SEE https://github.com/facebook/react/issues/14972\n        onSelect={date => {\n          if (!selectedStartDate && !selectedEndDate) {\n            setState({\n              selectedStartDate: date,\n              selectedEndDate: null,\n            });\n          } else if (selectedStartDate && !selectedEndDate) {\n            if (isBefore(date, selectedStartDate)) {\n              setState({\n                selectedStartDate: date,\n                selectedEndDate: null,\n              });\n            } else if (!isSameDay(selectedStartDate, date)) {\n              setState({\n                selectedEndDate: date,\n              });\n            }\n          } else {\n            setState({\n              selectedStartDate: date,\n              selectedEndDate: null,\n            });\n          }\n        }}\n      />\n    )}\n  </State>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={MonthCalendar} />\n           </MDXTag>\n  }\n}\n  ","import * as React from 'react';\n\nimport { Box } from '../../Layout';\nimport { DEFAULT_FIRST_DAY_OF_WEEK } from '../constants';\nimport { marshalTimeRange } from '../utils';\nimport MonthBody from './MonthBody';\nimport { MonthDayBaseProps } from './MonthDay';\nimport { getWeeksInMonth } from './utils/getWeeksInMonth';\n\nexport interface MonthCalendarProps extends MonthDayBaseProps {\n  /** Date to which display its month for. @default Date */\n  date?: Date;\n  /** Highlights the date or start date on the calendar */\n  selectedStartDate?: Date | null;\n  /** Highlights the end date on the calendar. Will created a selected range */\n  selectedEndDate?: Date | null;\n  firstDayOfWeekIndex?: number;\n}\n\nexport const MonthCalendar = (props: MonthCalendarProps) => {\n  const {\n    date = new Date(),\n    firstDayOfWeekIndex = DEFAULT_FIRST_DAY_OF_WEEK,\n    selectedStartDate: propSelectedStartDate = null,\n    selectedEndDate: propSelectedEndDate = null,\n    onSelect,\n  } = props;\n\n  const [selectedStartDate, selectedEndDate] = marshalTimeRange(\n    propSelectedStartDate,\n    propSelectedEndDate,\n  );\n\n  const month = getWeeksInMonth(\n    date,\n    selectedStartDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  return (\n    <Box flex={1} width=\"100%\">\n      <MonthBody onSelect={onSelect} month={month} />\n    </Box>\n  );\n};\ntry {\n    // @ts-ignore\n    MonthCalendar.displayName = \"MonthCalendar\";\n    // @ts-ignore\n    MonthCalendar.__docgenInfo = { \"description\": \"\", \"displayName\": \"MonthCalendar\", \"props\": { \"date\": { \"defaultValue\": null, \"description\": \"Date to which display its month for. @default Date\", \"name\": \"date\", \"required\": false, \"type\": { \"name\": \"Date\" } }, \"selectedStartDate\": { \"defaultValue\": null, \"description\": \"Highlights the date or start date on the calendar\", \"name\": \"selectedStartDate\", \"required\": false, \"type\": { \"name\": \"Date\" } }, \"selectedEndDate\": { \"defaultValue\": null, \"description\": \"Highlights the end date on the calendar. Will created a selected range\", \"name\": \"selectedEndDate\", \"required\": false, \"type\": { \"name\": \"Date\" } }, \"firstDayOfWeekIndex\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"firstDayOfWeekIndex\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Calendars/Month/MonthCalendar.tsx#MonthCalendar\"] = { docgenInfo: MonthCalendar.__docgenInfo, name: \"MonthCalendar\", path: \"src/components/Calendars/Month/MonthCalendar.tsx#MonthCalendar\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { format } from 'date-fns';\nimport * as React from 'react';\nimport { TouchableHighlight, View } from 'react-native';\n\nimport { useTheme } from '../../../theme';\nimport { Text } from '../../Typography';\nimport { DEFAULT_MONTH_DAY_HEIGHT } from './constants';\n\nexport interface MonthDayBaseProps {\n  onSelect?: (date: Date) => void;\n}\n\nexport interface MonthDayProps extends MonthDayBaseProps {\n  date: Date;\n  isSelected: boolean;\n  isSelectionStart: boolean;\n  isSelectionEnd: boolean;\n}\n\nconst MonthDay = (props: MonthDayProps) => {\n  const {\n    isSelected,\n    isSelectionStart,\n    isSelectionEnd,\n    date,\n    onSelect = () => null,\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableHighlight\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        paddingVertical: 4,\n        width: '100%',\n      }}\n      underlayColor=\"transparent\"\n      onPress={() => onSelect(date)}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          backgroundColor:\n            isSelected && !isSelectionStart && !isSelectionEnd\n              ? theme.colors.background.primaryDark\n              : 'transparent',\n          flex: 1,\n          flexDirection: 'row',\n          height: DEFAULT_MONTH_DAY_HEIGHT - 4,\n          justifyContent: 'center',\n          position: 'relative',\n        }}\n      >\n        {isSelectionStart && !isSelectionEnd && (\n          <View\n            style={{\n              backgroundColor: theme.colors.background.primaryDark,\n              height: '100%',\n              position: 'absolute',\n              right: 0,\n              width: '50%',\n            }}\n          />\n        )}\n        {isSelectionEnd && !isSelectionStart && (\n          <View\n            style={{\n              backgroundColor: theme.colors.background.primaryDark,\n              height: '100%',\n              left: 0,\n              position: 'absolute',\n              width: '50%',\n            }}\n          />\n        )}\n        <View\n          style={{\n            alignItems: 'center',\n            backgroundColor: isSelected\n              ? theme.colors.background.primaryDark\n              : 'transparent',\n            borderRadius: 999,\n            flexDirection: 'row',\n            height: DEFAULT_MONTH_DAY_HEIGHT - 4,\n            justifyContent: 'center',\n            width: DEFAULT_MONTH_DAY_HEIGHT - 4,\n          }}\n        >\n          <Text color={isSelected ? 'plain' : 'default'}>\n            {format(date, 'D')}\n          </Text>\n        </View>\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport default MonthDay;\ntry {\n    // @ts-ignore\n    MonthDay.displayName = \"MonthDay\";\n    // @ts-ignore\n    MonthDay.__docgenInfo = { \"description\": \"\", \"displayName\": \"MonthDay\", \"props\": { \"date\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"date\", \"required\": true, \"type\": { \"name\": \"Date\" } }, \"isSelected\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSelected\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"isSelectionStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSelectionStart\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"isSelectionEnd\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isSelectionEnd\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"onSelect\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onSelect\", \"required\": false, \"type\": { \"name\": \"(date: Date) => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Calendars/Month/MonthDay.tsx#MonthDay\"] = { docgenInfo: MonthDay.__docgenInfo, name: \"MonthDay\", path: \"src/components/Calendars/Month/MonthDay.tsx#MonthDay\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { addDays, format, startOfWeek } from 'date-fns';\nimport * as React from 'react';\n\nimport { Box, Spacing } from '../../Layout';\nimport { Text } from '../../Typography';\nimport { DEFAULT_FIRST_DAY_OF_WEEK } from '../constants';\n\nexport interface WeekDaysProps {\n  firstDayOfWeekIndex?: number;\n}\n\nconst getDaysInWeek = (firstDayOfWeekIndex: number) => {\n  const week = [];\n  const firstDayOfWeek = addDays(startOfWeek(new Date()), firstDayOfWeekIndex);\n\n  for (let index = 0; index < 7; index++) {\n    week.push(addDays(firstDayOfWeek, index));\n  }\n\n  return week;\n};\n\nexport const WeekDays = (props: WeekDaysProps) => {\n  const { firstDayOfWeekIndex = DEFAULT_FIRST_DAY_OF_WEEK } = props;\n  const dates = getDaysInWeek(firstDayOfWeekIndex);\n\n  return (\n    <Box flex={1} flexDirection=\"row\">\n      {dates.map(date => {\n        return (\n          <Spacing\n            key={date.toISOString()}\n            flex={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            padding={1}\n          >\n            <Text>{format(date, 'dd')}</Text>\n          </Spacing>\n        );\n      })}\n    </Box>\n  );\n};\ntry {\n    // @ts-ignore\n    WeekDays.displayName = \"WeekDays\";\n    // @ts-ignore\n    WeekDays.__docgenInfo = { \"description\": \"\", \"displayName\": \"WeekDays\", \"props\": { \"firstDayOfWeekIndex\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"firstDayOfWeekIndex\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Calendars/Month/WeekDays.tsx#WeekDays\"] = { docgenInfo: WeekDays.__docgenInfo, name: \"WeekDays\", path: \"src/components/Calendars/Month/WeekDays.tsx#WeekDays\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export const DATE_FORMAT = 'YYYY-MM-DD';\nexport const DEFAULT_MONTH_DAY_HEIGHT = 48;\n","// From Lodash\n\nexport const chunk = <TArrayElement = any>(\n  array: TArrayElement[],\n  size: number,\n): TArrayElement[][] => {\n  size = Math.max(size, 0);\n  const length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  let index = 0;\n  let resIndex = 0;\n  const result = new Array(Math.ceil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = array.slice(index, (index += size));\n  }\n\n  return result;\n};\n","import {\n  addDays,\n  addMonths,\n  areRangesOverlapping,\n  differenceInMonths,\n  eachDay,\n  endOfMonth,\n  format,\n  getISOWeek,\n  isAfter,\n  isBefore,\n  isSameDay,\n  isWithinRange,\n  startOfMonth,\n  subDays,\n} from 'date-fns';\n\nimport { Day, Month } from '../../types';\nimport { DATE_FORMAT } from '../constants';\nimport { chunk } from './chunk';\n\nconst getFirstDayOfWeek = (firstDayOfWeekIndex: number) =>\n  (7 + firstDayOfWeekIndex) % 7 || 7;\n\nconst getLastDayOfWeek = (firstDayOfWeekIndex: number) =>\n  (firstDayOfWeekIndex + 6) % 7;\n\nconst getMonthDatesFromDate = (date: Date): Date[] =>\n  eachDay(startOfMonth(date), endOfMonth(date));\n\nconst getDatesBefore = (\n  startOfMonthDate: Date,\n  firstDayOfWeekIndex: number,\n) => {\n  const firstDayOfWeek = getFirstDayOfWeek(firstDayOfWeekIndex);\n  let beforeDates: Date[] = [];\n\n  let fromDate = startOfMonthDate;\n\n  if (fromDate.getDay() !== firstDayOfWeek) {\n    fromDate = addDays(fromDate, -(fromDate.getDay() + 7 - firstDayOfWeek) % 7);\n  }\n\n  if (isBefore(fromDate, startOfMonthDate)) {\n    beforeDates = eachDay(fromDate, subDays(startOfMonthDate, 1));\n  }\n\n  return beforeDates;\n};\n\nconst getDatesAfter = (endOfMonthDate: Date, firstDayOfWeekIndex: number) => {\n  let afterDates: Date[] = [];\n\n  const lastDayOfWeek = getLastDayOfWeek(firstDayOfWeekIndex);\n\n  let toDate = endOfMonthDate;\n\n  if (toDate.getDay() !== lastDayOfWeek) {\n    toDate = addDays(toDate, (lastDayOfWeek + 7 - toDate.getDay()) % 7);\n  }\n\n  if (isAfter(toDate, endOfMonthDate)) {\n    afterDates = eachDay(addDays(endOfMonthDate, 1), toDate);\n  }\n\n  return afterDates;\n};\n\nexport const monthPageInDates = (\n  date: Date,\n  firstDayOfWeekIndex: number,\n): Date[] => {\n  const monthDates = getMonthDatesFromDate(date);\n  const startOfMonthDate = monthDates[0];\n  const endOfMonthDate = monthDates[monthDates.length - 1];\n\n  const beforeDates = getDatesBefore(startOfMonthDate, firstDayOfWeekIndex);\n  const afterDates = getDatesAfter(endOfMonthDate, firstDayOfWeekIndex);\n\n  return beforeDates.concat(monthDates, afterDates);\n};\n\nconst chunkBySeven = <TData = any>(array: TData[]) => chunk(array, 7);\n\nexport const monthPageInWeeks = (\n  monthDate: Date,\n  firstDayOfWeekIndex: number = 1,\n) => chunkBySeven(monthPageInDates(monthDate, firstDayOfWeekIndex));\n\nconst transformDateToDay = (\n  isSelected: boolean,\n  isCurrentMonth: boolean = true,\n) => (date: Date): Day => ({\n  date,\n  isCurrentMonth,\n  isSelected,\n  isSelectedEnd: false,\n  isSelectedStart: false,\n});\n\nconst getCurrentMonthDays = (\n  monthDates: Date[],\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n) => {\n  if (!selectedStartDate) return monthDates.map(transformDateToDay(false));\n\n  const selectedStartDateIndex = monthDates.findIndex(date =>\n    isSameDay(date, selectedStartDate),\n  );\n  const isSelectedStartDateWithinMonth = selectedStartDateIndex !== -1;\n\n  const selectedEndDateIndex = selectedEndDate\n    ? monthDates.findIndex(date => isSameDay(date, selectedEndDate))\n    : selectedStartDateIndex;\n\n  const isSelectedEndDateWithinMonth = selectedEndDateIndex !== -1;\n\n  const beforeSelectedDays = isSelectedStartDateWithinMonth\n    ? monthDates.slice(0, selectedStartDateIndex).map(transformDateToDay(false))\n    : [];\n\n  const selectedDates = monthDates.slice(\n    isSelectedStartDateWithinMonth ? selectedStartDateIndex : 0,\n    isSelectedEndDateWithinMonth ? selectedEndDateIndex : monthDates.length,\n  );\n\n  const selectedDays = selectedDates.map(transformDateToDay(true));\n\n  const afterSelectedDays = isSelectedEndDateWithinMonth\n    ? monthDates.slice(selectedEndDateIndex).map(transformDateToDay(false))\n    : [];\n\n  const days = beforeSelectedDays.concat(selectedDays, afterSelectedDays);\n\n  days[selectedStartDateIndex] = {\n    ...days[selectedStartDateIndex],\n    isSelected: true,\n    isSelectedStart: true,\n  };\n\n  days[selectedEndDateIndex] = {\n    ...days[selectedEndDateIndex],\n    isSelected: true,\n    isSelectedEnd: true,\n  };\n\n  return days;\n};\n\nconst getBeforeMonthDays = (\n  startOfMonthDate: Date,\n  selectedStartDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const hasSelectedDatesBeforeMonth = !!(\n    selectedStartDate && isBefore(selectedStartDate, startOfMonthDate)\n  );\n  const beforeDates = getDatesBefore(startOfMonthDate, firstDayOfWeekIndex);\n\n  return beforeDates.map(\n    transformDateToDay(hasSelectedDatesBeforeMonth, false),\n  );\n};\n\nconst getAfterMonthDays = (\n  endOfMonthDate: Date,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const hasSelectedDatesAfterMonth = !!(\n    selectedEndDate && isAfter(selectedEndDate, endOfMonthDate)\n  );\n  const afterDates = getDatesAfter(endOfMonthDate, firstDayOfWeekIndex);\n\n  return afterDates.map(transformDateToDay(hasSelectedDatesAfterMonth, false));\n};\n\nexport const getDaysInMonth = (\n  monthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n) => {\n  const monthDates = getMonthDatesFromDate(monthDate);\n  const startOfMonthDate = monthDates[0];\n  const endOfMonthDate = monthDates[monthDates.length - 1];\n\n  const currentDays = getCurrentMonthDays(\n    monthDates,\n    selectedStartDate,\n    selectedEndDate,\n  );\n  const beforeDays = getBeforeMonthDays(\n    startOfMonthDate,\n    selectedStartDate,\n    firstDayOfWeekIndex,\n  );\n  const afterDays = getAfterMonthDays(\n    endOfMonthDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  return beforeDays.concat(currentDays, afterDays);\n};\n\nexport const getWeeksInMonth = (\n  monthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n): Month => {\n  const days = getDaysInMonth(\n    monthDate,\n    selectedStartDate,\n    selectedEndDate,\n    firstDayOfWeekIndex,\n  );\n\n  const selectedRange = `${\n    selectedStartDate ? format(selectedStartDate, DATE_FORMAT) : ''\n  }-${selectedEndDate ? format(selectedEndDate, DATE_FORMAT) : ''}`;\n\n  return {\n    formattedMonth: format(monthDate, DATE_FORMAT),\n    month: monthDate,\n    selectedRange,\n    weeks: chunkBySeven(days).map(week => ({\n      days: week,\n      index: getISOWeek(week[0].date),\n    })),\n  };\n};\n\nconst getMonthsDates = (startDate: Date, endDate: Date) => {\n  const monthsCount = differenceInMonths(endDate, startDate);\n\n  const monthsDates: Date[] = [];\n\n  for (let index = 0; index < monthsCount; index++) {\n    monthsDates.push(addMonths(startDate, index));\n  }\n\n  return monthsDates;\n};\n\nexport const getWeeksInMultiMonth = (\n  startMonthDate: Date,\n  endMonthDate: Date,\n  selectedStartDate: Date | null,\n  selectedEndDate: Date | null,\n  firstDayOfWeekIndex: number = 1,\n): Month[] => {\n  const monthsDates = getMonthsDates(startMonthDate, endMonthDate);\n\n  return monthsDates.map(monthDate => {\n    if (!selectedStartDate) {\n      return getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n    }\n\n    const startOfMonthDate = startOfMonth(monthDate);\n    const endOfMonthDate = endOfMonth(monthDate);\n\n    if (!selectedEndDate) {\n      const isSelectedStartDateWithinMonth = isWithinRange(\n        selectedStartDate,\n        startOfMonthDate,\n        endOfMonthDate,\n      );\n\n      return isSelectedStartDateWithinMonth\n        ? getWeeksInMonth(\n            monthDate,\n            selectedStartDate,\n            null,\n            firstDayOfWeekIndex,\n          )\n        : getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n    }\n\n    const isMonthOverlappingWithSelectedRange =\n      areRangesOverlapping(\n        startOfMonthDate,\n        endOfMonthDate,\n        selectedStartDate,\n        selectedEndDate,\n      ) || isSameDay(selectedEndDate, startOfMonthDate);\n\n    return isMonthOverlappingWithSelectedRange\n      ? getWeeksInMonth(\n          monthDate,\n          selectedStartDate,\n          selectedEndDate,\n          firstDayOfWeekIndex,\n        )\n      : getWeeksInMonth(monthDate, null, null, firstDayOfWeekIndex);\n  });\n};\n","export const DAY_DATE_FORMAT = 'YYYY-MM-DD';\nexport const TOTAL_MINUTES_IN_DAY = 24 * 60;\nexport const DEFAULT_FIRST_DAY_OF_WEEK = 1;\n","import { isBefore } from 'date-fns';\n\nexport const marshalTimeRange = (\n  startDate: Date | null = null,\n  endDate: Date | null = null,\n): [Date | null, Date | null] => {\n  if (endDate && startDate && isBefore(endDate, startDate)) {\n    console.error('Selected end date cannot be before selected start date');\n    return [null, null];\n  }\n\n  if (endDate && !startDate) {\n    console.error('Selected end date cannot exist without selected start date');\n    return [null, null];\n  }\n\n  return [startDate, endDate];\n};\n"],"sourceRoot":""}