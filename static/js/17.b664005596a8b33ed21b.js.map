{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_reactPowerplug","_Typography","_Box","_PhoneNumberInput","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","State","Heading","Box","PhoneNumberInput","initial","countryCode","phoneNumber","_ref2","state","setState","header","marginVertical","paddingHorizontal","size","onChangeCountryCode","onChangePhoneNumber","placeholder","of","isMDXComponent","getPhoneNumberInputStyles","theme","containerStyle","flexDirection","_countriesList","React","_interopRequireWildcard","_reactNative","_icons","_theme","_mergeStyles2","_Button","_ListItem","_Modal","_TextInput","countries","Object","keys","countryList","map","_objectSpread2","key","PhoneNumberInputBase","_props$countryCode","getStyles","innerRef","_props$useHistory","useHistory","textInputProps","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","useTheme","mergeStyles","createElement","View","style","Button","onPress","appearance","buttonStyle","borderBottomRightRadius","borderColor","colors","border","borderTopRightRadius","borderWidth","iconAfter","Icon","color","text","name","title","concat","phone","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","country","ListItem","label","event","preventDefault","TextInput","ref","inputStyle","borderBottomLeftRadius","borderTopLeftRadius","keyboardType","value","onChangeText","forwardRef","getTextInputVariables","base","backgroundColor","background","content","width","disabled","greyDark","focus","invalid","danger","placeholderTextColor","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","height","paddingLeft","controlPaddings","paddingRight","large","getTextInputStyles","isDisabled","isInvalid","textInputVariables","sizeStyles","focusedStyle","TextInputBase","_props$isDisabled","_props$isInvalid","_props$size","_mergeStyles","editable","getListItemVariables","borderBottomWidth","justifyContent","focusBackgroundColor","greyLight","selected","wrapper","alignItems","getListItemStyles","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","description","_props$rightIcon","rightIcon","leftIcon","testID","accessibilityProps","TouchableHighlight","underlayColor","Text","forEach","defineProperty","exports","enumerable","get"],"mappings":"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","file":"static/js/17.036faf0c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { Heading } from '../Typography';\nimport { Box } from '../Box';\nimport { PhoneNumberInput } from './PhoneNumberInput';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"phonenumberinput\"\n    }}>{`PhoneNumberInput`}</h1>\n    <p>{`Appends a button to select country code`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ countryCode: \\'US\\', phoneNumber: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <PhoneNumberInput\\n      header={\\n        <Box marginVertical={24} paddingHorizontal={16}>\\n          <Heading size=\\\"xxxlarge\\\">Select your country</Heading>\\n        </Box>\\n      }\\n      onChangeCountryCode={countryCode => setState({ countryCode })}\\n      onChangePhoneNumber={phoneNumber => setState({ phoneNumber })}\\n      phoneNumber={state.phoneNumber}\\n      countryCode={state.countryCode}\\n      placeholder=\\\"Enter your phone number\\\"\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      Heading,\n      Box,\n      PhoneNumberInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        countryCode: 'US',\n        phoneNumber: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <PhoneNumberInput header={<Box marginVertical={24} paddingHorizontal={16} mdxType=\"Box\">\n            <Heading size=\"xxxlarge\" mdxType=\"Heading\">Select your country</Heading>\n          </Box>} onChangeCountryCode={countryCode => setState({\n          countryCode\n        })} onChangePhoneNumber={phoneNumber => setState({\n          phoneNumber\n        })} phoneNumber={state.phoneNumber} countryCode={state.countryCode} placeholder=\"Enter your phone number\" mdxType=\"PhoneNumberInput\" />}\n  </State>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={PhoneNumberInput} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import { countries as countryList } from 'countries-list';\nimport * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n}\n\nconst countries = (() => {\n  return Object.keys(countryList).map(countryCode => ({\n    countryCode,\n    key: countryCode,\n    ...countryList[countryCode],\n  }));\n})();\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = 'US',\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.default,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={`+${countryList[countryCode].phone}`}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.key}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countries}\n          renderItem={({ item: country }) => {\n            return (\n              <ListItem\n                key={country.countryCode}\n                label={country.name}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(country.countryCode);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />,\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface TextInputSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type TextInputSize = keyof TextInputSizes;\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: TextInputSizes;\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: TextInputSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n    },\n    placeholderTextColor,\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputSize,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: TextInputSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n","export * from './ListItem';\n"],"sourceRoot":""}