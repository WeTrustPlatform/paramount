{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/Overlay.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Overlay/index.ts"],"names":["_react","_interopRequireDefault","__webpack_require__","_react2","_docz","_reactPowerplug","_","_Button","_Box","_Typography","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Toggle","Drawer","Button","Box","Text","_ref2","on","toggle","Fragment","onPress","isInline","title","space","offset","position","isVisible","onClose","getStyles","theme","modalContainerStyle","containerStyle","padding","elevation","backgroundColor","borderRadius","color","map","option","key","appearance","paddingTop","_ref3","width","height","_ref4","_ref5","_ref6","isMDXComponent","getDrawerStyles","zIndex","alignItems","display","justifyContent","React","_interopRequireWildcard","_reactNative","_native","_Animation","_theme","_mergeStyles2","_Modal","_Overlay","_Drawer","AnimatedView","animated","View","_useSpring","children","_props$onClose","_props$position","_props$offset","useTheme","_mergeStyles","mergeStyles","animation","useSpring","_defineProperty2","springDefaultConfig","createElement","Modal","visible","transparent","onRequestClose","style","_objectSpread3","Overlay","Object","keys","forEach","defineProperty","exports","enumerable","get","getOverlayStyles","overlayStyle","colors","background","overlay","bottom","cursor","left","right","top","_props$transparent","TouchableWithoutFeedback","event","preventDefault"],"mappings":"gYACEA,EAAAC,EAAAC,EAAA,kCACAC,EAAAD,EAAA,iDAEFE,EAAAF,EAAA,yCACAG,EAAAH,EAAA,8DACAI,EAAAJ,EAAA,oCACAK,EAAAL,EAAA,oCACAM,EAAAN,EAAA,iCACAO,EAAAP,EAAA,wCAOMQ,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAA,SAAAH,EAAA,gBACD,OAAO,EAAAV,EAAAc,KAACN,GAAD,EAAAO,EAAA,YAAeR,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYK,QAAQ,eAG5E,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,UADR,WAGA,EAAAjB,EAAAc,KAAA,KAAQ,CACNG,GAAM,SADR,UAGA,EAAAjB,EAAAc,KAACb,EAAAiB,WAAD,CAAYC,WAAY,EAAGC,OAAQ,63CAA44CC,QAAS,CACt7CT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BM,wBACAK,cACAC,gBACAC,gBACAC,gBACAC,UACAC,aACCZ,QAAQ,eACb,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQT,QAAQ,YAChB,EAAAhB,EAAAc,KAACZ,EAAAsB,OAAD,CAAQR,QAAQ,UACb,SAAAa,GAAA,IACKC,EADLD,EACKC,GACAC,EAFLF,EAEKE,OAFL,OAGS,EAAA/B,EAAAc,KAAAjB,EAAA,QAAAmC,SAAA,MACN,EAAAhC,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQG,UAAQ,EAACC,MAAM,mBAAmBnB,QAAQ,YACnE,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQW,MAAO,KACbC,OAAQ,EAAGC,SAAS,SAASC,UAAWT,EAAIU,QAAST,EAAQU,UAAW,SAAC7B,EAAO8B,GAAR,MAAmB,CACzFC,oBAAqB,GACrBC,eAAgB,KACd5B,QAAQ,WACZ,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAKkB,QAAS,GAAI7B,QAAQ,QACxB,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAKmB,UAAW,EAAGC,gBAAgB,QAAQC,aAAc,EAAGhC,QAAQ,OACjE,CAAC,CACEiB,QAASF,EACTI,MAAO,gBACPc,MAAO,UACN,CACDhB,QAASF,EACTI,MAAO,gBACPc,MAAO,WACN,CACDhB,QAASF,EACTI,MAAO,gBACPc,MAAO,aACN,CACDhB,QAASF,EACTI,MAAO,kBACNe,IAAI,SAAAC,GAAM,OAAI,EAAAnD,EAAAc,KAACV,EAAAsB,QAAD,EAAAX,EAAA,UAAQqC,IAAKD,EAAOhB,MAAOkB,WAAW,WAAcF,EAApD,CAA4DnC,QAAQ,gBAEzF,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAK2B,WAAY,GAAItC,QAAQ,QAC3B,EAAAhB,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQI,MAAM,QAAQnB,QAAQ,mBAOzD,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,YADR,aAGA,EAAAjB,EAAAc,KAACb,EAAAiB,WAAD,CAAYC,WAAY,EAAGC,OAAQ,+nCAA8qCC,QAAS,CACxtCT,MAAOU,KAAOA,KAAKV,MAAQA,EAC3BM,wBACAK,cACAC,gBACAC,gBACAC,gBACAC,UACAC,aACCZ,QAAQ,eACb,EAAAhB,EAAAc,KAACZ,EAAAsB,OAAD,CAAQR,QAAQ,UACb,SAAAuC,GAAA,IACKzB,EADLyB,EACKzB,GACAC,EAFLwB,EAEKxB,OAFL,OAGS,EAAA/B,EAAAc,KAAAjB,EAAA,QAAAmC,SAAA,MACN,EAAAhC,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQI,MAAM,qBAAqBnB,QAAQ,YAC5D,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQW,MAAM,MAAMG,UAAWT,EAAIU,QAAST,EAAQf,QAAQ,WAC1D,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAK6B,MAAM,OAAOC,OAAO,OAAOV,gBAAgB,QAAQ/B,QAAQ,aAIpE,EAAAhB,EAAAc,KAACZ,EAAAsB,OAAD,CAAQR,QAAQ,UACnB,SAAA0C,GAAA,IACO5B,EADP4B,EACO5B,GACAC,EAFP2B,EAEO3B,OAFP,OAGW,EAAA/B,EAAAc,KAAAjB,EAAA,QAAAmC,SAAA,MACR,EAAAhC,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQI,MAAM,kBAAkBnB,QAAQ,YACzD,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQW,MAAM,MAAME,SAAS,MAAMC,UAAWT,EAAIU,QAAST,EAAQf,QAAQ,WACzE,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAK6B,MAAM,OAAOC,OAAO,OAAOV,gBAAgB,QAAQ/B,QAAQ,aAIlE,EAAAhB,EAAAc,KAACZ,EAAAsB,OAAD,CAAQR,QAAQ,UACnB,SAAA2C,GAAA,IACO7B,EADP6B,EACO7B,GACAC,EAFP4B,EAEO5B,OAFP,OAGW,EAAA/B,EAAAc,KAAAjB,EAAA,QAAAmC,SAAA,MACR,EAAAhC,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQI,MAAM,mBAAmBnB,QAAQ,YAC1D,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQW,MAAM,MAAME,SAAS,OAAOC,UAAWT,EAAIU,QAAST,EAAQf,QAAQ,WAC1E,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAK6B,MAAM,OAAOC,OAAO,OAAOV,gBAAgB,QAAQ/B,QAAQ,aAIlE,EAAAhB,EAAAc,KAACZ,EAAAsB,OAAD,CAAQR,QAAQ,UACnB,SAAA4C,GAAA,IACO9B,EADP8B,EACO9B,GACAC,EAFP6B,EAEO7B,OAFP,OAGW,EAAA/B,EAAAc,KAAAjB,EAAA,QAAAmC,SAAA,MACR,EAAAhC,EAAAc,KAACV,EAAAsB,OAAD,CAAQO,QAASF,EAAQI,MAAM,oBAAoBnB,QAAQ,YAC3D,EAAAhB,EAAAc,KAACX,EAAAsB,OAAD,CAAQW,MAAM,MAAME,SAAS,QAAQC,UAAWT,EAAIU,QAAST,EAAQf,QAAQ,WAC3E,EAAAhB,EAAAc,KAACT,EAAAsB,IAAD,CAAK6B,MAAM,OAAOC,OAAO,OAAOV,gBAAgB,QAAQ/B,QAAQ,oMAQxEP,EAAWoD,gBAAiB,2sBCrIrB,IAAMC,EAAmC,SAAClD,EAAO8B,GACtD,MAAO,CACLE,eAAgB,CACdN,SAAU,WACVkB,MAAO,OACPO,OAAQ,GAEVpB,oBAAqB,CACnBqB,WAAY,SACZC,QAAS,OACTR,OAAQ,OACRS,eAAgB,SAChBV,MAAO,6mBCtBbW,EAAAC,EAAArE,EAAA,kCACAsE,EAAAtE,EAAA,iDACAuE,EAAAvE,EAAA,6CAGAwE,EAAAxE,EAAA,gCACAyE,EAAAzE,EAAA,wBACA0E,EAAA1E,EAAA,8BACA2E,EAAA3E,EAAA,mCACA4E,EAAA5E,EAAA,qCACA6E,EAAA7E,EAAA,4CAOM8E,GAAe,EAAAP,EAAAQ,UAASC,mRAiBvB,IAAMtD,EAAS,SAACb,GAAuB,IAAAoE,EAE1CC,EAOErE,EAPFqE,SACA1C,EAME3B,EANF2B,UAH0C2C,EASxCtE,EALF4B,eAJ0C,IAAA0C,EAIhC,kBAAM,MAJ0BA,EAAAC,EASxCvE,EAJF0B,gBAL0C,IAAA6C,EAK/B,SAL+BA,EAAAC,EASxCxE,EAHFyB,cAN0C,IAAA+C,EAMjC,EANiCA,EAO1ChD,EAEExB,EAFFwB,MACAK,EACE7B,EADF6B,UAGIC,GAAQ,EAAA8B,EAAAa,YAX8BC,GAaI,EAAAb,EAAAc,aAC9CzB,kBACArB,EACAC,EAAM/B,WAAWmD,gBAH6B,CAI9C,GAAIpB,GAJEC,EAboC2C,EAapC3C,oBAAqBC,EAbe0C,EAaf1C,eAMvB4C,GAAY,EAAAlB,EAAAmB,YAAAT,EAAA,MAAAU,EAAA,SAAAV,EACf1C,EAAWD,IADI,EAAAqD,EAAA,SAAAV,EAAA,SAERW,wBAFQ,EAAAD,EAAA,SAAAV,EAAA,UAAAU,EAAA,YAGPpD,GAAY,OAHL,EAAAoD,EAAA,SAAAV,EAAA,SAIT,GAJSA,IAOlB,OACEb,EAAAyB,cAAClB,EAAAmB,MAAD,CAAOC,QAASvD,EAAWwD,aAAW,EAACC,eAAgBxD,GACrD2B,EAAAyB,cAACvB,EAAAU,KAAD,CAAMkB,MAAOtD,GAGXwB,EAAAyB,cAACf,EAAD,CACEoB,OAAK,EAAAC,EAAA,YACAtD,GADA,EAAA8C,EAAA,YAEFpD,EAAWkD,EAAUlD,KACJ,SAAbA,GAAoC,UAAbA,IAC1BF,GAAS,CACPqB,OAAQ,OACRD,MAAOpB,IAEO,WAAbE,GAAsC,QAAbA,IAC5BF,GAAS,CACPqB,OAAQrB,EACRoB,MAAO,UAIZyB,GAEHd,EAAAyB,cAACjB,EAAAwB,QAAD,CAASlE,QAASO,ySCnF1B,IAAAoC,EAAA7E,EAAA,sCAAAqG,OAAAC,KAAAzB,GAAA0B,QAAA,SAAAlD,GAAA,YAAAA,GAAA,eAAAA,GAAAgD,OAAAG,eAAAC,EAAApD,EAAA,CAAAqD,YAAA,EAAAC,IAAA,kBAAA9B,EAAAxB,0iCCiBO,IAAMuD,EAAqC,SAAAjG,EAAkBgC,GAClE,MAAO,CACLkE,aAAc,CACZ7D,gBAHwErC,EAAzBqF,YAI3C,cACArD,EAAMmE,OAAOC,WAAWC,QAC5BC,OAAQ,EACRC,OAAQ,OACRxD,OAAQ,OACRyD,KAAM,EACN5E,SAAU,WACV6E,MAAO,EACPC,IAAK,EACL5D,MAAO,waC9Bb,IAAAW,EAAAC,EAAArE,EAAA,kCACAsE,EAAAtE,EAAA,iDAGAyE,EAAAzE,EAAA,wBACA0E,EAAA1E,EAAA,8BACA4E,EAAA5E,EAAA,8CAYaoG,EAAU,SAACvF,GAAwB,IACtCqB,EAA4CrB,EAA5CqB,QADsCoF,EACMzG,EAAnCmF,mBAD6B,IAAAsB,KACR5E,EAAc7B,EAAd6B,UAChCC,GAAQ,EAAA8B,EAAAa,YAENuB,GAAiB,EAAAnC,EAAAc,aACvBoB,mBACAlE,EACAC,EAAM/B,WAAWgG,iBAHM,CAIvB,CAAEZ,eAAerD,GAJXkE,aAMR,OACEzC,EAAAyB,cAACvB,EAAAiD,yBAAD,CACErF,QAAS,SAAAsF,GACPA,EAAMC,iBACNvF,MAGFkC,EAAAyB,cAACvB,EAAAU,KAAD,CAAMkB,MAAOW,6SCnCnB,IAAAjC,EAAA5E,EAAA,wCAAAqG,OAAAC,KAAA1B,GAAA2B,QAAA,SAAAlD,GAAA,YAAAA,GAAA,eAAAA,GAAAgD,OAAAG,eAAAC,EAAApD,EAAA,CAAAqD,YAAA,EAAAC,IAAA,kBAAA/B,EAAAvB","file":"static/js/23.4e3ae526.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Drawer } from '.';\nimport { Button } from '../Button';\nimport { Box } from '../Box';\nimport { Text } from '../Typography';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"drawer\"\n    }}>{`Drawer`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Drawer />\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} isInline title=\\\"Open drawer menu\\\" />\\n      <Drawer\\n        space={null} // px or %, null fits the content\\n        offset={0}\\n        position=\\\"bottom\\\"\\n        isVisible={on}\\n        onClose={toggle}\\n        getStyles={(props, theme) => ({\\n          modalContainerStyle: {},\\n          containerStyle: {},\\n        })}\\n      >\\n        <Box padding={24}>\\n          <Box elevation={1} backgroundColor=\\\"white\\\" borderRadius={4}>\\n            {[\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 1\\',\\n                color: \\'danger\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 2\\',\\n                color: \\'primary\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 3\\',\\n                color: \\'secondary\\',\\n              },\\n              {\\n                onPress: toggle,\\n                title: \\'Menu Option 4\\',\\n              },\\n            ].map(option => (\\n              <Button key={option.title} appearance=\\\"minimal\\\" {...option} />\\n            ))}\\n          </Box>\\n          <Box paddingTop={24}>\\n            <Button onPress={toggle} title=\\\"Close\\\" />\\n          </Box>\\n        </Box>\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Drawer,\n      Button,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Drawer mdxType=\"Drawer\" />\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <>\n        <Button onPress={toggle} isInline title=\"Open drawer menu\" mdxType=\"Button\" />\n        <Drawer space={null} // px or %, null fits the content\n          offset={0} position=\"bottom\" isVisible={on} onClose={toggle} getStyles={(props, theme) => ({\n            modalContainerStyle: {},\n            containerStyle: {}\n          })} mdxType=\"Drawer\">\n          <Box padding={24} mdxType=\"Box\">\n            <Box elevation={1} backgroundColor=\"white\" borderRadius={4} mdxType=\"Box\">\n              {[{\n                  onPress: toggle,\n                  title: 'Menu Option 1',\n                  color: 'danger'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 2',\n                  color: 'primary'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 3',\n                  color: 'secondary'\n                }, {\n                  onPress: toggle,\n                  title: 'Menu Option 4'\n                }].map(option => <Button key={option.title} appearance=\"minimal\" {...option} mdxType=\"Button\" />)}\n            </Box>\n            <Box paddingTop={24} mdxType=\"Box\">\n              <Button onPress={toggle} title=\"Close\" mdxType=\"Button\" />\n            </Box>\n          </Box>\n        </Drawer>\n      </>}\n  </Toggle>\n    </Playground>\n    <h3 {...{\n      \"id\": \"variants\"\n    }}>{`Variants`}</h3>\n    <Playground __position={1} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open bottom drawer\\\" />\\n      <Drawer space=\\\"30%\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open top drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"top\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open left drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"left\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>\\n<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <Button onPress={toggle} title=\\\"Open right drawer\\\" />\\n      <Drawer space=\\\"30%\\\" position=\\\"right\\\" isVisible={on} onClose={toggle}>\\n        <Box width=\\\"100%\\\" height=\\\"100%\\\" backgroundColor=\\\"white\\\" />\\n      </Drawer>\\n    </>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Drawer,\n      Button,\n      Box,\n      Text\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <>\n        <Button onPress={toggle} title=\"Open bottom drawer\" mdxType=\"Button\" />\n        <Drawer space=\"30%\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n          <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n        </Drawer>\n      </>}\n  </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open top drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"top\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open left drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"left\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n      <Toggle mdxType=\"Toggle\">\n  {({\n          on,\n          toggle\n        }) => <>\n      <Button onPress={toggle} title=\"Open right drawer\" mdxType=\"Button\" />\n      <Drawer space=\"30%\" position=\"right\" isVisible={on} onClose={toggle} mdxType=\"Drawer\">\n        <Box width=\"100%\" height=\"100%\" backgroundColor=\"white\" mdxType=\"Box\" />\n      </Drawer>\n    </>}\n      </Toggle>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\n\nexport interface DrawerStyles {\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDrawerStyles = (props: {}, theme: Theme) => DrawerStyles;\n\nexport const getDrawerStyles: GetDrawerStyles = (props, theme) => {\n  return {\n    containerStyle: {\n      position: 'absolute',\n      width: '100%',\n      zIndex: 1,\n    },\n    modalContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DrawerStyles,\n  GetDrawerStyles,\n  getDrawerStyles,\n} from './Drawer.styles';\n\ntype Position = 'bottom' | 'top' | 'right' | 'left';\nconst AnimatedView = animated(View);\n\nexport interface DrawerProps {\n  children: React.ReactNode;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** Amount to offset from the edge of window @default 0 */\n  offset?: number;\n  /** Amount of % screen to take up. */\n  space?: number | string;\n  /** Which side to draw from @default bottom */\n  position?: Position;\n  getStyles?: ReplaceReturnType<GetDrawerStyles, DeepPartial<DrawerStyles>>;\n}\n\nexport const Drawer = (props: DrawerProps) => {\n  const {\n    children,\n    isVisible,\n    onClose = () => null,\n    position = 'bottom',\n    offset = 0,\n    space,\n    getStyles,\n  } = props;\n\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle } = mergeStyles(\n    getDrawerStyles,\n    getStyles,\n    theme.components.getDrawerStyles,\n  )({}, theme);\n\n  const animation = useSpring({\n    [position]: offset,\n    config: springDefaultConfig,\n    from: { [position]: -600 },\n    reset: true,\n  });\n\n  return (\n    <Modal visible={isVisible} transparent onRequestClose={onClose}>\n      <View style={modalContainerStyle}>\n        {/*\n        // @ts-ignore */}\n        <AnimatedView\n          style={{\n            ...containerStyle,\n            [position]: animation[position],\n            ...((position === 'left' || position === 'right') &&\n              space && {\n                height: '100%',\n                width: space,\n              }),\n            ...((position === 'bottom' || position === 'top') &&\n              space && {\n                height: space,\n                width: '100%',\n              }),\n          }}\n        >\n          {children}\n        </AnimatedView>\n        <Overlay onPress={onClose} />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Drawer';\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\n\nexport interface OverlayStyles {\n  overlayStyle: ViewStyle;\n}\n\nexport interface OverlayStylesProps {\n  transparent: boolean;\n}\n\nexport type GetOverlayStyles = (\n  { transparent }: OverlayStylesProps,\n  theme: Theme,\n) => OverlayStyles;\n\nexport const getOverlayStyles: GetOverlayStyles = ({ transparent }, theme) => {\n  return {\n    overlayStyle: {\n      backgroundColor: transparent\n        ? 'transparent'\n        : theme.colors.background.overlay,\n      bottom: 0,\n      cursor: 'auto',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { TouchableWithoutFeedback, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetOverlayStyles,\n  getOverlayStyles,\n  OverlayStyles,\n} from './Overlay.styles';\n\ninterface OverlayProps {\n  onPress: () => void;\n  transparent?: boolean;\n  getStyles?: ReplaceReturnType<GetOverlayStyles, DeepPartial<OverlayStyles>>;\n}\n\nexport const Overlay = (props: OverlayProps) => {\n  const { onPress, transparent = false, getStyles } = props;\n  const theme = useTheme();\n\n  const { overlayStyle } = mergeStyles(\n    getOverlayStyles,\n    getStyles,\n    theme.components.getOverlayStyles,\n  )({ transparent }, theme);\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={event => {\n        event.preventDefault();\n        onPress();\n      }}\n    >\n      <View style={overlayStyle} />\n    </TouchableWithoutFeedback>\n  );\n};\n","export * from './Overlay';\n"],"sourceRoot":""}