{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/Container.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/LayoutContext.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Grid/LayoutProvider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["shapeMapping","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","_shape","_x","apply","this","arguments","toString","Box","props","children","propStyle","style","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","Playground","Props","Container","LayoutProvider","Text","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_5__","padding","___WEBPACK_IMPORTED_MODULE_6__","maxWidth","___WEBPACK_IMPORTED_MODULE_8__","isMDXComponent","getContainerStyles","containerWidth","gutterWidth","containerStyle","marginLeft","marginRight","paddingLeft","paddingRight","width","getStyles","_useLayout","useLayout","mergeStyles","react","View","__webpack_require__","d","__webpack_exports__","defaultLayout","ASC_ORDER_SCREEN_SIZES","DESC_ORDER_SCREEN_SIZES","LayoutContext","react__WEBPACK_IMPORTED_MODULE_0__","breakpoints","small","medium","large","xlarge","currentScreenSize","getResponsiveValue","values","xsmall","undefined","gridColumnCount","slice","reverse","React","getCurrentScreenSize","layout","windowScaledSize","Dimensions","get","find","screenSize","value","deepmerge","_React$useState","_React$useState2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","setCurrentScreenSize","handleDimensionsChange","addEventListener","removeEventListener","react__WEBPACK_IMPORTED_MODULE_3__","_LayoutContext__WEBPACK_IMPORTED_MODULE_5__","Provider","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","currentScreenSizeIndex","indexOf","nearestSize","index","deriveResponsiveValue","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","getTextColor","textColors","textColor","getTextSize","textSizes","size","fontSize","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","textStyle","text","textAlign","alignSelf","flexDirection","fontStyle","textTransform","_props$color","_props$fontFamily","_props$size","_props$align","_props$isInline","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","content","overlay","greyLight","greyDefault","greyDark","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","border","default","primary","secondary","danger","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","paragraphSizes","controlBorderRadius","controlHeights","controlPaddings","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","react_default","a","createElement","useContext","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","merge","all"],"mappings":"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","file":"static/js/14.2544186d.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Container, LayoutProvider, Text } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h1>\n    <p>{`On small screens, the container is the width of the screen. On large screens, it centers the content with a max-width of defined by Layout (default 1440) and adds padding`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<LayoutProvider>\\n  <Box backgroundColor=\\\"#67c6bb\\\" padding={3}>\\n    <Container maxWidth={300}>\\n      <Box backgroundColor=\\\"white\\\" padding={3}>\\n        <Text>Centered content</Text>\\n      </Box>\\n    </Container>\\n  </Box>\\n</LayoutProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Container,\n      LayoutProvider,\n      Text\n    }} mdxType=\"Playground\">\n  <LayoutProvider mdxType=\"LayoutProvider\">\n    <Box backgroundColor=\"#67c6bb\" padding={3} mdxType=\"Box\">\n      <Container maxWidth={300} mdxType=\"Container\">\n        <Box backgroundColor=\"white\" padding={3} mdxType=\"Box\">\n          <Text mdxType=\"Text\">Centered content</Text>\n        </Box>\n      </Container>\n    </Box>\n  </LayoutProvider>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\n\nexport interface ContainerStylesProps {\n  maxWidth?: number;\n  containerWidth: number;\n  gutterWidth: number;\n}\nexport type GetContainerStyles = (\n  progressStylesProps: ContainerStylesProps,\n  theme: Theme,\n) => ContainerStyles;\n\nexport interface ContainerStyles {\n  containerStyle: ViewStyle;\n}\n\nexport const getContainerStyles: GetContainerStyles = (\n  { maxWidth, containerWidth, gutterWidth },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      maxWidth: maxWidth || containerWidth,\n      paddingLeft: gutterWidth / 2,\n      paddingRight: gutterWidth / 2,\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  ContainerStyles,\n  GetContainerStyles,\n  getContainerStyles,\n} from './Container.styles';\nimport { useLayout } from './LayoutContext';\n\nexport interface ContainerProps {\n  children: React.ReactNode;\n  maxWidth?: number;\n  getStyles?: ReplaceReturnType<\n    GetContainerStyles,\n    DeepPartial<ContainerStyles>\n  >;\n}\n\n/**\n * On screens with size lg and above, caps maximum width of the content\n */\nexport const Container = (props: ContainerProps) => {\n  const { children, getStyles, maxWidth } = props;\n  const { maxWidth: containerWidth, gutterWidth } = useLayout();\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(\n    getContainerStyles,\n    getStyles,\n    theme.components.getContainerStyles,\n  )({ maxWidth, containerWidth, gutterWidth }, theme);\n\n  return <View style={containerStyle}>{children}</View>;\n};\n","import * as React from 'react';\n\nexport interface Breakpoints {\n  small: number;\n  medium: number;\n  large: number;\n  xlarge: number;\n}\n\nexport interface ScreenSizes extends Breakpoints {\n  xsmall: number;\n}\n\nexport type ColumnCount =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport type Breakpoint = keyof Breakpoints;\nexport type ScreenSize = keyof ScreenSizes;\n\nexport interface GetResponsiveValueParam<\n  TXsmallValue = any,\n  TSmallValue = any,\n  TMediumValue = any,\n  TLargeValue = any,\n  TXlargeValue = any\n> {\n  xsmall?: TXlargeValue;\n  small?: TXsmallValue;\n  medium?: TSmallValue;\n  large?: TMediumValue;\n  xlarge?: TLargeValue;\n}\n\nexport type GetResponsiveValue = <\n  TXsmallValue = any,\n  TSmallValue = any,\n  TMediumValue = any,\n  TLargeValue = any,\n  TXlargeValue = any\n>(\n  values: GetResponsiveValueParam<\n    TXsmallValue,\n    TSmallValue,\n    TMediumValue,\n    TLargeValue,\n    TXlargeValue\n  >,\n) =>\n  | TXlargeValue\n  | TLargeValue\n  | TMediumValue\n  | TSmallValue\n  | TXsmallValue\n  | undefined;\n\nexport interface LayoutInterface {\n  breakpoints: Breakpoints;\n  currentScreenSize: ScreenSize;\n  getResponsiveValue: GetResponsiveValue;\n  gridColumnCount: ColumnCount;\n  gutterWidth: number;\n  maxWidth: number;\n}\n\nexport const defaultLayout: LayoutInterface = {\n  breakpoints: {\n    small: 480,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1280,\n  },\n  currentScreenSize: 'small',\n  getResponsiveValue: values =>\n    values.xsmall ||\n    values.small ||\n    values.medium ||\n    values.large ||\n    values.xlarge ||\n    undefined,\n  gridColumnCount: 12,\n  gutterWidth: 30,\n  maxWidth: 1440,\n};\n\nexport const ASC_ORDER_SCREEN_SIZES: Array<keyof ScreenSizes> = [\n  'xsmall',\n  'small',\n  'medium',\n  'large',\n  'xlarge',\n];\n\nexport const DESC_ORDER_SCREEN_SIZES: Array<\n  keyof ScreenSizes\n> = ASC_ORDER_SCREEN_SIZES.slice(0).reverse();\n\nexport const LayoutContext = React.createContext(defaultLayout);\n\nexport const useLayout = () => {\n  return React.useContext(LayoutContext);\n};\n","import deepmerge from 'deepmerge';\nimport * as React from 'react';\nimport { Dimensions } from 'react-native';\n\nimport {\n  defaultLayout,\n  DESC_ORDER_SCREEN_SIZES,\n  GetResponsiveValueParam,\n  LayoutContext,\n  LayoutInterface,\n  ScreenSize,\n} from './LayoutContext';\n\nexport interface LayoutProviderProps {\n  children: React.ReactNode;\n  value?: Partial<LayoutInterface>;\n}\n\nexport const getCurrentScreenSize = (layout: LayoutInterface) => {\n  const { breakpoints } = layout;\n  const windowScaledSize = Dimensions.get('window');\n\n  const currentScreenSize = DESC_ORDER_SCREEN_SIZES.find(screenSize => {\n    if (screenSize === 'xsmall') {\n      return windowScaledSize.width < breakpoints.small;\n    }\n\n    const width = breakpoints[screenSize];\n    if (windowScaledSize.width >= width) return true;\n\n    return false;\n  });\n\n  return currentScreenSize || 'xsmall';\n};\n\nconst deriveResponsiveValue = (\n  values: GetResponsiveValueParam,\n  currentScreenSize: ScreenSize,\n) => {\n  const currentScreenSizeIndex = DESC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  const nearestSize = DESC_ORDER_SCREEN_SIZES.find((screenSize, index) => {\n    if (currentScreenSizeIndex > index) return false;\n\n    return !!values[screenSize];\n  });\n\n  return nearestSize ? values[nearestSize] : undefined;\n};\n\nexport const LayoutProvider = (props: LayoutProviderProps) => {\n  const { children, value } = props;\n\n  const layout = value ? deepmerge(defaultLayout, value) : defaultLayout;\n\n  const [currentScreenSize, setCurrentScreenSize] = React.useState(\n    getCurrentScreenSize(layout),\n  );\n\n  const handleDimensionsChange = React.useCallback(() => {\n    setCurrentScreenSize(getCurrentScreenSize(layout));\n  }, []);\n\n  React.useLayoutEffect(() => {\n    Dimensions.addEventListener('change', handleDimensionsChange);\n\n    return () =>\n      Dimensions.removeEventListener('change', handleDimensionsChange);\n  }, []);\n\n  return (\n    <LayoutContext.Provider\n      value={{\n        ...layout,\n        currentScreenSize,\n        getResponsiveValue: values =>\n          deriveResponsiveValue(values, currentScreenSize),\n      }}\n    >\n      {children}\n    </LayoutContext.Provider>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? // Use system font on the Web\n      {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : // Use default font families by React Native by default. Setting it to undefined will use the default font\n      {\n        heading: undefined,\n        mono: undefined,\n        text: undefined,\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetColumnStyles } from '../components/Grid/Column.styles';\nimport { GetContainerStyles } from '../components/Grid/Container.styles';\nimport { GetRowStyles } from '../components/Grid/Row.styles';\nimport { GetIconTextInputStyles } from '../components/Inputs/IconTextInput.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading?: string;\n  mono?: string;\n  text?: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetIconTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}