{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx"],"names":["getAvatarVariables","theme","box","alignItems","borderRadius","display","justifyContent","overflow","position","image","height","width","text","fills","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","_ref","isSolid","color","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","colorProps","name","_ref2$size","size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","avatarVariables","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","boxStyle","_objectSpread2","backgroundColor","textStyle","fontSize","lineHeight","imageStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Typography","_Avatar","globalGetInitials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","Avatar","props","source","_props$size","_props$isSolid","_props$getInitials","getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","getStyles","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","createElement","View","style","Text","Image","forEach","key","defineProperty","exports","enumerable","get","Feather","Icon","IconTag","concat","result","matches","charAt","convertToPascal","_Icon","_react2","_interopRequireDefault","_docz","_ListItem","layoutProps","MDXLayout","MDXContent","components","_objectWithoutProperties2","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","ListItem","onPress","console","log","rightIcon","leftIcon","uri","label","description","isDisabled","imageWrapperStyle","leftWrapperStyle","textWrapperStyle","containerStyle","focusBackgroundColor","wrapperStyle","of","isMDXComponent","getListItemVariables","base","colors","background","content","borderBottomWidth","borderColor","border","disabled","greyDark","greyLight","selected","sizes","small","textSizes","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","flexDirection","getListItemStyles","isSelected","selectListVariables","_sizes$size","sizeStyles","marginRight","_props$isDisabled","_props$rightIcon","accessibilityProps","TouchableHighlight","underlayColor"],"mappings":"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","file":"static/js/18.4582e82e.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/ThemeInterface';\n\nexport interface AvatarVariables {\n  fills: Fills;\n  box: ViewStyle;\n  text: TextStyle;\n  image: ImageStyle;\n}\n\nexport const getAvatarVariables = (theme: Theme): AvatarVariables => {\n  return {\n    box: {\n      alignItems: 'center',\n      borderRadius: 9999,\n      display: 'flex',\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n    },\n\n    image: {\n      height: '100%',\n      width: '100%',\n    },\n\n    text: {},\n\n    fills: theme.fills,\n  };\n};\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  boxStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  const avatarVariables = getAvatarVariables(theme);\n  let colorProps;\n  const fills = avatarVariables.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(avatarVariables.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    boxStyle: {\n      ...avatarVariables.box,\n      backgroundColor: colorProps.backgroundColor,\n      height: size,\n      width: size,\n    },\n\n    textStyle: {\n      ...avatarVariables.text,\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: avatarVariables.image,\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/ThemeInterface';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { boxStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={boxStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n","export * from './Avatar';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { ListItem } from './ListItem';\nimport { Avatar } from '../Avatar';\nimport { Icon } from '../Icon';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  rightIcon={<Icon color=\\\"#7e7e7e\\\" size={24} name=\\\"chevron-right\\\" />}\\n  leftIcon={\\n    <Avatar size={45} source={{ uri: \\'https://picsum.photos/200/200\\' }} />\\n  }\\n  label=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  getStyles={(props, theme) => ({\\n    imageWrapperStyle: {},\\n    leftWrapperStyle: {},\\n    textWrapperStyle: {},\\n    containerStyle: {},\\n    textStyle: {},\\n    focusBackgroundColor: {},\\n    wrapperStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      ListItem,\n      Avatar,\n      Icon\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} rightIcon={<Icon color=\"#7e7e7e\" size={24} name=\"chevron-right\" mdxType=\"Icon\" />} leftIcon={<Avatar size={45} source={{\n        uri: 'https://picsum.photos/200/200'\n      }} mdxType=\"Avatar\" />} label=\"Some label\" description=\"Some description\" size=\"large\" isDisabled={false} getStyles={(props, theme) => ({\n        imageWrapperStyle: {},\n        leftWrapperStyle: {},\n        textWrapperStyle: {},\n        containerStyle: {},\n        textStyle: {},\n        focusBackgroundColor: {},\n        wrapperStyle: {}\n      })} mdxType=\"ListItem\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ListItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n"],"sourceRoot":""}