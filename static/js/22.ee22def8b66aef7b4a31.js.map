{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Spacing/Spacing.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/ControlSize.ts"],"names":["getSpacing","size","theme","spacing","Spacing","props","_props$size","_props$orientation","orientation","style","viewProps","Object","objectWithoutProperties","useTheme","react_default","a","createElement","View","esm_extends","height","width","getStyle","dlv","__source","fileName","lineNumber","propToFn","backgroundColor","color","colors","background","elevation","elevations","shape","containerShapes","space","padding","spaceBottom","paddingBottom","spaceEnd","paddingEnd","spaceHorizontal","paddingHorizontal","spaceLeft","paddingLeft","spaceRight","paddingRight","spaceStart","paddingStart","spaceTop","paddingTop","spaceVertical","paddingVertical","Box","children","testID","viewStyles","transformedStyles","pureStyles","prop","styleFn","push","layoutProps","MDXLayout","MDXContent","_ref","components","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","_jsxFileName","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Divider","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_6__","of","isMDXComponent","_props$color","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","getDividerColor","border","dividerSize","isControlSize","dividerScale","styleMap","horizontal","vertical","react__WEBPACK_IMPORTED_MODULE_3___default","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_4__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","borderColors","borderColor","large","medium","small","__webpack_require__","d","__webpack_exports__","useControlSizeUtils","_theme__WEBPACK_IMPORTED_MODULE_0__","getControlHeight","controlHeights","getSmallerTextSize","getTextSize","getSmallerHeightControlSize","getHeightControlSize"],"mappings":"umCA8BO,IAAMA,EAAa,SAACC,EAA4BC,GAA7B,MACR,kBAATD,EAAoBA,EAAOC,EAAMC,QAAQF,4LAE3C,IAAMG,EAAU,SAACC,GAAwB,IAAAC,EAM1CD,EAJFJ,YAF4C,IAAAK,EAErC,SAFqCA,EAAAC,EAM1CF,EAHFG,mBAH4C,IAAAD,EAG9B,WAH8BA,EAI5CE,EAEEJ,EAFFI,MACGC,EALyCC,OAAAC,EAAA,EAAAD,CAM1CN,EAN0C,gCAOxCH,EAAQW,cAEd,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAADN,OAAAO,EAAA,EAAAP,CAAA,CACEF,MAAO,CACW,aAAhBD,EACI,CAAEW,OAAQnB,EAAWC,EAAMC,IAC3B,CAAEkB,MAAOpB,EAAWC,EAAMC,IAC9BmB,YAAShB,EAAOI,GAChBY,YAAShB,EAAOiB,IAAIpB,EAAO,8BAEzBQ,EARN,CAAAa,SAAA,CAAAC,2FAAAC,WAAA,6cCXJ,IAAMC,EAOF,CACFC,gBAAiB,SAACC,EAAiC1B,GAEjD,OAAIA,EAAM2B,OAAOC,WAAWF,GAEnB,CAAED,gBAAiBzB,EAAM2B,OAAOC,WAAWF,IAG7C,CAAED,gBAAiBC,IAE5BG,UAAW,SAACA,EAAmB7B,GAApB,OAAqCA,EAAM8B,WAAWD,IAEjEE,MAAO,SAACA,EAAuB/B,GAAxB,OAAyCA,EAAMgC,gBAAgBD,IAEtEE,MAAO,SAAClC,EAA4BC,GAA7B,MAA+C,CACpDkC,QAASpC,EAAWC,EAAMC,KAE5BmC,YAAa,SAACpC,EAA4BC,GAA7B,MAA+C,CAC1DoC,cAAetC,EAAWC,EAAMC,KAElCqC,SAAU,SAACtC,EAA4BC,GAA7B,MAA+C,CACvDsC,WAAYxC,EAAWC,EAAMC,KAE/BuC,gBAAiB,SAACxC,EAA4BC,GAA7B,MAA+C,CAC9DwC,kBAAmB1C,EAAWC,EAAMC,KAEtCyC,UAAW,SAAC1C,EAA4BC,GAA7B,MAA+C,CACxD0C,YAAa5C,EAAWC,EAAMC,KAEhC2C,WAAY,SAAC5C,EAA4BC,GAA7B,MAA+C,CACzD4C,aAAc9C,EAAWC,EAAMC,KAEjC6C,WAAY,SAAC9C,EAA4BC,GAA7B,MAA+C,CACzD8C,aAAchD,EAAWC,EAAMC,KAEjC+C,SAAU,SAAChD,EAA4BC,GAA7B,MAA+C,CACvDgD,WAAYlD,EAAWC,EAAMC,KAE/BiD,cAAe,SAAClD,EAA4BC,GAA7B,MAA+C,CAC5DkD,gBAAiBpD,EAAWC,EAAMC,MAIzBmD,EAAM,SAAChD,GAAoB,IAC9BiD,EAAoCjD,EAApCiD,SAAUC,EAA0BlD,EAA1BkD,OAAWC,EADS7C,OAAAC,EAAA,EAAAD,CACMN,EADN,uBAEhCH,EAAQW,cACR4C,EAAoB,GACpBC,EAAwB,GAE9B,IAAK,IAAMC,KAAQH,EACjB,GAAIG,EAAM,CACR,IAAMC,EAAUlC,EAASiC,GAEzB,GAAIC,EAAS,CAEX,IAAMnD,EAAQmD,EAAQJ,EAAWG,GAAkBzD,GAEnDuD,EAAkBI,KAAKpD,QAGvBiD,EAAWC,GAA2BH,EAAWG,GAKvD,OACE7C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMsC,OAAQA,EAAQ9C,MAAO,CAACiD,EAAYD,GAA1ClC,SAAA,CAAAC,mFAAAC,WAAA,MACG6B,szBC9FDQ,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACG7D,EACFM,OAAAwD,EAAA,EAAAxD,CAAAsD,EAAA,gBACD,OAAOtD,OAAAyD,EAAA,EAAAzD,CAACoD,EAADpD,OAAA0D,EAAA,EAAA1D,CAAA,GAAemD,EAAiBzD,EAAhC,CAAuC6D,WAAYA,EAAYI,QAAQ,YAAvE/C,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,MAGLd,OAAAyD,EAAA,EAAAzD,CAAA,KAAAA,OAAA0D,EAAA,EAAA1D,CAAQ,CACN6D,GAAM,WADR,CAAAjD,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,iBAGAd,OAAAyD,EAAA,EAAAzD,CAAA,KAAAA,OAAA0D,EAAA,EAAA1D,CAAQ,CACN6D,GAAM,SADR,CAAAjD,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,eAGAd,OAAAyD,EAAA,EAAAzD,CAAC8D,EAAA,EAAD,CAAYC,WAAY,EAAGC,OAAQ,oDAAqDC,QAAS,CAC/FvE,MAAOwE,KAAOA,KAAKxE,MAAQA,EAC3ByE,eACAC,UACA1B,QACA2B,aACCV,QAAQ,aANX/C,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,KAOFd,OAAAyD,EAAA,EAAAzD,CAACsE,EAAA,EAAD,CAAK7B,gBAAiB,GAAIkB,QAAQ,MAAlC/C,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,KACEd,OAAAyD,EAAA,EAAAzD,CAACuE,EAAA,EAAD,CAASZ,QAAQ,UAAjB/C,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,QAGAd,OAAAyD,EAAA,EAAAzD,CAAA,KAAAA,OAAA0D,EAAA,EAAA1D,CAAQ,CACN6D,GAAM,SADR,CAAAjD,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,eAGAd,OAAAyD,EAAA,EAAAzD,CAAC8D,EAAA,EAAD,CAAOU,GAAIH,IAASV,QAAQ,QAA5B/C,SAAA,CAAAC,SAAA+C,EAAA9C,WAAA,+LAIJuC,EAAWoB,gBAAiB,0nCCVrB,IAAMJ,EAAU,SAAC3E,GAAwB,IAAAC,EAO1CD,EALFJ,YAF4C,IAAAK,EAErC,QAFqCA,EAAA+E,EAO1ChF,EAJFuB,aAH4C,IAAAyD,EAGpC,UAHoCA,EAAA9E,EAO1CF,EAHFG,mBAJ4C,IAAAD,EAI9B,aAJ8BA,EAK5CE,EAEEJ,EAFFI,MACGC,EANyCC,OAAA2E,EAAA,EAAA3E,CAO1CN,EAP0C,wCAQxCH,EAAQW,cAERc,EAAkB4D,EAAgBrF,EAAM2B,OAAO2D,OAA7BD,CACtB3D,GAAS1B,EAAM2B,OAAO2D,OAAb,SAGLC,EAAcC,YAAczF,GAAQ0F,EAAa1F,GAAQA,EAEzD2F,EAAW,CACfC,WAAY,CACVlE,kBACAR,OAAQsE,EACRrE,MAAO,QAET0E,SAAU,CACRnE,kBACAR,OAAQ,OACRC,MAAOqE,IAIX,OACEM,EAAAhF,EAAAC,cAACgF,EAAA,EAADrF,OAAAsF,EAAA,EAAAtF,CAAA,CACEF,MAAO,CACLD,EAAcoF,EAASpF,GAAeoF,EAASC,WAC/CxE,YAAShB,EAAOI,GAChBY,YAAShB,EAAOiB,IAAIpB,EAAO,8BAEzBQ,EANN,CAAAa,SAAA,CAAAC,2FAAAC,WAAA,qNAWJ,IAAM8D,EAAkB,SAACW,GAAD,OAAgC,SACtDC,GAKA,OAFoBD,EAAaC,IAEXA,IAGlBR,EAAkD,CACtDS,MAAO,EACPC,OAAQ,EACRC,MAAO,8DC1FTC,EAAAC,EAAAC,EAAA,sBAAAf,IAAAa,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,yBAEab,EAAgB,SAC3BzF,GAEA,MAAoB,kBAATA,4MAKN,IAAMyG,EAAsB,WACjC,IAAMxG,EAAQW,cAuDd,MAAO,CACL+F,iBAtDuB,SAAC3G,GACxB,MAAoB,kBAATA,EAA0BA,EAE9BC,EAAM2G,eAAe5G,IAoD5B6G,mBA5ByB,SAAC7G,GAC1B,OAZkB,SAACA,GACnB,GAAoB,kBAATA,EAAmB,CAC5B,GAAIA,GAAQC,EAAM2G,eAAeT,MAAO,MAAO,QAC/C,GAAInG,GAAQC,EAAM2G,eAAeR,OAAQ,MAAO,SAChD,GAAIpG,GAAQC,EAAM2G,eAAeP,MAAO,MAAO,QAC/C,GAAIrG,EAAOC,EAAM2G,eAAeP,MAAO,MAAO,SAGhD,OAAOrG,EAIC8G,CAAY9G,IAClB,IAAK,QACH,MAAO,SACT,IAAK,SACH,MAAO,QACT,IAAK,QAEL,QACE,MAAO,WAoBX+G,4BAhBkC,SAClC/G,GAEA,OArC2B,SAACA,GAC5B,GAAoB,kBAATA,EAAmB,CAC5B,GAAIA,GAAQC,EAAM2G,eAAeT,MAAO,MAAO,QAC/C,GAAInG,GAAQC,EAAM2G,eAAeR,OAAQ,MAAO,SAChD,GAAIpG,EAAOC,EAAM2G,eAAeR,OAAQ,MAAO,QAGjD,OAAOpG,EA8BCgH,CAAqBhH,IAC3B,IAAK,QACH,MAAO,SACT,IAAK,SAEL,QACE,MAAO","file":"static/js/22.771c7e4b.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { SpacingSize, Theme, useTheme } from '../../theme';\nimport { getStyle, OverrideStyle, Style } from '../../utils/Overrides';\n\ntype SpacingOrientation = 'horizontal' | 'vertical';\n\nexport interface SpacingProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the Spacing.\n   * @default \"medium\"\n   */\n  size?: SpacingSize | number;\n\n  /**\n   * Orientation of spacing.\n   * @default \"vertical\"\n   */\n  orientation?: SpacingOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<SpacingProps, ViewStyle>;\n}\n\nexport type SpacingOverride = OverrideStyle<SpacingProps, ViewStyle>;\n\nexport const getSpacing = (size: SpacingSize | number, theme: Theme) =>\n  typeof size === 'number' ? size : theme.spacing[size];\n\nexport const Spacing = (props: SpacingProps) => {\n  const {\n    size = 'medium',\n    orientation = 'vertical',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        orientation === 'vertical'\n          ? { height: getSpacing(size, theme) }\n          : { width: getSpacing(size, theme) },\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Spacing.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport {\n  BackgroundColor,\n  ContainerShape,\n  SpacingSize,\n  Theme,\n  useTheme,\n} from '../../theme';\nimport { getSpacing } from '../Spacing';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n  testID?: string;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n\n  space?: SpacingSize | number;\n  spaceBottom?: SpacingSize | number;\n  spaceEnd?: SpacingSize | number;\n  spaceHorizontal?: SpacingSize | number;\n  spaceLeft?: SpacingSize | number;\n  spaceRight?: SpacingSize | number;\n  spaceStart?: SpacingSize | number;\n  spaceTop?: SpacingSize | number;\n  spaceVertical?: SpacingSize | number;\n}\n\ntype BoxProp = keyof Omit<Omit<BoxProps, 'children'>, 'testID'>;\n\nconst propToFn: Partial<\n  {\n    [key in BoxProp]: (\n      prop: NonNullable<BoxProps[key]>,\n      theme: Theme,\n    ) => ViewStyle;\n  }\n> = {\n  backgroundColor: (color: BackgroundColor | string, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n\n    return { backgroundColor: color };\n  },\n  elevation: (elevation: number, theme: Theme) => theme.elevations[elevation],\n\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n\n  space: (size: SpacingSize | number, theme: Theme) => ({\n    padding: getSpacing(size, theme),\n  }),\n  spaceBottom: (size: SpacingSize | number, theme: Theme) => ({\n    paddingBottom: getSpacing(size, theme),\n  }),\n  spaceEnd: (size: SpacingSize | number, theme: Theme) => ({\n    paddingEnd: getSpacing(size, theme),\n  }),\n  spaceHorizontal: (size: SpacingSize | number, theme: Theme) => ({\n    paddingHorizontal: getSpacing(size, theme),\n  }),\n  spaceLeft: (size: SpacingSize | number, theme: Theme) => ({\n    paddingLeft: getSpacing(size, theme),\n  }),\n  spaceRight: (size: SpacingSize | number, theme: Theme) => ({\n    paddingRight: getSpacing(size, theme),\n  }),\n  spaceStart: (size: SpacingSize | number, theme: Theme) => ({\n    paddingStart: getSpacing(size, theme),\n  }),\n  spaceTop: (size: SpacingSize | number, theme: Theme) => ({\n    paddingTop: getSpacing(size, theme),\n  }),\n  spaceVertical: (size: SpacingSize | number, theme: Theme) => ({\n    paddingVertical: getSpacing(size, theme),\n  }),\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles: ViewStyle = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      const styleFn = propToFn[prop as BoxProp];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop as BoxProp], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop as keyof ViewStyle] = viewStyles[prop as BoxProp];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Divider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"divider\"\n    }}>{`Divider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box paddingVertical={40}>\\n  <Divider />\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Divider\n    }} mdxType=\"Playground\">\n  <Box paddingVertical={40} mdxType=\"Box\">\n    <Divider mdxType=\"Divider\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Divider} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps, ViewStyle } from 'react-native';\n\nimport { BorderColor, BorderColors, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getStyle, OverrideStyle, Style } from '../../utils/Overrides';\n\ntype DividerOrientation = 'horizontal' | 'vertical';\n\nexport interface DividerProps extends Omit<ViewProps, 'style'> {\n  /**\n   * Size of the divider.\n   * @default small\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Color of the divider.\n   * @default colors.border.default\n   */\n  color?: BorderColor | string;\n\n  /**\n   * Orientation of the divier\n   * @default \"horizontal\"\n   */\n  orientation?: DividerOrientation;\n\n  /**\n   * Style callback or ViewStyle object\n   */\n  style?: Style<DividerProps, ViewStyle>;\n}\n\nexport type DividerOverride = OverrideStyle<DividerProps, ViewStyle>;\n\nexport const Divider = (props: DividerProps) => {\n  const {\n    size = 'small',\n    color = 'default',\n    orientation = 'horizontal',\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const backgroundColor = getDividerColor(theme.colors.border)(\n    color || theme.colors.border.default,\n  );\n\n  const dividerSize = isControlSize(size) ? dividerScale[size] : size;\n\n  const styleMap = {\n    horizontal: {\n      backgroundColor,\n      height: dividerSize,\n      width: '100%',\n    },\n    vertical: {\n      backgroundColor,\n      height: '100%',\n      width: dividerSize,\n    },\n  };\n\n  return (\n    <View\n      style={[\n        orientation ? styleMap[orientation] : styleMap.horizontal,\n        getStyle(props, style),\n        getStyle(props, dlv(theme, 'overrides.Divider.style')),\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\nconst getDividerColor = (borderColors: BorderColors) => (\n  borderColor: BorderColor,\n) => {\n  // @ts-ignore\n  const presetColor = borderColors[borderColor] as string | undefined;\n\n  return presetColor || borderColor;\n};\n\nconst dividerScale: { [size in ControlSize]: number } = {\n  large: 3,\n  medium: 2,\n  small: 1,\n};\n","import { ControlSize, useTheme, TextSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n\nexport const useControlSizeUtils = () => {\n  const theme = useTheme();\n\n  const getControlHeight = (size: ControlSize | number): number => {\n    if (typeof size === 'number') return size;\n\n    return theme.controlHeights[size];\n  };\n\n  const getHeightControlSize = (size: ControlSize | number): ControlSize => {\n    if (typeof size === 'number') {\n      if (size >= theme.controlHeights.large) return 'large';\n      if (size >= theme.controlHeights.medium) return 'medium';\n      if (size < theme.controlHeights.medium) return 'small';\n    }\n\n    return size as ControlSize;\n  };\n\n  const getTextSize = (size: TextSize | number): TextSize => {\n    if (typeof size === 'number') {\n      if (size >= theme.controlHeights.large) return 'large';\n      if (size >= theme.controlHeights.medium) return 'medium';\n      if (size >= theme.controlHeights.small) return 'small';\n      if (size < theme.controlHeights.small) return 'xsmall';\n    }\n\n    return size as TextSize;\n  };\n\n  const getSmallerTextSize = (size: TextSize | number): TextSize => {\n    switch (getTextSize(size)) {\n      case 'large':\n        return 'medium';\n      case 'medium':\n        return 'small';\n      case 'small':\n        return 'xsmall';\n      default:\n        return 'xsmall';\n    }\n  };\n\n  const getSmallerHeightControlSize = (\n    size: ControlSize | number,\n  ): ControlSize => {\n    switch (getHeightControlSize(size)) {\n      case 'large':\n        return 'medium';\n      case 'medium':\n        return 'small';\n      default:\n        return 'small';\n    }\n  };\n\n  return {\n    getControlHeight,\n    getSmallerTextSize,\n    getSmallerHeightControlSize,\n  };\n};\n"],"sourceRoot":""}