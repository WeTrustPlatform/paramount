{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/Switch.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Switch/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","shapeMapping","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","_shape","_x","apply","this","arguments","toString","Box","props","children","propStyle","style","testID","viewStyles","_objectWithoutProperties2","useTheme","transformedStyles","pureStyles","prop","styleFn","push","createElement","View","_Box","Object","keys","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","Icon","_ref","name","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","getTextColor","text","_Icon","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","components","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","Props","Toggle","Switch","initial","_ref2","on","toggle","isSwitchedOn","onChange","isDisabled","onIcon","offIcon","duration","getStyles","circleStyle","containerStyle","backgroundColorOff","backgroundColorOn","circleColorOff","circleColorOn","of","isMDXComponent","getSwitchStyles","greyDefault","primaryDefault","content","alignItems","display","height","justifyContent","padding","width","greyLight","flexDirection","_native","_Animation","_mergeStyles2","_Switch","AnimatedView","animated","accessibilityProps","_mergeStyles","mergeStyles","_useSpring","useSpring","config","springDefaultConfig","circleColor","circlePosition","TouchableOpacity","accessible","accessibilityLabel","onPress","activeOpacity","alignSelf","flexWrap","transform","translateX","primary","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","textColors","textColor","getTextSize","textSizes","fontSize","getTextStyles","isInline","isItalic","align","weight","sizeStyle","textStyle","_objectSpread2","textAlign","fontStyle","textTransform","friction","tension","_deepmerge","_react","_defaultTheme","ThemeContext","createContext","defaultTheme","createTheme","ThemeProvider","_props$value","value","Provider","useContext","_palette","base","overlay","palette","neutral","lightest","greyDark","light","primaryLight","teal","primaryDark","dark","secondaryLight","orange","secondaryDefault","secondaryDark","dangerLight","red","dangerDefault","dangerDark","infoLight","blue","infoDefault","infoDark","successLight","green","successDefault","successDark","warningLight","warningDefault","warningDark","border","default","darkest","secondary","danger","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","shadowColor","shadowOffset","shadowOpacity","shadowRadius","fills","solid","yellow","purple","subtle","Platform","OS","heading","mono","undefined","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","large","medium","small","paragraphSizes","controlBorderRadius","controlHeights","controlPaddings","_Theme","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","merge","all"],"mappings":"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","file":"static/js/8.e3904144.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","export * from './Box';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Switch } from '.';\nimport { Box } from '../Box';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"switch\"\n    }}>{`Switch`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Box>\\n  <Toggle initial={true}>\\n    {({ on, toggle }) => (\\n      <Switch\\n        isSwitchedOn={on}\\n        onChange={toggle}\\n        isDisabled={false}\\n        onIcon={null}\\n        offIcon={null}\\n        duration={300}\\n        getStyles={(props, theme) => ({\\n          circleStyle: {},\\n          containerStyle: {},\\n          backgroundColorOff: \\'#F5F6F7\\',\\n          backgroundColorOn: \\'#67c6bb\\',\\n          circleColorOff: \\'white\\',\\n          circleColorOn: \\'white\\',\\n        })}\\n      />\\n    )}\\n  </Toggle>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      Switch,\n      Box\n    }} mdxType=\"Playground\">\n  <Box mdxType=\"Box\">\n    <Toggle initial={true} mdxType=\"Toggle\">\n      {({\n            on,\n            toggle\n          }) => <Switch isSwitchedOn={on} onChange={toggle} isDisabled={false} onIcon={null} offIcon={null} duration={300} getStyles={(props, theme) => ({\n            circleStyle: {},\n            containerStyle: {},\n            backgroundColorOff: '#F5F6F7',\n            backgroundColorOn: '#67c6bb',\n            circleColorOff: 'white',\n            circleColorOn: 'white'\n          })} mdxType=\"Switch\" />}\n    </Toggle>\n  </Box>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\n\nexport interface SwitchStylesRequired {\n  width: number;\n  padding: number;\n}\n\nexport interface SwitchStyles {\n  containerStyle: ViewStyle & SwitchStylesRequired;\n  circleStyle: ViewStyle & SwitchStylesRequired;\n  backgroundColorOff: string;\n  backgroundColorOn: string;\n  circleColorOff: string;\n  circleColorOn: string;\n}\n\nexport type GetSwitchStyles = (props: {}, theme: Theme) => SwitchStyles;\n\nexport const getSwitchStyles: GetSwitchStyles = (props, theme) => {\n  return {\n    backgroundColorOff: theme.colors.background.greyDefault,\n    backgroundColorOn: theme.colors.background.primaryDefault,\n    circleColorOff: theme.colors.background.content,\n    circleColorOn: theme.colors.background.content,\n\n    circleStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.content,\n      borderRadius: 24,\n      display: 'flex',\n      height: 38,\n      justifyContent: 'center',\n      padding: 0,\n      width: 38,\n    },\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: theme.colors.background.greyLight,\n      borderRadius: 24,\n      flexDirection: 'row',\n      height: 44,\n      padding: 3,\n      width: 72,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  GetSwitchStyles,\n  getSwitchStyles,\n  SwitchStyles,\n} from './Switch.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface SwitchProps extends AccessibilityProps {\n  isSwitchedOn?: boolean;\n  isDisabled?: boolean;\n  onChange?: (event: GestureResponderEvent) => void;\n  onIcon?: React.ReactNode;\n  offIcon?: React.ReactNode;\n  testID?: string;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetSwitchStyles, DeepPartial<SwitchStyles>>;\n}\n\nexport const Switch = (props: SwitchProps) => {\n  const {\n    onIcon,\n    offIcon,\n    onChange,\n    isSwitchedOn,\n    getStyles,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n  const {\n    circleStyle,\n    containerStyle,\n    backgroundColorOff,\n    backgroundColorOn,\n    circleColorOff,\n    circleColorOn,\n  } = mergeStyles(getSwitchStyles, getStyles, theme.components.getSwitchStyles)(\n    {},\n    theme,\n  );\n\n  const { backgroundColor, circleColor, circlePosition } = useSpring({\n    config: springDefaultConfig,\n\n    backgroundColor: isSwitchedOn ? backgroundColorOn : backgroundColorOff,\n    circleColor: isSwitchedOn ? circleColorOn : circleColorOff,\n    circlePosition: isSwitchedOn\n      ? containerStyle.width - (circleStyle.width + containerStyle.padding * 2)\n      : 0,\n  });\n\n  return (\n    <TouchableOpacity\n      accessible\n      accessibilityLabel=\"switch\"\n      onPress={onChange}\n      activeOpacity={1}\n      style={{\n        alignSelf: 'flex-start',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n      }}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      {/*\n      // @ts-ignore */}\n      <AnimatedView style={[containerStyle, { backgroundColor }]}>\n        <AnimatedView\n          // @ts-ignore\n          style={[\n            circleStyle,\n            { backgroundColor: circleColor },\n            { transform: [{ translateX: circlePosition }] },\n          ]}\n        >\n          {isSwitchedOn\n            ? onIcon || (\n                <Icon\n                  name=\"check\"\n                  size={20}\n                  color={theme.colors.text.primary}\n                />\n              )\n            : offIcon || (\n                <Icon name=\"x\" size={20} color={theme.colors.text.default} />\n              )}\n        </AnimatedView>\n      </AnimatedView>\n    </TouchableOpacity>\n  );\n};\n","export * from './Switch';\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 450,\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetColumnStyles } from '../components/Grid/Column.styles';\nimport { GetContainerStyles } from '../components/Grid/Container.styles';\nimport { GetRowStyles } from '../components/Grid/Row.styles';\nimport { GetIconTextInputStyles } from '../components/Inputs/IconTextInput.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading?: string;\n  mono?: string;\n  text?: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetIconTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? // Use system font on the Web\n      {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : // Use default font families by React Native by default. Setting it to undefined will use the default font\n      {\n        heading: undefined,\n        mono: undefined,\n        text: undefined,\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  components: {},\n};\n","export * from './defaultTheme';\nexport * from './Theme';\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}