{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListPicker/ListPicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListPicker/ListPicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["defaultProps","Avatar","props","source","_props$name","name","_props$size","size","_props$isSolid","isSolid","color","testID","_props$overrides","overrides","theme","useTheme","_React$useState","React","_React$useState2","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","_getOverrides","getOverrides","StyledRoot","dlv","Root","_getOverrides2","rootProps","_getOverrides3","StyledInitials","Initials","_getOverrides4","initialsProps","_getOverrides5","StyledImage","Image","_getOverrides6","ImageR","imageProps","react__WEBPACK_IMPORTED_MODULE_4__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","__source","fileName","_jsxFileName","lineNumber","onError","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","avatarScale","large","medium","small","children","_props$name2","_props$size2","_props$isSolid2","style","appearances","fills","keys","controlSize","isControlSize","controlHeights","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_6__","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","_props$name3","_props$size3","_props$isSolid3","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_Typography__WEBPACK_IMPORTED_MODULE_10__","override","fontSize","lineHeight","react_native_web_dist_exports_Image__WEBPACK_IMPORTED_MODULE_5__","propToFn","colors","background","elevation","elevations","shape","containerShapes","Box","viewStyles","transformedStyles","pureStyles","prop","styleFn","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","Checkbox","_props$shape","_props$value","value","_props$isDisabled","isDisabled","_props$onValueChange","onValueChange","StyledTouchable","Touchable","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","touchableProps","StyledCheck","Check","checkProps","react__WEBPACK_IMPORTED_MODULE_5__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__","onPress","_props$shape2","_props$isDisabled2","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_6__","disabled","_props$shape3","_props$value2","_props$isDisabled3","viewProps","sizeValue","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_7__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","content","borderColor","border","borderWidth","primaryDefault","greyDark","_Icon__WEBPACK_IMPORTED_MODULE_11__","text","white","State","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","ListItem","title","description","StyledTextWrapper","TextWrapper","StyledTitle","Title","titleProps","_getOverrides7","StyledDescription","Description","_getOverrides8","descriptionProps","_getOverrides9","StyledAction","Action","_getOverrides10","rightIconProps","_getOverrides11","_getOverrides12","AvatarR","avatarProps","_getOverrides13","_getOverrides14","flexDirection","greyLight","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_5__","flex","paddingLeft","layoutProps","MDXLayout","MDXContent","_ref","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","ListPicker","___WEBPACK_IMPORTED_MODULE_7__","_ref2","___WEBPACK_IMPORTED_MODULE_5__","___WEBPACK_IMPORTED_MODULE_6__","isMulti","newValue","itemIndex","options","label","of","isMDXComponent","Array","isArray","_props$options","StyledListPickerItem","ListPickerItem","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","listPickerItemProps","StyledList","List","listProps","handleOnPress","itemValue","isSelected","filter","val","concat","react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","keyExtractor","item","getItemLayout","_","index","offset","data","renderItem","some","selVal","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_4__","_props$index","_props$isSelected","_props$onPress","ListItemR","listItemRProps","component","_Box__WEBPACK_IMPORTED_MODULE_7__","right","alignSelf","_Checkbox__WEBPACK_IMPORTED_MODULE_8__","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/6.357dc8f1.js","sourcesContent":["import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor, FillColors } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { Text } from '../Typography';\n\ninterface AvatarBaseProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   */\n  color?: FillColor;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface AvatarOverrides {\n  Root: RootProps;\n  Initials: InitialsProps;\n  Image: ImageProps;\n}\n\nexport interface AvatarProps\n  extends WithOverrides<AvatarBaseProps, AvatarOverrides> {}\n\nconst defaultProps = {\n  name: '',\n  size: 'medium' as const,\n  isSolid: false,\n};\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name = defaultProps.name,\n    size = defaultProps.size,\n    isSolid = defaultProps.isSolid,\n    color,\n    testID,\n    overrides = {},\n  } = props;\n\n  const theme = useTheme();\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    dlv(theme, 'overrides.Avatar.Root'),\n    overrides.Root,\n  );\n  const [Initials, initialsProps] = getOverrides(\n    StyledInitials,\n    props,\n    dlv(theme, 'overrides.Avatar.Initial'),\n    overrides.Initials,\n  );\n  const [ImageR, imageProps] = getOverrides(\n    StyledImage,\n    props,\n    dlv(theme, 'overrides.Avatar.Image'),\n    overrides.Image,\n  );\n\n  return (\n    <Root\n      name={name}\n      size={size}\n      isSolid={isSolid}\n      color={color}\n      testID={testID}\n      {...rootProps}\n    >\n      {imageUnavailable && (\n        <Initials\n          name={name}\n          size={size}\n          isSolid={isSolid}\n          color={color}\n          {...initialsProps}\n        />\n      )}\n      {!imageUnavailable && !!source && (\n        <ImageR\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          {...imageProps}\n        />\n      )}\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  size?: ControlSize | number;\n  name?: string;\n  isSolid?: boolean;\n  color?: FillColor;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const {\n    testID,\n    children,\n    name = defaultProps.name,\n    size = defaultProps.size,\n    isSolid = defaultProps.isSolid,\n    color,\n    style,\n  } = props;\n  const theme = useTheme();\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor:\n            appearances[\n              color || (keys[hashCode(name) % keys.length] as keyof FillColors)\n            ].backgroundColor,\n          borderRadius: 9999,\n          display: 'flex',\n          height: controlSize,\n          justifyContent: 'center',\n          overflow: 'hidden',\n          position: 'relative',\n          width: controlSize,\n        },\n        style,\n      ]}\n      testID={testID}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst getInitials = (name?: string, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\ninterface InitialsProps extends ViewProps {\n  size?: ControlSize | number;\n  name?: string;\n  isSolid?: boolean;\n  color?: FillColor;\n}\n\nconst StyledInitials = (props: InitialsProps) => {\n  const {\n    name = defaultProps.name,\n    size = defaultProps.size,\n    isSolid = defaultProps.isSolid,\n    color,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  const initials = getInitials(name);\n\n  return (\n    <Text\n      {...textProps}\n      override={{\n        style: [\n          {\n            color:\n              appearances[\n                color ||\n                  (keys[hashCode(name) % keys.length] as keyof FillColors)\n              ].color,\n            fontSize: controlSize / 2,\n            lineHeight: controlSize,\n          },\n          style,\n        ],\n      }}\n    >\n      {initials}\n    </Text>\n  );\n};\n\nconst StyledImage = (props: ImageProps) => {\n  const { style, ...imageProps } = props;\n\n  return (\n    <Image\n      style={[\n        {\n          height: '100%',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...imageProps}\n    />\n  );\n};\n","import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { Icon } from '../Icon';\n\ninterface CheckboxBaseProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CheckboxOverrides {\n  Touchable: TouchableProps;\n  Check: CheckProps;\n}\n\nexport interface CheckboxProps\n  extends WithOverrides<CheckboxBaseProps, CheckboxOverrides> {}\n\nconst defaultProps = {\n  size: 'medium' as const,\n  shape: 'rounded' as const,\n  value: false,\n  isDisabled: false,\n};\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    size = defaultProps.size,\n    shape = defaultProps.shape,\n    value = defaultProps.value,\n    isDisabled = defaultProps.isDisabled,\n    onValueChange = () => {\n      return;\n    },\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Checkbox.Touchable'),\n    overrides.Touchable,\n  );\n  const [Check, checkProps] = getOverrides(\n    StyledCheck,\n    props,\n    dlv(theme, 'overrides.Checkbox.Check'),\n    overrides.Check,\n  );\n\n  return (\n    <Touchable\n      size={size}\n      shape={shape}\n      isDisabled={isDisabled}\n      testID={testID}\n      onPress={() => onValueChange(!value)}\n      {...touchableProps}\n    >\n      <Check\n        value={value}\n        size={size}\n        shape={shape}\n        isDisabled={isDisabled}\n        {...checkProps}\n      />\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n  shape?: ContainerShape;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    size = defaultProps.size,\n    shape = defaultProps.shape,\n    isDisabled = defaultProps.isDisabled,\n    children,\n    style,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={[theme.containerShapes[shape], style]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface CheckProps extends ViewProps {\n  size?: ControlSize | number;\n  value?: boolean;\n  isDisabled?: boolean;\n  shape?: ContainerShape;\n}\n\nconst StyledCheck = (props: CheckProps) => {\n  const {\n    size = defaultProps.size,\n    shape = defaultProps.shape,\n    value = defaultProps.value,\n    isDisabled = defaultProps.isDisabled,\n    style,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderWidth: 1,\n          height: sizeValue,\n          justifyContent: 'center',\n          width: sizeValue,\n          ...(value\n            ? {\n                backgroundColor: theme.colors.background.primaryDefault,\n                borderColor: 'transparent',\n              }\n            : {}),\n          ...(isDisabled\n            ? {\n                backgroundColor: theme.colors.background.greyDark,\n                borderColor: theme.colors.border.default,\n              }\n            : {}),\n          ...theme.containerShapes[shape],\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon name=\"check\" size=\"xsmall\" color={theme.colors.text.white} />\n      ) : null}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  ImageSourcePropType,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Text, TextProps } from '../Typography';\n\ninterface ListItemBaseProps {\n  /**\n   * Title of the list item\n   */\n  title?: string | false;\n\n  /**\n   * Description of the list item\n   */\n  description?: string | false;\n\n  /**\n   * Source of the avatar\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ListItemOverrides {\n  Root: RootProps;\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  TextWrapper: TextWrapperProps;\n  Description: DescriptionProps;\n  Action: ActionProps;\n  Avatar: AvatarProps;\n}\n\nexport interface ListItemProps\n  extends WithOverrides<ListItemBaseProps, ListItemOverrides> {}\n\nconst defaultProps = {\n  isDisabled: false,\n};\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    isDisabled = defaultProps.isDisabled,\n    title,\n    description,\n    onPress,\n    testID,\n    source,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.ListItem.Touchable'),\n    overrides.Touchable,\n  );\n  const [TextWrapper, textProps] = getOverrides(\n    StyledTextWrapper,\n    props,\n    dlv(theme, 'overrides.ListItem.TextWrapper'),\n    overrides.TextWrapper,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.ListItem.Title'),\n    overrides.Title,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    dlv(theme, 'overrides.ListItem.Description'),\n    overrides.Description,\n  );\n  const [Action, rightIconProps] = getOverrides(\n    StyledAction,\n    props,\n    dlv(theme, 'overrides.ListItem.Action'),\n    overrides.Action,\n  );\n  const [AvatarR, avatarProps] = getOverrides(\n    Avatar,\n    props,\n    dlv(theme, 'overrides.ListItem.Avatar'),\n    overrides.Avatar,\n  );\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    dlv(theme, 'overrides.ListItem.Root'),\n    overrides.Root,\n  );\n\n  return (\n    <Root isDisabled={isDisabled} {...rootProps}>\n      <Touchable\n        onPress={onPress}\n        testID={testID}\n        isDisabled={isDisabled}\n        {...touchableProps}\n      >\n        {source && <AvatarR size=\"small\" source={source} {...avatarProps} />}\n        <TextWrapper source={source} {...textProps}>\n          <Title title={title} {...titleProps} />\n          <Description description={description} {...descriptionProps} />\n        </TextWrapper>\n      </Touchable>\n      <Action isDisabled={isDisabled} {...rightIconProps} />\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n  isDisabled?: boolean;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, isDisabled, ...viewProps } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        {\n          flexDirection: 'row',\n          height: 72,\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  isDisabled?: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    style,\n    children,\n    isDisabled = defaultProps.isDisabled,\n    ...touchableProps\n  } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          flex: 1,\n          flexDirection: 'row',\n          alignItems: 'center',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: string | false;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text size=\"large\" style={[{}, style]} {...textProps}>\n      {title}\n    </Text>\n  );\n};\n\ninterface TextWrapperProps extends ViewProps {\n  children?: React.ReactNode;\n  source?: ImageSourcePropType | false;\n}\n\nconst StyledTextWrapper = (props: TextWrapperProps) => {\n  const { children, style, source, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        { flex: 1, justifyContent: 'center', paddingLeft: source ? 8 : 0 },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps {\n  description?: string | false;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { style, description, ...viewProps } = props;\n\n  if (!description) return null;\n\n  return (\n    <Text size=\"small\" color=\"muted\" style={[{}, style]} {...viewProps}>\n      {description}\n    </Text>\n  );\n};\n\ninterface ActionProps {\n  isDisabled: boolean;\n}\n\nconst StyledAction = (props: ActionProps) => {\n  return <></>;\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, ListPicker, State } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listpicker\"\n    }}>{`ListPicker`}</h1>\n    <p>{`ListPicker that supports single value or multiple values selected at the same item.`}</p>\n    <p><inlineCode parentName=\"p\">{`ListPicker`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{`. To use `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`, import `}<inlineCode parentName=\"p\">{`ListPickerWithRef`}</inlineCode>{` instead`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: [\\'c\\', \\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={300}>\\n      <ListPicker\\n        isMulti\\n        value={state.value}\\n        onValueChange={(newValue, itemIndex) => setState({ value: newValue })}\\n        options={[\\n          {\\n            label: \\'C\\',\\n            value: \\'c\\',\\n            description:\\n              \\'C is a general-purpose, procedural computer programming language.\\',\\n          },\\n          {\\n            label: \\'C#\\',\\n            value: \\'c#\\',\\n            description:\\n              \\'C# is a general-purpose, multi-paradigm programming language.\\',\\n          },\\n          { label: \\'C++\\', value: \\'c++\\' },\\n          { label: \\'CSS\\', value: \\'css\\' },\\n          { label: \\'Elixir\\', value: \\'elixir\\' },\\n          { label: \\'Elm\\', value: \\'elm\\' },\\n          { label: \\'Erlang\\', value: \\'erlang\\' },\\n          { label: \\'Go\\', value: \\'go\\' },\\n          { label: \\'Haskell\\', value: \\'haskell\\' },\\n          { label: \\'HTML\\', value: \\'html\\' },\\n          { label: \\'Java\\', value: \\'java\\' },\\n          { label: \\'JavaScript\\', value: \\'js\\' },\\n          { label: \\'Lua\\', value: \\'lua\\' },\\n          { label: \\'Python\\', value: \\'python\\' },\\n          { label: \\'R\\', value: \\'r\\' },\\n          { label: \\'Ruby\\', value: \\'ruby\\' },\\n          { label: \\'Rust\\', value: \\'rust\\' },\\n          { label: \\'Switft\\', value: \\'swift\\' },\\n          { label: \\'Typescript\\', value: \\'typescript\\' },\\n        ]}\\n      />\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      ListPicker,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ['c', 'js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={300} mdxType=\"Box\">\n        <ListPicker isMulti value={state.value} onValueChange={(newValue, itemIndex) => setState({\n            value: newValue\n          })} options={[{\n            label: 'C',\n            value: 'c',\n            description: 'C is a general-purpose, procedural computer programming language.'\n          }, {\n            label: 'C#',\n            value: 'c#',\n            description: 'C# is a general-purpose, multi-paradigm programming language.'\n          }, {\n            label: 'C++',\n            value: 'c++'\n          }, {\n            label: 'CSS',\n            value: 'css'\n          }, {\n            label: 'Elixir',\n            value: 'elixir'\n          }, {\n            label: 'Elm',\n            value: 'elm'\n          }, {\n            label: 'Erlang',\n            value: 'erlang'\n          }, {\n            label: 'Go',\n            value: 'go'\n          }, {\n            label: 'Haskell',\n            value: 'haskell'\n          }, {\n            label: 'HTML',\n            value: 'html'\n          }, {\n            label: 'Java',\n            value: 'java'\n          }, {\n            label: 'JavaScript',\n            value: 'js'\n          }, {\n            label: 'Lua',\n            value: 'lua'\n          }, {\n            label: 'Python',\n            value: 'python'\n          }, {\n            label: 'R',\n            value: 'r'\n          }, {\n            label: 'Ruby',\n            value: 'ruby'\n          }, {\n            label: 'Rust',\n            value: 'rust'\n          }, {\n            label: 'Switft',\n            value: 'swift'\n          }, {\n            label: 'Typescript',\n            value: 'typescript'\n          }]} mdxType=\"ListPicker\" />\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"listpicker-props\"\n    }}>{`ListPicker Props`}</h2>\n    <Props of={ListPicker} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import dlv from 'dlv';\nimport * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, Override, WithOverrides } from '../../utils/overrides';\nimport { Box } from '../Box';\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\n\ntype Value<TIsMulti extends boolean, TValue extends any> = TIsMulti extends true\n  ? TValue[]\n  : TValue;\n\nexport interface ListPickerOption<TValue extends any> {\n  value: TValue;\n  label: string;\n  description?: string;\n}\n\ninterface ListPickerBaseProps<TIsMulti extends boolean, TValue extends any> {\n  /**\n   * Set whether it should allow multiple selections. You should specify the value to get proper type-checking.\n   * @default false\n   */\n  isMulti: TIsMulti;\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value: Value<TIsMulti, TValue>;\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange: (value: Value<TIsMulti, TValue>, index: number) => void;\n\n  /**\n   * List of options\n   */\n  options?: Array<ListPickerOption<TValue>>;\n}\n\nconst isMulti = <TValue extends any>(\n  value: TValue | TValue[],\n): value is TValue[] => Array.isArray(value);\n\nexport interface ListPickerOverrides<TValue extends any> {\n  List: ListProps<TValue>;\n  ListPickerItem: ListPickerItemProps<TValue>;\n}\n\nexport interface ListPickerProps<TIsMulti extends boolean, TValue extends any>\n  extends WithOverrides<\n    ListPickerBaseProps<TIsMulti, TValue>,\n    ListPickerOverrides<TValue>\n  > {}\n\nconst defaultProps = {\n  options: [],\n};\n\nexport const ListPicker = <TIsMulti extends boolean, TValue extends any>(\n  props: ListPickerProps<TIsMulti, TValue>,\n) => {\n  const {\n    value,\n    onValueChange,\n    options = defaultProps.options,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [ListPickerItem, listPickerItemProps] = getOverrides(\n    StyledListPickerItem,\n    props,\n    dlv(theme, 'overrides.ListPicker.ListPickerItem'),\n    overrides.ListPickerItem,\n  );\n  const [List, listProps] = getOverrides(\n    StyledList,\n    props,\n    dlv(theme, 'overrides.ListPicker.List'),\n    overrides.List,\n  );\n\n  const handleOnPress = React.useCallback(\n    (itemValue: TValue, itemIndex: number, isSelected: boolean) => {\n      if (isMulti(value)) {\n        if (isSelected) {\n          onValueChange(\n            // @ts-ignore: TODO: make this work\n            value.filter(val => val !== itemValue) as Value<TIsMulti, TValue>,\n            itemIndex,\n          );\n        } else {\n          onValueChange(\n            value.concat(itemValue) as Value<TIsMulti, TValue>,\n            itemIndex,\n          );\n        }\n      } else {\n        onValueChange(itemValue as Value<TIsMulti, TValue>, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  return (\n    <List\n      keyExtractor={item => `${item.value}`}\n      getItemLayout={(_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      })}\n      data={options}\n      renderItem={({ item, index }) => {\n        const isSelected = isMulti(value)\n          ? //\n            // @ts-ignore: TODO: make this work\n            value.some(selVal => selVal === item.value)\n          : value === item.value;\n\n        return (\n          <ListPickerItem\n            value={item.value}\n            label={item.label}\n            description={item.description}\n            index={index}\n            isSelected={isSelected}\n            onPress={handleOnPress}\n            {...listPickerItemProps}\n          />\n        );\n      }}\n      {...listProps}\n    />\n  );\n};\n\ninterface ListProps<TValue extends any>\n  extends FlatListProps<ListPickerOption<TValue>> {}\n\nconst StyledList = <TValue extends any>(props: ListProps<TValue>) => {\n  return <FlatList {...props} />;\n};\n\ninterface ListPickerItemProps<TValue extends any> {\n  index?: number;\n  isSelected?: boolean;\n  onPress?: (value: TValue, index: number, isSelected: boolean) => void;\n  value: TValue;\n  label: string;\n  description?: string;\n  override?: Override<ListPickerItemProps<TValue>, ListItemProps>;\n}\n\nconst StyledListPickerItem = <TValue extends any = any>(\n  props: ListPickerItemProps<TValue>,\n) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    description,\n    override,\n  } = props;\n\n  const [ListItemR, listItemRProps] = getOverrides(ListItem, props, override);\n\n  return (\n    <ListItemR\n      onPress={() => onPress(value, index, isSelected)}\n      title={label}\n      description={isSelected && description}\n      overrides={{\n        Action: {\n          component: () => (\n            <Box\n              justifyContent=\"center\"\n              position=\"absolute\"\n              right={0}\n              alignItems=\"center\"\n              alignSelf=\"center\"\n            >\n              <Checkbox\n                onValueChange={() => onPress(value, index, isSelected)}\n                shape=\"circle\"\n                value={isSelected}\n              />\n            </Box>\n          ),\n        },\n      }}\n      {...listItemRProps}\n    />\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}