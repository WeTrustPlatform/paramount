{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Checkbox/Checkbox.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Helpers/State.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/ListPicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/usePicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx"],"names":["Avatar","props","source","name","_props$size","size","_props$isSolid","isSolid","_props$color","color","testID","_props$overrides","overrides","theme","useTheme","_React$useState","React","_React$useState2","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","hasImageFailedLoading","setHasImageFailedLoading","isImageUnavailable","_getOverrides","getOverrides","StyledRoot","dlv","Root","_getOverrides2","rootProps","_getOverrides3","StyledInitials","Initials","_getOverrides4","initialsProps","_getOverrides5","StyledImage","onError","Image","_getOverrides6","ImageR","imageProps","react__WEBPACK_IMPORTED_MODULE_4__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","__source","fileName","_jsxFileName","lineNumber","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","avatarScale","large","medium","small","children","style","appearances","fills","keys","controlSize","isControlSize","controlHeights","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_6__","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_Typography__WEBPACK_IMPORTED_MODULE_10__","fontSize","lineHeight","getStyle","react_native_web_dist_exports_Image__WEBPACK_IMPORTED_MODULE_5__","Checkbox","_props$shape","shape","_props$value","value","label","_props$labelPosition","labelPosition","_props$isDisabled","isDisabled","_props$onValueChange","onValueChange","StyledTouchable","onPress","Touchable","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","touchableProps","StyledCheck","Check","checkProps","react__WEBPACK_IMPORTED_MODULE_5__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__","_Typography__WEBPACK_IMPORTED_MODULE_12__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_6__","containerShapes","disabled","viewProps","sizeValue","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_7__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","colors","background","content","borderColor","border","borderWidth","primaryDefault","greyDark","_Icon__WEBPACK_IMPORTED_MODULE_11__","text","white","State","_props$initial","initial","useState","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","setState","useCallback","newState","ListItem","title","description","StyledTextWrapper","hasAvatar","TextWrapper","textWrapperProps","_getOverrides7","StyledTitle","Title","_getOverrides8","titleProps","_getOverrides9","StyledDescription","Description","_getOverrides10","descriptionProps","_getOverrides11","StyledAction","Action","_getOverrides12","rightIconProps","_getOverrides13","StyledAvatar","_getOverrides14","AvatarR","avatarProps","flexDirection","minHeight","greyLight","react_native_web_dist_exports_TouchableOpacity__WEBPACK_IMPORTED_MODULE_5__","flex","_props$hasAvatar","paddingLeft","_Avatar__WEBPACK_IMPORTED_MODULE_9__","ListPicker","_props$data","data","keyExtractor","isMulti","_usePicker","usePicker","items","handleSelect","StyledList","getItemLayout","_","index","offset","renderItem","_ref","item","StyledListPickerItem","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","isSelected","ListPickerItem","ListPickerItemR","listPickerItemProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","List","listProps","react_native_web_dist_exports_FlatList__WEBPACK_IMPORTED_MODULE_5__","_props$index","_props$isSelected","_props$onPress","override","paddingRight","component","_Box__WEBPACK_IMPORTED_MODULE_8__","_Checkbox__WEBPACK_IMPORTED_MODULE_9__","ListItemR","listItemRProps","Array","isArray","itemValue","itemIndex","filter","val","concat","some","selVal","key","Label","_props$position","StyledWrapper","Wrapper","wrapperProps","StyledLabelText","LabelText","labelTextProps","wrapperStyle","paddingBottom","textStyle","_Text__WEBPACK_IMPORTED_MODULE_9__","accessibilityRole","Platform","OS"],"mappings":"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","file":"static/js/3.5fef0ce0.js","sourcesContent":["import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor, FillColors } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { Text, TextProps } from '../Typography';\n\ninterface AvatarBaseProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"auto\"\n   */\n  color?: 'auto' | FillColor;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface AvatarOverrides {\n  Root: RootProps;\n  Initials: InitialsProps;\n  Image: ImageProps;\n}\n\nexport interface AvatarProps\n  extends WithOverrides<AvatarBaseProps, AvatarOverrides> {}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    size = 'medium',\n    isSolid = false,\n    color = 'auto',\n    testID,\n    overrides = {},\n  } = props;\n\n  const theme = useTheme();\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const isImageUnavailable = !source || hasImageFailedLoading;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { name, size, isSolid, color, testID },\n    dlv(theme, 'overrides.Avatar.Root'),\n    overrides.Root,\n  );\n  const [Initials, initialsProps] = getOverrides(\n    StyledInitials,\n    props,\n    { name, size, isSolid, color },\n    dlv(theme, 'overrides.Avatar.Initial'),\n    overrides.Initials,\n  );\n\n  if (!isImageUnavailable && !!source) {\n    const [ImageR, imageProps] = getOverrides(\n      StyledImage,\n      props,\n      {\n        onError: () => setHasImageFailedLoading(true),\n        source,\n      },\n      dlv(theme, 'overrides.Avatar.Image'),\n      overrides.Image,\n    );\n\n    return (\n      <Root {...rootProps}>\n        <ImageR {...imageProps} />\n      </Root>\n    );\n  }\n\n  return (\n    <Root {...rootProps}>\n      <Initials {...initialsProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { testID, children, name, size, isSolid, color, style } = props;\n  const theme = useTheme();\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].backgroundColor,\n          borderRadius: 9999,\n          display: 'flex',\n          height: controlSize,\n          justifyContent: 'center',\n          overflow: 'hidden',\n          position: 'relative',\n          width: controlSize,\n        },\n        style,\n      ]}\n      testID={testID}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst getInitials = (name?: string, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\ninterface InitialsProps extends TextProps {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledInitials = (props: InitialsProps) => {\n  const { name, size, isSolid, color, style, ...textProps } = props;\n  const theme = useTheme();\n\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  const initials = getInitials(name);\n\n  return (\n    <Text\n      {...textProps}\n      style={[\n        {\n          color:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].color,\n          fontSize: controlSize / 2,\n          lineHeight: controlSize,\n        },\n        getStyle(props, style),\n      ]}\n    >\n      {initials}\n    </Text>\n  );\n};\n\nconst StyledImage = (props: ImageProps) => {\n  const { style, ...imageProps } = props;\n\n  return (\n    <Image\n      style={[\n        {\n          height: '100%',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...imageProps}\n    />\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Icon } from '../Icon';\nimport { Label, LabelPosition, LabelProps } from '../Typography';\n\ninterface CheckboxBaseProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"right\"\n   */\n  labelPosition?: LabelPosition;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CheckboxOverrides {\n  Touchable: TouchableProps;\n  Label: LabelProps;\n  Check: CheckProps;\n}\n\nexport interface CheckboxProps\n  extends WithOverrides<CheckboxBaseProps, CheckboxOverrides> {}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    size = 'medium',\n    shape = 'rounded',\n    value = false,\n    label,\n    labelPosition = 'right',\n    isDisabled = false,\n    onValueChange = () => {\n      return;\n    },\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      size,\n      shape,\n      isDisabled,\n      testID,\n      onPress: () => onValueChange(!value),\n    },\n    dlv(theme, 'overrides.Checkbox.Touchable'),\n    overrides.Touchable,\n  );\n  const [Check, checkProps] = getOverrides(\n    StyledCheck,\n    props,\n    { value, size, shape, isDisabled },\n    dlv(theme, 'overrides.Checkbox.Check'),\n    overrides.Check,\n  );\n\n  return (\n    <Touchable {...touchableProps}>\n      <Label label={label} position={labelPosition}>\n        <Check\n          value={value}\n          size={size}\n          shape={shape}\n          isDisabled={isDisabled}\n          {...checkProps}\n        />\n      </Label>\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { size, shape, isDisabled, children, style, ...touchableProps } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={[theme.containerShapes[shape], style]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface CheckProps extends ViewProps {\n  size: ControlSize | number;\n  value: boolean;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledCheck = (props: CheckProps) => {\n  const { size, shape, value, isDisabled, style, ...viewProps } = props;\n  const theme = useTheme();\n\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderWidth: 1,\n          height: sizeValue,\n          justifyContent: 'center',\n          width: sizeValue,\n          ...(value\n            ? {\n                backgroundColor: theme.colors.background.primaryDefault,\n                borderColor: 'transparent',\n              }\n            : {}),\n          ...(isDisabled\n            ? {\n                backgroundColor: theme.colors.background.greyDark,\n                borderColor: theme.colors.border.default,\n              }\n            : {}),\n          ...theme.containerShapes[shape],\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon name=\"check\" size=\"xsmall\" color={theme.colors.text.white} />\n      ) : null}\n    </View>\n  );\n};\n","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  ImageSourcePropType,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Text, TextProps } from '../Typography';\n\ninterface ListItemBaseProps {\n  /**\n   * Title of the list item\n   */\n  title?: OptionalString;\n\n  /**\n   * Description of the list item\n   */\n  description?: OptionalString;\n\n  /**\n   * Source of the avatar\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ListItemOverrides {\n  Root: RootProps;\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  TextWrapper: TextWrapperProps;\n  Description: DescriptionProps;\n  Action: ActionProps;\n  Avatar: AvatarProps;\n}\n\nexport interface ListItemProps\n  extends WithOverrides<ListItemBaseProps, ListItemOverrides> {}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    testID,\n    source,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { isDisabled },\n    dlv(theme, 'overrides.ListItem.Root'),\n    overrides.Root,\n  );\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    { onPress, testID, isDisabled },\n    dlv(theme, 'overrides.ListItem.Touchable'),\n    overrides.Touchable,\n  );\n  const [TextWrapper, textWrapperProps] = getOverrides(\n    StyledTextWrapper,\n    props,\n    {\n      hasAvatar:\n        !!source ||\n        !!overrides.Avatar ||\n        !!dlv(theme, 'overrides.ListItem.Avatar'),\n    },\n    dlv(theme, 'overrides.ListItem.TextWrapper'),\n    overrides.TextWrapper,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    { title },\n    dlv(theme, 'overrides.ListItem.Title'),\n    overrides.Title,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    { description },\n    dlv(theme, 'overrides.ListItem.Description'),\n    overrides.Description,\n  );\n  const [Action, rightIconProps] = getOverrides(\n    StyledAction,\n    props,\n    { isDisabled },\n    dlv(theme, 'overrides.ListItem.Action'),\n    overrides.Action,\n  );\n  const [AvatarR, avatarProps] = getOverrides(\n    StyledAvatar,\n    props,\n    { source, size: 'small' },\n    dlv(theme, 'overrides.ListItem.Avatar'),\n    overrides.Avatar,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Touchable {...touchableProps}>\n        <AvatarR {...avatarProps} />\n        <TextWrapper {...textWrapperProps}>\n          <Title {...titleProps} />\n          <Description {...descriptionProps} />\n        </TextWrapper>\n      </Touchable>\n      <Action {...rightIconProps} />\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n  isDisabled?: boolean;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, isDisabled, ...viewProps } = props;\n  const theme = useTheme();\n\n  return (\n    <View\n      style={[\n        {\n          flexDirection: 'row',\n          minHeight: 72,\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  isDisabled: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { style, children, isDisabled, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          flex: 1,\n          flexDirection: 'row',\n          alignItems: 'center',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: OptionalString;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text size=\"large\" style={[{}, getStyle(props, style)]} {...textProps}>\n      {title}\n    </Text>\n  );\n};\n\ninterface TextWrapperProps extends ViewProps {\n  children?: React.ReactNode;\n  hasAvatar: boolean;\n}\n\nconst StyledTextWrapper = (props: TextWrapperProps) => {\n  const { children, style, hasAvatar = false, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        { flex: 1, justifyContent: 'center', paddingLeft: hasAvatar ? 8 : 0 },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps {\n  description?: OptionalString;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { style, description, ...viewProps } = props;\n\n  if (!description) return null;\n\n  return (\n    <Text\n      size=\"small\"\n      color=\"muted\"\n      style={[{}, getStyle(props, style)]}\n      {...viewProps}\n    >\n      {description}\n    </Text>\n  );\n};\n\ninterface ActionProps {\n  isDisabled: boolean;\n}\n\nconst StyledAction = (props: ActionProps) => {\n  return <></>;\n};\n\nconst StyledAvatar = (props: AvatarProps) => {\n  const { source, name } = props;\n\n  if (!source && !name) return null;\n\n  return <Avatar {...props} />;\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport { FlatList, FlatListProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, Override, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Box } from '../Box';\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemProps } from '../ListItem';\nimport {\n  PickerItem,\n  PickerItemProps,\n  usePicker,\n  UsePickerProps,\n} from './usePicker';\n\nexport interface ListPickerItem<TValue extends any> extends PickerItem<TValue> {\n  label: string;\n  description?: OptionalString;\n}\n\nexport interface ListPickerOverrides<TValue extends any> {\n  List: ListProps<TValue>;\n  ListPickerItem: ListPickerItemProps<TValue>;\n}\n\nexport interface ListPickerProps<\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>\n  extends WithOverrides<\n    UsePickerProps<TValue, TPickerItem & ListPickerItem<TValue>, TIsMulti>,\n    ListPickerOverrides<TValue>\n  > {}\n\nexport const ListPicker = <\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>(\n  props: ListPickerProps<TValue, TPickerItem, TIsMulti>,\n) => {\n  const {\n    data = [],\n    value,\n    onValueChange = () => {\n      return;\n    },\n    keyExtractor,\n    isMulti,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const { items, handleSelect } = usePicker({\n    value,\n    onValueChange,\n    data,\n    isMulti,\n    keyExtractor,\n  });\n\n  const [List, listProps] = getOverrides(\n    StyledList,\n    props,\n    {\n      getItemLayout: (_, index) => ({\n        index,\n        length: theme.controlHeights.medium,\n        offset: theme.controlHeights.medium * index,\n      }),\n      data: items,\n      renderItem: ({ item }) => {\n        const [ListPickerItemR, listPickerItemProps] = getOverrides(\n          StyledListPickerItem,\n          props,\n          {\n            ...item,\n            onPress: () =>\n              handleSelect(item.value, item.index, item.isSelected),\n          },\n          dlv(theme, 'overrides.ListPicker.ListPickerItem'),\n          overrides.ListPickerItem,\n        );\n\n        return <ListPickerItemR {...listPickerItemProps} />;\n      },\n    },\n    dlv(theme, 'overrides.ListPicker.List'),\n    overrides.List,\n  );\n\n  return <List {...listProps} />;\n};\n\ninterface ListProps<TValue extends any>\n  extends FlatListProps<ListPickerItem<TValue> & PickerItemProps> {}\n\nconst StyledList = <TValue extends any>(props: ListProps<TValue>) => {\n  return <FlatList {...props} />;\n};\n\ninterface ListPickerItemProps<TValue extends any> {\n  index: number;\n  isSelected: boolean;\n  onPress: (value: TValue, index: number, isSelected: boolean) => void;\n  value: TValue;\n  label: string;\n  description?: OptionalString;\n  override?: Override<ListPickerItemProps<TValue>, ListItemProps>;\n}\n\nconst StyledListPickerItem = <TValue extends any = any>(\n  props: ListPickerItemProps<TValue>,\n) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    description,\n    override,\n  } = props;\n\n  const [ListItemR, listItemRProps] = getOverrides(\n    ListItem,\n    props,\n    {\n      onPress: () => onPress(value, index, isSelected),\n      title: label,\n      description: isSelected && description,\n      overrides: {\n        Touchable: {\n          style: {\n            paddingRight: 8,\n          },\n        },\n        Action: {\n          component: () => (\n            <Box justifyContent=\"center\" alignItems=\"center\">\n              <Checkbox\n                onValueChange={() => onPress(value, index, isSelected)}\n                shape=\"circle\"\n                value={isSelected}\n              />\n            </Box>\n          ),\n        },\n      },\n    },\n    override,\n  );\n\n  return <ListItemR {...listItemRProps} />;\n};\n","import * as React from 'react';\n\ntype Value<\n  TValue extends any,\n  TIsMulti extends boolean = false\n> = TIsMulti extends true ? TValue[] : TValue;\n\nexport interface PickerItem<TValue extends any> {\n  value: TValue;\n  key?: string;\n}\n\nexport interface PickerItemProps {\n  key: string;\n  isSelected: boolean;\n  index: number;\n}\n\nexport interface UsePickerProps<\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n> {\n  /**\n   * Set whether it should allow multiple selections. You should specify the value to get proper type-checking.\n   * @default false\n   */\n  isMulti?: TIsMulti;\n\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value?: Value<TValue, TIsMulti> | null;\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange?: (value: Value<TValue, TIsMulti>, index: number) => void;\n\n  /**\n   * List of data\n   */\n  data?: Array<TPickerItem>;\n\n  /**\n   * Used to extract a unique key for a given item at the specified index.\n   * Key is used for caching and as the react key to track item re-ordering.\n   * The default extractor checks item.key, then falls back to using the index, like React does.\n   */\n  keyExtractor?: (item: TPickerItem) => string;\n}\n\nconst isMulti = <TValue extends any>(\n  value: TValue | TValue[],\n): value is TValue[] => Array.isArray(value);\n\nexport const usePicker = <\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>(\n  props: UsePickerProps<TValue, TPickerItem, TIsMulti>,\n) => {\n  const {\n    value,\n    onValueChange = () => {\n      return;\n    },\n    data = [],\n    keyExtractor,\n  } = props;\n\n  const handleSelect = React.useCallback(\n    (itemValue: TValue, itemIndex: number, isSelected: boolean) => {\n      if (isMulti(value)) {\n        if (isSelected) {\n          onValueChange(\n            // @ts-ignore: TODO: make this work\n            value.filter(val => val !== itemValue) as Value<TValue, TIsMulti>,\n            itemIndex,\n          );\n        } else {\n          onValueChange(\n            value.concat(itemValue) as Value<TValue, TIsMulti>,\n            itemIndex,\n          );\n        }\n      } else {\n        onValueChange(itemValue as Value<TValue, TIsMulti>, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  const items = data.map((item, index) => {\n    const isSelected = (isMulti(value)\n      ? //\n        // @ts-ignore: TODO: make this work\n        value.some(selVal => selVal === item.value)\n      : value === item.value) as boolean;\n\n    return {\n      ...item,\n      key: keyExtractor ? keyExtractor(item) : item.key || `${index}`,\n      index,\n      isSelected,\n    };\n  }) as (TPickerItem & PickerItemProps)[];\n\n  return {\n    handleSelect,\n    items,\n  };\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport { Platform, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Text, TextProps } from './Text';\n\nexport type LabelPosition = 'top' | 'left' | 'right';\n\ninterface LabelBaseProps {\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  position?: LabelPosition;\n\n  /** Content to wrap with. */\n  children?: React.ReactNode;\n}\n\nexport interface LabelOverrides {\n  Root: RootProps;\n  Wrapper: WrapperProps;\n  LabelText: LabelTextProps;\n}\n\nexport interface LabelProps\n  extends WithOverrides<LabelBaseProps, LabelOverrides> {}\n\nexport const Label = (props: LabelProps) => {\n  const { children, position = 'top', overrides = {}, label } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.Label.Root'),\n    overrides.Root,\n  );\n  const [Wrapper, wrapperProps] = getOverrides(\n    StyledWrapper,\n    props,\n    { position },\n    dlv(theme, 'overrides.Label.Wrapper'),\n    overrides.Wrapper,\n  );\n  const [LabelText, labelTextProps] = getOverrides(\n    StyledLabelText,\n    props,\n    { position, label },\n    dlv(theme, 'overrides.Label.LabelText'),\n    overrides.LabelText,\n  );\n\n  return (\n    <Root {...rootProps}>\n      {position === 'top' && <LabelText {...labelTextProps} />}\n      <Wrapper {...wrapperProps}>\n        {position === 'left' && <LabelText {...labelTextProps} />}\n        {children}\n        {position === 'right' && <LabelText {...labelTextProps} />}\n      </Wrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface WrapperProps extends ViewProps, PropsWithChildren {\n  position: LabelPosition;\n}\n\nconst StyledWrapper = (props: WrapperProps) => {\n  const { children, style, position, ...viewProps } = props;\n\n  let wrapperStyle: ViewStyle = {};\n\n  switch (position) {\n    case 'left':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingRight: 8,\n      };\n      break;\n    case 'right':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n      };\n      break;\n    case 'top':\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n    default:\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <View style={[wrapperStyle, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface LabelTextProps extends TextProps, PropsWithChildren {\n  label?: OptionalString;\n  position: LabelPosition;\n}\n\nconst StyledLabelText = (props: LabelTextProps) => {\n  const { label, position, style, ...textProps } = props;\n\n  if (!label) return null;\n\n  let textStyle: TextStyle = {};\n\n  switch (position) {\n    case 'left':\n      textStyle = { paddingRight: 8 };\n      break;\n    case 'right':\n      textStyle = { paddingLeft: 8 };\n      break;\n    case 'top':\n      textStyle = { paddingBottom: 4 };\n      break;\n    default:\n      textStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <Text\n      style={[textStyle, getStyle(props, style)]}\n      // @ts-ignore: Compat with web\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      {...textProps}\n    >\n      {label}\n    </Text>\n  );\n};\n"],"sourceRoot":""}