(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"./src/components/Drawer/Drawer.mdx":function(e,o,n){var t=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(o,"__esModule",{value:!0}),o.default=m;var r=t(n("./node_modules/@babel/runtime/helpers/extends.js")),i=t(n("./node_modules/@babel/runtime/helpers/objectWithoutProperties.js")),l=t(n("./node_modules/react/index.js")),d=n("./node_modules/@mdx-js/react/dist/index.es.js"),s=n("./node_modules/docz/dist/index.esm.js"),g=n("./src/components/index.ts"),a={},p="wrapper";function m(e){var o=e.components,n=(0,i.default)(e,["components"]);return(0,d.mdx)(p,(0,r.default)({},a,n,{components:o,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"drawer"},"Drawer"),(0,d.mdx)("h3",{id:"usage"},"Usage"),(0,d.mdx)(s.Playground,{__position:0,__code:"<Toggle>\n  {({ on, toggle }) => (\n    <>\n      <Button onPress={toggle} isInline title=\"Open drawer menu\" />\n      <Drawer\n        space={undefined} // px or %, null fits the content\n        offset={0}\n        position=\"bottom\"\n        isVisible={on}\n        onClose={toggle}\n        getStyles={(props, theme) => ({\n          modalContainerStyle: {},\n          containerStyle: {},\n        })}\n      >\n        <Box padding={24}>\n          <Box elevation={1} backgroundColor=\"white\" borderRadius={4}>\n            {[\n              {\n                onPress: toggle,\n                title: 'Menu Option 1',\n                color: 'danger',\n              },\n              {\n                onPress: toggle,\n                title: 'Menu Option 2',\n                color: 'primary',\n              },\n              {\n                onPress: toggle,\n                title: 'Menu Option 3',\n                color: 'secondary',\n              },\n              {\n                onPress: toggle,\n                title: 'Menu Option 4',\n              },\n            ].map(option => (\n              <Button key={option.title} appearance=\"minimal\" {...option} />\n            ))}\n          </Box>\n          <Box paddingTop={24}>\n            <Button onPress={toggle} title=\"Close\" />\n          </Box>\n        </Box>\n      </Drawer>\n    </>\n  )}\n</Toggle>",__scope:{props:this?this.props:n,Playground:s.Playground,Props:s.Props,Box:g.Box,Button:g.Button,Drawer:g.Drawer,Text:g.Text,Toggle:g.Toggle},mdxType:"Playground"},(0,d.mdx)(g.Toggle,{mdxType:"Toggle"},function(e){var o=e.on,n=e.toggle;return(0,d.mdx)(l.default.Fragment,null,(0,d.mdx)(g.Button,{onPress:n,isInline:!0,title:"Open drawer menu",mdxType:"Button"}),(0,d.mdx)(g.Drawer,{space:void 0,offset:0,position:"bottom",isVisible:o,onClose:n,getStyles:function(e,o){return{modalContainerStyle:{},containerStyle:{}}},mdxType:"Drawer"},(0,d.mdx)(g.Box,{padding:24,mdxType:"Box"},(0,d.mdx)(g.Box,{elevation:1,backgroundColor:"white",borderRadius:4,mdxType:"Box"},[{onPress:n,title:"Menu Option 1",color:"danger"},{onPress:n,title:"Menu Option 2",color:"primary"},{onPress:n,title:"Menu Option 3",color:"secondary"},{onPress:n,title:"Menu Option 4"}].map(function(e){return(0,d.mdx)(g.Button,(0,r.default)({key:e.title,appearance:"minimal"},e,{mdxType:"Button"}))})),(0,d.mdx)(g.Box,{paddingTop:24,mdxType:"Box"},(0,d.mdx)(g.Button,{onPress:n,title:"Close",mdxType:"Button"})))))})),(0,d.mdx)("h3",{id:"variants"},"Variants"),(0,d.mdx)(s.Playground,{__position:1,__code:'<Toggle>\n  {({ on, toggle }) => (\n    <>\n      <Button onPress={toggle} title="Open bottom drawer" />\n      <Drawer space="30%" isVisible={on} onClose={toggle}>\n        <Box width="100%" height="100%" backgroundColor="white" />\n      </Drawer>\n    </>\n  )}\n</Toggle>\n<Toggle>\n  {({ on, toggle }) => (\n    <>\n      <Button onPress={toggle} title="Open top drawer" />\n      <Drawer space="30%" position="top" isVisible={on} onClose={toggle}>\n        <Box width="100%" height="100%" backgroundColor="white" />\n      </Drawer>\n    </>\n  )}\n</Toggle>\n<Toggle>\n  {({ on, toggle }) => (\n    <>\n      <Button onPress={toggle} title="Open left drawer" />\n      <Drawer space="30%" position="left" isVisible={on} onClose={toggle}>\n        <Box width="100%" height="100%" backgroundColor="white" />\n      </Drawer>\n    </>\n  )}\n</Toggle>\n<Toggle>\n  {({ on, toggle }) => (\n    <>\n      <Button onPress={toggle} title="Open right drawer" />\n      <Drawer space="30%" position="right" isVisible={on} onClose={toggle}>\n        <Box width="100%" height="100%" backgroundColor="white" />\n      </Drawer>\n    </>\n  )}\n</Toggle>',__scope:{props:this?this.props:n,Playground:s.Playground,Props:s.Props,Box:g.Box,Button:g.Button,Drawer:g.Drawer,Text:g.Text,Toggle:g.Toggle},mdxType:"Playground"},(0,d.mdx)(g.Toggle,{mdxType:"Toggle"},function(e){var o=e.on,n=e.toggle;return(0,d.mdx)(l.default.Fragment,null,(0,d.mdx)(g.Button,{onPress:n,title:"Open bottom drawer",mdxType:"Button"}),(0,d.mdx)(g.Drawer,{space:"30%",isVisible:o,onClose:n,mdxType:"Drawer"},(0,d.mdx)(g.Box,{width:"100%",height:"100%",backgroundColor:"white",mdxType:"Box"})))}),(0,d.mdx)(g.Toggle,{mdxType:"Toggle"},function(e){var o=e.on,n=e.toggle;return(0,d.mdx)(l.default.Fragment,null,(0,d.mdx)(g.Button,{onPress:n,title:"Open top drawer",mdxType:"Button"}),(0,d.mdx)(g.Drawer,{space:"30%",position:"top",isVisible:o,onClose:n,mdxType:"Drawer"},(0,d.mdx)(g.Box,{width:"100%",height:"100%",backgroundColor:"white",mdxType:"Box"})))}),(0,d.mdx)(g.Toggle,{mdxType:"Toggle"},function(e){var o=e.on,n=e.toggle;return(0,d.mdx)(l.default.Fragment,null,(0,d.mdx)(g.Button,{onPress:n,title:"Open left drawer",mdxType:"Button"}),(0,d.mdx)(g.Drawer,{space:"30%",position:"left",isVisible:o,onClose:n,mdxType:"Drawer"},(0,d.mdx)(g.Box,{width:"100%",height:"100%",backgroundColor:"white",mdxType:"Box"})))}),(0,d.mdx)(g.Toggle,{mdxType:"Toggle"},function(e){var o=e.on,n=e.toggle;return(0,d.mdx)(l.default.Fragment,null,(0,d.mdx)(g.Button,{onPress:n,title:"Open right drawer",mdxType:"Button"}),(0,d.mdx)(g.Drawer,{space:"30%",position:"right",isVisible:o,onClose:n,mdxType:"Drawer"},(0,d.mdx)(g.Box,{width:"100%",height:"100%",backgroundColor:"white",mdxType:"Box"})))})))}m&&m===Object(m)&&Object.isExtensible(m)&&Object.defineProperty(m,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/components/Drawer/Drawer.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=16.b2d7fd6e78b64eb52f9c.js.map