{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","avatarScale","large","medium","small","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$color","_ref2$isSolid","_ref2$size","size","newHashValue","controlSize","isControlSize","controlHeights","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","Avatar","props","source","getStyles","testID","imageAccessibilityLabel","accessibilityLabel","useTheme","_React$useState","React","_React$useState2","slicedToArray","hasImageFailedLoading","setHasImageFailedLoading","imageUnavailable","initials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","getInitials","_mergeStyles","mergeStyles","components","react","View","style","__source","fileName","_jsxFileName","lineNumber","Text","Image","onError","layoutProps","MDXLayout","MDXContent","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Icon","ListItem","___WEBPACK_IMPORTED_MODULE_7__","onPress","console","log","avatarProps","uri","title","description","of","className","isMDXComponent","getListItemStyles","descriptionStyle","imageWrapperStyle","marginRight","leftWrapperStyle","flexBasis","flexDirection","rightWrapperStyle","right","zIndex","textWrapperStyle","flex","titleStyle","touchableStyle","isDisabled","colors","background","greyLight","content","wrapperStyle","_props$isDisabled","rightNode","leftNode","accessibilityHint","_props$accessible","accessible","TouchableOpacity","disabled","esm_extends","Icon_web","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/14.f3eb530f.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, FillColors, Fills, Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { AvatarProps } from './Avatar';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  props: AvatarProps,\n  theme: Theme,\n) => Partial<AvatarStyles>;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color = 'automatic', isSolid = false, size = 'medium' },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: controlSize,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: controlSize,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: controlSize / 2,\n      lineHeight: controlSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor } from '../../theme/Theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport { GetAvatarStyles, getAvatarStyles } from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst getInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"automatic\"\n   */\n  color?: 'automatic' | FillColor;\n\n  /** Image label for screen readers */\n  imageAccessibilityLabel?: string;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Callback to get element styles. */\n  getStyles?: GetAvatarStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    getStyles,\n    testID,\n    imageAccessibilityLabel,\n    accessibilityLabel,\n  } = props;\n\n  const theme = useTheme();\n\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const imageUnavailable = !source || hasImageFailedLoading;\n\n  const initials = getInitials(name);\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(props, theme);\n\n  return (\n    <View\n      accessibilityLabel={accessibilityLabel}\n      style={containerStyle}\n      testID={testID}\n    >\n      {imageUnavailable && (\n        <Text getStyles={() => ({ textStyle })}>{initials}</Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image\n          accessibilityLabel={imageAccessibilityLabel}\n          onError={() => setHasImageFailedLoading(true)}\n          source={source}\n          style={imageStyle}\n        />\n      )}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar, Icon, ListItem } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  avatarProps={{\\n    source: { uri: \\'https://picsum.photos/200/200\\' },\\n  }}\\n  title=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar,\n      Icon,\n      ListItem\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} avatarProps={{\n        source: {\n          uri: 'https://picsum.photos/200/200'\n        }\n      }} title=\"Some label\" description=\"Some description\" mdxType=\"ListItem\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ListItem} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\ngetStyles={(ListItemProps, Theme) => ListItemStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<TouchableOpacity touchableStyle>\n  <View wrapperStyle>\n    <View leftWrapperStyle>\n      <View imageWrapperStyle>{leftNode || <Avatar />}</View>\n      <View textWrapperStyle>\n        {title}\n        {description}\n      </View>\n    </View>\n    {rightNode}\n  </View>\n</TouchableOpacity>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ListItemProps } from './ListItem';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  touchableStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  rightWrapperStyle: ViewStyle;\n  titleStyle: TextStyle;\n  descriptionStyle: TextStyle;\n}\n\nexport type GetListItemStyles = (\n  props: ListItemProps,\n  theme: Theme,\n) => Partial<ListItemStyles>;\n\nexport const getListItemStyles: GetListItemStyles = ({ isDisabled }, theme) => {\n  return {\n    descriptionStyle: {},\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexBasis: '85%',\n      flexDirection: 'row',\n    },\n    rightWrapperStyle: {\n      position: 'absolute',\n      right: 0,\n      zIndex: 2,\n    },\n    textWrapperStyle: {\n      flex: 1,\n      justifyContent: 'center',\n    },\n    titleStyle: {},\n    touchableStyle: {\n      backgroundColor: isDisabled\n        ? theme.colors.background.greyLight\n        : theme.colors.background.content,\n      height: 72,\n      justifyContent: 'center',\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport { GestureResponderEvent, TouchableOpacity, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport { GetListItemStyles, getListItemStyles } from './ListItem.styles';\n\nexport interface ListItemProps {\n  /**\n   * Title of the list item\n   */\n  title?: React.ReactNode;\n\n  /**\n   * Description of the list item\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Props to be passed to `Avatar`\n   */\n  avatarProps?: AvatarProps;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * React node replacing `Avatar` on the left hand-side\n   */\n  leftNode?: React.ReactNode;\n\n  /**\n   * React node replacing right hand-side icon\n   */\n  rightNode?: React.ReactNode;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Label for screen readers */\n  accessibilityLabel?: string;\n\n  /** Hint for screen readers */\n  accessibilityHint?: string;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * @default true\n   */\n  accessible?: boolean;\n\n  /** Callback to get element styles. */\n  getStyles?: GetListItemStyles;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    avatarProps,\n    getStyles,\n    isDisabled = false,\n    title,\n    description,\n    onPress,\n    rightNode,\n    leftNode,\n    testID,\n    accessibilityHint,\n    accessibilityLabel,\n    accessible = true,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    touchableStyle,\n    titleStyle,\n    descriptionStyle,\n    rightWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )(props, theme);\n\n  return (\n    <TouchableOpacity\n      disabled={isDisabled}\n      style={touchableStyle}\n      testID={testID}\n      onPress={onPress}\n      accessibilityHint={accessibilityHint}\n      accessibilityLabel={accessibilityLabel}\n      accessible={accessible}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {leftNode || avatarProps ? (\n            <View style={imageWrapperStyle}>\n              {leftNode || <Avatar size=\"small\" {...avatarProps} />}\n            </View>\n          ) : null}\n          <View style={textWrapperStyle}>\n            {title ? (\n              typeof title === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: titleStyle })}\n                  size=\"large\"\n                >\n                  {title}\n                </Text>\n              ) : (\n                title\n              )\n            ) : null}\n            {description ? (\n              typeof description === 'string' ? (\n                <Text\n                  getStyles={() => ({ textStyle: descriptionStyle })}\n                  size=\"small\"\n                  color=\"muted\"\n                >\n                  {description}\n                </Text>\n              ) : (\n                description\n              )\n            ) : null}\n          </View>\n        </View>\n        {rightNode === null ? null : (\n          <View style={rightWrapperStyle}>\n            {rightNode || <Icon name=\"chevron-right\" />}\n          </View>\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}