{"version":3,"sources":["webpack:///./docs/CustomizeTheme.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","name","id","parentName","href","React","Component"],"mappings":"6oBACEA,EAAAC,EAAAC,EAAA,kCACAC,EAAAD,EAAA,4CAMmBE,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,SAAAC,EAAAC,SAAAC,KAAAL,IACjBE,GAAA,EAAAI,EAAAF,SAAAC,MAAA,EAAAE,EAAAH,SAAAJ,GAAAQ,KAAAH,KAAMJ,KACDQ,OAAS,KAFGP,2EAIV,IAAAQ,EAC0BL,KAAKJ,MAA9BU,EADDD,EACCC,YADD,EAAAC,EAAAR,SAAAM,EAAA,gBAGP,OAAOd,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CACEC,KAAK,UAELJ,WAAYA,GAAYf,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,KAAKJ,WAAYA,EAAYV,MAAO,CAACe,GAAK,kBAAvD,iBACrCpB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,KAAKJ,WAAYA,EAAYV,MAAO,CAACe,GAAK,sBAAvD,qBACApB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,IAAIJ,WAAYA,GAA7B,yCAAmFf,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,aAAaJ,WAAYA,EAAYM,WAAW,KAA7D,SAAnF,WAAkLrB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,IAAIJ,WAAYA,EAAYM,WAAW,IAAIhB,MAAO,CAACiB,KAAO,yFAAvE,sBAAlL,sBAAwYtB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,aAAaJ,WAAYA,EAAYM,WAAW,KAA7D,kBACxYrB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,MAAMJ,WAAYA,GAAYf,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,OAAOJ,WAAYA,EAAYM,WAAW,MAAMhB,MAAO,IAApE,2OAS3CL,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,KAAKJ,WAAYA,EAAYV,MAAO,CAACe,GAAK,8BAAvD,6BACApB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,IAAIJ,WAAYA,GAA7B,0BAAoEf,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,aAAaJ,WAAYA,EAAYM,WAAW,KAA7D,aAApE,8DACArB,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,MAAMJ,WAAYA,GAAYf,EAAAQ,QAAAS,cAACd,EAAAe,OAAD,CAAQC,KAAK,OAAOJ,WAAYA,EAAYM,WAAW,MAAMhB,MAAO,IAApE,8oBAzBHkB,UAAMC","file":"static/js/29.e51b1c6f.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"customization\"}}>{`Customization`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"use-themeprovider\"}}>{`Use ThemeProvider`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can customize the theme using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Theme`}</MDXTag>{` object `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/WeTrustPlatform/paramount/blob/master/src/theme/ThemeInterface.ts\"}}>{`See Themeinterface`}</MDXTag>{` and passing it to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ThemeProvider`}</MDXTag></MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`import { ThemeProvider, createTheme } from 'paramount-ui'\n\nconst theme = createTheme({})\n\n// in the outmost component insert the provider and pass Theme Object as value\n<ThemeProvider value={theme}>\n  ...\n</ThemeProvider>\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"override-component-styles\"}}>{`Override Component Styles`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Each component exposts `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`getStyles`}</MDXTag>{` callback, which can be used to override component styles.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`import { Button } from 'paramount-ui'\n\nconst CustomButton = () => {\n  return (\n    <Button\n      color=\"primary\"\n      title=\"Example\"\n      getStyles={(buttonProps, theme) => {\n        const { color } = buttonProps;\n\n        // Each Component may use multiple style objects. The API enables to override each node's style\n        // VSCode intellisense would autofill available style fields; however, you can view the style spec of each component in their \\`Component*.styles.ts\\`\n        return {\n          buttonStyle: { ... },\n          textStyle: { ... },\n          focusColor: color\n        }\n      }}\n    >\n  )\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}