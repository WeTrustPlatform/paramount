{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/Drawer.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Drawer/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Menu/DrawerMenu.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Menu/DropdownMenu.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Menu/DropdownMenu.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Menu/index.ts"],"names":["getDrawerVariables","theme","container","position","width","zIndex","modalContainer","alignItems","display","height","justifyContent","getDrawerStyles","drawerVariables","containerStyle","modalContainerStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Modal","_Overlay","_Drawer","Drawer","props","children","isVisible","_props$onClose","onClose","_props$position","_props$offset","offset","space","getStyles","useTheme","_mergeStyles","mergeStyles","value","Animated","Value","spring","bounciness","speed","toValue","start","createElement","Modal","visible","transparent","onRequestClose","View","style","_objectSpread3","default","_defineProperty2","Overlay","onPress","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_Button","_Layout","DrawerMenu","_props$options","options","Spacing","padding","Box","elevation","borderRadius","controlBorderRadius","medium","borderWidth","borderColor","colors","border","map","option","Button","_extends2","title","paddingTop","_react","_interopRequireDefault","_react2","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","_ref","components","_objectWithoutProperties2","mdx","mdxType","id","Playground","__position","__code","__scope","this","Props","Toggle","DropdownMenu","_ref2","on","toggle","Fragment","color","appearance","isInline","isMDXComponent","_Helpers","_Positioner","_React$useState","useState","pageX","pageY","x","y","_React$useState2","_slicedToArray2","targetMeasurements","setTargetMeasurements","Positioner","content","ViewMeasure","onMeasure","_DrawerMenu","_DropdownMenu"],"mappings":"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","file":"static/js/24.3b6fd5a5.js","sourcesContent":["import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface DrawerVariables {\n  container: ViewStyle;\n  modalContainer: ViewStyle;\n}\n\nexport const getDrawerVariables = (theme: Theme): DrawerVariables => {\n  return {\n    container: {\n      position: 'absolute',\n      width: '100%',\n      zIndex: 1,\n    },\n    modalContainer: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      width: '100%',\n    },\n  };\n};\n\nexport interface DrawerStyles {\n  containerStyle: ViewStyle;\n  modalContainerStyle: ViewStyle;\n}\nexport type GetDrawerStyles = (theme: Theme) => DrawerStyles;\n\nexport const getDrawerStyles: GetDrawerStyles = theme => {\n  const drawerVariables = getDrawerVariables(theme);\n\n  return {\n    containerStyle: drawerVariables.container,\n    modalContainerStyle: drawerVariables.modalContainer,\n  };\n};\n","import * as React from 'react';\nimport { Animated, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Modal } from '../Modal';\nimport { Overlay } from '../Overlay';\nimport {\n  DrawerStyles,\n  GetDrawerStyles,\n  getDrawerStyles,\n} from './Drawer.styles';\n\ntype Position = 'bottom' | 'top' | 'right' | 'left';\n\nexport interface DrawerProps {\n  children: React.ReactNode;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** Amount to offset from the edge of window @default 0 */\n  offset?: number;\n  /** Amount of % screen to take up. */\n  space?: number | string;\n  /** Which side to draw from @default bottom */\n  position?: Position;\n  getStyles?: ReplaceReturnType<GetDrawerStyles, DeepPartial<DrawerStyles>>;\n}\n\nexport const Drawer = (props: DrawerProps) => {\n  const {\n    children,\n    isVisible,\n    onClose = () => null,\n    position = 'bottom',\n    offset = 0,\n    space,\n    getStyles,\n  } = props;\n\n  const theme = useTheme();\n\n  const { modalContainerStyle, containerStyle } = mergeStyles(\n    getDrawerStyles,\n    getStyles,\n  )(theme);\n\n  if (!isVisible) return null;\n\n  const value = new Animated.Value(-500);\n\n  Animated.spring(value, {\n    bounciness: 0,\n    speed: 70,\n    toValue: offset,\n  }).start();\n\n  return (\n    <Modal visible transparent onRequestClose={onClose}>\n      <View style={modalContainerStyle}>\n        <Animated.View\n          style={{\n            ...containerStyle,\n            [position]: value,\n            ...((position === 'left' || position === 'right') &&\n              space && {\n                height: '100%',\n                width: space,\n              }),\n            ...((position === 'bottom' || position === 'top') &&\n              space && {\n                height: space,\n                width: '100%',\n              }),\n          }}\n        >\n          {children}\n        </Animated.View>\n        <Overlay onPress={onClose} />\n      </View>\n    </Modal>\n  );\n};\n","export * from './Drawer';\n","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Button, ButtonProps } from '../Button';\nimport { Drawer } from '../Drawer';\nimport { Box, Spacing } from '../Layout';\n\nexport interface DrawerMenuProps {\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** List of menu options, which also take `ButtonProps` */\n  options?: ButtonProps[];\n}\n\nexport const DrawerMenu = (props: DrawerMenuProps) => {\n  const { options = [], isVisible, onClose } = props;\n  const theme = useTheme();\n\n  return (\n    <Drawer isVisible={isVisible} onClose={onClose}>\n      <Spacing padding={3}>\n        <Box\n          elevation={1}\n          borderRadius={theme.controlBorderRadius.medium}\n          borderWidth={1}\n          borderColor={theme.colors.border.default}\n        >\n          {options.map(option => (\n            <Button key={option.title} {...option} />\n          ))}\n        </Box>\n        <Spacing paddingTop={3}>\n          <Button onPress={onClose} title=\"Close\" />\n        </Spacing>\n      </Spacing>\n    </Drawer>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { DropdownMenu } from '.';\nimport { Button } from '../Button';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dropdownmenu\"\n    }}>{`DropdownMenu`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <>\\n      <DropdownMenu\\n        options={[\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 1\\',\\n            color: \\'danger\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 2\\',\\n            color: \\'primary\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 3\\',\\n            color: \\'secondary\\',\\n            appearance: \\'minimal\\',\\n          },\\n          {\\n            onPress: toggle,\\n            title: \\'Menu Option 4\\',\\n            appearance: \\'minimal\\',\\n          },\\n        ]}\\n        isVisible={on}\\n        onClose={toggle}\\n      >\\n        <Button isInline onPress={toggle} title=\\\"Open dropdown menu\\\" />\\n      </DropdownMenu>\\n    </>\\n  )}\\n</Toggle>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Toggle,\n      DropdownMenu,\n      Button\n    }} mdxType=\"Playground\">\n  <Toggle mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <>\n        <DropdownMenu options={[{\n            onPress: toggle,\n            title: 'Menu Option 1',\n            color: 'danger',\n            appearance: 'minimal'\n          }, {\n            onPress: toggle,\n            title: 'Menu Option 2',\n            color: 'primary',\n            appearance: 'minimal'\n          }, {\n            onPress: toggle,\n            title: 'Menu Option 3',\n            color: 'secondary',\n            appearance: 'minimal'\n          }, {\n            onPress: toggle,\n            title: 'Menu Option 4',\n            appearance: 'minimal'\n          }]} isVisible={on} onClose={toggle} mdxType=\"DropdownMenu\">\n          <Button isInline onPress={toggle} title=\"Open dropdown menu\" mdxType=\"Button\" />\n        </DropdownMenu>\n      </>}\n  </Toggle>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Button, ButtonProps } from '../Button';\nimport { Measurements, ViewMeasure } from '../Helpers';\nimport { Box } from '../Layout';\nimport { Positioner } from '../Positioner';\n\nexport interface DropdownMenuProps {\n  children: React.ReactNode;\n  /** To show dialog or not */\n  isVisible?: boolean;\n  /** Called when clicking on overlay or pressing Esc */\n  onClose?: () => void;\n  /** List of menu options, which also take `ButtonProps` */\n  options?: ButtonProps[];\n}\n\nexport interface DropdownMenuState {\n  targetMeasurements: Measurements;\n}\n\nexport const DropdownMenu = (props: DropdownMenuProps) => {\n  const { options = [], isVisible, onClose, children } = props;\n  const [targetMeasurements, setTargetMeasurements] = React.useState({\n    height: 0,\n    pageX: 0,\n    pageY: 0,\n    width: 0,\n    x: 0,\n    y: 0,\n  });\n  const theme = useTheme();\n\n  return (\n    <Positioner\n      position=\"bottom\"\n      content={() => (\n        <Box\n          elevation={1}\n          borderRadius={theme.controlBorderRadius.medium}\n          borderWidth={1}\n          borderColor={theme.colors.border.default}\n          width={targetMeasurements.width}\n        >\n          {options.map(option => (\n            <Button key={option.title} {...option} />\n          ))}\n        </Box>\n      )}\n      isVisible={isVisible}\n      onClose={onClose}\n    >\n      <ViewMeasure onMeasure={setTargetMeasurements}>{children}</ViewMeasure>\n    </Positioner>\n  );\n};\n","export * from './DrawerMenu';\nexport * from './DropdownMenu';\n"],"sourceRoot":""}