{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ListItem/ListItem.tsx"],"names":["hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","_ref","isSolid","color","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","theme","colorProps","name","_ref2$size","size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textStyle","fontSize","lineHeight","imageStyle","React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","_mergeStyles2","_Typography","_Avatar","globalGetInitials","fallback","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","Avatar","props","source","_props$size","_props$isSolid","_props$getInitials","getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","getStyles","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","components","createElement","View","style","Text","Image","forEach","key","defineProperty","exports","enumerable","get","Feather","_Text","Icon","IconTag","concat","result","matches","charAt","convertToPascal","getTextColor","colors","text","_Icon","_react2","_interopRequireDefault","_docz","_ListItem","layoutProps","MDXLayout","MDXContent","_objectWithoutProperties2","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","this","Props","ListItem","onPress","console","log","rightIcon","leftIcon","uri","label","description","isDisabled","imageWrapperStyle","leftWrapperStyle","textWrapperStyle","focusBackgroundColor","wrapperStyle","of","isMDXComponent","getListItemStyles","_objectSpread2","background","content","borderBottomWidth","borderColor","border","controlHeights","paddingLeft","controlPaddings","paddingRight","greyDark","greyLight","marginRight","flexDirection","textSizes","_props$isDisabled","_props$rightIcon","accessibilityProps","TouchableHighlight","disabled","underlayColor"],"mappings":"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","file":"static/js/22.be0bc232.js","sourcesContent":["import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n","export * from './Avatar';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return (\n    <IconTag\n      color={color ? getTextColor(theme.colors.text)(color) : color}\n      size={size}\n    />\n  );\n};\n","export * from './Icon';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { ListItem } from './ListItem';\nimport { Avatar } from '../Avatar';\nimport { Icon } from '../Icon';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, you can pass `}<inlineCode parentName=\"p\">{`avatarProps`}</inlineCode>{` provide more specific customizations`}</p>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  rightIcon={<Icon color=\\\"#7e7e7e\\\" size={24} name=\\\"chevron-right\\\" />}\\n  leftIcon={\\n    <Avatar size={45} source={{ uri: \\'https://picsum.photos/200/200\\' }} />\\n  }\\n  label=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  getStyles={(props, theme) => ({\\n    imageWrapperStyle: {},\\n    leftWrapperStyle: {},\\n    textWrapperStyle: {},\\n    containerStyle: {},\\n    textStyle: {},\\n    focusBackgroundColor: {},\\n    wrapperStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      ListItem,\n      Avatar,\n      Icon\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} rightIcon={<Icon color=\"#7e7e7e\" size={24} name=\"chevron-right\" mdxType=\"Icon\" />} leftIcon={<Avatar size={45} source={{\n        uri: 'https://picsum.photos/200/200'\n      }} mdxType=\"Avatar\" />} label=\"Some label\" description=\"Some description\" size=\"large\" isDisabled={false} getStyles={(props, theme) => ({\n        imageWrapperStyle: {},\n        leftWrapperStyle: {},\n        textWrapperStyle: {},\n        containerStyle: {},\n        textStyle: {},\n        focusBackgroundColor: {},\n        wrapperStyle: {}\n      })} mdxType=\"ListItem\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ListItem} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/Theme';\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ControlSize;\n  isDisabled: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      height: theme.controlHeights[size],\n      justifyContent: 'center',\n      paddingLeft: theme.controlPaddings[size],\n      paddingRight: theme.controlPaddings[size],\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n    },\n    focusBackgroundColor: theme.colors.background.greyLight,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ControlSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(\n    getListItemStyles,\n    getStyles,\n    theme.components.getListItemStyles,\n  )({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n"],"sourceRoot":""}