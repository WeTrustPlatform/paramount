{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Container.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Container.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Container.tsx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","Container","LayoutProvider","Text","___WEBPACK_IMPORTED_MODULE_7__","___WEBPACK_IMPORTED_MODULE_5__","backgroundColor","padding","___WEBPACK_IMPORTED_MODULE_6__","fluid","size","undefined","___WEBPACK_IMPORTED_MODULE_8__","of","className","isMDXComponent","getMaxWidth","containerSizes","currentScreenSize","currentScreenSizeIndex","DESC_ORDER_SCREEN_SIZES","indexOf","nearestSize","find","screenSize","index","getContainerStyles","theme","gutterWidth","containerStyle","marginLeft","marginRight","maxWidth","paddingLeft","paddingRight","width","children","getStyles","_props$fluid","layout","useLayout","useTheme","mergeStyles","objectSpread","react","View","style"],"mappings":"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","file":"static/js/29.6f6daae4.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Container, LayoutProvider, Text } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"container\"\n    }}>{`Container`}</h1>\n    <p><inlineCode parentName=\"p\">{`Container`}</inlineCode>{` centers the content with a max-width of defined by Layout (varies depending on screen size)`}</p>\n    <p>{`Refer to `}<inlineCode parentName=\"p\">{`Layout`}</inlineCode>{` docs for setup`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<LayoutProvider>\\n  <Box backgroundColor=\\\"#67c6bb\\\" padding={3}>\\n    <Container\\n      fluid={false} // Should not contain width\\n      size={undefined} // Override default container size\\n    >\\n      <Box backgroundColor=\\\"white\\\" padding={3}>\\n        <Text>Centered content</Text>\\n      </Box>\\n    </Container>\\n  </Box>\\n</LayoutProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Container,\n      LayoutProvider,\n      Text\n    }} mdxType=\"Playground\">\n  <LayoutProvider mdxType=\"LayoutProvider\">\n    <Box backgroundColor=\"#67c6bb\" padding={3} mdxType=\"Box\">\n      <Container fluid={false} // Should not contain width\n          size={undefined} // Override default container size\n          mdxType=\"Container\">\n        <Box backgroundColor=\"white\" padding={3} mdxType=\"Box\">\n          <Text mdxType=\"Text\">Centered content</Text>\n        </Box>\n      </Container>\n    </Box>\n  </LayoutProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Container} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ContainerStyles {\n  containerStyle: ViewStyle;\n}\n\ngetStyles={(ContainerProps && Layout, Theme) => ContainerStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View containerStyle>{children}</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { ContainerProps } from './Container';\nimport {\n  ContainerSizes,\n  DESC_ORDER_SCREEN_SIZES,\n  LayoutContext,\n  ScreenSize,\n} from './LayoutContext';\n\nexport type GetContainerStyles = (\n  props: ContainerProps & LayoutContext,\n  theme: Theme,\n) => Partial<ContainerStyles>;\n\nexport interface ContainerStyles {\n  containerStyle: ViewStyle;\n}\n\nconst getMaxWidth = (\n  containerSizes: ContainerSizes,\n  currentScreenSize: ScreenSize,\n) => {\n  const currentScreenSizeIndex = DESC_ORDER_SCREEN_SIZES.indexOf(\n    currentScreenSize,\n  );\n\n  const nearestSize = DESC_ORDER_SCREEN_SIZES.find((screenSize, index) => {\n    if (screenSize === 'xsmall') return false;\n    if (currentScreenSizeIndex > index) return false;\n\n    return !!containerSizes[screenSize];\n  });\n\n  if (nearestSize === 'xsmall') return undefined;\n\n  return nearestSize ? containerSizes[nearestSize] : undefined;\n};\n\nexport const getContainerStyles: GetContainerStyles = (\n  { size, currentScreenSize, containerSizes, gutterWidth, fluid },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      maxWidth: fluid\n        ? '100%'\n        : size\n        ? containerSizes[size]\n        : getMaxWidth(containerSizes, currentScreenSize),\n      paddingLeft: gutterWidth / 2,\n      paddingRight: gutterWidth / 2,\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetContainerStyles, getContainerStyles } from './Container.styles';\nimport { ContainerSize, useLayout } from './LayoutContext';\n\nexport interface ContainerProps {\n  /** Children node */\n  children?: React.ReactNode;\n\n  /**\n   * When true, it will not contain the width and occupy fully the parent container\n   * @default false\n   */\n  fluid?: boolean;\n\n  /**\n   * The size of the container. It will override the internal responsive mechanism, and will force the\n   * containment of a particular screen size\n   */\n  size?: ContainerSize;\n\n  /** Callback to get element styles. */\n  getStyles?: GetContainerStyles;\n}\n\n/**\n * On screens with size lg and above, caps maximum width of the content\n */\nexport const Container = (props: ContainerProps) => {\n  const { children, getStyles, size, fluid = false } = props;\n  const layout = useLayout();\n  const theme = useTheme();\n\n  const { containerStyle } = mergeStyles(\n    getContainerStyles,\n    getStyles,\n    theme.components.getContainerStyles,\n  )({ size, fluid, ...layout }, theme);\n\n  return <View style={containerStyle}>{children}</View>;\n};\n"],"sourceRoot":""}