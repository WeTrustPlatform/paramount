{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Box/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/hooks/useForceUpdate.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/LoadingIndicators/Dots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Toast/Toast.mdx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["propToFn","backgroundColor","color","theme","colors","background","elevation","elevations","shape","containerShapes","Box","props","children","testID","viewStyles","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","useTheme","transformedStyles","pureStyles","prop","styleFn","style","push","react__WEBPACK_IMPORTED_MODULE_1__","react_native_web_dist_exports_View__WEBPACK_IMPORTED_MODULE_2__","__source","fileName","lineNumber","reducer","state","action","useForceUpdate","_React$useReducer","React","useReducer","dispatch","slicedToArray","useCallback","AnimatedView","animated","View","Dots","_props$size","size","_props$color","text","primary","forceUpdate","trail","useTrail","config","duration","from","opacity","onRest","reset","to","_to","asyncToGenerator","regenerator_default","a","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","react","alignItems","flexDirection","justifyContent","_jsxFileName","map","index","key","borderRadius","height","marginLeft","marginRight","width","defaultProps","Button","_props$appearance","appearance","_props$isDisabled","isDisabled","_props$isLoading","isLoading","_props$onPress","onPress","title","_props$overrides","overrides","_getOverrides","getOverrides","StyledTouchable","dlv","Touchable","_getOverrides2","touchableProps","_getOverrides3","StyledTitle","Title","_getOverrides4","titleProps","_getOverrides5","StyledLoading","Loading","_getOverrides6","loadingProps","_getOverrides7","StyledIcon","IconBefore","_getOverrides8","iconBeforeProps","_getOverrides9","IconAfter","_getOverrides10","iconAfterProps","esm_extends","Button_jsxFileName","_props$appearance2","_props$color2","_props$isDisabled2","_props$isLoading2","_props$size2","objectWithoutProperties","buttonAppearances","minimal","default","content","danger","secondary","overlay","button","dangerLight","primaryLight","secondaryLight","outline","borderColor","borderWidth","border","getButtonAppearances","_ref","isControlSize","controlBorderRadius","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","TouchableOpacity","accessibilityRole","disabled","objectSpread","getButtonTextColor","defaultText","dangerText","primaryText","secondaryText","_props$appearance3","_props$color3","_props$isDisabled3","_props$size3","textProps","textSize","textSizes","Text","weight","muted","display","fontWeight","textAlign","paddingHorizontal","_props$appearance4","_props$color4","Dots_Dots","layoutProps","MDXLayout","MDXContent","components","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","Playground","Props","ToastContext","ToastProvider","Toast","___WEBPACK_IMPORTED_MODULE_8__","___WEBPACK_IMPORTED_MODULE_7__","Consumer","_ref2","notify","___WEBPACK_IMPORTED_MODULE_6__","description","of","isMDXComponent","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/23.64b4d96d.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { BackgroundColor, ContainerShape, Theme, useTheme } from '../../theme';\n\nexport interface BoxProps extends ViewStyle {\n  children?: React.ReactNode;\n\n  shape?: ContainerShape;\n  backgroundColor?: BackgroundColor;\n}\n\nconst propToFn = {\n  backgroundColor: (color: BackgroundColor, theme: Theme) => {\n    // @ts-ignore\n    if (theme.colors.background[color]) {\n      // @ts-ignore\n      return { backgroundColor: theme.colors.background[color] };\n    }\n    return {\n      backgroundColor: color,\n    };\n  },\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) =>\n    theme.elevations[elevation],\n  shape: (shape: ContainerShape, theme: Theme) => theme.containerShapes[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles]}>\n      {children}\n    </View>\n  );\n};\n","import React from 'react';\n\nconst reducer = (state: boolean, action: null): boolean => !state;\n\nexport const useForceUpdate = () => {\n  const [, dispatch] = React.useReducer(reducer, true);\n\n  // Turn dispatch(required_parameter) into dispatch().\n  return React.useCallback(() => {\n    dispatch(null);\n  }, [dispatch]);\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nimport { useForceUpdate } from '../../hooks';\nimport { useTheme } from '../../theme';\n\nconst AnimatedView = animated(View);\n\nexport interface DotsProps {\n  color?: string;\n  size?: number;\n}\n\nexport const Dots = (props: DotsProps) => {\n  const theme = useTheme();\n  const { size = 10, color = theme.colors.text.primary } = props;\n  const forceUpdate = useForceUpdate();\n\n  const trail = useTrail(3, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    onRest: forceUpdate,\n    reset: true,\n    to: async next => {\n      // tslint:disable-next-line\n      await next({ opacity: 1 });\n      // tslint:disable-next-line\n      await next({ opacity: 0 });\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={index}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: 999,\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport * as React from 'react';\nimport {\n  GestureResponderEvent,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\n\nimport { ButtonColor, ControlSize, Theme, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Dots } from '../LoadingIndicators';\nimport { Text, TextProps } from '../Typography';\n\ninterface ButtonBaseProps {\n  /** Title of the button */\n  title?: OptionalString;\n\n  /**\n   * The color of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /** Called when button is pressed */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ButtonOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconBefore: IconProps;\n  IconAfter: IconProps;\n  Loading: LoadingProps;\n}\n\nexport interface ButtonProps\n  extends WithOverrides<ButtonBaseProps, ButtonOverrides> {}\n\nconst defaultProps = {\n  appearance: 'primary' as const,\n  color: 'default' as const,\n  isDisabled: false,\n  isLoading: false,\n  size: 'medium' as const,\n};\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = defaultProps.appearance,\n    color = defaultProps.color,\n    isDisabled = defaultProps.isDisabled,\n    isLoading = defaultProps.isLoading,\n    size = defaultProps.size,\n    onPress = () => {\n      return;\n    },\n    title,\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    dlv(theme, 'overrides.Button.Touchable'),\n    overrides.Touchable,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    dlv(theme, 'overrides.Button.Title'),\n    overrides.Title,\n  );\n  const [Loading, loadingProps] = getOverrides(\n    StyledLoading,\n    props,\n    dlv(theme, 'overrides.Button.Loading'),\n    overrides.Loading,\n  );\n  const [IconBefore, iconBeforeProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconBefore'),\n    overrides.IconBefore,\n  );\n  const [IconAfter, iconAfterProps] = getOverrides(\n    StyledIcon,\n    props,\n    dlv(theme, 'overrides.Button.IconAfter'),\n    overrides.IconAfter,\n  );\n\n  return (\n    <Touchable\n      appearance={appearance}\n      color={color}\n      isDisabled={isDisabled}\n      isLoading={isLoading}\n      size={size}\n      onPress={onPress}\n      testID={testID}\n      {...touchableProps}\n    >\n      <IconBefore\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconBeforeProps}\n      />\n      {isLoading ? (\n        <Loading appearance={appearance} color={color} {...loadingProps} />\n      ) : (\n        <Title\n          appearance={appearance}\n          color={color}\n          isDisabled={isDisabled}\n          size={size}\n          title={title}\n          {...titleProps}\n        />\n      )}\n      <IconAfter\n        appearance={appearance}\n        color={color}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        size={size}\n        {...iconAfterProps}\n      />\n    </Touchable>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface ButtonAppearances {\n  minimal: { [size in ButtonColor]: ViewStyle };\n  primary: { [size in ButtonColor]: ViewStyle };\n  outline: { [size in ButtonColor]: ViewStyle };\n}\n\ntype ButtonAppearance = keyof ButtonAppearances;\n\nconst getButtonAppearances = (\n  theme: Theme,\n  isLoading: boolean,\n): ButtonAppearances => {\n  return {\n    minimal: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n      },\n    },\n    primary: {\n      default: {\n        backgroundColor: isLoading\n          ? theme.colors.background.overlay\n          : theme.colors.button.default,\n      },\n      danger: {\n        backgroundColor: isLoading\n          ? theme.colors.background.dangerLight\n          : theme.colors.button.danger,\n      },\n      primary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.primaryLight\n          : theme.colors.button.primary,\n      },\n      secondary: {\n        backgroundColor: isLoading\n          ? theme.colors.background.secondaryLight\n          : theme.colors.button.secondary,\n      },\n    },\n\n    outline: {\n      default: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.text.default,\n        borderWidth: 3,\n      },\n      danger: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.danger,\n        borderWidth: 3,\n      },\n      primary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.primary,\n        borderWidth: 3,\n      },\n      secondary: {\n        backgroundColor: theme.colors.background.content,\n        borderColor: theme.colors.border.secondary,\n        borderWidth: 3,\n      },\n    },\n  };\n};\n\ninterface TouchableProps extends TouchableOpacityProps, PropsWithChildren {\n  color?: ButtonColor;\n  appearance?: ButtonAppearance;\n  size?: ControlSize | number;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    appearance = defaultProps.appearance,\n    color = defaultProps.color,\n    isDisabled = defaultProps.isDisabled,\n    isLoading = defaultProps.isLoading,\n    size = defaultProps.size,\n    children,\n    style,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n  const buttonAppearances = getButtonAppearances(theme, isLoading);\n\n  const { borderRadius, height, paddingLeft, paddingRight } = isControlSize(\n    size,\n  )\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size] + 8,\n        paddingRight: theme.controlPaddings[size] + 8,\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium + 8,\n        paddingRight: theme.controlPaddings.medium + 8,\n      };\n\n  return (\n    <TouchableOpacity\n      accessibilityRole=\"button\"\n      disabled={!!(isDisabled || isLoading)}\n      style={[\n        {\n          borderRadius,\n          height,\n          paddingLeft,\n          paddingRight,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center',\n          ...buttonAppearances[appearance][color],\n          ...(isDisabled && {\n            backgroundColor: theme.colors.button.disabled,\n          }),\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface ButtonTextColors {\n  minimal: { [size in ButtonColor]: string };\n  primary: { [size in ButtonColor]: string };\n  outline: { [size in ButtonColor]: string };\n}\n\nconst getButtonTextColor = (theme: Theme): ButtonTextColors => {\n  return {\n    minimal: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n    primary: {\n      default: theme.colors.button.defaultText,\n      danger: theme.colors.button.dangerText,\n      primary: theme.colors.button.primaryText,\n      secondary: theme.colors.button.secondaryText,\n    },\n\n    outline: {\n      default: theme.colors.text.default,\n      danger: theme.colors.text.danger,\n      primary: theme.colors.text.primary,\n      secondary: theme.colors.text.secondary,\n    },\n  };\n};\n\ninterface TitleProps extends TextProps {\n  size?: ControlSize | number;\n  color?: ButtonColor;\n  title?: OptionalString;\n  appearance?: ButtonAppearance;\n  isDisabled?: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const {\n    appearance = defaultProps.appearance,\n    color = defaultProps.color,\n    isDisabled = defaultProps.isDisabled,\n    size = defaultProps.size,\n    title,\n    style,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const textSize = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      weight=\"bold\"\n      style={[\n        {\n          alignItems: 'center',\n          color: isDisabled\n            ? theme.colors.text.muted\n            : getButtonTextColor(theme)[appearance][color],\n          display: 'flex',\n          fontWeight: '600',\n          justifyContent: 'center',\n          textAlign: 'center',\n          paddingHorizontal: 8,\n          ...textSize,\n        },\n        style,\n      ]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface LoadingProps {\n  color?: ButtonColor;\n  appearance?: ButtonAppearance;\n}\n\nconst StyledLoading = (props: LoadingProps) => {\n  const {\n    appearance = defaultProps.appearance,\n    color = defaultProps.color,\n  } = props;\n  const theme = useTheme();\n\n  return <Dots color={getButtonTextColor(theme)[appearance][color]} />;\n};\n\ninterface IconProps extends PropsWithChildren {\n  size?: ControlSize | number;\n  color?: ButtonColor;\n  title?: OptionalString;\n  appearance?: ButtonAppearance;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n}\n\nconst StyledIcon = (props: IconProps) => {\n  return <></>;\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Button, ToastContext, ToastProvider, Toast } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`Make sure to use `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` at the top-level component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<ThemeProvider>{children}</ThemeProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useToast`}</inlineCode>{` you can use to create toasts from anywhere in the application.`}</p>\n    <Playground __position={0} __code={'<ToastProvider>\\n  {/*\\n    We use `ToastContext.Consumer` here due to limitations in docs\\n    Use `const { notify } = useToast()` inside your function component\\n   */}\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <Button\\n        onPress={() =>\\n          notify({\\n            title: \\'Title\\',\\n            description: \\'Description\\',\\n            duration: 5000,\\n          })\\n        }\\n        title=\\\"Open toast\\\"\\n      />\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Button,\n      ToastContext,\n      ToastProvider,\n      Toast\n    }} mdxType=\"Playground\">\n  <ToastProvider mdxType=\"ToastProvider\">\n    {\n          /*\n           We use `ToastContext.Consumer` here due to limitations in docs\n           Use `const { notify } = useToast()` inside your function component\n          */\n        }\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <Button onPress={() => notify({\n            title: 'Title',\n            description: 'Description',\n            duration: 5000\n          })} title=\"Open toast\" mdxType=\"Button\" />}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"toast-options\"\n    }}>{`Toast Options`}</h2>\n    <Props of={Toast} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}