{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/ClearableTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/IconTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/PhoneNumberInputField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/SearchTextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextArea.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextAreaField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInputField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_Layout","_Typography","FormField","props","label","error","children","description","passThroughProps","_objectWithoutProperties2","default","createElement","Box","marginBottom","Label","cloneElement","Text","color","_FormField","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_reactNative","_icons","_theme","_IconTextInput","ClearableTextInputBase","onClear","innerRef","onChangeText","value","isClearable","rightIcon","textInputWithIconProps","theme","useTheme","IconTextInput","_extends2","ref","TouchableOpacity","onPress","Icon","name","size","colors","text","ClearableTextInput","forwardRef","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","TextInput","_Form","_PhoneNumberInput","PhoneNumberInputField","withTheme","PhoneNumberInput","isInvalid","_ClearableTextInput","SearchTextInputBase","SearchTextInput","TextAreaBase","_props$numberOfLines","numberOfLines","_props$size","controlHeight","controlHeights","multiline","paddingBottom","paddingTop","TextArea","_TextArea","TextAreaField","_react2","_interopRequireDefault","_docz","_reactPowerplug","_","layoutProps","MDXLayout","MDXContent","_ref","components","mdx","mdxType","id","parentName","href","Playground","__position","__code","__scope","this","Props","State","initial","_ref2","state","setState","placeholder","isDisabled","keyboardType","onSubmitEditing","e","console","log","undefined","placeholderTextColor","muted","isMDXComponent","TextInputField","_TextInputField","prototype","hasOwnProperty","call","_exportNames","_TextAreaField","_PhoneNumberInputField","_SearchTextInput"],"mappings":"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","file":"static/js/15.70333603.js","sourcesContent":["import * as React from 'react';\n\nimport { Box } from '../Layout';\nimport { Label, Text } from '../Typography';\n\nexport interface FormFieldProps {\n  error?: string | null;\n  label?: string | null;\n  description?: string | null;\n  children?: React.ReactNode;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const { label, error, children, description, ...passThroughProps } = props;\n\n  return (\n    <Box>\n      {label && (\n        <Box marginBottom={4}>\n          <Label>{label}</Label>\n        </Box>\n      )}\n      <Box marginBottom={4}>\n        {/*\n        // @ts-ignore: TODO: Find right way to type this */}\n        {React.cloneElement(children, passThroughProps)}\n      </Box>\n      {error && (\n        <Box marginBottom={4}>\n          <Text color=\"danger\">{error}</Text>\n        </Box>\n      )}\n      {description && <Text>{description}</Text>}\n    </Box>\n  );\n};\n","export * from './FormField';\n","import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport { IconTextInput, IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n  isClearable?: boolean;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    isClearable,\n    rightIcon,\n    ...textInputWithIconProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      onChangeText={onChangeText}\n      value={value}\n      rightIcon={\n        value && isClearable ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : (\n          rightIcon || null\n        )\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport { TextInput, TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, IconTextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { PhoneNumberInput, PhoneNumberInputProps } from './PhoneNumberInput';\n\nexport interface PhoneNumberInputFieldProps\n  extends FormFieldProps,\n    PhoneNumberInputProps {}\n\nconst PhoneNumberInputFieldBase = (props: PhoneNumberInputFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <PhoneNumberInput isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const PhoneNumberInputField = withTheme(PhoneNumberInputFieldBase);\nexport default PhoneNumberInputField;\n","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { useTheme } from '../../theme';\nimport {\n  ClearableTextInput,\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\n","import * as React from 'react';\nimport { TextInput as RNTextInput } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface TextAreaProps extends TextInputProps {\n  numberOfLines?: number;\n}\n\nconst TextAreaBase = (props: TextAreaProps) => {\n  const { numberOfLines = 3, size = 'medium', ...textInputProps } = props;\n  const theme = useTheme();\n  const controlHeight = theme.controlHeights[size];\n\n  return (\n    <TextInput\n      multiline\n      size={size}\n      numberOfLines={numberOfLines}\n      getStyles={() => ({\n        inputStyle: {\n          height: numberOfLines * controlHeight,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n      })}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextArea = React.forwardRef<RNTextInput, TextAreaProps>(\n  (props, ref) => <TextAreaBase {...props} innerRef={ref} />,\n);\n","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { TextArea, TextAreaProps } from './TextArea';\n\nexport interface TextAreaFieldProps extends FormFieldProps, TextAreaProps {}\n\nconst TextAreaFieldBase = (props: TextAreaFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <TextArea isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const TextAreaField = withTheme(TextAreaFieldBase);\nexport default TextAreaField;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../../icons';\nimport { TextInput } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes of React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component (i.e. you can pass its props). `}<a parentName=\"p\" {...{\n        \"href\": \"https://facebook.github.io/react-native/docs/textinput\"\n      }}>{`See more details`}</a></p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      name=\\\"field\\\"\\n      value={state.value}\\n      placeholder=\\\"Add your own placeholder\\\"\\n      size=\\\"large\\\"\\n      isDisabled={false}\\n      isInvalid={false}\\n      keyboardType=\\\"email-address\\\"\\n      onChangeText={text => setState({ value: text })}\\n      onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n      leftIcon={\\n        <View>\\n          <Icon name=\\\"menu\\\" size={24} />\\n        </View>\\n      }\\n      rightIcon={undefined}\\n      isClearable={true} // Mutually exclusive with rightIcon\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n      getStyles={(props, theme) => ({\\n        inputStyle: {},\\n        placeholderTextColor: theme.colors.text.muted,\\n      })}\\n    />\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      View,\n      Icon,\n      TextInput\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput name=\"field\" value={state.value} placeholder=\"Add your own placeholder\" size=\"large\" isDisabled={false} isInvalid={false} keyboardType=\"email-address\" onChangeText={text => setState({\n          value: text\n        })} onSubmitEditing={e => console.log('Submit on enter')} leftIcon={<View mdxType=\"View\">\n            <Icon name=\"menu\" size={24} mdxType=\"Icon\" />\n          </View>} rightIcon={undefined} isClearable={true} // Mutually exclusive with rightIcon\n        onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        getStyles={(props, theme) => ({\n          inputStyle: {},\n          placeholderTextColor: theme.colors.text.muted\n        })} mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { withTheme } from '../../theme';\nimport { FormField, FormFieldProps } from '../Form';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport interface TextInputFieldProps extends FormFieldProps, TextInputProps {}\n\nconst TextInputFieldBase = (props: TextInputFieldProps) => {\n  const { label, error, description, ...passThroughProps } = props;\n\n  return (\n    <FormField label={label} error={error} description={description}>\n      <TextInput isInvalid={!!error} {...passThroughProps} />\n    </FormField>\n  );\n};\n\nexport const TextInputField = withTheme(TextInputFieldBase);\nexport default TextInputField;\n","export * from './TextInputField';\nexport * from './TextArea';\nexport * from './TextAreaField';\nexport * from './PhoneNumberInput';\nexport * from './PhoneNumberInputField';\nexport {\n  ClearableTextInput as TextInput,\n  ClearableTextInputProps as TextInputProps,\n} from './ClearableTextInput';\nexport * from './SearchTextInput';\n"],"sourceRoot":""}