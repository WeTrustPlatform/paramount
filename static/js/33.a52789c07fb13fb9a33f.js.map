{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Paragraph.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Paragraph.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Paragraph.tsx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","parentName","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","Paragraph","___WEBPACK_IMPORTED_MODULE_5__","flexDirection","___WEBPACK_IMPORTED_MODULE_6__","size","of","className","isMDXComponent","getParagraphSize","paragraphSizes","fontSize","getParagraphStyles","theme","_ref$color","color","_ref$size","_ref$align","align","weight","sizeStyle","paragraphStyle","objectSpread","getTextColor","colors","text","fontFamily","fontFamilies","fontWeight","getFontWeight","fontWeights","marginBottom","textSizes","medium","marginTop","textAlign","children","getStyles","textProps","objectWithoutProperties","useTheme","mergeStyles","react","Text","esm_extends","accessibilityLabel","style"],"mappings":"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","file":"static/js/33.34ae4cca.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Paragraph } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"paragraph\"\n    }}>{`Paragraph`}</h1>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{` component`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box flexDirection=\\\"column\\\">\\n  <Paragraph size=\\\"small\\\">Lorem ipsum dolar set amet</Paragraph>\\n  <Paragraph size=\\\"medium\\\">Lorem ipsum dolar set amet</Paragraph>\\n  <Paragraph size=\\\"large\\\">Lorem ipsum dolar set amet</Paragraph>\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Paragraph\n    }} mdxType=\"Playground\">\n  <Box flexDirection=\"column\" mdxType=\"Box\">\n    <Paragraph size=\"small\" mdxType=\"Paragraph\">Lorem ipsum dolar set amet</Paragraph>\n    <Paragraph size=\"medium\" mdxType=\"Paragraph\">Lorem ipsum dolar set amet</Paragraph>\n    <Paragraph size=\"large\" mdxType=\"Paragraph\">Lorem ipsum dolar set amet</Paragraph>\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Paragraph} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ParagraphStyles {\n  textStyle: ParagraphStyle;\n}\n\ngetStyles={(ParagraphProps, Theme) => ParagraphStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Paragraph paragraphStyle />\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport { ParagraphSize, ParagraphSizes, Theme } from '../../theme/Theme';\nimport { ParagraphProps } from './Paragraph';\nimport { getFontWeight, getTextColor } from './Text.styles';\n\nexport interface ParagraphStyles {\n  paragraphStyle: TextStyle;\n}\n\nexport type GetParagraphStyles = (\n  props: ParagraphProps,\n  theme: Theme,\n) => Partial<ParagraphStyles>;\n\nexport const getParagraphSize = (paragraphSizes: ParagraphSizes) => (\n  size: ParagraphSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetParagraphSize = paragraphSizes[size] as TextStyle;\n\n  return presetParagraphSize || { fontSize: size };\n};\n\nexport const getParagraphStyles: GetParagraphStyles = (\n  { color = 'default', size = 'medium', align = 'left', weight },\n  theme,\n) => {\n  const sizeStyle = getParagraphSize(theme.paragraphSizes)(size);\n\n  return {\n    paragraphStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      marginBottom: theme.textSizes.medium.fontSize,\n      marginTop: theme.textSizes.medium.fontSize,\n      textAlign: align,\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text, TextProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetParagraphStyles, getParagraphStyles } from './Paragraph.styles';\nimport { TextAlign } from './types';\n\n// @ts-ignore: need to override for web purposes\nexport interface ParagraphProps extends TextProps {\n  /**\n   * Size of the paragraph.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the paragraph.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the paragraph.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Weight of the paragraph.\n   * @default paragraphSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: GetParagraphStyles;\n}\n\nexport const Paragraph = (props: ParagraphProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { paragraphStyle } = mergeStyles(\n    getParagraphStyles,\n    getStyles,\n    theme.components.getParagraphStyles,\n  )(props, theme);\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityLabel=\"p\"\n      style={paragraphStyle}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n"],"sourceRoot":""}