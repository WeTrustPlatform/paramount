{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_Avatar","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Avatar","name","source","uri","size","isSolid","color","getInitials","fallback","concat","charAt","getStyles","theme","boxStyle","textStyle","imageStyle","of","isMDXComponent","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","hashValue","appearances","keys","Object","getAvatarStyles","_ref2","colorProps","_ref2$size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","fontSize","lineHeight","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_Typography","globalGetInitials","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","_props$size","_props$isSolid","_props$getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","createElement","View","style","Text","Image"],"mappings":"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","file":"static/js/28.1f0db8a6.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar } from './Avatar';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"avatar\"\n    }}>{`Avatar`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Avatar\\n  name=\\\"Bill Gates\\\"\\n  source={{ uri: \\'https://picsum.photos/200/200\\' }}\\n  size={40}\\n  isSolid={false}\\n  color=\\\"automatic\\\"\\n  getInitials={(name, fallback) => `${name.charAt(0)}${name.charAt(5)}`}\\n  getStyles={(props, theme) => ({\\n    boxStyle: {},\\n    textStyle: {},\\n    imageStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" source={{\n        uri: 'https://picsum.photos/200/200'\n      }} size={40} isSolid={false} color=\"automatic\" getInitials={(name, fallback) => `${name.charAt(0)}${name.charAt(5)}`} getStyles={(props, theme) => ({\n        boxStyle: {},\n        textStyle: {},\n        imageStyle: {}\n      })} mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"automatic-name-usage\"\n    }}>{`Automatic name usage`}</h3>\n    <Playground __position={1} __code={'<Avatar name=\\\"Bill Gates\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Avatar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n"],"sourceRoot":""}