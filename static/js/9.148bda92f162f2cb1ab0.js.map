{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.styles.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Form/FormField.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Inputs/TextInput.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Label.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","FormField","TextInput","___WEBPACK_IMPORTED_MODULE_5__","label","description","error","___WEBPACK_IMPORTED_MODULE_6__","of","parentName","className","isMDXComponent","getFormFieldStyles","theme","labelWrapperStyle","wrapperStyle","labelPosition","paddingRight","flexDirection","alignItems","paddingLeft","paddingBottom","containerStyles","descriptionTextStyle","errorTextStyle","errorWrapperStyle","labelTextStyle","children","_props$labelPosition","getStyles","useTheme","_mergeStyles","mergeStyles","labelContent","react","View","style","Label","labelStyle","Text","color","textStyle","Icon","name","_ref$color","_ref$size","size","IconTag","Feather","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_getTextSize$fontSize","getTextSize","textSizes","fontSize","iconSize","react__WEBPACK_IMPORTED_MODULE_0__","getTextColor","colors","text","getTextInputStyles","_ref$isClearable","isClearable","_ref$isDisabled","isDisabled","_ref$isInvalid","isInvalid","numberOfLines","hasLeftIcon","leftIcon","hasRightIcon","rightIcon","_ref2","isControlSize","borderRadius","controlBorderRadius","height","controlHeights","controlPaddings","textSize","medium","containerStyle","position","inputStyle","objectSpread","backgroundColor","background","content","borderColor","border","borderWidth","width","greyDark","danger","paddingVertical","leftContainerStyle","display","justifyContent","left","paddingHorizontal","zIndex","placeholderTextColor","muted","rightContainerStyle","right","TextInputBase","innerRef","_props$isClearable","_props$isDisabled","_props$onClear","onClear","value","textContentType","_props$onChangeText","onChangeText","placeholderTextColorProp","textInputProps","objectWithoutProperties","esm_extends","ref","editable","TouchableOpacity","onPress","Icon_web","React","TextInput_TextInputBase","getLabelStyles","rest","getTextStyles","textProps","accessibilityRole","Platform","OS","getFontWeight","fontWeights","fontWeight","textColors","textColor","_ref$align","align","weight","_ref$isItalic","isItalic","transform","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fontFamily","fontFamilies","textAlign","fontStyle","textTransform","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","small","large","overlay","greyLight","greyDefault","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","default","primary","secondary","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","fills","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","lineHeight","xxlarge","xlarge","paragraphSizes","xsmall","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","createContext","createTheme","deepMerge","ThemeProvider","_props$value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/9.9131372b.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { FormField, TextInput } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <p>{`Enriches a field in a form to contain label, description or error messages.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<FormField\\n  label=\\\"Label\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      FormField,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField label=\"Label\" description=\"Description for the field\" error=\"Error message\" mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={FormField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\ngetStyles={(FormFieldProps, Theme) => FormFieldStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`label = (\n  <View labelWrapperStyle>\n    <Label labelTextStyle>{label}</Label>\n  </View>\n)\n\n<View containerStyles>\n  {labelPosition === 'top' && label}\n  <View wrapperStyle>\n    {labelPosition === 'left' && label}\n    {children}\n    {labelPosition === 'right' && label}\n  </View>\n  <Text descriptionTextStyle>\n    {description}\n  </Text>\n  <View errorWrapperStyle>\n    <Text errorTextStyle>\n      {error}\n    </Text>\n  </View>\n</View>\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { FormFieldProps } from './FormField';\n\nexport interface FormFieldStyles {\n  containerStyles: ViewStyle;\n  descriptionTextStyle: TextStyle;\n  errorTextStyle: TextStyle;\n  errorWrapperStyle: ViewStyle;\n  labelTextStyle: TextStyle;\n  labelWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n}\n\nexport type GetFormFieldStyles = (\n  props: FormFieldProps,\n  theme: Theme,\n) => FormFieldStyles;\n\nexport const getFormFieldStyles: GetFormFieldStyles = (\n  { labelPosition },\n  theme,\n) => {\n  let labelWrapperStyle: ViewStyle = {};\n  let wrapperStyle: ViewStyle = {};\n\n  switch (labelPosition) {\n    case 'left':\n      labelWrapperStyle = { paddingRight: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    case 'right':\n      labelWrapperStyle = { paddingLeft: 8 };\n      wrapperStyle = { flexDirection: 'row', alignItems: 'center' };\n      break;\n    default:\n      labelWrapperStyle = { paddingBottom: 4 };\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return {\n    containerStyles: {},\n    descriptionTextStyle: { paddingBottom: 4 },\n    errorTextStyle: {},\n    errorWrapperStyle: {},\n    labelTextStyle: {},\n    labelWrapperStyle,\n    wrapperStyle,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Label, Text } from '../Typography';\nimport {\n  FormFieldStyles,\n  GetFormFieldStyles,\n  getFormFieldStyles,\n} from './FormField.styles';\n\nexport type FormFieldLabelPosition = 'top' | 'left' | 'right';\n\nexport interface FormFieldProps {\n  /**\n   * Error message of the field\n   */\n  error?: React.ReactNode;\n\n  /**\n   * Label of the field.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: FormFieldLabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: React.ReactNode;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<\n    GetFormFieldStyles,\n    DeepPartial<FormFieldStyles>\n  >;\n}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    getStyles,\n  } = props;\n  const theme = useTheme();\n\n  const {\n    containerStyles,\n    descriptionTextStyle,\n    errorTextStyle,\n    errorWrapperStyle,\n    labelTextStyle,\n    labelWrapperStyle,\n    wrapperStyle,\n  } = mergeStyles(\n    getFormFieldStyles,\n    getStyles,\n    theme.components.getFormFieldStyles,\n  )(props, theme);\n\n  const labelContent = (\n    <View style={labelWrapperStyle}>\n      <Label getStyles={() => ({ labelStyle: labelTextStyle })}>{label}</Label>\n    </View>\n  );\n\n  return (\n    <View style={containerStyles}>\n      {label && labelPosition === 'top' && labelContent}\n      <View style={wrapperStyle}>\n        {label && labelPosition === 'left' && labelContent}\n        {children}\n        {label && labelPosition === 'right' && labelContent}\n      </View>\n      {description && (\n        <Text\n          color=\"muted\"\n          getStyles={() => ({ textStyle: descriptionTextStyle })}\n        >\n          {description}\n        </Text>\n      )}\n      {error && (\n        <View style={errorWrapperStyle}>\n          <Text\n            color=\"danger\"\n            getStyles={() => ({ textStyle: errorTextStyle })}\n          >\n            {error}\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { useTheme } from '../../theme';\nimport { getTextColor, getTextSize } from '../Typography/Text.styles';\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({\n  name,\n  color = 'default',\n  size = 'medium',\n}: IconProps) => {\n  const theme = useTheme();\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n  const { fontSize = 16 } = getTextSize(theme.textSizes)(size);\n  const iconSize = typeof size === 'string' ? fontSize + 8 : size;\n\n  return (\n    <IconTag color={getTextColor(theme.colors.text)(color)} size={iconSize} />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { TextInputProps } from './TextInput';\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  placeholderTextColor: string;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport type GetTextInputStyles = (\n  props: TextInputProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  {\n    size = 'medium',\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    numberOfLines,\n    leftIcon,\n    rightIcon,\n  },\n  theme,\n) => {\n  const hasLeftIcon = !!leftIcon;\n  const hasRightIcon = !!(rightIcon || isClearable);\n\n  const {\n    borderRadius,\n    height,\n    paddingLeft,\n    paddingRight,\n    textSize,\n  } = isControlSize(size)\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        height: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size],\n        paddingRight: theme.controlPaddings[size],\n        textSize: theme.textSizes[size],\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n        textSize: theme.textSizes.medium,\n      };\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      backgroundColor: theme.colors.background.content,\n      borderColor: theme.colors.border.default,\n      borderRadius,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      height,\n      paddingLeft,\n      paddingRight,\n      width: '100%',\n      ...textSize,\n      ...(isDisabled\n        ? { backgroundColor: theme.colors.background.greyDark }\n        : {}),\n      ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n      ...(numberOfLines\n        ? {\n            height: numberOfLines * height,\n            paddingVertical: 16,\n          }\n        : {}),\n      ...(hasLeftIcon && { paddingLeft: 40 }),\n      ...(hasRightIcon && { paddingRight: 40 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n      zIndex: 1,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: 1,\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Icon } from '../Icon';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  /**\n   * Size of the text input.\n   * @default medium\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, text input is disabled\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, text input will be highlighted as invalid\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Icon placed on the left side\n   */\n  leftIcon?: React.ReactNode;\n\n  /**\n   * Icon placed on the left side\n   */\n  rightIcon?: React.ReactNode;\n\n  /**\n   * Called when clear icon is pressed.\n   */\n  onClear?: () => void;\n\n  /**\n   * When true, when value is not empty, a clear icon is displayed\n   */\n  isClearable?: boolean;\n\n  /** Use `ref` instead */\n  innerRef?: React.Ref<RNTextInput>;\n\n  /**\n   * Callback to get element styles.\n   */\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    getStyles,\n    innerRef,\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    leftIcon,\n    onClear = () => {\n      return;\n    },\n    rightIcon,\n    size = 'medium',\n    value,\n    textContentType,\n    onChangeText = () => {\n      return;\n    },\n    placeholderTextColor: placeholderTextColorProp,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    inputStyle,\n    placeholderTextColor,\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n  } = mergeStyles(getTextInputStyles, getStyles)(props, theme);\n\n  return (\n    <View style={containerStyle}>\n      {leftIcon && <View style={leftContainerStyle}>{leftIcon}</View>}\n      {/*\n      // @ts-ignore: name prop being passed for web */}\n      <RNTextInput\n        ref={innerRef}\n        style={inputStyle}\n        editable={!isDisabled}\n        placeholderTextColor={placeholderTextColorProp || placeholderTextColor}\n        name={textContentType}\n        value={value}\n        onChangeText={onChangeText}\n        textContentType={textContentType}\n        {...textInputProps}\n      />\n      {((value && isClearable) || rightIcon) && (\n        <View style={rightContainerStyle}>\n          {value && isClearable ? (\n            <TouchableOpacity\n              onPress={() => {\n                onChangeText('');\n                onClear();\n              }}\n            >\n              <Icon name=\"x\" color={theme.colors.text.default} />\n            </TouchableOpacity>\n          ) : (\n            rightIcon\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n","import { TextStyle } from 'react-native';\n\nimport { Theme } from '../../theme/Theme';\nimport { LabelProps } from './Label';\nimport { getTextStyles } from './Text.styles';\n\nexport interface LabelStyles {\n  labelStyle: TextStyle;\n}\n\nexport type GetLabelStyles = (props: LabelProps, theme: Theme) => LabelStyles;\n\nexport const getLabelStyles: GetLabelStyles = (props, theme) => {\n  const { getStyles, ...rest } = props;\n  const { textStyle } = getTextStyles(rest, theme);\n\n  return { labelStyle: textStyle };\n};\n","import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetLabelStyles, getLabelStyles, LabelStyles } from './Label.styles';\nimport { Text, TextProps } from './Text';\n\n// tslint:disable-next-line\n// @ts-ignore\nexport interface LabelProps extends TextProps {\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetLabelStyles, DeepPartial<LabelStyles>>;\n}\n\nexport const Label = (props: LabelProps) => {\n  const { children, getStyles, ...textProps } = props;\n  const theme = useTheme();\n\n  const { labelStyle } = mergeStyles(\n    getLabelStyles,\n    getStyles,\n    theme.components.getLabelStyles,\n  )(props, theme);\n\n  return (\n    <Text\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      getStyles={() => ({ textStyle: labelStyle })}\n      {...textProps}\n    >\n      {children}\n    </Text>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextProps } from './Text';\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (props: TextProps, theme: Theme) => TextStyles;\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  {\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isItalic = false,\n    transform,\n  },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: theme.fontFamilies.text,\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextProps extends RNTextProps {\n  /**\n   * Size of the text.\n   * @default \"medium\"\n   */\n  size?: TextSize;\n\n  /**\n   * Color of the text.\n   * @default \"default\"\n   */\n  color?: TextColor;\n\n  /**\n   * Alignment of the text.\n   * @default \"left\"\n   */\n  align?: TextAlign;\n\n  /**\n   * Text transformations.\n   */\n  transform?: TextTransform;\n\n  /**\n   * Weight of the text.\n   * @default textSize.fontWeight\n   */\n  weight?: FontWeight;\n\n  /**\n   * When true, displays the text in italics.\n   * @default false\n   */\n  isItalic?: boolean;\n\n  /** Text content */\n  children?: React.ReactNode;\n\n  /** Callback to get element styles. */\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    size = 'medium',\n    align = 'left',\n    weight,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(props, theme);\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.teal.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetLabelStyles } from '../components/Typography/Label.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { GetWheelPickerStyles } from '../components/WheelPicker/WheelPicker.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getLabelStyles?: GetLabelStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getWheelPickerStyles?: GetWheelPickerStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}