{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Divider/Divider.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/isControlSize.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Box","Divider","___WEBPACK_IMPORTED_MODULE_5__","paddingVertical","___WEBPACK_IMPORTED_MODULE_6__","of","parentName","className","isMDXComponent","getDividerColor","borderColors","borderColor","dividerScale","large","medium","small","getDividerStyles","theme","_ref$size","size","color","_ref$position","position","backgroundColor","colors","border","dividerSize","isControlSize","styleMap","horizontal","height","width","vertical","dividerStyle","getStyles","useTheme","mergeStyles","react","View","style","__webpack_require__","d","__webpack_exports__"],"mappings":"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","file":"static/js/28.7e8dcbd4.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Box, Divider } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"divider\"\n    }}>{`Divider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Box paddingVertical={40}>\\n  <Divider />\\n</Box>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Box,\n      Divider\n    }} mdxType=\"Playground\">\n  <Box paddingVertical={40} mdxType=\"Box\">\n    <Divider mdxType=\"Divider\" />\n  </Box>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Divider} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`getStyles`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`DividerStyles {\n  dividerStyle: TextStyle;\n}\n\ngetStyles={(DividerProps, Theme) => DividerStyles}\n`}</code></pre>\n    <p>{`Markup`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<View dividerStyle />\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { TextStyle } from 'react-native';\n\nimport {\n  BorderColor,\n  BorderColors,\n  ControlSize,\n  Theme,\n} from '../../theme/Theme';\nimport { isControlSize } from '../../utils/isControlSize';\nimport { DividerProps } from './Divider';\n\nexport interface DividerStyles {\n  dividerStyle: TextStyle;\n}\n\nexport type DividerPosition = 'horizontal' | 'vertical';\n\nexport type GetDividerStyles = (\n  props: DividerProps,\n  theme: Theme,\n) => Partial<DividerStyles>;\n\nexport const getDividerColor = (borderColors: BorderColors) => (\n  borderColor: BorderColor,\n) => {\n  // @ts-ignore\n  const presetColor = borderColors[borderColor] as string | undefined;\n\n  return presetColor || borderColor;\n};\n\nconst dividerScale: { [size in ControlSize]: number } = {\n  large: 3,\n  medium: 2,\n  small: 1,\n};\n\nexport const getDividerStyles: GetDividerStyles = (\n  { size = 'small', color, position = 'horizontal' },\n  theme,\n) => {\n  const backgroundColor = getDividerColor(theme.colors.border)(\n    color || theme.colors.border.default,\n  );\n\n  const dividerSize = isControlSize(size) ? dividerScale[size] : size;\n\n  const styleMap = {\n    horizontal: {\n      backgroundColor,\n      height: dividerSize,\n      width: '100%',\n    },\n    vertical: {\n      backgroundColor,\n      height: '100%',\n      width: dividerSize,\n    },\n  };\n\n  return {\n    dividerStyle: position ? styleMap[position] : styleMap.horizontal,\n  };\n};\n","import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { BorderColor, ControlSize, useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport {\n  DividerPosition,\n  GetDividerStyles,\n  getDividerStyles,\n} from './Divider.styles';\n\nexport interface DividerProps {\n  /**\n   * Size of the divider.\n   * @default small\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Color of the divider.\n   * @default colors.border.default\n   */\n  color?: BorderColor | string;\n\n  /**\n   * Positioning of the divier\n   * @default \"horizontal\"\n   */\n  position?: DividerPosition;\n\n  /** Callback to get element styles. */\n  getStyles?: GetDividerStyles;\n}\n\nexport const Divider = (props: DividerProps) => {\n  const { getStyles } = props;\n  const theme = useTheme();\n\n  const { dividerStyle } = mergeStyles(\n    getDividerStyles,\n    getStyles,\n    theme.components.getDividerStyles,\n  )(props, theme);\n\n  return <View style={dividerStyle} />;\n};\n","import { ControlSize } from '../theme';\n\nexport const isControlSize = (\n  size: ControlSize | number,\n): size is ControlSize => {\n  if (typeof size === 'number') return false;\n\n  return true;\n};\n"],"sourceRoot":""}