{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Box.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Spacing.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Layout/Spacing.tsx"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_theme","shapeMapping","circle","borderRadius","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","propToFn","elevation","theme","elevations","shape","_shape","_x","apply","this","arguments","toString","Box","props","children","propStyle","style","testID","viewStyles","_objectWithoutProperties2","default","useTheme","transformedStyles","pureStyles","prop","styleFn","push","createElement","View","_react2","_interopRequireDefault","_docz","_Spacing","layoutProps","MDXLayout","MDXContent","_ref","components","mdx","_extends2","mdxType","id","parentName","Playground","__position","__code","__scope","Props","Spacing","paddingVertical","paddingHorizontal","height","width","backgroundColor","isMDXComponent","_Box","hasGrid","margin","marginBottom","marginEnd","marginHorizontal","marginLeft","marginRight","marginStart","marginTop","marginVertical","padding","paddingBottom","paddingEnd","paddingLeft","paddingRight","paddingStart","paddingTop","marshalledProps","_objectSpread2","gridPointMultiplier"],"mappings":"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","file":"static/js/31.2641f322.js","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle } from 'react-native';\n\nimport { Theme, useTheme } from '../../theme';\n\nexport const BASE_BORDER_RADII = 4;\n\nexport type Shape =\n  | 'circle'\n  | 'pill'\n  | 'rounded'\n  | 'roundedBottom'\n  | 'roundedLeft'\n  | 'roundedRight'\n  | 'roundedTop'\n  | 'square';\n\nexport interface BoxProps extends ViewStyle {\n  style?: ViewStyle;\n  children?: React.ReactNode;\n\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\n  shape?: Shape;\n}\n\nexport const shapeMapping: {\n  [shape: string]: ViewStyle;\n} = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: BASE_BORDER_RADII,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderBottomRightRadius: BASE_BORDER_RADII,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: BASE_BORDER_RADII,\n    borderTopLeftRadius: BASE_BORDER_RADII,\n  },\n  roundedRight: {\n    borderBottomRightRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  roundedTop: {\n    borderTopLeftRadius: BASE_BORDER_RADII,\n    borderTopRightRadius: BASE_BORDER_RADII,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nconst propToFn = {\n  elevation: (elevation: 0 | 1 | 2 | 3 | 4, theme: Theme) => {\n    return theme.elevations[elevation];\n  },\n  shape: (shape: Shape) => shapeMapping[shape],\n};\n\nexport const Box = (props: BoxProps) => {\n  const { children, style: propStyle, testID, ...viewStyles } = props;\n  const theme = useTheme();\n  const transformedStyles = [];\n  const pureStyles = {};\n\n  for (const prop in viewStyles) {\n    if (prop) {\n      // @ts-ignore\n      const styleFn = propToFn[prop];\n\n      if (styleFn) {\n        // @ts-ignore\n        const style = styleFn(viewStyles[prop], theme);\n\n        transformedStyles.push(style);\n      } else {\n        // @ts-ignore\n        pureStyles[prop] = viewStyles[prop];\n      }\n    }\n  }\n\n  return (\n    <View testID={testID} style={[pureStyles, transformedStyles, propStyle]}>\n      {children}\n    </View>\n  );\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Spacing } from './Spacing';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"spacing\"\n    }}>{`Spacing`}</h1>\n    <p><inlineCode parentName=\"p\">{`Spacing`}</inlineCode>{` is the same as `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{`; The difference are in numeric props which are multiplied by 8 to provide consistent 8px grid spacing: `}<inlineCode parentName=\"p\">{`8px`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`16px`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`24px`}</inlineCode>{`...`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Spacing\\n  paddingVertical={10}\\n  paddingHorizontal={10}\\n  height={33}\\n  width={33}\\n  backgroundColor=\\\"#67c6bb\\\"\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Spacing\n    }} mdxType=\"Playground\">\n  <Spacing paddingVertical={10} paddingHorizontal={10} height={33} width={33} backgroundColor=\"#67c6bb\" mdxType=\"Spacing\" />\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\n\nimport { Box, BoxProps } from './Box';\n\nexport type GridScale =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18;\n\nconst DEFAULT_GRD_POINT_MULTPLIER = 8;\n\nexport interface SpacingProps extends BoxProps {\n  gridPointMultiplier?: number;\n  height?: GridScale;\n\n  margin?: GridScale;\n  marginBottom?: GridScale;\n  marginEnd?: GridScale;\n  marginHorizontal?: GridScale;\n  marginLeft?: GridScale;\n  marginRight?: GridScale;\n  marginStart?: GridScale;\n  marginTop?: GridScale;\n  marginVertical?: GridScale;\n\n  padding?: GridScale;\n  paddingBottom?: GridScale;\n  paddingEnd?: GridScale;\n  paddingHorizontal?: GridScale;\n  paddingLeft?: GridScale;\n  paddingRight?: GridScale;\n  paddingStart?: GridScale;\n  paddingTop?: GridScale;\n  paddingVertical?: GridScale;\n}\n\nconst hasGrid = {\n  height: true,\n\n  margin: true,\n  marginBottom: true,\n  marginEnd: true,\n  marginHorizontal: true,\n  marginLeft: true,\n  marginRight: true,\n  marginStart: true,\n  marginTop: true,\n  marginVertical: true,\n\n  padding: true,\n  paddingBottom: true,\n  paddingEnd: true,\n  paddingHorizontal: true,\n  paddingLeft: true,\n  paddingRight: true,\n  paddingStart: true,\n  paddingTop: true,\n  paddingVertical: true,\n};\n\nexport const Spacing = (props: SpacingProps) => {\n  const marshalledProps = { ...props };\n\n  for (const prop in props) {\n    // @ts-ignore\n    if (hasGrid[prop]) {\n      // @ts-ignore\n      marshalledProps[prop] =\n        // @ts-ignore\n        props[prop] *\n        (props.gridPointMultiplier || DEFAULT_GRD_POINT_MULTPLIER);\n    }\n  }\n\n  return <Box {...marshalledProps} />;\n};\n"],"sourceRoot":""}