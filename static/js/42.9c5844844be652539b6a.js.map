{"version":3,"sources":["webpack:///./src/components/Positioner/Positioner.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_docz","_reactPowerplug","_","_Button","_Layout","_Typography","layoutProps","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_ref","children","document","body","style","height","position","createElement","_this$props","components","_objectWithoutProperties2","MDXTag","name","Layout","_extends2","id","parentName","Playground","__position","__code","__scope","Toggle","Positioner","Button","Box","Spacing","Text","_ref2","on","toggle","isVisible","onClose","isDynamicContent","content","width","isFullWidth","parentHeight","getStyles","theme","positionerStyle","modalContainerStyle","onPress","title","paddingBottom","zIndex","flexDirection","justifyContent","_ref3","isInline","_ref4","_ref5","paddingVertical","_ref6","_ref7","paddingTop","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","flex","_ref19","_ref20","PropsTable","of","React","Component"],"mappings":"ytBACEA,EAAAC,EAAAC,EAAA,kCACAC,EAAAD,EAAA,4CACAE,EAAAF,EAAA,uCACFG,EAAAH,EAAA,8DACAI,EAAAJ,EAAA,wCACAK,EAAAL,EAAA,oCACAM,EAAAN,EAAA,oCACAO,EAAAP,EAAA,wCAEMQ,EAAc,GAGCC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,SAAAC,EAAAC,SAAAC,KAAAL,IACjBE,GAAA,EAAAI,EAAAF,SAAAC,MAAA,EAAAE,EAAAH,SAAAJ,GAAAQ,KAAAH,KAAMJ,KACDQ,OAAS,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAGnB,OAFAC,SAASC,KAAKC,MAAMC,OAAS,UAC7BH,SAASC,KAAKC,MAAME,SAAW,WACxB3B,EAAAe,QAAAa,cAAA,WAAMN,IALMT,2EAQV,IAAAgB,EAC0Bb,KAAKJ,MAA9BkB,EADDD,EACCC,WAAelB,GADhB,EAAAmB,EAAAhB,SAAAc,EAAA,gBAGP,OAAO7B,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CACEC,KAAK,UACLC,OAAQlB,KAAKI,OAAQV,aAAa,EAAAyB,EAAApB,SAAc,GAAIL,EAAaE,GACjEkB,WAAYA,GAGzB9B,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,eAAvD,cACApC,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,IAAIH,WAAYA,GAA7B,wFAAkI9B,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,aAAaH,WAAYA,EAAYO,WAAW,KAA7D,YAClIrC,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,UAAvD,SACApC,EAAAe,QAAAa,cAACxB,EAAAkC,WAAD,CAAYC,WAAY,EAAGC,OAAQ,m6BAAw6BC,QAAS,CAAC7B,MAAOI,KAAOA,KAAKJ,MAAQA,EAAM8B,gBAAOC,wBAAWC,gBAAOC,UAAIC,kBAAQC,cACzhC/C,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAM,GAAA,IAAGC,EAAHD,EAAGC,GAAIC,EAAPF,EAAOE,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTG,kBAAkB,EAClB1B,SAAS,YACT2B,QAAS,SAAA1C,GAAK,OACZZ,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKU,MAAO,IAAK7B,OAAQ,KACvB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,+MAQJS,aAAa,EACbC,aAAc,IAGdC,UAAW,SAAC9C,EAAO+C,GAAR,MAAmB,CAC5BC,gBAAiB,GACjBC,oBAAqB,MAGvB7D,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,cAKvC/D,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,aAAvD,YACApC,EAAAe,QAAAa,cAACxB,EAAAkC,WAAD,CAAYC,WAAY,EAAGC,OAAQ,0hLAAukLC,QAAS,CAAC7B,MAAOI,KAAOA,KAAKJ,MAAQA,EAAM8B,gBAAOC,wBAAWC,gBAAOC,UAAIC,kBAAQC,cACxrL/C,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAASkB,cAAe,EAAGC,OAAQ,GACjCjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA0B,GAAA,IAAGnB,EAAHmB,EAAGnB,GAAIC,EAAPkB,EAAOlB,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,YACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,iBAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA4B,GAAA,IAAGrB,EAAHqB,EAAGrB,GAAIC,EAAPoB,EAAOpB,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,MACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,WAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA6B,GAAA,IAAGtB,EAAHsB,EAAGtB,GAAIC,EAAPqB,EAAOrB,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,WACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,kBAMpD/D,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAAS0B,gBAAiB,EAAGP,OAAQ,GACnCjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA+B,GAAA,IAAGxB,EAAHwB,EAAGxB,GAAIC,EAAPuB,EAAOvB,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,OACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKU,MAAO,IAAK7B,OAAQ,KACvB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,YAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAgC,GAAA,IAAGzB,EAAHyB,EAAGzB,GAAIC,EAAPwB,EAAOxB,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,QACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKU,MAAO,IAAK7B,OAAQ,KACvB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,eAMhD/D,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAAS6B,WAAY,EAAGV,OAAQ,GAC9BjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAkC,GAAA,IAAG3B,EAAH2B,EAAG3B,GAAIC,EAAP0B,EAAO1B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,eACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,oBAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAmC,GAAA,IAAG5B,EAAH4B,EAAG5B,GAAIC,EAAP2B,EAAO3B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,SACT8B,aAAc,KACdH,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,8CAIJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,cAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAoC,GAAA,IAAG7B,EAAH6B,EAAG7B,GAAIC,EAAP4B,EAAO5B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXG,QAASF,EACTvB,SAAS,cACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAMU,MAAO,IAAK7B,OAAQ,KACxB1B,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,sBAOpD/D,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,8BAAvD,6BACApC,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,IAAIH,WAAYA,GAA7B,OAAiD9B,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,aAAaH,WAAYA,EAAYO,WAAW,KAA7D,oBAAjD,2GACArC,EAAAe,QAAAa,cAACxB,EAAAkC,WAAD,CAAYC,WAAY,EAAGC,OAAQ,kjLAA+lLC,QAAS,CAAC7B,MAAOI,KAAOA,KAAKJ,MAAQA,EAAM8B,gBAAOC,wBAAWC,gBAAOC,UAAIC,kBAAQC,cAChtL/C,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAASkB,cAAe,EAAGC,OAAQ,GACjCjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAqC,GAAA,IAAG9B,EAAH8B,EAAG9B,GAAIC,EAAP6B,EAAO7B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,YACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,iBAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAsC,GAAA,IAAG/B,EAAH+B,EAAG/B,GAAIC,EAAP8B,EAAO9B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,MACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,WAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAuC,GAAA,IAAGhC,EAAHgC,EAAGhC,GAAIC,EAAP+B,EAAO/B,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,WACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,kBAMpD/D,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAAS0B,gBAAiB,EAAGP,OAAQ,GACnCjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAwC,GAAA,IAAGjC,EAAHiC,EAAGjC,GAAIC,EAAPgC,EAAOhC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,OACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,YAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAAyC,GAAA,IAAGlC,EAAHkC,EAAGlC,GAAIC,EAAPiC,EAAOjC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,QACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,eAMhD/D,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAAS6B,WAAY,EAAGV,OAAQ,GAC9BjE,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,CAAKqB,cAAc,MAAMC,eAAe,iBACtCnE,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA0C,GAAA,IAAGnC,EAAHmC,EAAGnC,GAAIC,EAAPkC,EAAOlC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,eACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,oBAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA2C,GAAA,IAAGpC,EAAHoC,EAAGpC,GAAIC,EAAPmC,EAAOnC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,SACT8B,aAAc,KACdH,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,8CAIJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,cAI9C/D,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA4C,GAAA,IAAGrC,EAAHqC,EAAGrC,GAAIC,EAAPoC,EAAOpC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXI,kBAAgB,EAChBD,QAASF,EACTvB,SAAS,cACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNAMJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQmB,UAAQ,EAACN,MAAM,sBAOpD/D,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,+BAAvD,8BACApC,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,IAAIH,WAAYA,GAA7B,kGAA4I9B,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,aAAaH,WAAYA,EAAYO,WAAW,KAA7D,eAA5I,aACArC,EAAAe,QAAAa,cAACxB,EAAAkC,WAAD,CAAYC,WAAY,EAAGC,OAAQ,k8CAA68CC,QAAS,CAAC7B,MAAOI,KAAOA,KAAKJ,MAAQA,EAAM8B,gBAAOC,wBAAWC,gBAAOC,UAAIC,kBAAQC,cAC9jD/C,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAASoB,cAAc,OACrBlE,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAASyC,KAAM,GACbvF,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA8C,GAAA,IAAGvC,EAAHuC,EAAGvC,GAAIC,EAAPsC,EAAOtC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXO,aAAW,EACXJ,QAASF,EACTvB,SAAS,WACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,eAKvC/D,EAAAe,QAAAa,cAACpB,EAAAsC,QAAD,CAASyC,KAAM,GACbvF,EAAAe,QAAAa,cAACvB,EAAAqC,OAAD,KACG,SAAA+C,GAAA,IAAGxC,EAAHwC,EAAGxC,GAAIC,EAAPuC,EAAOvC,OAAP,OACClD,EAAAe,QAAAa,cAACtB,EAAAqC,WAAD,CACEQ,UAAWF,EACXO,aAAW,EACXJ,QAASF,EACTvB,SAAS,eACT2B,QAAS,kBACPtD,EAAAe,QAAAa,cAACpB,EAAAqC,IAAD,KACE7C,EAAAe,QAAAa,cAACnB,EAAAsC,KAAD,gNASJ/C,EAAAe,QAAAa,cAACrB,EAAAqC,OAAD,CAAQkB,QAASZ,EAAQa,MAAM,iBAO3C/D,EAAAe,QAAAa,cAACzB,EAAA6B,OAAD,CAAQC,KAAK,KAAKH,WAAYA,EAAYlB,MAAO,CAACwB,GAAK,UAAvD,SACApC,EAAAe,QAAAa,cAACxB,EAAAsF,WAAD,CAAYC,GAAIhD,uBA7bwBiD,UAAMC","file":"static/js/42.33312b90.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport { Toggle } from 'react-powerplug';\nimport { Positioner } from '.';\nimport { Button } from '../Button';\nimport { Box, Spacing } from '../Layout';\nimport { Text } from '../Typography';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = ({ children }) => {\n  document.body.style.height = 'initial';\n  document.body.style.position = 'relative';\n  return <div>{children}</div>;\n}\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             Layout={this.layout} layoutProps={Object.assign({}, layoutProps, props)}\n             components={components}>\n\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"positioner\"}}>{`Positioner`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`A base component for manipulating the position of the element on the screen. Used by `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Popover`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<Toggle>\\n  {({ on, toggle }) => (\\n    <Positioner\\n      isVisible={on}\\n      onClose={toggle}\\n      isDynamicContent={false}\\n      position=\\\"top-right\\\"\\n      content={props => (\\n        <Box width={200} height={200}>\\n          <Text>\\n            Content that can be anything. By default it has no styling at all.\\n            You can use `Popover` that comes with predefined styles.\\n            Positioner is used as a base for `Popovers`, `Tooltips`,\\n            `DropdownMenus`\\n          </Text>\\n        </Box>\\n      )}\\n      isFullWidth={false}\\n      parentHeight={1000}\\n      // Use this prop to specify the position of a component u want to wrap with the positioner\\n      // targetMeasurements={{}}\\n      getStyles={(props, theme) => ({\\n        positionerStyle: {},\\n        modalContainerStyle: {},\\n      })}\\n    >\\n      <Button onPress={toggle} title=\\\"Usage\\\" />\\n    </Positioner>\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,Positioner,Button,Box,Spacing,Text}}>\n  <Toggle>\n    {({ on, toggle }) => (\n      <Positioner\n        isVisible={on}\n        onClose={toggle}\n        isDynamicContent={false}\n        position=\"top-right\"\n        content={props => (\n          <Box width={200} height={200}>\n            <Text>\n              Content that can be anything. By default it has no styling at all.\n              You can use `Popover` that comes with predefined styles.\n              Positioner is used as a base for `Popovers`, `Tooltips`,\n              `DropdownMenus`\n            </Text>\n          </Box>\n        )}\n        isFullWidth={false}\n        parentHeight={1000}\n        // Use this prop to specify the position of a component u want to wrap with the positioner\n        // targetMeasurements={{}}\n        getStyles={(props, theme) => ({\n          positionerStyle: {},\n          modalContainerStyle: {},\n        })}\n      >\n        <Button onPress={toggle} title=\"Usage\" />\n      </Positioner>\n    )}\n  </Toggle>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"variants\"}}>{`Variants`}</MDXTag>\n<Playground __position={1} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box width={200} height={200}>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{props: this ? this.props : props,Toggle,Positioner,Button,Box,Spacing,Text}}>\n  <Spacing paddingBottom={8} zIndex={1}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top-right\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"top-left\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection=\"row\" justifyContent=\"space-between\">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position=\"left\"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Left\" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          onClose={toggle}\n          position=\"right\"\n          content={() => (\n            <Box width={200} height={200}>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Right\" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n  <Spacing paddingTop={8} zIndex={3}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom\"\n            parentHeight={2480}\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>This has parent height set to 2480</Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            onClose={toggle}\n            position=\"bottom-left\"\n            content={() =>\n              <Box  width={200} height={200}>\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"dynamically-sized-content\"}}>{`Dynamically sized content`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Add `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isDynamicContent`}</MDXTag>{` to props to give time for Positioner to calculate its layout of dynamic content prior to displaying it`}</MDXTag>\n<Playground __position={2} __code={'<Spacing paddingBottom={8} zIndex={1}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Top left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingVertical={8} zIndex={2}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>\\n<Spacing paddingTop={8} zIndex={3}>\\n  <Box flexDirection=\\\"row\\\" justifyContent=\\\"space-between\\\">\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom right\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom\\\"\\n          parentHeight={2480}\\n          content={() => (\\n            <Box>\\n              <Text>This has parent height set to 2480</Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isDynamicContent\\n          onClose={toggle}\\n          position=\\\"bottom-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} isInline title=\\\"Bottom left\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Box>\\n</Spacing>'} __scope={{props: this ? this.props : props,Toggle,Positioner,Button,Box,Spacing,Text}}>\n  <Spacing paddingBottom={8} zIndex={1}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top-right\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"top-left\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Top left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n<Spacing paddingVertical={8} zIndex={2}>\n  <Box flexDirection=\"row\" justifyContent=\"space-between\">\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position=\"left\"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Left\" />\n        </Positioner>\n      )}\n    </Toggle>\n    <Toggle>\n      {({ on, toggle }) => (\n        <Positioner\n          isVisible={on}\n          isDynamicContent\n          onClose={toggle}\n          position=\"right\"\n          content={() => (\n            <Box>\n              <Text>\n                Content that can be anything. By default it has no styling at\n                all. You can use `Popover` that comes with predefined styles.\n                Positioner is used as a base for `Popovers`, `Tooltips`,\n                `DropdownMenus`\n              </Text>\n            </Box>\n          )}\n        >\n          <Button onPress={toggle} isInline title=\"Right\" />\n        </Positioner>\n      )}\n    </Toggle>\n  </Box>\n</Spacing>\n  <Spacing paddingTop={8} zIndex={3}>\n    <Box flexDirection=\"row\" justifyContent=\"space-between\">\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom right\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom\"\n            parentHeight={2480}\n            content={() =>\n              <Box >\n                <Text>This has parent height set to 2480</Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isDynamicContent\n            onClose={toggle}\n            position=\"bottom-left\"\n            content={() =>\n              <Box >\n                <Text>\n                  Content that can be anything. By default it has no styling at all. You can use `Popover` that comes with predefined styles. Positioner is used as a base for `Popovers`, `Tooltips`, `DropdownMenus`\n                </Text>\n              </Box>\n            }\n          >\n            <Button onPress={toggle} isInline title=\"Bottom left\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Box>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"positioner-with-full-width\"}}>{`Positioner with full width`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`On Mobile sometimes we want the content to stretch full width of the window. There is the prop `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`isFullWidth`}</MDXTag>{` for that`}</MDXTag>\n<Playground __position={3} __code={'<Spacing flexDirection=\\\"row\\\">\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"top-left\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n  <Spacing flex={1}>\\n    <Toggle>\\n      {({ on, toggle }) => (\\n        <Positioner\\n          isVisible={on}\\n          isFullWidth\\n          onClose={toggle}\\n          position=\\\"bottom-right\\\"\\n          content={() => (\\n            <Box>\\n              <Text>\\n                Content that can be anything. By default it has no styling at\\n                all. You can use `Popover` that comes with predefined styles.\\n                Positioner is used as a base for `Popovers`, `Tooltips`,\\n                `DropdownMenus`\\n              </Text>\\n            </Box>\\n          )}\\n        >\\n          <Button onPress={toggle} title=\\\"Bottom\\\" />\\n        </Positioner>\\n      )}\\n    </Toggle>\\n  </Spacing>\\n</Spacing>'} __scope={{props: this ? this.props : props,Toggle,Positioner,Button,Box,Spacing,Text}}>\n  <Spacing flexDirection=\"row\">\n    <Spacing flex={1}>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isFullWidth\n            onClose={toggle}\n            position=\"top-left\"\n            content={() => (\n              <Box>\n                <Text>\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>\n            )}\n          >\n            <Button onPress={toggle} title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Spacing>\n    <Spacing flex={1}>\n      <Toggle>\n        {({ on, toggle }) => (\n          <Positioner\n            isVisible={on}\n            isFullWidth\n            onClose={toggle}\n            position=\"bottom-right\"\n            content={() => (\n              <Box>\n                <Text>\n                  Content that can be anything. By default it has no styling at\n                  all. You can use `Popover` that comes with predefined styles.\n                  Positioner is used as a base for `Popovers`, `Tooltips`,\n                  `DropdownMenus`\n                </Text>\n              </Box>\n            )}\n          >\n            <Button onPress={toggle} title=\"Bottom\" />\n          </Positioner>\n        )}\n      </Toggle>\n    </Spacing>\n  </Spacing>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Positioner} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}