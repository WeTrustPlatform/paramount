{"version":3,"sources":["webpack:///./src/components/Modal/Modal.mdx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_reactPowerplug","_docz","_","_Button","_Layout","_Typography","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","name","id","parentName","Playground","__position","__code","__scope","Toggle","Modal","Button","Box","Text","initial","_ref","on","set","toggle","visible","onRequestClose","height","onPress","title","_ref2","outerOn","outerSet","_ref3","innerOn","innerSet","_ref4","useHistory","_ref5","PropsTable","of","React","Component"],"mappings":"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","file":"static/js/33.d8c476f7.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Toggle } from 'react-powerplug';\nimport { Playground, PropsTable } from 'docz';\nimport { Modal } from '.';\nimport { Button } from '../Button';\nimport { Box } from '../Layout';\nimport { Text } from '../Typography';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"modal\"}}>{`Modal`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Modal covers the full screen. For a prompt/small version of modal, use `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Dialog`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle, set }) => (\\n    <Box>\\n      <Modal visible={on} onRequestClose={() => set(false)}>\\n        <Box height={1800}>\\n          <Text>Put any content in the modal</Text>\\n          <Button onPress={() => set(false)} title=\\\"Close button one\\\" />\\n          <Button onPress={() => set(false)} title=\\\"Close button two\\\" />\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => set(true)} title=\\\"Open modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,Modal,Button,Box,Text}}>\n  <Toggle initial={false}>\n    {({ on, toggle, set }) => (\n      <Box>\n        <Modal visible={on} onRequestClose={() => set(false)}>\n          <Box height={1800}>\n            <Text>Put any content in the modal</Text>\n            <Button onPress={() => set(false)} title=\"Close button one\" />\n            <Button onPress={() => set(false)} title=\"Close button two\" />\n          </Box>\n        </Modal>\n        <Button onPress={() => set(true)} title=\"Open modal\" />\n      </Box>\n    )}\n  </Toggle>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"nested\"}}>{`Nested`}</MDXTag>\n<Playground __position={1} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal visible={outerOn} onRequestClose={() => outerSet(false)}>\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,Modal,Button,Box,Text}}>\n  <Toggle initial={false}>\n    {({ on: outerOn, set: outerSet }) => (\n      <Box>\n        <Modal visible={outerOn} onRequestClose={() => outerSet(false)}>\n          <Box height={1800}>\n            <Text>Outer modal</Text>\n            <Button\n              onPress={() => outerSet(false)}\n              title=\"Close outer modal button one\"\n            />\n            <Button\n              onPress={() => outerSet(false)}\n              title=\"Close outer modal button two\"\n            />\n            <Toggle initial={false}>\n              {({ on: innerOn, set: innerSet }) => (\n                <Box>\n                  <Modal\n                    visible={innerOn}\n                    onRequestClose={() => innerSet(false)}\n                  >\n                    <Box height={1800}>\n                      <Text>Inner modal</Text>\n                      <Button\n                        onPress={() => innerSet(false)}\n                        title=\"Close inner modal button one\"\n                      />\n                      <Button\n                        onPress={() => innerSet(false)}\n                        title=\"Close inner modal button two\"\n                      />\n                    </Box>\n                  </Modal>\n                  <Button\n                    onPress={() => innerSet(true)}\n                    title=\"Open inner modal\"\n                  />\n                </Box>\n              )}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" />\n      </Box>\n    )}\n  </Toggle>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"using-browser-history\"}}>{`Using browser history`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`By using `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useHistory`}</MDXTag>{` prop it will mimic Android's back button behavior on web which closes modals. On RN, this will have no effect and will use a regular `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Modal`}</MDXTag>{`. Works in nested modals as well.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Note: Uses history `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state`}</MDXTag>{` to manipulate modal state`}</MDXTag>\n<Playground __position={2} __code={'<Toggle initial={false}>\\n  {({ on: outerOn, set: outerSet }) => (\\n    <Box>\\n      <Modal\\n        useHistory\\n        visible={outerOn}\\n        onRequestClose={() => outerSet(false)}\\n      >\\n        <Box height={1800}>\\n          <Text>Outer modal</Text>\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button one\\\"\\n          />\\n          <Button\\n            onPress={() => outerSet(false)}\\n            title=\\\"Close outer modal button two\\\"\\n          />\\n          <Toggle initial={false}>\\n            {({ on: innerOn, set: innerSet }) => (\\n              <Box>\\n                <Modal\\n                  visible={innerOn}\\n                  useHistory\\n                  onRequestClose={() => innerSet(false)}\\n                >\\n                  <Box height={1800}>\\n                    <Text>Inner modal</Text>\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button one\\\"\\n                    />\\n                    <Button\\n                      onPress={() => innerSet(false)}\\n                      title=\\\"Close inner modal button two\\\"\\n                    />\\n                  </Box>\\n                </Modal>\\n                <Button\\n                  onPress={() => innerSet(true)}\\n                  title=\\\"Open inner modal\\\"\\n                />\\n              </Box>\\n            )}\\n          </Toggle>\\n        </Box>\\n      </Modal>\\n      <Button onPress={() => outerSet(true)} title=\\\"Open outer modal\\\" />\\n    </Box>\\n  )}\\n</Toggle>'} __scope={{props: this ? this.props : props,Toggle,Modal,Button,Box,Text}}>\n  <Toggle initial={false}>\n    {({ on: outerOn, set: outerSet }) => (\n      <Box>\n        <Modal\n          useHistory\n          visible={outerOn}\n          onRequestClose={() => outerSet(false)}\n        >\n          <Box height={1800}>\n            <Text>Outer modal</Text>\n            <Button\n              onPress={() => outerSet(false)}\n              title=\"Close outer modal button one\"\n            />\n            <Button\n              onPress={() => outerSet(false)}\n              title=\"Close outer modal button two\"\n            />\n            <Toggle initial={false}>\n              {({ on: innerOn, set: innerSet }) => (\n                <Box>\n                  <Modal\n                    visible={innerOn}\n                    useHistory\n                    onRequestClose={() => innerSet(false)}\n                  >\n                    <Box height={1800}>\n                      <Text>Inner modal</Text>\n                      <Button\n                        onPress={() => innerSet(false)}\n                        title=\"Close inner modal button one\"\n                      />\n                      <Button\n                        onPress={() => innerSet(false)}\n                        title=\"Close inner modal button two\"\n                      />\n                    </Box>\n                  </Modal>\n                  <Button\n                    onPress={() => innerSet(true)}\n                    title=\"Open inner modal\"\n                  />\n                </Box>\n              )}\n            </Toggle>\n          </Box>\n        </Modal>\n        <Button onPress={() => outerSet(true)} title=\"Open outer modal\" />\n      </Box>\n    )}\n  </Toggle>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"modal-props\"}}>{`Modal Props`}</MDXTag>\n<PropsTable of={Modal} />\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}