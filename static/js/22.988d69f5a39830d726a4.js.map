{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePicker.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/NativePickerItem.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Pickers/PickerButton.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_reactPowerplug","_NativePicker","_NativePickerItem","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","State","NativePicker","NativePickerItem","initial","value","_ref2","state","setState","selectedValue","onValueChange","itemValue","itemIndex","size","getStyles","theme","pickerStyle","itemStyle","label","isMDXComponent","React","_interopRequireWildcard","_reactNative","_theme","_mergeStyles2","_PickerButton","NativePickerBase","_props$size","innerRef","pickerProps","useTheme","_mergeStyles","mergeStyles","getPickerButtonStyles","createElement","Picker","ref","style","forwardRef","RNPicker","Item","getPickerButtonVariables","base","borderColor","colors","border","borderWidth","disabled","backgroundColor","background","greyDark","focus","invalid","danger","placeholderTextColor","text","muted","sizes","small","borderRadius","controlBorderRadius","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","pickerStylesProps","pickerVariables","controlSizeStyles","textSizeStyles","textSizes","containerStyle","content","position","_objectSpread2","width","rightContainerStyle","alignItems","display","justifyContent","paddingHorizontal","right","zIndex","deepMerge","require","getDefaultStyles","getOverridingStyles","defaultStyles","apply","arguments"],"mappings":"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","file":"static/js/22.ac7c748f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { State } from 'react-powerplug';\nimport { NativePicker } from './NativePicker';\nimport { NativePickerItem } from './NativePickerItem';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"nativepicker\"\n    }}>{`NativePicker`}</h1>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <NativePicker\\n      selectedValue={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      size=\\\"large\\\"\\n      getStyles={(props, theme) => ({\\n        pickerStyle: {},\\n        itemStyle: {},\\n      })}\\n    >\\n      <NativePickerItem label=\\\"C\\\" value=\\\"c\\\" />\\n      <NativePickerItem label=\\\"C#\\\" value=\\\"c#\\\" />\\n      <NativePickerItem label=\\\"C++\\\" value=\\\"c++\\\" />\\n      <NativePickerItem label=\\\"CSS\\\" value=\\\"css\\\" />\\n      <NativePickerItem label=\\\"Elixir\\\" value=\\\"elixir\\\" />\\n      <NativePickerItem label=\\\"Elm\\\" value=\\\"elm\\\" />\\n      <NativePickerItem label=\\\"Erlang\\\" value=\\\"erlang\\\" />\\n      <NativePickerItem label=\\\"Go\\\" value=\\\"go\\\" />\\n      <NativePickerItem label=\\\"Haskell\\\" value=\\\"haskell\\\" />\\n      <NativePickerItem label=\\\"HTML\\\" value=\\\"html\\\" />\\n      <NativePickerItem label=\\\"Java\\\" value=\\\"java\\\" />\\n      <NativePickerItem label=\\\"JavaScript\\\" value=\\\"js\\\" />\\n      <NativePickerItem label=\\\"Lua\\\" value=\\\"lua\\\" />\\n      <NativePickerItem label=\\\"Python\\\" value=\\\"python\\\" />\\n      <NativePickerItem label=\\\"R\\\" value=\\\"r\\\" />\\n      <NativePickerItem label=\\\"Ruby\\\" value=\\\"ruby\\\" />\\n      <NativePickerItem label=\\\"Rust\\\" value=\\\"rust\\\" />\\n      <NativePickerItem label=\\\"Switft\\\" value=\\\"swift\\\" />\\n      <NativePickerItem label=\\\"Typescript\\\" value=\\\"typescript\\\" />\\n    </NativePicker>\\n  )}\\n</State>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      State,\n      NativePicker,\n      NativePickerItem\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <NativePicker selectedValue={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} size=\"large\" getStyles={(props, theme) => ({\n          pickerStyle: {},\n          itemStyle: {}\n        })} mdxType=\"NativePicker\">\n        <NativePickerItem label=\"C\" value=\"c\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C#\" value=\"c#\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"C++\" value=\"c++\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"CSS\" value=\"css\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elixir\" value=\"elixir\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Elm\" value=\"elm\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Erlang\" value=\"erlang\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Go\" value=\"go\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Haskell\" value=\"haskell\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"HTML\" value=\"html\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Java\" value=\"java\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"JavaScript\" value=\"js\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Lua\" value=\"lua\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Python\" value=\"python\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"R\" value=\"r\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Ruby\" value=\"ruby\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Rust\" value=\"rust\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Switft\" value=\"swift\" mdxType=\"NativePickerItem\" />\n        <NativePickerItem label=\"Typescript\" value=\"typescript\" mdxType=\"NativePickerItem\" />\n      </NativePicker>}\n  </State>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport { Picker as RNPicker, PickerProps as RNPickerProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles } from '../../utils/mergeStyles';\nimport { GetPickerButtonStylesProp } from './PickerButton';\nimport { getPickerButtonStyles, PickerButtonSize } from './PickerButton.styles';\n\nexport interface NativePickerProps extends RNPickerProps {\n  size?: PickerButtonSize;\n  innerRef?: React.Ref<RNPicker>;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: GetPickerButtonStylesProp;\n}\n\nconst NativePickerBase = (props: NativePickerProps) => {\n  const { size = 'medium', getStyles, innerRef, ...pickerProps } = props;\n  const theme = useTheme();\n\n  const { pickerStyle, itemStyle } = mergeStyles(\n    getPickerButtonStyles,\n    getStyles,\n  )({ size }, theme);\n\n  return (\n    <RNPicker\n      ref={innerRef}\n      itemStyle={itemStyle}\n      style={pickerStyle}\n      {...pickerProps}\n    />\n  );\n};\n\nexport const NativePicker = React.forwardRef<RNPicker, RNPickerProps>(\n  (props, ref) => {\n    return <NativePickerBase {...props} innerRef={ref} />;\n  },\n);\n","import { Picker as RNPicker, PickerItemProps } from 'react-native';\n\n// tslint:disable-next-line\nexport interface NativePickerItemProps extends PickerItemProps {}\n\nexport const NativePickerItem = RNPicker.Item;\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PickerButtonSizes {\n  small: ViewStyle;\n  medium: ViewStyle;\n  large: ViewStyle;\n}\n\nexport type PickerButtonSize = keyof PickerButtonSizes;\n\nexport interface PickerButtonTextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PickerButtonTextSize = keyof PickerButtonTextSizes;\n\nexport interface PickerButtonVariables {\n  base: ViewStyle;\n  disabled: ViewStyle;\n  focus: ViewStyle;\n  invalid: ViewStyle;\n  placeholderTextColor: string;\n  sizes: PickerButtonSizes;\n}\n\nexport const getPickerButtonVariables = (\n  theme: Theme,\n): PickerButtonVariables => {\n  return {\n    base: {\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: 40,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: 40,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: 40,\n      },\n    },\n  };\n};\n\nexport interface PickerButtonStyles {\n  containerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n  pickerStyle: ViewStyle;\n  itemStyle: any;\n}\n\nexport interface PickerButtonStylesProps {\n  size: PickerButtonSize;\n}\nexport type GetPickerButtonStyles = (\n  pickerStylesProps: PickerButtonStylesProps,\n  theme: Theme,\n) => PickerButtonStyles;\n\nexport const getPickerButtonStyles: GetPickerButtonStyles = (\n  pickerStylesProps,\n  theme,\n) => {\n  const pickerVariables = getPickerButtonVariables(theme);\n  const { base, sizes } = pickerVariables;\n  const { size } = pickerStylesProps;\n\n  const controlSizeStyles = sizes[size];\n  const textSizeStyles = theme.textSizes[size];\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.content,\n      position: 'relative',\n    },\n    itemStyle: {\n      ...textSizeStyles,\n    },\n    pickerStyle: {\n      backgroundColor: 'transparent',\n      width: '100%',\n      ...base,\n      ...controlSizeStyles,\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n      zIndex: -1,\n    },\n  };\n};\n","import { DeepPartial } from 'ts-essentials';\n\n// tslint:disable-next-line\nconst deepMerge = require('deepmerge');\n\nexport type GetStyles<TStyles = any> = (...args: any[]) => TStyles;\n\nexport type GetStylesOptional<TStyles = any> = (\n  ...args: any[]\n) => DeepPartial<TStyles>;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TPartialStyles = any>(\n  getDefaultStyles: GetStyles<TStyles>,\n  getOverridingStyles?: GetStyles<TPartialStyles>,\n) => (...args: any[]): TStyles => {\n  const defaultStyles = getDefaultStyles(...args);\n\n  return getOverridingStyles\n    ? deepMerge(defaultStyles, getOverridingStyles(...args))\n    : defaultStyles;\n};\n"],"sourceRoot":""}