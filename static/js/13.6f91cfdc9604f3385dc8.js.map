{"version":3,"sources":["webpack:///./src/components/Inputs/ClearableTextInput.tsx","webpack:///./src/components/Inputs/CopyTextInput.tsx","webpack:///./src/components/Inputs/IconTextInput.styles.ts","webpack:///./src/components/Inputs/IconTextInput.tsx","webpack:///./src/components/Inputs/Inputs.mdx","webpack:///./src/components/Inputs/PhoneNumberInput.styles.ts","webpack:///./src/components/Inputs/PhoneNumberInput.tsx","webpack:///./src/components/Inputs/SearchTextInput.tsx","webpack:///./src/components/Inputs/TextArea.tsx","webpack:///./src/components/Inputs/TextInput.styles.ts","webpack:///./src/components/Inputs/TextInput.tsx","webpack:///./src/components/ListItem/ListItem.styles.ts","webpack:///./src/components/ListItem/ListItem.tsx","webpack:///./src/components/ListItem/index.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_reactNative","_icons","_theme","_IconTextInput","_interopRequireDefault","ClearableTextInputBase","props","onClear","innerRef","onChangeText","value","textInputWithIconProps","_objectWithoutProperties2","default","theme","useContext","ThemeContext","createElement","_extends2","ref","rightIcon","TouchableOpacity","onPress","Icon","name","size","color","colors","text","ClearableTextInput","forwardRef","displayName","__docgenInfo","description","defaultValue","required","type","key","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","ForwardRefExoticComponent","CopyTextInputBase","onCopy","Clipboard","setString","CopyTextInput","getIconTextInputStyles","hasLeftIcon","hasRightIcon","containerStyle","position","inputStyle","_objectSpread2","paddingLeft","paddingRight","leftContainerStyle","alignItems","display","height","justifyContent","left","paddingHorizontal","rightContainerStyle","right","_mergeStyles2","_TextInput","IconTextInputBase","_props$leftIcon","leftIcon","_props$rightIcon","getStyles","textInputProps","_mergeStyles","mergeStyles","View","style","IconTextInput","_react","_tag","_docz","_reactPowerplug","_Typography","_Layout","_CopyTextInput","_SearchTextInput","_ClearableTextInput","_TextArea","_PhoneNumberInput","MDXContent","_this","_classCallCheck2","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","MDXTag","id","parentName","href","Playground","__position","__code","__scope","State","Heading","Label","Box","Spacing","TextInput","SearchTextInput","TextArea","PhoneNumberInput","undefined","placeholder","isDisabled","isInvalid","keyboardType","console","log","onSubmitEditing","e","placeholderTextColor","muted","marginBottom","initial","_ref","state","setState","_ref2","_ref3","_ref4","countryCode","phoneNumber","_ref5","header","marginVertical","onChangeCountryCode","onChangePhoneNumber","PropsTable","of","Component","flexDirection","_countriesList","_Button","_ListItem","_Modal","countries","Object","keys","countryList","map","PhoneNumberInputBase","_props$countryCode","_props$useHistory","useHistory","_React$useState","useState","_React$useState2","_slicedToArray2","isModalOpen","setIsModalOpen","getPhoneNumberInputStyles","Button","appearance","buttonStyle","borderBottomRightRadius","borderColor","border","borderTopRightRadius","borderWidth","iconAfter","title","concat","phone","CloseableModal","visible","onRequestClose","onClose","FlatList","ListHeaderComponent","keyExtractor","item","getItemLayout","data","index","length","controlHeights","medium","offset","renderItem","country","ListItem","label","event","preventDefault","borderBottomLeftRadius","borderTopLeftRadius","SearchTextInputBase","withTheme","_props$numberOfLines","numberOfLines","_props$size","controlHeight","multiline","paddingBottom","paddingTop","getTextInputVariables","base","backgroundColor","background","plain","width","disabled","focus","invalid","danger","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","controlPaddings","large","textInputVariables","sizeStyles","focusedStyle","fills","fontFamilies","fontWeights","headingSizes","paragraphSizes","elevations","TextInputBase","_props$isDisabled","_props$isInvalid","getTextInputStyles","editable","allowFontScaling","autoCapitalize","autoCorrect","autoFocus","blurOnSubmit","caretHidden","contextMenuHidden","maxLength","onBlur","onChange","onContentSizeChange","onEndEditing","onFocus","onSelectionChange","onScroll","onKeyPress","returnKeyType","secureTextEntry","selectTextOnFocus","selection","selectionColor","testID","inputAccessoryViewID","maxFontSizeMultiplier","hitSlop","onLayout","pointerEvents","removeClippedSubviews","nativeID","collapsable","needsOffscreenAlphaCompositing","renderToHardwareTextureAndroid","accessibilityViewIsModal","accessibilityActions","onAccessibilityAction","shouldRasterizeIOS","onStartShouldSetResponder","onMoveShouldSetResponder","onResponderEnd","onResponderGrant","onResponderReject","onResponderMove","onResponderRelease","onResponderStart","onResponderTerminationRequest","onResponderTerminate","onStartShouldSetResponderCapture","onMoveShouldSetResponderCapture","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel","onTouchEndCapture","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","accessibilityHint","accessibilityComponentType","accessibilityLiveRegion","importantForAccessibility","accessibilityElementsHidden","accessibilityTraits","onAccessibilityTap","onMagicTap","accessibilityIgnoresInvertColors","clearButtonMode","clearTextOnFocus","dataDetectorTypes","enablesReturnKeyAutomatically","keyboardAppearance","selectionState","spellCheck","textContentType","scrollEnabled","disableFullscreenUI","inlineImageLeft","inlineImagePadding","returnKeyLabel","textBreakStrategy","underlineColorAndroid","textAlignVertical","getListItemVariables","borderBottomWidth","focusBackgroundColor","tint1","selected","wrapper","isSelected","selectListVariables","_sizes$size","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","accessibilityProps","getListItemStyles","TouchableHighlight","underlayColor","Text","avatarProps"],"mappings":"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","file":"static/js/13.b3173180.js","sourcesContent":["import * as React from 'react';\nimport { TextInput as RNTextInput, TouchableOpacity } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { ThemeContext } from '../../theme';\nimport IconTextInput, { IconTextInputProps } from './IconTextInput';\n\nexport interface ClearableTextInputProps extends IconTextInputProps {\n  onClear?: () => void;\n}\n\nconst ClearableTextInputBase = (props: ClearableTextInputProps) => {\n  const {\n    onClear,\n    innerRef,\n    onChangeText,\n    value,\n    ...textInputWithIconProps\n  } = props;\n  const theme = React.useContext(ThemeContext);\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      rightIcon={\n        value ? (\n          <TouchableOpacity\n            onPress={() => {\n              if (onChangeText) onChangeText('');\n              if (onClear) onClear();\n            }}\n          >\n            <Icon name=\"x\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : null\n      }\n      onChangeText={onChangeText}\n      value={value}\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const ClearableTextInput = React.forwardRef<\n  RNTextInput,\n  ClearableTextInputProps\n>((props, ref) => <ClearableTextInputBase {...props} innerRef={ref} />);\n\nexport default ClearableTextInput;\ntry {\n    // @ts-ignore\n    ClearableTextInput.displayName = \"ClearableTextInput\";\n    // @ts-ignore\n    ClearableTextInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"ClearableTextInput\", \"props\": { \"onClear\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClear\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/ClearableTextInput.tsx#ClearableTextInput\"] = { docgenInfo: ClearableTextInput.__docgenInfo, name: \"ClearableTextInput\", path: \"src/components/Inputs/ClearableTextInput.tsx#ClearableTextInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"onClear\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClear\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/ClearableTextInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/ClearableTextInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  Clipboard,\n  TextInput as RNTextInput,\n  TouchableOpacity,\n} from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { ThemeContext } from '../../theme';\nimport IconTextInput, { IconTextInputProps } from './IconTextInput';\n\nexport interface CopyTextInputProps extends IconTextInputProps {\n  onCopy?: (text: string) => void;\n}\n\nconst CopyTextInputBase = (props: CopyTextInputProps) => {\n  const { onCopy, innerRef, value, ...textInputWithIconProps } = props;\n  const theme = React.useContext(ThemeContext);\n\n  return (\n    <IconTextInput\n      ref={innerRef}\n      rightIcon={\n        value ? (\n          <TouchableOpacity\n            onPress={() => {\n              Clipboard.setString(value);\n              if (onCopy) {\n                onCopy(value);\n              }\n            }}\n          >\n            <Icon name=\"copy\" size={24} color={theme.colors.text.default} />\n          </TouchableOpacity>\n        ) : null\n      }\n      value={value}\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const CopyTextInput = React.forwardRef<RNTextInput, CopyTextInputProps>(\n  (props, ref) => <CopyTextInputBase {...props} innerRef={ref} />,\n);\n\nexport default CopyTextInput;\ntry {\n    // @ts-ignore\n    CopyTextInput.displayName = \"CopyTextInput\";\n    // @ts-ignore\n    CopyTextInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"CopyTextInput\", \"props\": { \"onCopy\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onCopy\", \"required\": false, \"type\": { \"name\": \"(text: string) => void\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/CopyTextInput.tsx#CopyTextInput\"] = { docgenInfo: CopyTextInput.__docgenInfo, name: \"CopyTextInput\", path: \"src/components/Inputs/CopyTextInput.tsx#CopyTextInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"onCopy\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onCopy\", \"required\": false, \"type\": { \"name\": \"(text: string) => void\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/CopyTextInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/CopyTextInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface IconTextInputStyles {\n  inputStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftContainerStyle: ViewStyle;\n  rightContainerStyle: ViewStyle;\n}\n\nexport interface GetIconTextInputStylesProps {\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n}\n\nexport type GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme: Theme,\n) => IconTextInputStyles;\n\nexport const getIconTextInputStyles: GetIconTextInputStyles = (\n  props: GetIconTextInputStylesProps,\n  theme,\n) => {\n  const { hasLeftIcon, hasRightIcon } = props;\n\n  return {\n    containerStyle: {\n      position: 'relative',\n    },\n    inputStyle: {\n      ...(hasLeftIcon && { paddingLeft: 48 }),\n      ...(hasRightIcon && { paddingRight: 48 }),\n    },\n    leftContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      left: 0,\n      paddingHorizontal: 8,\n      position: 'absolute',\n    },\n    rightContainerStyle: {\n      alignItems: 'center',\n      display: 'flex',\n      height: '100%',\n      justifyContent: 'center',\n      paddingHorizontal: 8,\n      position: 'absolute',\n      right: 0,\n    },\n  };\n};\ntry {\n    // @ts-ignore\n    getIconTextInputStyles.displayName = \"getIconTextInputStyles\";\n    // @ts-ignore\n    getIconTextInputStyles.__docgenInfo = { \"description\": \"\", \"displayName\": \"getIconTextInputStyles\", \"props\": { \"hasLeftIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasLeftIcon\", \"required\": true, \"type\": { \"name\": \"boolean\" } }, \"hasRightIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"hasRightIcon\", \"required\": true, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/IconTextInput.styles.ts#getIconTextInputStyles\"] = { docgenInfo: getIconTextInputStyles.__docgenInfo, name: \"getIconTextInputStyles\", path: \"src/components/Inputs/IconTextInput.styles.ts#getIconTextInputStyles\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { ThemeContext } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  getIconTextInputStyles,\n  IconTextInputStyles,\n} from './IconTextInput.styles';\nimport TextInput, { TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface IconTextInputProps extends Omit<TextInputProps, 'getStyles'> {\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & IconTextInputStyles>\n  >;\n}\n\nconst IconTextInputBase = (props: IconTextInputProps) => {\n  const {\n    leftIcon = null,\n    rightIcon = null,\n    getStyles,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = React.useContext(ThemeContext);\n  const {\n    containerStyle,\n    leftContainerStyle,\n    rightContainerStyle,\n    inputStyle,\n  } = mergeStyles(getIconTextInputStyles, getStyles)(\n    { hasLeftIcon: !!leftIcon, hasRightIcon: !!rightIcon },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <View style={leftContainerStyle}>{leftIcon}</View>\n      <TextInput\n        ref={innerRef}\n        getStyles={() => ({\n          inputStyle,\n        })}\n        {...textInputProps}\n      />\n      <View style={rightContainerStyle}>{rightIcon}</View>\n    </View>\n  );\n};\n\nexport const IconTextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <IconTextInputBase {...props} innerRef={ref} />,\n);\n\nexport default IconTextInput;\ntry {\n    // @ts-ignore\n    IconTextInput.displayName = \"IconTextInput\";\n    // @ts-ignore\n    IconTextInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"IconTextInput\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/IconTextInput.tsx#IconTextInput\"] = { docgenInfo: IconTextInput.__docgenInfo, name: \"IconTextInput\", path: \"src/components/Inputs/IconTextInput.tsx#IconTextInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/IconTextInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/IconTextInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport { State } from 'react-powerplug';\nimport { View } from 'react-native';\nimport { Icon } from '../../icons';\nimport { Heading, Label } from '../Typography';\nimport { Box, Spacing } from '../Layout';\nimport TextInput from './TextInput';\nimport IconTextInput from './IconTextInput';\nimport CopyTextInput from './CopyTextInput';\nimport SearchTextInput from './SearchTextInput';\nimport ClearableTextInput from './ClearableTextInput';\nimport TextArea from './TextArea';\nimport PhoneNumberInput from './PhoneNumberInput';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"inputs\"}}>{`Inputs`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Paramount provides a set of common input elements for modern applications`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"textinput\"}}>{`TextInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Composes of React Native's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextInput`}</MDXTag>{` component (i.e. you can pass its props). `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://facebook.github.io/react-native/docs/textinput\"}}>{`See more details`}</MDXTag></MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<Playground __position={0} __code={'<TextInput\\n  name=\\\"field\\\"\\n  value={undefined}\\n  placeholder=\\\"Add your own placeholder\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  isInvalid={false}\\n  keyboardType=\\\"email-address\\\"\\n  onChangeText={text => console.log(\\'field\\', text)}\\n  onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n  getStyles={(props, theme) => ({\\n    inputStyle: {},\\n    placeholderTextColor: theme.colors.text.muted,\\n  })}\\n/>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <TextInput\n    name=\"field\"\n    value={undefined}\n    placeholder=\"Add your own placeholder\"\n    size=\"large\"\n    isDisabled={false}\n    isInvalid={false}\n    keyboardType=\"email-address\"\n    onChangeText={text => console.log('field', text)}\n    onSubmitEditing={e => console.log('Submit on enter')}\n    getStyles={(props, theme) => ({\n      inputStyle: {},\n      placeholderTextColor: theme.colors.text.muted,\n    })}\n  />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"textarea\"}}>{`TextArea`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Composes of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextInput`}</MDXTag></MDXTag>\n<Playground __position={1} __code={'<TextArea\\n  name=\\\"field\\\"\\n  placeholder=\\\"Add your own placeholder\\\"\\n  size=\\\"large\\\"\\n  isDisabled={false}\\n  isInvalid={false}\\n  keyboardType=\\\"email-address\\\"\\n  onChangeText={text => console.log(\\'field\\', text)}\\n  onSubmitEditing={e => console.log(\\'Submit on enter\\')}\\n/>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <TextArea\n    name=\"field\"\n    placeholder=\"Add your own placeholder\"\n    size=\"large\"\n    isDisabled={false}\n    isInvalid={false}\n    keyboardType=\"email-address\"\n    onChangeText={text => console.log('field', text)}\n    onSubmitEditing={e => console.log('Submit on enter')}\n  />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"icontextinput\"}}>{`IconTextInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Add custom icons on the left or right within the input box. Composes of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextInput`}</MDXTag></MDXTag>\n<Playground __position={2} __code={'<Box marginBottom={24}>\\n  <State initial={{ value: \\'\\' }}>\\n    {({ state, setState }) => (\\n      <IconTextInput\\n        leftIcon={\\n          <View>\\n            <Icon name=\\\"menu\\\" size={24} />\\n          </View>\\n        }\\n        rightIcon={\\n          <View>\\n            <Icon name=\\\"menu\\\" size={24} />\\n          </View>\\n        }\\n        onChangeText={text => setState({ value: text })}\\n        value={state.value}\\n      />\\n    )}\\n  </State>\\n</Box>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <Box marginBottom={24}>\n    <State initial={{ value: '' }}>\n      {({ state, setState }) => (\n        <IconTextInput\n          leftIcon={\n            <View>\n              <Icon name=\"menu\" size={24} />\n            </View>\n          }\n          rightIcon={\n            <View>\n              <Icon name=\"menu\" size={24} />\n            </View>\n          }\n          onChangeText={text => setState({ value: text })}\n          value={state.value}\n        />\n      )}\n    </State>\n  </Box>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"clearabletextinput\"}}>{`ClearableTextInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Adds a Close icon when there is an input which can be cleared. On clearing, it will change text to `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`''`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`onClear`}</MDXTag>{` callback is called. Composes of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TextInput`}</MDXTag></MDXTag>\n<Playground __position={3} __code={'<Box marginBottom={24}>\\n  <State initial={{ value: \\'\\' }}>\\n    {({ state, setState }) => (\\n      <ClearableTextInput\\n        onChangeText={text => setState({ value: text })}\\n        value={state.value}\\n        onClear={() => {\\n          console.log(\\'Cleared!\\')\\n        }}\\n        placeholder=\\\"Clearable text input\\\"\\n      />\\n    )}\\n  </State>\\n</Box>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <Box marginBottom={24}>\n    <State initial={{ value: '' }}>\n      {({ state, setState }) => (\n        <ClearableTextInput\n          onChangeText={text => setState({ value: text })}\n          value={state.value}\n          onClear={() => {\n            console.log('Cleared!');\n          }}\n          placeholder=\"Clearable text input\"\n        />\n      )}\n    </State>\n  </Box>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"searchtextinput\"}}>{`SearchTextInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Adds a Search icon. Composes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ClearableTextInput`}</MDXTag></MDXTag>\n<Playground __position={4} __code={'<Box marginBottom={24}>\\n  <State initial={{ value: \\'\\' }}>\\n    {({ state, setState }) => (\\n      <SearchTextInput\\n        onChangeText={text => setState({ value: text })}\\n        value={state.value}\\n        onClear={() => {\\n          console.log(\\'Cleared!\\')\\n        }}\\n        placeholder=\\\"Text input with search icon\\\"\\n      />\\n    )}\\n  </State>\\n</Box>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <Box marginBottom={24}>\n    <State initial={{ value: '' }}>\n      {({ state, setState }) => (\n        <SearchTextInput\n          onChangeText={text => setState({ value: text })}\n          value={state.value}\n          onClear={() => {\n            console.log('Cleared!');\n          }}\n          placeholder=\"Text input with search icon\"\n        />\n      )}\n    </State>\n  </Box>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"copytextinput\"}}>{`CopyTextInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Adds a Copy icon when there is an input, and upon clicking it, it will save the content to clipboard. Composes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`IconTextInput`}</MDXTag></MDXTag>\n<Playground __position={5} __code={'<Box marginBottom={24}>\\n  <State initial={{ value: \\'\\' }}>\\n    {({ state, setState }) => (\\n      <CopyTextInput\\n        onChangeText={text => setState({ value: text })}\\n        value={state.value}\\n        onCopy={text => {\\n          console.log(\\'Copied\\', text)\\n        }}\\n        placeholder=\\\"Text input wiht copy\\\"\\n      />\\n    )}\\n  </State>\\n</Box>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <Box marginBottom={24}>\n    <State initial={{ value: '' }}>\n      {({ state, setState }) => (\n        <CopyTextInput\n          onChangeText={text => setState({ value: text })}\n          value={state.value}\n          onCopy={text => {\n            console.log('Copied', text);\n          }}\n          placeholder=\"Text input wiht copy\"\n        />\n      )}\n    </State>\n  </Box>\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"phonenumberinput\"}}>{`PhoneNumberInput`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Appends a button to select country code`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"usage-1\"}}>{`Usage`}</MDXTag>\n<Playground __position={6} __code={'<State initial={{ countryCode: \\'US\\', phoneNumber: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <PhoneNumberInput\\n      header={\\n        <Spacing marginVertical={3} paddingHorizontal={2}>\\n          <Heading size=\\\"xxxlarge\\\">Select your country</Heading>\\n        </Spacing>\\n      }\\n      onChangeCountryCode={countryCode => setState({ countryCode })}\\n      onChangePhoneNumber={phoneNumber => setState({ phoneNumber })}\\n      phoneNumber={state.phoneNumber}\\n      countryCode={state.countryCode}\\n      placeholder=\\\"Enter your phone number\\\"\\n    />\\n  )}\\n</State>'} __scope={{props: this ? this.props : props,State,View,Icon,Heading,Label,Box,Spacing,TextInput,IconTextInput,CopyTextInput,SearchTextInput,ClearableTextInput,TextArea,PhoneNumberInput}}>\n  <State initial={{ countryCode: 'US', phoneNumber: '' }}>\n    {({ state, setState }) => (\n      <PhoneNumberInput\n        header={\n          <Spacing marginVertical={3} paddingHorizontal={2}>\n            <Heading size=\"xxxlarge\">Select your country</Heading>\n          </Spacing>\n        }\n        onChangeCountryCode={countryCode => setState({ countryCode })}\n        onChangePhoneNumber={phoneNumber => setState({ phoneNumber })}\n        phoneNumber={state.phoneNumber}\n        countryCode={state.countryCode}\n        placeholder=\"Enter your phone number\"\n      />\n    )}\n  </State>\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={PhoneNumberInput} />\n           </MDXTag>\n  }\n}\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface PhoneNumberInputSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type PhoneNumberInputSize = keyof PhoneNumberInputSizes;\n\nexport interface PhoneNumberInputStyles {\n  containerStyle: ViewStyle;\n}\n\nexport interface PhoneNumberInputStylesProps {\n  size: PhoneNumberInputSize;\n}\n\nexport type GetPhoneNumberInputStyles = (\n  textInputStylesProps: PhoneNumberInputStylesProps,\n  theme: Theme,\n) => PhoneNumberInputStyles;\n\nexport const getPhoneNumberInputStyles: GetPhoneNumberInputStyles = (\n  { size },\n  theme,\n) => {\n  return {\n    containerStyle: {\n      flexDirection: 'row',\n    },\n  };\n};\n","import { countries as countryList } from 'countries-list';\nimport * as React from 'react';\nimport { FlatList, TextInput as RNTextInput, View } from 'react-native';\nimport { DeepPartial, Omit } from 'ts-essentials';\n\nimport { Icon } from '../../icons';\nimport { ThemeContext } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Button } from '../Button';\nimport { ListItem } from '../ListItem';\nimport { CloseableModal } from '../Modal';\nimport {\n  getPhoneNumberInputStyles,\n  PhoneNumberInputStyles,\n} from './PhoneNumberInput.styles';\nimport TextInput, { TextInputProps } from './TextInput';\nimport { GetTextInputStyles, TextInputStyles } from './TextInput.styles';\n\nexport interface PhoneNumberInputProps\n  extends Omit<TextInputProps, 'getStyles'> {\n  countryCode?: string;\n  onChangeCountryCode?: (countryCode: string) => void;\n  phoneNumber?: string;\n  onChangePhoneNumber?: (phoneNumber: string) => void;\n  /** Prop to be passed to modal */\n  useHistory?: boolean;\n  /** Label displayed when showing country selection */\n  header?: React.ReactElement<any>;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles & PhoneNumberInputStyles>\n  >;\n}\n\nconst countries = (() => {\n  return Object.keys(countryList).map(countryCode => ({\n    countryCode,\n    key: countryCode,\n    ...countryList[countryCode],\n  }));\n})();\n\nconst PhoneNumberInputBase = (props: PhoneNumberInputProps) => {\n  const {\n    countryCode = 'US',\n    phoneNumber,\n    onChangeCountryCode,\n    onChangePhoneNumber,\n    header,\n    getStyles,\n    innerRef,\n    useHistory = false,\n    ...textInputProps\n  } = props;\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const theme = React.useContext(ThemeContext);\n\n  const { containerStyle } = mergeStyles(getPhoneNumberInputStyles, getStyles)(\n    {},\n    theme,\n  );\n\n  return (\n    <View style={containerStyle}>\n      <Button\n        onPress={() => setIsModalOpen(true)}\n        appearance=\"outline\"\n        getStyles={() => ({\n          buttonStyle: {\n            borderBottomRightRadius: 0,\n            borderColor: theme.colors.border.muted,\n            borderTopRightRadius: 0,\n            borderWidth: 1,\n          },\n        })}\n        iconAfter={\n          <Icon\n            size={20}\n            color={theme.colors.text.default}\n            name=\"chevron-down\"\n          />\n        }\n        title={`+${countryList[countryCode].phone}`}\n      />\n      <CloseableModal\n        visible={isModalOpen}\n        useHistory={useHistory}\n        onRequestClose={() => setIsModalOpen(false)}\n        onClose={() => setIsModalOpen(false)}\n      >\n        <FlatList\n          ListHeaderComponent={header}\n          keyExtractor={item => item.key}\n          getItemLayout={(data, index) => ({\n            index,\n            length: theme.controlHeights.medium,\n            offset: theme.controlHeights.medium * index,\n          })}\n          data={countries}\n          renderItem={({ item: country }) => {\n            return (\n              <ListItem\n                key={country.countryCode}\n                label={country.name}\n                onPress={event => {\n                  event.preventDefault();\n                  if (onChangeCountryCode) {\n                    onChangeCountryCode(country.countryCode);\n                  }\n                  setIsModalOpen(false);\n                }}\n              />\n            );\n          }}\n        />\n      </CloseableModal>\n      <TextInput\n        ref={innerRef}\n        name=\"phone\"\n        getStyles={() => ({\n          inputStyle: {\n            borderBottomLeftRadius: 0,\n            borderTopLeftRadius: 0,\n          },\n        })}\n        keyboardType=\"phone-pad\"\n        value={phoneNumber}\n        onChangeText={onChangePhoneNumber}\n        {...textInputProps}\n      />\n    </View>\n  );\n};\n\nexport const PhoneNumberInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => <PhoneNumberInputBase {...props} innerRef={ref} />,\n);\n\nexport default PhoneNumberInput;\ntry {\n    // @ts-ignore\n    PhoneNumberInput.displayName = \"PhoneNumberInput\";\n    // @ts-ignore\n    PhoneNumberInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"PhoneNumberInput\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/PhoneNumberInput.tsx#PhoneNumberInput\"] = { docgenInfo: PhoneNumberInput.__docgenInfo, name: \"PhoneNumberInput\", path: \"src/components/Inputs/PhoneNumberInput.tsx#PhoneNumberInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/PhoneNumberInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/PhoneNumberInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport { TextInput as RNTextInput, View } from 'react-native';\n\nimport { Icon } from '../../icons';\nimport { ThemeContext } from '../../theme';\nimport ClearableTextInput, {\n  ClearableTextInputProps,\n} from './ClearableTextInput';\n\n// tslint:disable-next-line\nexport interface SearchTextInputProps extends ClearableTextInputProps {}\n\nconst SearchTextInputBase = (props: SearchTextInputProps) => {\n  const { onClear, innerRef, ...textInputWithIconProps } = props;\n  const theme = React.useContext(ThemeContext);\n\n  return (\n    <ClearableTextInput\n      ref={innerRef}\n      leftIcon={\n        <View>\n          <Icon name=\"search\" size={24} color={theme.colors.text.default} />\n        </View>\n      }\n      {...textInputWithIconProps}\n    />\n  );\n};\n\nexport const SearchTextInput = React.forwardRef<\n  RNTextInput,\n  SearchTextInputProps\n>((props, ref) => <SearchTextInputBase {...props} innerRef={ref} />);\n\nexport default SearchTextInput;\ntry {\n    // @ts-ignore\n    SearchTextInput.displayName = \"SearchTextInput\";\n    // @ts-ignore\n    SearchTextInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"SearchTextInput\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/SearchTextInput.tsx#SearchTextInput\"] = { docgenInfo: SearchTextInput.__docgenInfo, name: \"SearchTextInput\", path: \"src/components/Inputs/SearchTextInput.tsx#SearchTextInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/SearchTextInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/SearchTextInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\n\nimport { Theme, withTheme } from '../../theme';\nimport TextInput, { TextInputProps } from './TextInput';\n\nexport interface TextAreaProps extends TextInputProps {\n  numberOfLines?: number;\n  theme: Theme;\n}\n\nconst TextAreaBase = (props: TextAreaProps) => {\n  const {\n    numberOfLines = 3,\n    size = 'medium',\n    theme,\n    ...textInputProps\n  } = props;\n  const controlHeight = theme.controlHeights[size];\n\n  return (\n    <TextInput\n      multiline\n      size={size}\n      numberOfLines={numberOfLines}\n      getStyles={() => ({\n        inputStyle: {\n          height: numberOfLines * controlHeight,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n      })}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextArea = withTheme(TextAreaBase);\nexport default TextArea;\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface TextInputSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type TextInputSize = keyof TextInputSizes;\n\nexport interface TextInputVariables {\n  base: TextStyle;\n  disabled: TextStyle;\n  focus: TextStyle;\n  invalid: TextStyle;\n  placeholderTextColor: string;\n  sizes: TextInputSizes;\n}\n\nexport const getTextInputVariables = (theme: Theme): TextInputVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.plain,\n      borderColor: theme.colors.border.default,\n      borderWidth: 1,\n      color: theme.colors.text.default,\n      width: '100%',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.disabled,\n    },\n    focus: {},\n    invalid: {\n      borderColor: theme.colors.border.danger,\n    },\n    placeholderTextColor: theme.colors.text.muted,\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n  };\n};\n\nexport interface TextInputStyles {\n  inputStyle: TextStyle;\n  focusedStyle: TextStyle;\n  placeholderTextColor: string;\n}\n\nexport interface TextInputStylesProps {\n  size: TextInputSize;\n  isDisabled: boolean;\n  isClearable: boolean;\n  isInvalid: boolean;\n}\n\nexport type GetTextInputStyles = (\n  textInputStylesProps: TextInputStylesProps,\n  theme: Theme,\n) => TextInputStyles;\n\nexport const getTextInputStyles: GetTextInputStyles = (\n  { size, isDisabled, isInvalid },\n  theme,\n) => {\n  const textInputVariables = getTextInputVariables(theme);\n\n  const {\n    base,\n    disabled,\n    focus,\n    invalid,\n    placeholderTextColor,\n    sizes,\n  } = textInputVariables;\n\n  const sizeStyles = sizes[size];\n\n  return {\n    focusedStyle: focus,\n    inputStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isDisabled ? disabled : {}),\n      ...(isInvalid ? invalid : {}),\n    },\n    placeholderTextColor,\n  };\n};\ntry {\n    // @ts-ignore\n    getTextInputVariables.displayName = \"getTextInputVariables\";\n    // @ts-ignore\n    getTextInputVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getTextInputVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/TextInput.styles.ts#getTextInputVariables\"] = { docgenInfo: getTextInputVariables.__docgenInfo, name: \"getTextInputVariables\", path: \"src/components/Inputs/TextInput.styles.ts#getTextInputVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ThemeContext } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetTextInputStyles,\n  getTextInputStyles,\n  TextInputSize,\n  TextInputStyles,\n} from './TextInput.styles';\n\nexport interface TextInputProps extends RNTextInputProps {\n  children?: React.ReactNode;\n  name?: string;\n  innerRef?: React.Ref<RNTextInput>;\n  size?: TextInputSize;\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  getStyles?: ReplaceReturnType<\n    GetTextInputStyles,\n    DeepPartial<TextInputStyles>\n  >;\n}\n\nconst TextInputBase = (props: TextInputProps) => {\n  const {\n    isDisabled = false,\n    isInvalid = false,\n    size = 'medium',\n    getStyles,\n    name,\n    innerRef,\n    ...textInputProps\n  } = props;\n  const theme = React.useContext(ThemeContext);\n\n  const { inputStyle, placeholderTextColor } = mergeStyles(\n    getTextInputStyles,\n    getStyles,\n  )(\n    {\n      isDisabled,\n      isInvalid,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    // @ts-ignore: name prop does not exist, but on the web it is useful for browser autofill\n    <RNTextInput\n      ref={innerRef}\n      style={inputStyle}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor}\n      name={name}\n      {...textInputProps}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef<RNTextInput, TextInputProps>(\n  (props, ref) => {\n    return <TextInputBase {...props} innerRef={ref} />;\n  },\n);\n\nexport default TextInput;\ntry {\n    // @ts-ignore\n    TextInput.displayName = \"TextInput\";\n    // @ts-ignore\n    TextInput.__docgenInfo = { \"description\": \"\", \"displayName\": \"TextInput\", \"props\": { \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"innerRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"innerRef\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"isInvalid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isInvalid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetTextInputStyles, DeepPartial<TextInputStyles>>\" } }, \"allowFontScaling\": { \"defaultValue\": null, \"description\": \"Specifies whether fonts should scale to respect Text Size accessibility settings.\\nThe default is `true`.\", \"name\": \"allowFontScaling\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"autoCapitalize\": { \"defaultValue\": null, \"description\": \"Can tell TextInput to automatically capitalize certain characters.\\n      characters: all characters,\\n      words: first letter of each word\\n      sentences: first letter of each sentence (default)\\n      none: don't auto capitalize anything\\n\\nhttps://facebook.github.io/react-native/docs/textinput.html#autocapitalize\", \"name\": \"autoCapitalize\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"sentences\\\" | \\\"words\\\" | \\\"characters\\\"\" } }, \"autoCorrect\": { \"defaultValue\": null, \"description\": \"If false, disables auto-correct.\\nThe default value is true.\", \"name\": \"autoCorrect\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"autoFocus\": { \"defaultValue\": null, \"description\": \"If true, focuses the input on componentDidMount.\\nThe default value is false.\", \"name\": \"autoFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"blurOnSubmit\": { \"defaultValue\": null, \"description\": \"If true, the text field will blur when submitted.\\nThe default value is true.\", \"name\": \"blurOnSubmit\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"caretHidden\": { \"defaultValue\": null, \"description\": \"If true, caret is hidden. The default value is false.\", \"name\": \"caretHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"contextMenuHidden\": { \"defaultValue\": null, \"description\": \"If true, context menu is hidden. The default value is false.\", \"name\": \"contextMenuHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"defaultValue\": { \"defaultValue\": null, \"description\": \"Provides an initial value that will change when the user starts typing.\\nUseful for simple use-cases where you don't want to deal with listening to events\\nand updating the value prop to keep the controlled state in sync.\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"editable\": { \"defaultValue\": null, \"description\": \"If false, text is not editable. The default value is true.\", \"name\": \"editable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"keyboardType\": { \"defaultValue\": null, \"description\": \"enum(\\\"default\\\", 'numeric', 'email-address', \\\"ascii-capable\\\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\\n'decimal-pad', 'twitter', 'web-search', 'visible-password')\\nDetermines which keyboard to open, e.g.numeric.\\nThe following values work across platforms: - default - numeric - email-address - phone-pad\\nThe following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\\nThe following values work on Android: - visible-password\", \"name\": \"keyboardType\", \"required\": false, \"type\": { \"name\": \"KeyboardTypeOptions\" } }, \"maxLength\": { \"defaultValue\": null, \"description\": \"Limits the maximum number of characters that can be entered.\\nUse this instead of implementing the logic in JS to avoid flicker.\", \"name\": \"maxLength\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"multiline\": { \"defaultValue\": null, \"description\": \"If true, the text input can be multiple lines. The default value is false.\", \"name\": \"multiline\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onBlur\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input is blurred\", \"name\": \"onBlur\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputFocusEventData>) => void\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's text changes.\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputChangeEventData>) => void\" } }, \"onChangeText\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's text changes.\\nChanged text is passed as an argument to the callback handler.\", \"name\": \"onChangeText\", \"required\": false, \"type\": { \"name\": \"(text: string) => void\" } }, \"onContentSizeChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's content size changes.\\nThis will be called with\\n`{ nativeEvent: { contentSize: { width, height } } }`.\\n\\nOnly called for multiline text inputs.\", \"name\": \"onContentSizeChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => void\" } }, \"onEndEditing\": { \"defaultValue\": null, \"description\": \"Callback that is called when text input ends.\", \"name\": \"onEndEditing\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void\" } }, \"onFocus\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input is focused\", \"name\": \"onFocus\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputFocusEventData>) => void\" } }, \"onSelectionChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input selection is changed.\", \"name\": \"onSelectionChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => void\" } }, \"onSubmitEditing\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's submit button is pressed.\", \"name\": \"onSubmitEditing\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void\" } }, \"onScroll\": { \"defaultValue\": null, \"description\": \"Invoked on content scroll with\\n  `{ nativeEvent: { contentOffset: { x, y } } }`.\\n\\nMay also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.\", \"name\": \"onScroll\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputScrollEventData>) => void\" } }, \"onKeyPress\": { \"defaultValue\": null, \"description\": \"Callback that is called when a key is pressed.\\nThis will be called with\\n  `{ nativeEvent: { key: keyValue } }`\\nwhere keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\\n\\nFires before onChange callbacks.\\nNote: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.\", \"name\": \"onKeyPress\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void\" } }, \"placeholder\": { \"defaultValue\": null, \"description\": \"The string that will be rendered before text input has been entered\", \"name\": \"placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"placeholderTextColor\": { \"defaultValue\": null, \"description\": \"The text color of the placeholder string\", \"name\": \"placeholderTextColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"returnKeyType\": { \"defaultValue\": null, \"description\": \"enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\\nDetermines how the return key should look.\", \"name\": \"returnKeyType\", \"required\": false, \"type\": { \"name\": \"ReturnKeyTypeOptions\" } }, \"secureTextEntry\": { \"defaultValue\": null, \"description\": \"If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\\nThe default value is false.\", \"name\": \"secureTextEntry\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"selectTextOnFocus\": { \"defaultValue\": null, \"description\": \"If true, all text will automatically be selected on focus\", \"name\": \"selectTextOnFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"selection\": { \"defaultValue\": null, \"description\": \"The start and end of the text input's selection. Set start and end to\\nthe same value to position the cursor.\", \"name\": \"selection\", \"required\": false, \"type\": { \"name\": \"{ start: number; end?: number; }\" } }, \"selectionColor\": { \"defaultValue\": null, \"description\": \"The highlight (and cursor on ios) color of the text input\", \"name\": \"selectionColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"style\": { \"defaultValue\": null, \"description\": \"Styles\", \"name\": \"style\", \"required\": false, \"type\": { \"name\": \"StyleProp<TextStyle>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"Used to locate this view in end-to-end tests\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"inputAccessoryViewID\": { \"defaultValue\": null, \"description\": \"Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\\ncode.\\nSee https://facebook.github.io/react-native/docs/inputaccessoryview.html for more information.\", \"name\": \"inputAccessoryViewID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"value\": { \"defaultValue\": null, \"description\": \"The value to show for the text input. TextInput is a controlled component,\\nwhich means the native value will be forced to match this value prop if provided.\\nFor most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\\nIn addition to simply setting the same value, either set editable={false},\\nor set/update maxLength to prevent unwanted edits without flicker.\", \"name\": \"value\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"maxFontSizeMultiplier\": { \"defaultValue\": null, \"description\": \"Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\\n- null/undefined (default): inherit from the parent node or the global default (0)\\n- 0: no max, ignore parent/global default\\n- >= 1: sets the maxFontSizeMultiplier of this node to this value\", \"name\": \"maxFontSizeMultiplier\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"hitSlop\": { \"defaultValue\": null, \"description\": \"This defines how far a touch event can start away from the view.\\nTypical interface guidelines recommend touch targets that are at least\\n30 - 40 points/density-independent pixels. If a Touchable view has\\na height of 20 the touchable height can be extended to 40 with\\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\\nNOTE The touch area never extends past the parent view bounds and\\nthe Z-index of sibling views always takes precedence if a touch\\nhits two overlapping views.\", \"name\": \"hitSlop\", \"required\": false, \"type\": { \"name\": \"Insets\" } }, \"onLayout\": { \"defaultValue\": null, \"description\": \"Invoked on mount and layout changes with\\n\\n{nativeEvent: { layout: {x, y, width, height}}}.\", \"name\": \"onLayout\", \"required\": false, \"type\": { \"name\": \"(event: LayoutChangeEvent) => void\" } }, \"pointerEvents\": { \"defaultValue\": null, \"description\": \"In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\\n\\n.box-none {\\n   pointer-events: none;\\n}\\n.box-none * {\\n   pointer-events: all;\\n}\\n\\nbox-only is the equivalent of\\n\\n.box-only {\\n   pointer-events: all;\\n}\\n.box-only * {\\n   pointer-events: none;\\n}\\n\\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\", \"name\": \"pointerEvents\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"box-none\\\" | \\\"box-only\\\" | \\\"auto\\\"\" } }, \"removeClippedSubviews\": { \"defaultValue\": null, \"description\": \"This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).\", \"name\": \"removeClippedSubviews\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"nativeID\": { \"defaultValue\": null, \"description\": \"Used to reference react managed views from native code.\", \"name\": \"nativeID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"collapsable\": { \"defaultValue\": null, \"description\": \"Views that are only used to layout their children or otherwise don't draw anything\\nmay be automatically removed from the native hierarchy as an optimization.\\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.\", \"name\": \"collapsable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"needsOffscreenAlphaCompositing\": { \"defaultValue\": null, \"description\": \"Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\\nThe default (false) falls back to drawing the component and its children\\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\\n\\nRendering offscreen to preserve correct alpha behavior is extremely expensive\\nand hard to debug for non-native developers, which is why it is not turned on by default.\\nIf you do need to enable this property for an animation,\\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\\nIf that property is enabled, this View will be rendered off-screen once,\\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\", \"name\": \"needsOffscreenAlphaCompositing\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"renderToHardwareTextureAndroid\": { \"defaultValue\": null, \"description\": \"Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\\n\\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\", \"name\": \"renderToHardwareTextureAndroid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityViewIsModal\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\\n@platform ios\", \"name\": \"accessibilityViewIsModal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityActions\": { \"defaultValue\": null, \"description\": \"Provides an array of custom actions available for accessibility.\\n@platform ios\", \"name\": \"accessibilityActions\", \"required\": false, \"type\": { \"name\": \"string[]\" } }, \"onAccessibilityAction\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function\\nwhen the user performs an accessibility custom action.\\n@platform ios\", \"name\": \"onAccessibilityAction\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldRasterizeIOS\": { \"defaultValue\": null, \"description\": \"Whether this view should be rendered as a bitmap before compositing.\\n\\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\\nand quickly composite it during each frame.\\n\\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\\nTest and measure when using this property.\", \"name\": \"shouldRasterizeIOS\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onStartShouldSetResponder\": { \"defaultValue\": null, \"description\": \"A view can become the touch responder by implementing the correct negotiation methods.\\nThere are two methods to ask the view if it wants to become responder:\\nDoes this view want to become responder on the start of a touch?\", \"name\": \"onStartShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponder\": { \"defaultValue\": null, \"description\": \"Called for every touch move on the View when it is not the responder: does this view want to \\\"claim\\\" touch responsiveness?\", \"name\": \"onMoveShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderEnd\": { \"defaultValue\": null, \"description\": \"If the View returns true and attempts to become the responder, one of the following will happen:\", \"name\": \"onResponderEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderGrant\": { \"defaultValue\": null, \"description\": \"The View is now responding for touch events.\\nThis is the time to highlight and show the user what is happening\", \"name\": \"onResponderGrant\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderReject\": { \"defaultValue\": null, \"description\": \"Something else is the responder right now and will not release it\", \"name\": \"onResponderReject\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderMove\": { \"defaultValue\": null, \"description\": \"If the view is responding, the following handlers can be called:\\nThe user is moving their finger\", \"name\": \"onResponderMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderRelease\": { \"defaultValue\": null, \"description\": \"Fired at the end of the touch, ie \\\"touchUp\\\"\", \"name\": \"onResponderRelease\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onResponderStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderTerminationRequest\": { \"defaultValue\": null, \"description\": \"Something else wants to become responder.\\nShould this view release the responder? Returning true allows release\", \"name\": \"onResponderTerminationRequest\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderTerminate\": { \"defaultValue\": null, \"description\": \"The responder has been taken from the View.\\nMight be taken by other views after a call to onResponderTerminationRequest,\\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)\", \"name\": \"onResponderTerminate\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onStartShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onStartShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onMoveShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onTouchStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchMove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEnd\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchCancel\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchCancel\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEndCapture\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEndCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"key\\\" | \\\"none\\\" | \\\"search\\\" | \\\"button\\\" | \\\"link\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"clearButtonMode\": { \"defaultValue\": null, \"description\": \"enum('never', 'while-editing', 'unless-editing', 'always')\\nWhen the clear button should appear on the right side of the text view\", \"name\": \"clearButtonMode\", \"required\": false, \"type\": { \"name\": \"\\\"never\\\" | \\\"while-editing\\\" | \\\"unless-editing\\\" | \\\"always\\\"\" } }, \"clearTextOnFocus\": { \"defaultValue\": null, \"description\": \"If true, clears the text field automatically when editing begins\", \"name\": \"clearTextOnFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"dataDetectorTypes\": { \"defaultValue\": null, \"description\": \"Determines the types of data converted to clickable URLs in the text input.\\nOnly valid if `multiline={true}` and `editable={false}`.\\nBy default no data types are detected.\\n\\nYou can provide one type or an array of many types.\\n\\nPossible values for `dataDetectorTypes` are:\\n\\n- `'phoneNumber'`\\n- `'link'`\\n- `'address'`\\n- `'calendarEvent'`\\n- `'none'`\\n- `'all'`\", \"name\": \"dataDetectorTypes\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"link\\\" | \\\"phoneNumber\\\" | \\\"address\\\" | \\\"calendarEvent\\\" | \\\"all\\\" | DataDetectorTypes[]\" } }, \"enablesReturnKeyAutomatically\": { \"defaultValue\": null, \"description\": \"If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\\nThe default value is false.\", \"name\": \"enablesReturnKeyAutomatically\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"keyboardAppearance\": { \"defaultValue\": null, \"description\": \"Determines the color of the keyboard.\", \"name\": \"keyboardAppearance\", \"required\": false, \"type\": { \"name\": \"\\\"default\\\" | \\\"light\\\" | \\\"dark\\\"\" } }, \"selectionState\": { \"defaultValue\": null, \"description\": \"See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document\", \"name\": \"selectionState\", \"required\": false, \"type\": { \"name\": \"DocumentSelectionState\" } }, \"spellCheck\": { \"defaultValue\": null, \"description\": \"If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect\", \"name\": \"spellCheck\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"textContentType\": { \"defaultValue\": null, \"description\": \"Give the keyboard and the system information about the expected\\nsemantic meaning for the content that users enter.\\n\\nFor iOS 11+ you can set `textContentType` to `username` or `password` to\\nenable autofill of login details from the device keychain.\\n\\nFor iOS 12+ `newPassword` can be used to indicate a new password input the\\nuser may want to save in the keychain, and `oneTimeCode` can be used to indicate\\nthat a field can be autofilled by a code arriving in an SMS.\\n\\nTo disable autofill, set textContentType to `none`.\\n\\nPossible values for `textContentType` are:\\n\\n  - `'none'`\\n  - `'URL'`\\n  - `'addressCity'`\\n  - `'addressCityAndState'`\\n  - `'addressState'`\\n  - `'countryName'`\\n  - `'creditCardNumber'`\\n  - `'emailAddress'`\\n  - `'familyName'`\\n  - `'fullStreetAddress'`\\n  - `'givenName'`\\n  - `'jobTitle'`\\n  - `'location'`\\n  - `'middleName'`\\n  - `'name'`\\n  - `'namePrefix'`\\n  - `'nameSuffix'`\\n  - `'nickname'`\\n  - `'organizationName'`\\n  - `'postalCode'`\\n  - `'streetAddressLine1'`\\n  - `'streetAddressLine2'`\\n  - `'sublocality'`\\n  - `'telephoneNumber'`\\n  - `'username'`\\n  - `'password'`\\n  - `'newPassword'`\\n  - `'oneTimeCode'`\", \"name\": \"textContentType\", \"required\": false, \"type\": { \"name\": \"\\\"name\\\" | \\\"none\\\" | \\\"URL\\\" | \\\"addressCity\\\" | \\\"addressCityAndState\\\" | \\\"addressState\\\" | \\\"countryName\\\" | \\\"creditCardNumber\\\" | \\\"emailAddress\\\" | \\\"familyName\\\" | \\\"fullStreetAddress\\\" | ... 16 more ... | \\\"oneTimeCode\\\"\" } }, \"scrollEnabled\": { \"defaultValue\": null, \"description\": \"If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}\", \"name\": \"scrollEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disableFullscreenUI\": { \"defaultValue\": null, \"description\": \"When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\\n   the OS may choose to have the user edit the text inside of a full screen text input mode.\\nWhen true, this feature is disabled and users will always edit the text directly inside of the text input.\\nDefaults to false.\", \"name\": \"disableFullscreenUI\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"inlineImageLeft\": { \"defaultValue\": null, \"description\": \"If defined, the provided image resource will be rendered on the left.\", \"name\": \"inlineImageLeft\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"inlineImagePadding\": { \"defaultValue\": null, \"description\": \"Padding between the inline image, if any, and the text input itself.\", \"name\": \"inlineImagePadding\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"numberOfLines\": { \"defaultValue\": null, \"description\": \"Sets the number of lines for a TextInput.\\nUse it with multiline set to true to be able to fill the lines.\", \"name\": \"numberOfLines\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"returnKeyLabel\": { \"defaultValue\": null, \"description\": \"Sets the return key to the label. Use it instead of `returnKeyType`.\\n@platform android\", \"name\": \"returnKeyLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"textBreakStrategy\": { \"defaultValue\": null, \"description\": \"Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\\nThe default value is simple.\", \"name\": \"textBreakStrategy\", \"required\": false, \"type\": { \"name\": \"\\\"simple\\\" | \\\"highQuality\\\" | \\\"balanced\\\"\" } }, \"underlineColorAndroid\": { \"defaultValue\": null, \"description\": \"The color of the textInput underline.\", \"name\": \"underlineColorAndroid\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"textAlignVertical\": { \"defaultValue\": null, \"description\": \"Vertically align text when `multiline` is set to true\", \"name\": \"textAlignVertical\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"top\\\" | \\\"bottom\\\" | \\\"center\\\"\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/TextInput.tsx#TextInput\"] = { docgenInfo: TextInput.__docgenInfo, name: \"TextInput\", path: \"src/components/Inputs/TextInput.tsx#TextInput\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    ForwardRefExoticComponent.displayName = \"ForwardRefExoticComponent\";\n    // @ts-ignore\n    ForwardRefExoticComponent.__docgenInfo = { \"description\": \"\", \"displayName\": \"ForwardRefExoticComponent\", \"props\": { \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"innerRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"innerRef\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"isInvalid\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isInvalid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetTextInputStyles, DeepPartial<TextInputStyles>>\" } }, \"allowFontScaling\": { \"defaultValue\": null, \"description\": \"Specifies whether fonts should scale to respect Text Size accessibility settings.\\nThe default is `true`.\", \"name\": \"allowFontScaling\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"autoCapitalize\": { \"defaultValue\": null, \"description\": \"Can tell TextInput to automatically capitalize certain characters.\\n      characters: all characters,\\n      words: first letter of each word\\n      sentences: first letter of each sentence (default)\\n      none: don't auto capitalize anything\\n\\nhttps://facebook.github.io/react-native/docs/textinput.html#autocapitalize\", \"name\": \"autoCapitalize\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"sentences\\\" | \\\"words\\\" | \\\"characters\\\"\" } }, \"autoCorrect\": { \"defaultValue\": null, \"description\": \"If false, disables auto-correct.\\nThe default value is true.\", \"name\": \"autoCorrect\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"autoFocus\": { \"defaultValue\": null, \"description\": \"If true, focuses the input on componentDidMount.\\nThe default value is false.\", \"name\": \"autoFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"blurOnSubmit\": { \"defaultValue\": null, \"description\": \"If true, the text field will blur when submitted.\\nThe default value is true.\", \"name\": \"blurOnSubmit\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"caretHidden\": { \"defaultValue\": null, \"description\": \"If true, caret is hidden. The default value is false.\", \"name\": \"caretHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"contextMenuHidden\": { \"defaultValue\": null, \"description\": \"If true, context menu is hidden. The default value is false.\", \"name\": \"contextMenuHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"defaultValue\": { \"defaultValue\": null, \"description\": \"Provides an initial value that will change when the user starts typing.\\nUseful for simple use-cases where you don't want to deal with listening to events\\nand updating the value prop to keep the controlled state in sync.\", \"name\": \"defaultValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"editable\": { \"defaultValue\": null, \"description\": \"If false, text is not editable. The default value is true.\", \"name\": \"editable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"keyboardType\": { \"defaultValue\": null, \"description\": \"enum(\\\"default\\\", 'numeric', 'email-address', \\\"ascii-capable\\\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\\n'decimal-pad', 'twitter', 'web-search', 'visible-password')\\nDetermines which keyboard to open, e.g.numeric.\\nThe following values work across platforms: - default - numeric - email-address - phone-pad\\nThe following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\\nThe following values work on Android: - visible-password\", \"name\": \"keyboardType\", \"required\": false, \"type\": { \"name\": \"KeyboardTypeOptions\" } }, \"maxLength\": { \"defaultValue\": null, \"description\": \"Limits the maximum number of characters that can be entered.\\nUse this instead of implementing the logic in JS to avoid flicker.\", \"name\": \"maxLength\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"multiline\": { \"defaultValue\": null, \"description\": \"If true, the text input can be multiple lines. The default value is false.\", \"name\": \"multiline\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onBlur\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input is blurred\", \"name\": \"onBlur\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputFocusEventData>) => void\" } }, \"onChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's text changes.\", \"name\": \"onChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputChangeEventData>) => void\" } }, \"onChangeText\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's text changes.\\nChanged text is passed as an argument to the callback handler.\", \"name\": \"onChangeText\", \"required\": false, \"type\": { \"name\": \"(text: string) => void\" } }, \"onContentSizeChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's content size changes.\\nThis will be called with\\n`{ nativeEvent: { contentSize: { width, height } } }`.\\n\\nOnly called for multiline text inputs.\", \"name\": \"onContentSizeChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => void\" } }, \"onEndEditing\": { \"defaultValue\": null, \"description\": \"Callback that is called when text input ends.\", \"name\": \"onEndEditing\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputEndEditingEventData>) => void\" } }, \"onFocus\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input is focused\", \"name\": \"onFocus\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputFocusEventData>) => void\" } }, \"onSelectionChange\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input selection is changed.\", \"name\": \"onSelectionChange\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputSelectionChangeEventData>) => void\" } }, \"onSubmitEditing\": { \"defaultValue\": null, \"description\": \"Callback that is called when the text input's submit button is pressed.\", \"name\": \"onSubmitEditing\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputSubmitEditingEventData>) => void\" } }, \"onScroll\": { \"defaultValue\": null, \"description\": \"Invoked on content scroll with\\n  `{ nativeEvent: { contentOffset: { x, y } } }`.\\n\\nMay also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.\", \"name\": \"onScroll\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputScrollEventData>) => void\" } }, \"onKeyPress\": { \"defaultValue\": null, \"description\": \"Callback that is called when a key is pressed.\\nThis will be called with\\n  `{ nativeEvent: { key: keyValue } }`\\nwhere keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\\n\\nFires before onChange callbacks.\\nNote: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.\", \"name\": \"onKeyPress\", \"required\": false, \"type\": { \"name\": \"(e: NativeSyntheticEvent<TextInputKeyPressEventData>) => void\" } }, \"placeholder\": { \"defaultValue\": null, \"description\": \"The string that will be rendered before text input has been entered\", \"name\": \"placeholder\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"placeholderTextColor\": { \"defaultValue\": null, \"description\": \"The text color of the placeholder string\", \"name\": \"placeholderTextColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"returnKeyType\": { \"defaultValue\": null, \"description\": \"enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\\nDetermines how the return key should look.\", \"name\": \"returnKeyType\", \"required\": false, \"type\": { \"name\": \"ReturnKeyTypeOptions\" } }, \"secureTextEntry\": { \"defaultValue\": null, \"description\": \"If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\\nThe default value is false.\", \"name\": \"secureTextEntry\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"selectTextOnFocus\": { \"defaultValue\": null, \"description\": \"If true, all text will automatically be selected on focus\", \"name\": \"selectTextOnFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"selection\": { \"defaultValue\": null, \"description\": \"The start and end of the text input's selection. Set start and end to\\nthe same value to position the cursor.\", \"name\": \"selection\", \"required\": false, \"type\": { \"name\": \"{ start: number; end?: number; }\" } }, \"selectionColor\": { \"defaultValue\": null, \"description\": \"The highlight (and cursor on ios) color of the text input\", \"name\": \"selectionColor\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"style\": { \"defaultValue\": null, \"description\": \"Styles\", \"name\": \"style\", \"required\": false, \"type\": { \"name\": \"StyleProp<TextStyle>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"Used to locate this view in end-to-end tests\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"inputAccessoryViewID\": { \"defaultValue\": null, \"description\": \"Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\\ncode.\\nSee https://facebook.github.io/react-native/docs/inputaccessoryview.html for more information.\", \"name\": \"inputAccessoryViewID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"value\": { \"defaultValue\": null, \"description\": \"The value to show for the text input. TextInput is a controlled component,\\nwhich means the native value will be forced to match this value prop if provided.\\nFor most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\\nIn addition to simply setting the same value, either set editable={false},\\nor set/update maxLength to prevent unwanted edits without flicker.\", \"name\": \"value\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"maxFontSizeMultiplier\": { \"defaultValue\": null, \"description\": \"Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\\n- null/undefined (default): inherit from the parent node or the global default (0)\\n- 0: no max, ignore parent/global default\\n- >= 1: sets the maxFontSizeMultiplier of this node to this value\", \"name\": \"maxFontSizeMultiplier\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"hitSlop\": { \"defaultValue\": null, \"description\": \"This defines how far a touch event can start away from the view.\\nTypical interface guidelines recommend touch targets that are at least\\n30 - 40 points/density-independent pixels. If a Touchable view has\\na height of 20 the touchable height can be extended to 40 with\\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\\nNOTE The touch area never extends past the parent view bounds and\\nthe Z-index of sibling views always takes precedence if a touch\\nhits two overlapping views.\", \"name\": \"hitSlop\", \"required\": false, \"type\": { \"name\": \"Insets\" } }, \"onLayout\": { \"defaultValue\": null, \"description\": \"Invoked on mount and layout changes with\\n\\n{nativeEvent: { layout: {x, y, width, height}}}.\", \"name\": \"onLayout\", \"required\": false, \"type\": { \"name\": \"(event: LayoutChangeEvent) => void\" } }, \"pointerEvents\": { \"defaultValue\": null, \"description\": \"In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\\n\\n.box-none {\\n   pointer-events: none;\\n}\\n.box-none * {\\n   pointer-events: all;\\n}\\n\\nbox-only is the equivalent of\\n\\n.box-only {\\n   pointer-events: all;\\n}\\n.box-only * {\\n   pointer-events: none;\\n}\\n\\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\", \"name\": \"pointerEvents\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"box-none\\\" | \\\"box-only\\\" | \\\"auto\\\"\" } }, \"removeClippedSubviews\": { \"defaultValue\": null, \"description\": \"This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews).\", \"name\": \"removeClippedSubviews\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"nativeID\": { \"defaultValue\": null, \"description\": \"Used to reference react managed views from native code.\", \"name\": \"nativeID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"collapsable\": { \"defaultValue\": null, \"description\": \"Views that are only used to layout their children or otherwise don't draw anything\\nmay be automatically removed from the native hierarchy as an optimization.\\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.\", \"name\": \"collapsable\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"needsOffscreenAlphaCompositing\": { \"defaultValue\": null, \"description\": \"Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\\nThe default (false) falls back to drawing the component and its children\\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\\n\\nRendering offscreen to preserve correct alpha behavior is extremely expensive\\nand hard to debug for non-native developers, which is why it is not turned on by default.\\nIf you do need to enable this property for an animation,\\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\\nIf that property is enabled, this View will be rendered off-screen once,\\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\", \"name\": \"needsOffscreenAlphaCompositing\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"renderToHardwareTextureAndroid\": { \"defaultValue\": null, \"description\": \"Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\\n\\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\", \"name\": \"renderToHardwareTextureAndroid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityViewIsModal\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\\n@platform ios\", \"name\": \"accessibilityViewIsModal\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityActions\": { \"defaultValue\": null, \"description\": \"Provides an array of custom actions available for accessibility.\\n@platform ios\", \"name\": \"accessibilityActions\", \"required\": false, \"type\": { \"name\": \"string[]\" } }, \"onAccessibilityAction\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function\\nwhen the user performs an accessibility custom action.\\n@platform ios\", \"name\": \"onAccessibilityAction\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"shouldRasterizeIOS\": { \"defaultValue\": null, \"description\": \"Whether this view should be rendered as a bitmap before compositing.\\n\\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\\nand quickly composite it during each frame.\\n\\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\\nTest and measure when using this property.\", \"name\": \"shouldRasterizeIOS\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"onStartShouldSetResponder\": { \"defaultValue\": null, \"description\": \"A view can become the touch responder by implementing the correct negotiation methods.\\nThere are two methods to ask the view if it wants to become responder:\\nDoes this view want to become responder on the start of a touch?\", \"name\": \"onStartShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponder\": { \"defaultValue\": null, \"description\": \"Called for every touch move on the View when it is not the responder: does this view want to \\\"claim\\\" touch responsiveness?\", \"name\": \"onMoveShouldSetResponder\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderEnd\": { \"defaultValue\": null, \"description\": \"If the View returns true and attempts to become the responder, one of the following will happen:\", \"name\": \"onResponderEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderGrant\": { \"defaultValue\": null, \"description\": \"The View is now responding for touch events.\\nThis is the time to highlight and show the user what is happening\", \"name\": \"onResponderGrant\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderReject\": { \"defaultValue\": null, \"description\": \"Something else is the responder right now and will not release it\", \"name\": \"onResponderReject\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderMove\": { \"defaultValue\": null, \"description\": \"If the view is responding, the following handlers can be called:\\nThe user is moving their finger\", \"name\": \"onResponderMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderRelease\": { \"defaultValue\": null, \"description\": \"Fired at the end of the touch, ie \\\"touchUp\\\"\", \"name\": \"onResponderRelease\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onResponderStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onResponderTerminationRequest\": { \"defaultValue\": null, \"description\": \"Something else wants to become responder.\\nShould this view release the responder? Returning true allows release\", \"name\": \"onResponderTerminationRequest\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onResponderTerminate\": { \"defaultValue\": null, \"description\": \"The responder has been taken from the View.\\nMight be taken by other views after a call to onResponderTerminationRequest,\\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)\", \"name\": \"onResponderTerminate\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onStartShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onStartShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onMoveShouldSetResponderCapture\": { \"defaultValue\": null, \"description\": \"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\\nwhere the deepest node is called first.\\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\\n\\nHowever, sometimes a parent will want to make sure that it becomes responder.\\nThis can be handled by using the capture phase.\\nBefore the responder system bubbles up from the deepest component,\\nit will do a capture phase, firing on*ShouldSetResponderCapture.\\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\\nit should have a onStartShouldSetResponderCapture handler which returns true.\", \"name\": \"onMoveShouldSetResponderCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => boolean\" } }, \"onTouchStart\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchStart\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchMove\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchMove\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEnd\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEnd\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchCancel\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchCancel\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"onTouchEndCapture\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTouchEndCapture\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"key\\\" | \\\"none\\\" | \\\"search\\\" | \\\"button\\\" | \\\"link\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"clearButtonMode\": { \"defaultValue\": null, \"description\": \"enum('never', 'while-editing', 'unless-editing', 'always')\\nWhen the clear button should appear on the right side of the text view\", \"name\": \"clearButtonMode\", \"required\": false, \"type\": { \"name\": \"\\\"never\\\" | \\\"while-editing\\\" | \\\"unless-editing\\\" | \\\"always\\\"\" } }, \"clearTextOnFocus\": { \"defaultValue\": null, \"description\": \"If true, clears the text field automatically when editing begins\", \"name\": \"clearTextOnFocus\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"dataDetectorTypes\": { \"defaultValue\": null, \"description\": \"Determines the types of data converted to clickable URLs in the text input.\\nOnly valid if `multiline={true}` and `editable={false}`.\\nBy default no data types are detected.\\n\\nYou can provide one type or an array of many types.\\n\\nPossible values for `dataDetectorTypes` are:\\n\\n- `'phoneNumber'`\\n- `'link'`\\n- `'address'`\\n- `'calendarEvent'`\\n- `'none'`\\n- `'all'`\", \"name\": \"dataDetectorTypes\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"link\\\" | \\\"phoneNumber\\\" | \\\"address\\\" | \\\"calendarEvent\\\" | \\\"all\\\" | DataDetectorTypes[]\" } }, \"enablesReturnKeyAutomatically\": { \"defaultValue\": null, \"description\": \"If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\\nThe default value is false.\", \"name\": \"enablesReturnKeyAutomatically\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"keyboardAppearance\": { \"defaultValue\": null, \"description\": \"Determines the color of the keyboard.\", \"name\": \"keyboardAppearance\", \"required\": false, \"type\": { \"name\": \"\\\"default\\\" | \\\"light\\\" | \\\"dark\\\"\" } }, \"selectionState\": { \"defaultValue\": null, \"description\": \"See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document\", \"name\": \"selectionState\", \"required\": false, \"type\": { \"name\": \"DocumentSelectionState\" } }, \"spellCheck\": { \"defaultValue\": null, \"description\": \"If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect\", \"name\": \"spellCheck\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"textContentType\": { \"defaultValue\": null, \"description\": \"Give the keyboard and the system information about the expected\\nsemantic meaning for the content that users enter.\\n\\nFor iOS 11+ you can set `textContentType` to `username` or `password` to\\nenable autofill of login details from the device keychain.\\n\\nFor iOS 12+ `newPassword` can be used to indicate a new password input the\\nuser may want to save in the keychain, and `oneTimeCode` can be used to indicate\\nthat a field can be autofilled by a code arriving in an SMS.\\n\\nTo disable autofill, set textContentType to `none`.\\n\\nPossible values for `textContentType` are:\\n\\n  - `'none'`\\n  - `'URL'`\\n  - `'addressCity'`\\n  - `'addressCityAndState'`\\n  - `'addressState'`\\n  - `'countryName'`\\n  - `'creditCardNumber'`\\n  - `'emailAddress'`\\n  - `'familyName'`\\n  - `'fullStreetAddress'`\\n  - `'givenName'`\\n  - `'jobTitle'`\\n  - `'location'`\\n  - `'middleName'`\\n  - `'name'`\\n  - `'namePrefix'`\\n  - `'nameSuffix'`\\n  - `'nickname'`\\n  - `'organizationName'`\\n  - `'postalCode'`\\n  - `'streetAddressLine1'`\\n  - `'streetAddressLine2'`\\n  - `'sublocality'`\\n  - `'telephoneNumber'`\\n  - `'username'`\\n  - `'password'`\\n  - `'newPassword'`\\n  - `'oneTimeCode'`\", \"name\": \"textContentType\", \"required\": false, \"type\": { \"name\": \"\\\"name\\\" | \\\"none\\\" | \\\"URL\\\" | \\\"addressCity\\\" | \\\"addressCityAndState\\\" | \\\"addressState\\\" | \\\"countryName\\\" | \\\"creditCardNumber\\\" | \\\"emailAddress\\\" | \\\"familyName\\\" | \\\"fullStreetAddress\\\" | ... 16 more ... | \\\"oneTimeCode\\\"\" } }, \"scrollEnabled\": { \"defaultValue\": null, \"description\": \"If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}\", \"name\": \"scrollEnabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"disableFullscreenUI\": { \"defaultValue\": null, \"description\": \"When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\\n   the OS may choose to have the user edit the text inside of a full screen text input mode.\\nWhen true, this feature is disabled and users will always edit the text directly inside of the text input.\\nDefaults to false.\", \"name\": \"disableFullscreenUI\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"inlineImageLeft\": { \"defaultValue\": null, \"description\": \"If defined, the provided image resource will be rendered on the left.\", \"name\": \"inlineImageLeft\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"inlineImagePadding\": { \"defaultValue\": null, \"description\": \"Padding between the inline image, if any, and the text input itself.\", \"name\": \"inlineImagePadding\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"numberOfLines\": { \"defaultValue\": null, \"description\": \"Sets the number of lines for a TextInput.\\nUse it with multiline set to true to be able to fill the lines.\", \"name\": \"numberOfLines\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"returnKeyLabel\": { \"defaultValue\": null, \"description\": \"Sets the return key to the label. Use it instead of `returnKeyType`.\\n@platform android\", \"name\": \"returnKeyLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"textBreakStrategy\": { \"defaultValue\": null, \"description\": \"Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\\nThe default value is simple.\", \"name\": \"textBreakStrategy\", \"required\": false, \"type\": { \"name\": \"\\\"simple\\\" | \\\"highQuality\\\" | \\\"balanced\\\"\" } }, \"underlineColorAndroid\": { \"defaultValue\": null, \"description\": \"The color of the textInput underline.\", \"name\": \"underlineColorAndroid\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"textAlignVertical\": { \"defaultValue\": null, \"description\": \"Vertically align text when `multiline` is set to true\", \"name\": \"textAlignVertical\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"top\\\" | \\\"bottom\\\" | \\\"center\\\"\" } }, \"ref\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"ref\", \"required\": false, \"type\": { \"name\": \"Ref<TextInput>\" } }, \"key\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"key\", \"required\": false, \"type\": { \"name\": \"ReactText\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Inputs/TextInput.tsx#ForwardRefExoticComponent\"] = { docgenInfo: ForwardRefExoticComponent.__docgenInfo, name: \"ForwardRefExoticComponent\", path: \"src/components/Inputs/TextInput.tsx#ForwardRefExoticComponent\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  return {\n    base: {\n      backgroundColor: theme.colors.background.plain,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.disabled,\n    },\n    focusBackgroundColor: theme.colors.background.tint1,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large.fontSize || 18,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: theme.textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\ntry {\n    // @ts-ignore\n    getListItemVariables.displayName = \"getListItemVariables\";\n    // @ts-ignore\n    getListItemVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getListItemVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.styles.ts#getListItemVariables\"] = { docgenInfo: getListItemVariables.__docgenInfo, name: \"getListItemVariables\", path: \"src/components/ListItem/ListItem.styles.ts#getListItemVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { ThemeContext } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  avatarProps?: AvatarProps;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nconst ListItem = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    leftIcon,\n    testID,\n    ...accessibilityProps\n  } = props;\n  const theme = React.useContext(ThemeContext);\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          <View style={imageWrapperStyle}>{leftIcon}</View>\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport default ListItem;\ntry {\n    // @ts-ignore\n    ListItem.displayName = \"ListItem\";\n    // @ts-ignore\n    ListItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListItem\", \"props\": { \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"description\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"description\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"avatarProps\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"avatarProps\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"leftIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"leftIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"rightIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"rightIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"onPress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onPress\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"button\\\" | \\\"link\\\" | \\\"search\\\" | \\\"image\\\" | \\\"text\\\" | \\\"adjustable\\\" | \\\"header\\\" | \\\"summary\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.tsx#ListItem\"] = { docgenInfo: ListItem.__docgenInfo, name: \"ListItem\", path: \"src/components/ListItem/ListItem.tsx#ListItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { default as ListItem, ListItemProps } from './ListItem';\n"],"sourceRoot":""}