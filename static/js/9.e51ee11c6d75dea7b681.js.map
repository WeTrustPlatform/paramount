{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Button/BackButton.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/Button.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Button/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/Counter.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/Counter.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Counter/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Icon/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/LoadingDots.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Loading/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/ProgressBar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/ProgressBar/index.ts","/home/travis/build/WeTrustPlatform/paramount/src/constants/Animation.ts"],"names":["React","_interopRequireWildcard","__webpack_require__","_theme","_Icon","_Button","BackButton","props","theme","useTheme","createElement","Button","_extends2","appearance","isInline","iconBefore","Icon","name","size","color","colors","text","getButtonVariables","appearances","minimal","default","backgroundColor","background","content","focusColor","greyDefault","danger","primary","secondary","greyLight","borderColor","border","loadingBackgroundColor","overlay","dangerDefault","white","dangerDark","dangerLight","primaryDefault","primaryDark","primaryLight","secondaryDefault","secondaryDark","secondaryLight","outline","borderWidth","disabled","greyDark","muted","sizes","small","borderRadius","controlBorderRadius","fontSize","textSizes","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","getButtonStyles","buttonStyleProps","isDisabled","isLoading","_getButtonVariables","baseStyles","_objectWithoutProperties2","_appearances$appearan","textColor","buttonStyle","_sizes$size","shapeStyles","disabledButtonTextColor","disabledButtonStyles","_objectSpread2","alignSelf","flexDirection","flexWrap","textStyle","alignItems","display","fontWeight","justifyContent","textAlign","_reactNative","_mergeStyles2","_Box","_Loading","_Typography","_props$appearance","_props$color","title","getStyles","iconAfter","icon","_props$isDisabled","iconLoading","isActive","_props$isInline","_props$isLoading","_props$onPress","onPress","_props$size","testID","accessibilityProps","_mergeStyles","mergeStyles","TouchableHighlight","accessible","accessibilityRole","underlayColor","style","View","Box","ButtonContent","LoadingDots","Text","Object","keys","forEach","key","defineProperty","exports","enumerable","get","_BackButton","getCounterVariables","container","count","counter","width","getCounterStyles","counterVariables","containerStyle","countStyle","counterStyle","disabledStyle","_Counter","Counter","component","max","min","onIncrement","onDecrement","isDecrementDisabled","isIncrementDisabled","TouchableOpacity","activeOpacity","undefined","concat","Feather","_ref","IconTag","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","_native","AnimatedView","animated","items","trail","useTrail","length","config","duration","from","opacity","reset","to","_to","_asyncToGenerator2","_regenerator","mark","_callee","next","wrap","_context","prev","stop","_x","apply","this","arguments","map","index","marginLeft","marginRight","_LoadingDots","_react2","_interopRequireDefault","_reactPowerplug","_docz","_","layoutProps","MDXLayout","MDXContent","components","mdx","mdxType","id","Playground","__position","__code","__scope","CounterContainer","Props","ProgressBar","initial","_ref2","incBy","decBy","percent","progressStyle","of","isMDXComponent","getProgressBarStyles","overflow","_Animation","_ProgressBar","_props$percent","boundPercent","Math","useSpring","springDefaultConfig","Platform","OS","interpolate","w","friction","tension"],"mappings":"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","file":"static/js/9.ea21e025.js","sourcesContent":["import * as React from 'react';\n\nimport { useTheme } from '../../theme';\nimport { Icon } from '../Icon';\nimport { Button, ButtonProps } from './Button';\n\nexport const BackButton = (props: ButtonProps) => {\n  const theme = useTheme();\n\n  return (\n    <Button\n      appearance=\"minimal\"\n      isInline\n      iconBefore={\n        <Icon name=\"arrow-left\" size={24} color={theme.colors.text.default} />\n      }\n      size=\"small\"\n      {...props}\n    />\n  );\n};\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport type ButtonColorProps = ViewStyle & {\n  color: string;\n  focusColor: string;\n  loadingBackgroundColor?: string;\n};\n\nexport interface ButtonColors {\n  default: ButtonColorProps;\n  danger: ButtonColorProps;\n  primary: ButtonColorProps;\n  secondary: ButtonColorProps;\n}\n\nexport type ButtonColor = keyof ButtonColors;\n\nexport interface ButtonAppearances {\n  minimal: ButtonColors;\n  primary: ButtonColors;\n  outline: ButtonColors;\n}\n\nexport type ButtonAppearance = keyof ButtonAppearances;\n\nexport type SizeStyles = ViewStyle & {\n  borderRadius: number;\n  fontSize: number;\n  height: number;\n  paddingLeft: number;\n  paddingRight: number;\n};\n\nexport interface ButtonSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport type ButtonSize = keyof ButtonSizes;\n\nexport interface ButtonVariables {\n  appearances: ButtonAppearances;\n  disabled: {\n    backgroundColor: string;\n    color: string;\n  };\n  sizes: ButtonSizes;\n}\n\nexport const getButtonVariables = (theme: Theme): ButtonVariables => {\n  return {\n    appearances: {\n      minimal: {\n        default: {\n          backgroundColor: theme.colors.background.content,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.content,\n          color: theme.colors.text.danger,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n        primary: {\n          backgroundColor: theme.colors.background.content,\n          color: theme.colors.text.primary,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n        secondary: {\n          backgroundColor: theme.colors.background.content,\n          color: theme.colors.text.secondary\n            ? theme.colors.text.secondary\n            : theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n      },\n      primary: {\n        default: {\n          backgroundColor: theme.colors.background.greyLight,\n          borderColor: theme.colors.border.default,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n          loadingBackgroundColor: theme.colors.background.overlay,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.dangerDefault,\n          borderColor: theme.colors.border.danger,\n          color: theme.colors.text.white,\n\n          focusColor: theme.colors.background.dangerDark,\n          loadingBackgroundColor: theme.colors.background.dangerLight,\n        },\n\n        primary: {\n          backgroundColor: theme.colors.background.primaryDefault,\n          borderColor: theme.colors.border.primary,\n          color: theme.colors.text.white,\n\n          focusColor: theme.colors.background.primaryDark,\n          loadingBackgroundColor: theme.colors.background.primaryLight,\n        },\n\n        secondary: {\n          backgroundColor: theme.colors.background.secondaryDefault,\n          borderColor: theme.colors.border.secondary,\n          color: theme.colors.text.white,\n\n          focusColor: theme.colors.background.secondaryDark,\n          loadingBackgroundColor: theme.colors.background.secondaryLight,\n        },\n      },\n\n      outline: {\n        default: {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.text.default,\n          borderWidth: 3,\n          color: theme.colors.text.default,\n\n          focusColor: theme.colors.background.greyDefault,\n        },\n\n        danger: {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.danger,\n          borderWidth: 3,\n          color: theme.colors.text.danger,\n\n          focusColor: theme.colors.background.dangerLight,\n        },\n\n        primary: {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.primary,\n          borderWidth: 3,\n          color: theme.colors.text.primary,\n\n          focusColor: theme.colors.background.primaryLight,\n        },\n\n        secondary: {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.secondary,\n          borderWidth: 3,\n          color: theme.colors.text.secondary,\n\n          focusColor: theme.colors.background.secondaryLight,\n        },\n      },\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.greyDark,\n\n      color: theme.colors.text.muted,\n    },\n    sizes: {\n      small: {\n        borderRadius: theme.controlBorderRadius.small,\n        fontSize: theme.textSizes.small.fontSize || 14,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small * 2,\n        paddingRight: theme.controlPaddings.small * 2,\n      },\n\n      medium: {\n        borderRadius: theme.controlBorderRadius.medium,\n        fontSize: theme.textSizes.medium.fontSize || 16,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium * 2,\n        paddingRight: theme.controlPaddings.medium * 2,\n      },\n\n      large: {\n        borderRadius: theme.controlBorderRadius.large,\n        fontSize: theme.textSizes.large.fontSize || 20,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large * 2,\n        paddingRight: theme.controlPaddings.large * 2,\n      },\n    },\n  };\n};\n\nexport interface ButtonStyles {\n  buttonStyle: ViewStyle;\n  textStyle: TextStyle;\n  focusColor: string;\n}\n\nexport interface ButtonStylesProps {\n  appearance: ButtonAppearance;\n  color: ButtonColor;\n  size: ButtonSize;\n  isDisabled: boolean;\n  isLoading: boolean;\n  isInline: boolean;\n}\nexport type GetButtonStyles = (\n  buttonStylesProps: ButtonStylesProps,\n  theme: Theme,\n) => ButtonStyles;\n\nexport const getButtonStyles: GetButtonStyles = (buttonStyleProps, theme) => {\n  const {\n    appearance,\n    color,\n    size,\n    isDisabled,\n    isLoading,\n    isInline,\n  } = buttonStyleProps;\n\n  const { appearances, sizes, disabled, ...baseStyles } = getButtonVariables(\n    theme,\n  );\n\n  const {\n    color: textColor,\n    focusColor,\n    loadingBackgroundColor,\n    ...buttonStyle\n  } = appearances[appearance][color];\n\n  const { fontSize, ...shapeStyles } = sizes[size];\n  const { color: disabledButtonTextColor, ...disabledButtonStyles } = disabled;\n\n  return {\n    buttonStyle: {\n      ...(isDisabled\n        ? {\n            ...disabledButtonStyles,\n            ...shapeStyles,\n          }\n        : {\n            ...shapeStyles,\n            ...baseStyles,\n            ...buttonStyle,\n            ...(isLoading ? { backgroundColor: loadingBackgroundColor } : {}),\n          }),\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }\n        : {}),\n    },\n    focusColor,\n    textStyle: {\n      alignItems: 'center',\n      color: isDisabled ? disabledButtonTextColor : textColor,\n      display: 'flex',\n      fontSize,\n      fontWeight: '600',\n      justifyContent: 'center',\n      textAlign: 'center',\n    },\n  };\n};\n","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  TextStyle,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Box } from '../Box';\nimport { LoadingDots } from '../Loading';\nimport { Text } from '../Typography';\nimport {\n  ButtonAppearance,\n  ButtonColor,\n  ButtonSize,\n  ButtonStyles,\n  GetButtonStyles,\n  getButtonStyles,\n} from './Button.styles';\n\nexport interface ButtonProps extends AccessibilityProps {\n  title?: string;\n\n  /**\n   * Icon in place of title\n   * @default \"null\"\n   */\n  icon?: React.ReactNode;\n\n  /**\n   * The intent of the button.\n   * @default \"default\"\n   */\n  color?: ButtonColor;\n\n  /**\n   * The appearance of the button.\n   * @default \"primary\"\n   */\n  appearance?: ButtonAppearance;\n\n  /**\n   * The size of the button.\n   * @default \"medium\"\n   */\n  size?: ButtonSize;\n\n  /**\n   * When true, show a loading spinner before the title. This also disables the button.\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Forcefully set the active state of a button.\n   * @default false\n   */\n  isActive?: boolean;\n\n  /**\n   * When true, the button is disabled. isLoading also sets the button to disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, the button will not stretch full width\n   * @default false\n   */\n  isInline?: boolean;\n\n  /**\n   * Button press handler\n   * @default () => {}\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /**\n   * Sets an icon before the text.\n   * @default undefined\n   */\n  iconBefore?: React.ReactNode;\n\n  /**\n   * Sets an icon after the text.\n   * @default undefined\n   */\n  iconAfter?: React.ReactNode;\n\n  /**\n   * Sets an icon at loading state.\n   * @default undefined\n   */\n  iconLoading?: React.ReactNode;\n\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetButtonStyles, DeepPartial<ButtonStyles>>;\n\n  testID?: string;\n}\n\nexport const Button = (props: ButtonProps) => {\n  const {\n    appearance = 'primary',\n    title,\n    color = 'default',\n    getStyles,\n    icon,\n    iconAfter,\n    iconBefore,\n    iconLoading,\n    isActive = false,\n    isDisabled = false,\n    isInline = false,\n    isLoading = false,\n    onPress = () => {\n      return;\n    },\n    size = 'medium',\n    testID,\n\n    ...accessibilityProps\n  } = props;\n\n  const theme = useTheme();\n\n  const { buttonStyle, textStyle, focusColor } = mergeStyles(\n    getButtonStyles,\n    getStyles,\n  )(\n    {\n      appearance,\n      color,\n      isDisabled,\n      isInline,\n      isLoading,\n      size,\n    },\n    theme,\n  );\n\n  return (\n    <TouchableHighlight\n      accessible\n      accessibilityRole=\"button\"\n      underlayColor={focusColor}\n      disabled={!!(isDisabled || isLoading)}\n      onPress={onPress}\n      style={buttonStyle}\n      testID={testID}\n      {...accessibilityProps}\n    >\n      <View\n        style={{\n          alignItems: 'center',\n          flexDirection: 'row',\n          height: '100%',\n          justifyContent: 'center',\n        }}\n      >\n        {iconBefore}\n        <Box paddingLeft={iconBefore ? 8 : 0} paddingRight={iconAfter ? 8 : 0}>\n          {/*\n        // @ts-ignore */}\n          <ButtonContent {...props} textStyle={textStyle} />\n        </Box>\n        {iconAfter}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport interface ButtonContentProps extends ButtonProps {\n  textStyle: TextStyle;\n}\n\nconst ButtonContent = (props: ButtonContentProps) => {\n  const { isLoading, iconLoading, icon, title, textStyle } = props;\n\n  if (isLoading) return iconLoading || <LoadingDots color={textStyle.color} />;\n  if (icon) return icon;\n  if (title) return <Text getStyles={() => ({ textStyle })}>{title}</Text>;\n\n  return null;\n};\n","export * from './Button';\nexport * from './BackButton';\n","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\n\nexport interface CounterVariables {\n  container: ViewStyle;\n  count: ViewStyle;\n  counter: ViewStyle;\n  disabled: ViewStyle;\n}\n\nexport const getCounterVariables = (theme: Theme): CounterVariables => {\n  return {\n    container: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    count: {\n      justifyContent: 'center',\n    },\n    counter: {\n      alignItems: 'center',\n      borderColor: theme.colors.border.primary,\n      borderRadius: 999,\n      borderWidth: 1,\n      display: 'flex',\n      height: 40,\n      justifyContent: 'center',\n      width: 40,\n    },\n    disabled: {\n      borderColor: theme.colors.border.default,\n    },\n  };\n};\n\nexport interface CounterStyles {\n  containerStyle: ViewStyle;\n  countStyle: ViewStyle;\n  counterStyle: ViewStyle;\n  disabledStyle: ViewStyle;\n  textStyle: TextStyle;\n}\n\nexport type GetCounterStyles = (theme: Theme) => CounterStyles;\n\nexport const getCounterStyles: GetCounterStyles = theme => {\n  const counterVariables = getCounterVariables(theme);\n  const { container, counter, count, disabled } = counterVariables;\n\n  return {\n    containerStyle: container,\n    countStyle: count,\n    counterStyle: counter,\n    disabledStyle: disabled,\n    textStyle: {},\n  };\n};\n","import * as React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Box } from '../Box';\nimport { Icon } from '../Icon';\nimport { Text } from '../Typography';\nimport {\n  CounterStyles,\n  GetCounterStyles,\n  getCounterStyles,\n} from './Counter.styles';\n\nexport interface CounterProps {\n  count: number;\n  min?: number;\n  max?: number;\n  /* custom component in place of count */\n  component?: React.ReactNode;\n  onIncrement?: () => void;\n  onDecrement?: () => void;\n  /**\n   * Inline styles for components\n   */\n  getStyles?: ReplaceReturnType<GetCounterStyles, DeepPartial<CounterStyles>>;\n}\n\nexport const Counter = (props: CounterProps) => {\n  const {\n    count,\n    component,\n    max,\n    min,\n    onIncrement,\n    onDecrement,\n    getStyles,\n  } = props;\n\n  const theme = useTheme();\n\n  const {\n    containerStyle,\n    counterStyle,\n    countStyle,\n    textStyle,\n    disabledStyle,\n  } = mergeStyles(getCounterStyles, getStyles)(theme);\n\n  const isDecrementDisabled = min === count;\n  const isIncrementDisabled = max === count;\n\n  return (\n    <View style={containerStyle}>\n      <Box paddingRight={16}>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          style={{\n            ...counterStyle,\n            ...(isDecrementDisabled && disabledStyle),\n          }}\n          disabled={isDecrementDisabled}\n          onPress={!isDecrementDisabled ? onDecrement : undefined}\n        >\n          <Icon\n            name=\"minus\"\n            size={16}\n            color={\n              isDecrementDisabled\n                ? theme.colors.text.muted\n                : theme.colors.text.primary\n            }\n          />\n        </TouchableOpacity>\n      </Box>\n      {component || (\n        <View style={countStyle}>\n          <Text getStyles={() => ({ textStyle })}>{`${count}`}</Text>\n        </View>\n      )}\n      <Box paddingLeft={16}>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          style={{\n            ...counterStyle,\n            ...(isIncrementDisabled && disabledStyle),\n          }}\n          disabled={isIncrementDisabled}\n          onPress={!isIncrementDisabled ? onIncrement : undefined}\n        >\n          <Icon\n            name=\"plus\"\n            size={16}\n            color={\n              isIncrementDisabled\n                ? theme.colors.text.muted\n                : theme.colors.text.primary\n            }\n          />\n        </TouchableOpacity>\n      </Box>\n    </View>\n  );\n};\n","export * from './Counter';\n","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport const Icon = ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export * from './Icon';\n","import * as React from 'react';\nimport { View } from 'react-native';\nimport { animated, useTrail } from 'react-spring/native.cjs';\n\nconst AnimatedView = animated(View);\n\nexport interface LoadingDotsProps {\n  color?: string;\n  size?: number;\n}\n\nconst items = ['1', '2', '3'];\n\nexport const LoadingDots = (props: LoadingDotsProps) => {\n  const { size = 10, color = '#aaa' } = props;\n\n  const trail = useTrail(items.length, {\n    config: { duration: 800 },\n    from: { opacity: 0 },\n    reset: true,\n    to: async next => {\n      while (true) {\n        // tslint:disable-next-line\n        await next({ opacity: 1 });\n        // tslint:disable-next-line\n        await next({ opacity: 0 });\n      }\n    },\n  });\n\n  return (\n    <View\n      style={{\n        alignItems: 'center',\n        flexDirection: 'row',\n        justifyContent: 'center',\n      }}\n    >\n      {trail.map((style, index) => (\n        <AnimatedView\n          key={items[index]}\n          // @ts-ignore\n          style={{\n            backgroundColor: color,\n            borderRadius: '50%',\n            height: size,\n            marginLeft: 3,\n            marginRight: 3,\n            opacity: style.opacity,\n            width: size,\n          }}\n        />\n      ))}\n    </View>\n  );\n};\n","export * from './LoadingDots';\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Counter as CounterContainer } from 'react-powerplug';\nimport { Playground, Props } from 'docz';\nimport { ProgressBar } from '.';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Counter } from '../Counter';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"progressbar\"\n    }}>{`ProgressBar`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<CounterContainer initial={0}>\\n  {({ count, incBy, decBy }) => (\\n    <Box>\\n      <ProgressBar\\n        percent={count}\\n        size=\\\"large\\\"\\n        getStyles={(props, theme) => ({\\n          containerStyle: {},\\n          progressStyle: {},\\n        })}\\n      />\\n      <Counter\\n        count={count}\\n        onDecrement={() => decBy(10)}\\n        onIncrement={() => incBy(10)}\\n        min={0}\\n        max={100}\\n      />\\n    </Box>\\n  )}\\n</CounterContainer>'} __scope={{\n      props: this ? this.props : props,\n      CounterContainer,\n      Playground,\n      Props,\n      ProgressBar,\n      Box,\n      Button,\n      Counter\n    }} mdxType=\"Playground\">\n  <CounterContainer initial={0} mdxType=\"CounterContainer\">\n    {({\n          count,\n          incBy,\n          decBy\n        }) => <Box mdxType=\"Box\">\n        <ProgressBar percent={count} size=\"large\" getStyles={(props, theme) => ({\n            containerStyle: {},\n            progressStyle: {}\n          })} mdxType=\"ProgressBar\" />\n        <Counter count={count} onDecrement={() => decBy(10)} onIncrement={() => incBy(10)} min={0} max={100} mdxType=\"Counter\" />\n      </Box>}\n  </CounterContainer>\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={ProgressBar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ViewStyle } from 'react-native';\n\nimport { ControlSize, Theme } from '../../theme/ThemeInterface';\n\nexport interface ProgressBarVariables {\n  container: ViewStyle;\n  progress: ViewStyle;\n}\n\nexport interface ProgressBarStylesProps {\n  size: ControlSize;\n}\n\nexport type GetProgressBarStyles = (\n  progressStylesProps: ProgressBarStylesProps,\n  theme: Theme,\n) => ProgressBarStyles;\n\nexport interface ProgressBarStyles {\n  progressStyle: ViewStyle;\n  containerStyle: ViewStyle;\n}\n\nexport const getProgressBarStyles: GetProgressBarStyles = ({ size }, theme) => {\n  const height = theme.controlHeights[size] - 16;\n\n  return {\n    containerStyle: {\n      backgroundColor: theme.colors.background.greyDefault,\n      borderRadius: 999,\n      height,\n      overflow: 'hidden',\n    },\n    progressStyle: {\n      backgroundColor: theme.colors.background.primaryDefault,\n      borderRadius: 999,\n      height: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Platform, View } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, useTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport {\n  GetProgressBarStyles,\n  getProgressBarStyles,\n  ProgressBarStyles,\n} from './ProgressBar.styles';\n\nconst AnimatedView = animated(View);\n\nexport interface ProgressBarProps {\n  percent?: number;\n  size?: ControlSize;\n  getStyles?: ReplaceReturnType<\n    GetProgressBarStyles,\n    DeepPartial<ProgressBarStyles>\n  >;\n  testID?: string;\n}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { percent = 0, size = 'medium', getStyles, testID } = props;\n  const theme = useTheme();\n\n  const { containerStyle, progressStyle } = mergeStyles(\n    getProgressBarStyles,\n    getStyles,\n  )({ size }, theme);\n\n  const boundPercent = Math.max(Math.min(percent, 100), 0);\n  const { width } = useSpring({\n    config: springDefaultConfig,\n    from: { width: boundPercent },\n    width: boundPercent,\n  });\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      <AnimatedView\n        // @ts-ignore\n        accessibilityRole={Platform.OS === 'web' ? 'progress' : 'none'}\n        // @ts-ignore\n        style={{\n          ...progressStyle,\n          width: width.interpolate(w => `${w}%`),\n        }}\n      />\n    </View>\n  );\n};\n","export * from './ProgressBar';\n","export const springDefaultConfig = {\n  friction: 40,\n  tension: 400,\n};\n"],"sourceRoot":""}