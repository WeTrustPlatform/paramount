{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.mdx","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Avatar/Avatar.tsx","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.styles.ts","/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/Text.tsx","/home/travis/build/WeTrustPlatform/paramount/src/theme/palette.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/defaultTheme.ts","/home/travis/build/WeTrustPlatform/paramount/src/theme/Theme.tsx","/home/travis/build/WeTrustPlatform/paramount/src/utils/mergeStyles.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__","mdxType","__source","fileName","_jsxFileName","lineNumber","id","docz__WEBPACK_IMPORTED_MODULE_4__","__position","__code","__scope","this","Playground","Props","Avatar","___WEBPACK_IMPORTED_MODULE_5__","name","source","uri","size","isSolid","color","getInitials","fallback","concat","charAt","getStyles","theme","boxStyle","textStyle","imageStyle","of","isMDXComponent","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","getAvatarProps","fills","hashValue","appearances","keys","getAvatarStyles","_ref2","colorProps","_ref2$size","_ref2$sizeLimitOneCha","sizeLimitOneCharacter","newHashValue","initialsFontSize","ceil","getAvatarInitialsFontSize","containerStyle","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","fontSize","lineHeight","globalGetInitials","arguments","undefined","replace","split","slice","map","v","toUpperCase","join","_props$size","_props$isSolid","_props$getInitials","_props$color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","testID","useTheme","imageUnavailable","initials","substring","_mergeStyles","mergeStyles","react","View","style","Text","Image","getFontFamily","fontFamilies","fontFamily","getFontWeight","fontWeights","fontWeight","getTextColor","textColors","textColor","getTextSize","textSizes","getTextStyles","isInline","isItalic","align","transform","weight","sizeStyle","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","colors","text","textAlign","alignSelf","flexDirection","fontStyle","textTransform","children","_props$fontFamily","_props$align","_props$isInline","_props$isItalic","textProps","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2__","react_native_web_dist_exports_Text__WEBPACK_IMPORTED_MODULE_3__","_home_travis_build_WeTrustPlatform_paramount_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","palette","lightest","light","base","dark","darkest","controlBorderRadius","small","medium","large","background","content","overlay","greyLight","greyDefault","greyDark","primaryLight","primaryDefault","primaryDark","secondaryLight","secondaryDefault","secondaryDark","dangerLight","dangerDefault","dangerDark","infoLight","infoDefault","infoDark","successLight","successDefault","successDark","warningLight","warningDefault","warningDark","border","default","primary","secondary","danger","info","success","warning","button","disabled","disabledText","defaultText","primaryText","secondaryText","dangerText","link","muted","white","selected","elevations","elevation","shadowColor","shadowOffset","shadowOpacity","shadowRadius","defaultTheme","solid","neutral","blue","red","orange","yellow","green","teal","purple","subtle","Platform","OS","heading","mono","bold","normal","headingSizes","xxxlarge","letterSpacing","xxlarge","xlarge","paragraphSizes","xsmall","controlHeights","controlPaddings","containerShapes","circle","pill","rounded","roundedBottom","borderBottomLeftRadius","borderBottomRightRadius","roundedLeft","borderTopLeftRadius","roundedRight","borderTopRightRadius","roundedTop","square","ThemeContext","React","createContext","createTheme","deepMerge","ThemeProvider","_props$value","value","react_default","a","createElement","Provider","useContext","__webpack_require__","d","__webpack_exports__","deepmerge__WEBPACK_IMPORTED_MODULE_0__","deepmerge__WEBPACK_IMPORTED_MODULE_0___default","n","getDefaultStyles","getOverridingStyles","getThemeStyles","styles","push","merge","all"],"mappings":"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","file":"static/js/25.5f1ae589.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Avatar } from '..';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"avatar\"\n    }}>{`Avatar`}</h1>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <Playground __position={0} __code={'<Avatar\\n  name=\\\"Bill Gates\\\"\\n  source={{ uri: \\'https://picsum.photos/200/200\\' }}\\n  size={40}\\n  isSolid={false}\\n  color=\\\"automatic\\\"\\n  getInitials={(name, fallback) =>\\n    name ? `${name.charAt(0)}${name.charAt(5)}` : \\'A\\'\\n  }\\n  getStyles={(props, theme) => ({\\n    boxStyle: {},\\n    textStyle: {},\\n    imageStyle: {},\\n  })}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" source={{\n        uri: 'https://picsum.photos/200/200'\n      }} size={40} isSolid={false} color=\"automatic\" getInitials={(name, fallback) => name ? `${name.charAt(0)}${name.charAt(5)}` : 'A'} getStyles={(props, theme) => ({\n        boxStyle: {},\n        textStyle: {},\n        imageStyle: {}\n      })} mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"automatic-name-usage\"\n    }}>{`Automatic name usage`}</h3>\n    <Playground __position={1} __code={'<Avatar name=\\\"Bill Gates\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Avatar\n    }} mdxType=\"Playground\">\n  <Avatar name=\"Bill Gates\" mdxType=\"Avatar\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h3>\n    <Props of={Avatar} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import { ImageStyle, TextStyle, ViewStyle } from 'react-native';\n\nimport { FillColors, Fills, Theme } from '../../theme/Theme';\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    // tslint:disable-next-line\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    // tslint:disable-next-line\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nexport interface AvatarStylesProps {\n  name?: string;\n  color: AvatarColor;\n  hashValue?: string;\n  isSolid: boolean;\n  size: number;\n  sizeLimitOneCharacter: number;\n}\n\nexport interface AvatarStyles {\n  containerStyle: ViewStyle;\n  textStyle: TextStyle;\n  imageStyle: ImageStyle;\n}\n\nconst getAvatarInitialsFontSize = (\n  size: number,\n  sizeLimitOneCharacter: number,\n) => {\n  if (size <= sizeLimitOneCharacter) {\n    return Math.ceil(size / 2.2);\n  }\n  return Math.ceil(size / 2.6);\n};\n\nconst getAvatarProps = (\n  fills: Fills,\n  {\n    isSolid,\n    color,\n    hashValue,\n  }: {\n    isSolid?: boolean;\n    color: AvatarColor;\n    hashValue: number;\n  },\n) => {\n  const appearances = fills[isSolid ? 'solid' : 'subtle'];\n\n  if (color === 'automatic') {\n    const keys = Object.keys(appearances);\n    const key = keys[hashValue % keys.length] as keyof FillColors;\n    return appearances[key];\n  }\n\n  return appearances[color];\n};\n\nexport type GetAvatarStyles = (\n  avatarStylesProps: AvatarStylesProps,\n  theme: Theme,\n) => AvatarStyles;\n\nexport const getAvatarStyles: GetAvatarStyles = (\n  { name, color, hashValue, isSolid, size = 24, sizeLimitOneCharacter = 20 },\n  theme,\n) => {\n  let colorProps;\n  const fills = theme.fills;\n  if (color === 'automatic') {\n    const newHashValue = hashCode(hashValue || name);\n    colorProps = getAvatarProps(theme.fills, {\n      color,\n      hashValue: newHashValue,\n      isSolid,\n    });\n  } else {\n    colorProps = getAvatarProps(fills, { color, isSolid, hashValue: 0 });\n  }\n\n  const initialsFontSize = getAvatarInitialsFontSize(\n    size,\n    sizeLimitOneCharacter,\n  );\n\n  return {\n    containerStyle: {\n      alignItems: 'center',\n      backgroundColor: colorProps.backgroundColor,\n      borderRadius: 9999,\n      display: 'flex',\n      height: size,\n      justifyContent: 'center',\n      overflow: 'hidden',\n      position: 'relative',\n      width: size,\n    },\n\n    textStyle: {\n      color: colorProps.color,\n      fontSize: initialsFontSize,\n      lineHeight: initialsFontSize,\n    },\n\n    imageStyle: {\n      height: '100%',\n      width: '100%',\n    },\n  };\n};\n","import * as React from 'react';\nimport { Image, ImageSourcePropType, View } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FillColors } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Text } from '../Typography';\nimport {\n  AvatarStyles,\n  GetAvatarStyles,\n  getAvatarStyles,\n} from './Avatar.styles';\n\n// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nconst globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface AvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof FillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  getStyles?: ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>;\n\n  testID?: string;\n}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    size = 48,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    getStyles,\n    testID,\n  } = props;\n\n  const theme = useTheme();\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { containerStyle, textStyle, imageStyle } = mergeStyles(\n    getAvatarStyles,\n    getStyles,\n    theme.components.getAvatarStyles,\n  )(\n    {\n      color,\n      hashValue,\n      isSolid,\n      name,\n      size,\n      sizeLimitOneCharacter,\n    },\n    theme,\n  );\n\n  return (\n    <View style={containerStyle} testID={testID}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          getStyles={() => ({\n            textStyle,\n          })}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && !!source && (\n        <Image source={source} style={imageStyle} />\n      )}\n    </View>\n  );\n};\n","import { TextStyle } from 'react-native';\n\nimport {\n  FontFamilies,\n  FontFamily,\n  FontWeight,\n  FontWeights,\n  RNFontWeight,\n  TextColor,\n  TextColors,\n  TextSize,\n  TextSizes,\n  Theme,\n} from '../../theme/Theme';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStylesProps {\n  isItalic: boolean;\n  size: TextSize;\n  color: TextColor;\n  align: TextAlign;\n  transform?: TextTransform;\n  fontFamily: FontFamily;\n  isInline: boolean;\n  weight?: FontWeight;\n}\n\nexport interface TextStyles {\n  textStyle: TextStyle;\n}\n\nexport type GetTextStyles = (\n  textStylesProps: TextStylesProps,\n  theme: Theme,\n) => TextStyles;\n\nexport const getFontFamily = (fontFamilies: FontFamilies) => (\n  fontFamily: FontFamily,\n) => fontFamilies[fontFamily];\n\nexport const getFontWeight = (fontWeights: FontWeights) => (\n  fontWeight?: FontWeight,\n): RNFontWeight | undefined => {\n  if (!fontWeight) return;\n  // @ts-ignore\n  const presetFontWeight = fontWeights[fontWeight] as RNFontWeight | undefined;\n\n  // @ts-ignore\n  return presetFontWeight || fontWeight;\n};\n\nexport const getTextColor = (textColors: TextColors) => (\n  textColor: TextColor,\n) => {\n  // @ts-ignore\n  const presetColor = textColors[textColor] as string | undefined;\n\n  return presetColor || textColor;\n};\n\nexport const getTextSize = (textSizes: TextSizes) => (\n  size: TextSize,\n): TextStyle => {\n  // @ts-ignore\n  const presetTextSize = textSizes[size] as TextStyle;\n\n  return presetTextSize || { fontSize: size };\n};\n\nexport const getTextStyles: GetTextStyles = (\n  { size, color, fontFamily, isInline, isItalic, align, transform, weight },\n  theme,\n) => {\n  const sizeStyle = getTextSize(theme.textSizes)(size);\n\n  return {\n    textStyle: {\n      ...sizeStyle,\n      color: getTextColor(theme.colors.text)(color),\n      fontFamily: getFontFamily(theme.fontFamilies)(fontFamily),\n      fontWeight:\n        getFontWeight(theme.fontWeights)(weight) || sizeStyle.fontWeight,\n      textAlign: align,\n      ...(isInline\n        ? {\n            alignSelf: 'flex-start',\n            flexDirection: 'row',\n          }\n        : {}),\n      ...(isItalic && {\n        fontStyle: 'italic',\n      }),\n      ...(transform && {\n        textTransform: transform,\n      }),\n    },\n  };\n};\n","import * as React from 'react';\nimport { Text as RNText, TextProps as RNTextProps } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { useTheme } from '../../theme';\nimport { FontFamily, FontWeight, TextColor, TextSize } from '../../theme/Theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { GetTextStyles, getTextStyles, TextStyles } from './Text.styles';\nimport { TextAlign, TextTransform } from './types';\n\nexport interface TextStyleProps {\n  isInline?: boolean;\n  size?: TextSize;\n  color?: TextColor;\n  align?: TextAlign;\n  transform?: TextTransform;\n  fontFamily?: FontFamily;\n  weight?: FontWeight;\n  isItalic?: boolean;\n}\n\n// @ts-ignore: need to override for web purposes\nexport interface TextProps extends RNTextProps, TextStyleProps {\n  children: React.ReactNode;\n\n  getStyles?: ReplaceReturnType<GetTextStyles, DeepPartial<TextStyles>>;\n}\n\nexport const Text = (props: TextProps) => {\n  const {\n    children,\n    color = 'default',\n    fontFamily = 'text',\n    size = 'medium',\n    align = 'left',\n    weight,\n    isInline = false,\n    getStyles,\n    isItalic = false,\n    transform,\n    ...textProps\n  } = props;\n  const theme = useTheme();\n\n  const { textStyle } = mergeStyles(\n    getTextStyles,\n    getStyles,\n    theme.components.getTextStyles,\n  )(\n    {\n      align,\n      color,\n      fontFamily,\n      isInline,\n      isItalic,\n      size,\n      transform,\n      weight,\n    },\n    theme,\n  );\n\n  return (\n    <RNText style={textStyle} {...textProps}>\n      {children}\n    </RNText>\n  );\n};\n","// tslint:disable object-literal-sort-keys\n\nexport interface ColorPalette {\n  base: string;\n  dark: string;\n  darkest: string;\n  light: string;\n  lightest: string;\n}\n\nexport interface Palette {\n  neutral: ColorPalette;\n  blue: ColorPalette;\n  red: ColorPalette;\n  orange: ColorPalette;\n  yellow: ColorPalette;\n  green: ColorPalette;\n  teal: ColorPalette;\n  purple: ColorPalette;\n}\n\nexport default {\n  neutral: {\n    lightest: '#fafafa',\n    light: '#eeeeee',\n    base: '#cccccc',\n    dark: '#a7a7a7',\n    darkest: '#7e7e7e',\n  },\n\n  blue: {\n    lightest: '#e5f5ff',\n    light: '#ceecff',\n    base: '#1ca5F7',\n    dark: '#59a9de',\n    darkest: '#33495f',\n  },\n\n  red: {\n    lightest: '#f9e1de',\n    light: '#f9aa9f',\n    base: '#d26557',\n    dark: '#bb584e',\n    darkest: '#b74033',\n  },\n\n  orange: {\n    lightest: '#fce8cf',\n    light: '#f2c58a',\n    base: '#f3b058',\n    dark: '#ec8e30',\n    darkest: '#b26500',\n  },\n\n  yellow: {\n    lightest: '#fef8e7',\n    light: '#fbe6a2',\n    base: '#f7d154',\n    dark: '#d1b047',\n    darkest: '#7e6514',\n  },\n\n  green: {\n    lightest: '#eafff3',\n    light: '#c2edd5',\n    base: '#54bf84',\n    dark: '#42a46e',\n    darkest: '#16a054',\n  },\n\n  teal: {\n    lightest: '#d6fcf7',\n    light: '#c0f9f2',\n    base: '#67c6bb',\n    dark: '#3fa296',\n    darkest: '#1b877a',\n  },\n\n  purple: {\n    lightest: '#f8f7fc',\n    light: '#eae7f8',\n    base: '#735dd0',\n    dark: '#37248f',\n    darkest: '#37248f',\n  },\n};\n","import { Platform } from 'react-native';\n\nimport palette from './palette';\nimport {\n  Colors,\n  ContainerShapes,\n  ControlSizes,\n  Elevations,\n  Fills,\n  FontFamilies,\n  FontWeights,\n  HeadingSizes,\n  ParagraphSizes,\n  TextSizes,\n  Theme,\n} from './Theme';\n\n// tslint:disable object-literal-sort-keys\n\nconst controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n    overlay: 'rgba(0,0,0,0.3)',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.neutral.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n\n  components: {},\n};\n","import deepMerge from 'deepmerge';\nimport React from 'react';\nimport { TextStyle, ViewStyle } from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { GetAlertStyles } from '../components/Alert/Alert.styles';\nimport { GetAvatarStyles } from '../components/Avatar/Avatar.styles';\nimport { GetBadgeStyles } from '../components/Badge/Badge.styles';\nimport { GetButtonStyles } from '../components/Button/Button.styles';\nimport { GetCheckboxStyles } from '../components/Checkbox/Checkbox.styles';\nimport { GetCollapsibleStyles } from '../components/Collapsible/Collapsible.styles';\nimport { GetCounterStyles } from '../components/Counter/Counter.styles';\nimport { GetDialogStyles } from '../components/Dialog/Dialog.styles';\nimport { GetDividerStyles } from '../components/Divider/Divider.styles';\nimport { GetDrawerStyles } from '../components/Drawer/Drawer.styles';\nimport { GetFormFieldStyles } from '../components/Form/FormField.styles';\nimport { GetTextInputStyles } from '../components/Inputs/TextInput.styles';\nimport { GetColumnStyles } from '../components/Layout/Column.styles';\nimport { GetContainerStyles } from '../components/Layout/Container.styles';\nimport { GetRowStyles } from '../components/Layout/Row.styles';\nimport { GetListItemStyles } from '../components/ListItem/ListItem.styles';\nimport { GetOverlayStyles } from '../components/Overlay/Overlay.styles';\nimport { GetPickerButtonStyles } from '../components/Pickers/PickerButton.styles';\nimport { GetPopoverStyles } from '../components/Popover/Popover.styles';\nimport { GetPositionerStyles } from '../components/Positioner/Positioner.styles';\nimport { GetProgressBarStyles } from '../components/ProgressBar/ProgressBar.styles';\nimport { GetRatingStyles } from '../components/Rating/Rating.styles';\nimport { GetSliderStyles } from '../components/Slider/Slider.styles';\nimport { GetSwitchStyles } from '../components/Switch/Switch.styles';\nimport { GetTabStyles } from '../components/Tabs/Tab.styles';\nimport { GetTabsStyles } from '../components/Tabs/Tabs.styles';\nimport { GetToastStyles } from '../components/Toast/Toast.styles';\nimport { GetHeadingStyles } from '../components/Typography/Heading.styles';\nimport { GetParagraphStyles } from '../components/Typography/Paragraph.styles';\nimport { GetTextStyles } from '../components/Typography/Text.styles';\nimport { defaultTheme } from './defaultTheme';\n\nexport interface TextSizes {\n  xsmall: TextStyle;\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\nexport type TextSize = keyof TextSizes | number;\n\nexport interface HeadingSizes {\n  xxxlarge: TextStyle;\n  xxlarge: TextStyle;\n  xlarge: TextStyle;\n  large: TextStyle;\n  medium: TextStyle;\n  small: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type HeadingSize = keyof HeadingSizes | number;\n\nexport interface ParagraphSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n\n  [size: string]: TextStyle | undefined;\n}\n\nexport type ParagraphSize = keyof ParagraphSizes | number;\n\nexport interface FontFamilies {\n  heading: string;\n  mono: string;\n  text: string;\n}\nexport type FontFamily = keyof FontFamilies;\n\nexport type RNFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport interface FontWeights {\n  light?: RNFontWeight;\n  normal?: RNFontWeight;\n  bold?: RNFontWeight;\n}\n\nexport type FontWeight = keyof FontWeights | RNFontWeight;\n\nexport interface TextColors {\n  muted: string;\n  default: string;\n\n  link: string;\n  white: string;\n  selected: string;\n\n  primary: string;\n  secondary: string;\n\n  danger: string;\n  info: string;\n  success: string;\n  warning: string;\n}\n\nexport type TextColor = keyof TextColors | string;\n\nexport interface ButtonColors {\n  danger: string;\n  default: string;\n  disabled: string;\n  primary: string;\n  secondary: string;\n}\n\nexport interface ButtonColorsWithText extends ButtonColors {\n  dangerText: string;\n  defaultText: string;\n  disabledText: string;\n  primaryText: string;\n  secondaryText: string;\n}\n\nexport type ButtonColor = keyof ButtonColors | string;\n\nexport interface BorderColors {\n  danger: string;\n  default: string;\n  info: string;\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n}\n\nexport type BorderColor = keyof BorderColors | string;\n\nexport interface BackgroundColors {\n  content: string;\n  base: string;\n  overlay: string;\n\n  greyLight: string;\n  greyDefault: string;\n  greyDark: string;\n\n  primaryLight: string;\n  primaryDefault: string;\n  primaryDark: string;\n\n  secondaryLight: string;\n  secondaryDefault: string;\n  secondaryDark: string;\n\n  dangerLight: string;\n  dangerDefault: string;\n  dangerDark: string;\n\n  infoLight: string;\n  infoDefault: string;\n  infoDark: string;\n\n  successLight: string;\n  successDefault: string;\n  successDark: string;\n\n  warningLight: string;\n  warningDefault: string;\n  warningDark: string;\n}\n\nexport type BackgroundColor = keyof BackgroundColors | string;\n\nexport interface Colors {\n  background: BackgroundColors;\n  border: BorderColors;\n  button: ButtonColorsWithText;\n  text: TextColors;\n}\n\nexport type Elevations = ViewStyle[];\nexport type Elevation = ViewStyle;\n\nexport interface ControlSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\nexport type ControlSize = keyof ControlSizes;\n\nexport interface FillColorProps {\n  backgroundColor: string;\n  color: string;\n}\n\nexport interface FillColors {\n  neutral: FillColorProps;\n  blue: FillColorProps;\n  red: FillColorProps;\n  orange: FillColorProps;\n  yellow: FillColorProps;\n  green: FillColorProps;\n  teal: FillColorProps;\n  purple: FillColorProps;\n}\n\nexport type FillColor = keyof FillColors;\n\nexport interface Fills {\n  subtle: FillColors;\n  solid: FillColors;\n}\n\nexport interface ContainerShapes {\n  circle: ViewStyle;\n  pill: ViewStyle;\n  rounded: ViewStyle;\n  roundedBottom: ViewStyle;\n  roundedLeft: ViewStyle;\n  roundedRight: ViewStyle;\n  roundedTop: ViewStyle;\n  square: ViewStyle;\n}\n\nexport type ContainerShape = keyof ContainerShapes;\n\nexport interface Theme {\n  // Colors\n  colors: Colors;\n  fills: Fills;\n\n  // Typography\n  fontFamilies: FontFamilies;\n  fontWeights: FontWeights;\n\n  headingSizes: HeadingSizes;\n  paragraphSizes: ParagraphSizes;\n  textSizes: TextSizes;\n\n  // Elevations\n  elevations: Elevations;\n\n  // Controls - Buttons, Controls etc.\n  controlPaddings: ControlSizes;\n  controlHeights: ControlSizes;\n  controlBorderRadius: ControlSizes;\n\n  // Containers\n  containerShapes: ContainerShapes;\n\n  components: {\n    getAlertStyles?: GetAlertStyles;\n    getAvatarStyles?: GetAvatarStyles;\n    getBadgeStyles?: GetBadgeStyles;\n    getButtonStyles?: GetButtonStyles;\n    getCheckboxStyles?: GetCheckboxStyles;\n    getCollapsibleStyles?: GetCollapsibleStyles;\n    getCounterStyles?: GetCounterStyles;\n    getDialogStyles?: GetDialogStyles;\n    getDividerStyles?: GetDividerStyles;\n    getDrawerStyles?: GetDrawerStyles;\n    getFormFieldStyles?: GetFormFieldStyles;\n    getColumnStyles?: GetColumnStyles;\n    getContainerStyles?: GetContainerStyles;\n    getRowStyles?: GetRowStyles;\n    getTextInputStyles?: GetTextInputStyles;\n    getListItemStyles?: GetListItemStyles;\n    getOverlayStyles?: GetOverlayStyles;\n    getPickerButtonStyles?: GetPickerButtonStyles;\n    getPopoverStyles?: GetPopoverStyles;\n    getPositionerStyles?: GetPositionerStyles;\n    getProgressBarStyles?: GetProgressBarStyles;\n    getRatingStyles?: GetRatingStyles;\n    getSliderStyles?: GetSliderStyles;\n    getSwitchStyles?: GetSwitchStyles;\n    getTabStyles?: GetTabStyles;\n    getTabsStyles?: GetTabsStyles;\n    getToastStyles?: GetToastStyles;\n    getHeadingStyles?: GetHeadingStyles;\n    getTextStyles?: GetTextStyles;\n    getParagraphStyles?: GetParagraphStyles;\n  };\n}\n\nexport const ThemeContext = React.createContext(defaultTheme);\n\nexport interface ThemeProviderProps {\n  children?: React.ReactNode;\n  value?: DeepPartial<Theme>;\n}\n\nexport const createTheme = (theme?: DeepPartial<Theme>): Theme => {\n  return theme\n    ? deepMerge<Theme>(defaultTheme, theme as Partial<Theme>)\n    : defaultTheme;\n};\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { children, value = defaultTheme } = props;\n\n  const theme = createTheme(value);\n\n  return (\n    <ThemeContext.Provider value={theme}>{children}</ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n","import merge from 'deepmerge';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme } from '../theme';\n\nexport type GetStyles<TStyles = any, TStyleProps = any> = (\n  props: TStyleProps,\n  theme: Theme,\n) => TStyles;\n\nexport type ArgumentTypes<T> = T extends (...args: infer U) => infer R\n  ? U\n  : never;\nexport type ReplaceReturnType<T, TNewReturn> = (\n  ...a: ArgumentTypes<T>\n) => TNewReturn;\n\nexport const mergeStyles = <TStyles = any, TStyleProps = any>(\n  getDefaultStyles: GetStyles<TStyles, TStyleProps>,\n  getOverridingStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n  getThemeStyles?: GetStyles<DeepPartial<TStyles>, TStyleProps>,\n) => (props: TStyleProps, theme: Theme): TStyles => {\n  const defaultStyles = getDefaultStyles(props, theme);\n\n  const styles: Array<Partial<TStyles>> = [defaultStyles];\n\n  if (getThemeStyles) {\n    styles.push(getThemeStyles(props, theme) as Partial<TStyles>);\n  }\n\n  if (getOverridingStyles) {\n    styles.push(getOverridingStyles(props, theme) as Partial<TStyles>);\n  }\n\n  return merge.all<TStyles>(styles);\n};\n"],"sourceRoot":""}