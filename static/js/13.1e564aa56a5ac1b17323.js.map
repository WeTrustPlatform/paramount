{"version":3,"sources":["webpack:///./src/components/Avatar/Avatar.mdx","webpack:///./src/components/Avatar/Avatar.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_tag","_docz","_Avatar","MDXContent","props","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","name","id","Playground","__position","__code","__scope","Avatar","isSolid","source","size","PropsTable","of","React","Component","_interopRequireWildcard","_reactNative","_theme","_Layout","_Typography","globalGetInitials","fallback","arguments","length","undefined","replace","split","slice","map","v","toUpperCase","join","AvatarWithoutTheme","theme","_props$size","_props$isSolid","hashValue","_props$getInitials","getInitials","_props$color","color","_props$forceShowIniti","forceShowInitials","_props$sizeLimitOneCh","sizeLimitOneCharacter","otherProps","imageUnavailable","initials","substring","_theme$getAvatarStyle","getAvatarStyles","boxStyle","textStyle","imageStyle","Box","_extends2","Text","dangerouslySetInlineStyle","__style","Image","uri","style","withTheme","displayName","__docgenInfo","description","defaultValue","required","type","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","__class"],"mappings":"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","file":"static/js/13.2dc0aebf.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport Avatar from './Avatar';\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"automatic-default-usage\"}}>{`Automatic default usage`}</MDXTag>\n<Playground __position={0} __code={`<Avatar name=\"Bill Gates\" />`} __scope={{props: this ? this.props : props,Avatar}}>\n  <Avatar name=\"Bill Gates\" />\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"automatic-solid-usage\"}}>{`Automatic solid usage`}</MDXTag>\n<Playground __position={1} __code={`<Avatar isSolid name=\"Eri Reis\" />`} __scope={{props: this ? this.props : props,Avatar}}>\n  <Avatar isSolid name=\"Eri Reis\" />\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"using-image-source\"}}>{`Using image source`}</MDXTag>\n<Playground __position={2} __code={`<Avatar source=\"https://picsum.photos/200/200\" />`} __scope={{props: this ? this.props : props,Avatar}}>\n  <Avatar source=\"https://picsum.photos/200/200\" />\n</Playground>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"avatar-sizes\"}}>{`Avatar sizes`}</MDXTag>\n<Playground __position={3} __code={`<Avatar name=\"Andy Grove\" />\n<Avatar name=\"Bill Gates\" size={60} />`} __scope={{props: this ? this.props : props,Avatar}}>\n  <Avatar name=\"Andy Grove\" />\n  <Avatar name=\"Bill Gates\" size={60} />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<PropsTable of={Avatar} />\n           </MDXTag>\n  }\n}\n  ","// https://github.com/segmentio/evergreen/blob/master/source/avatar/README.md\nimport * as React from 'react';\nimport { Image } from 'react-native';\n\nimport { ITheme, withTheme } from '../../theme';\nimport { IFillColors } from '../../theme/ThemeInterface';\nimport { Box } from '../Layout';\nimport { Text } from '../Typography';\n\nexport type GetInitialsType = (name?: string, fallback?: string) => string;\n\nexport const globalGetInitials: GetInitialsType = (name, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\nexport interface IAvatarProps {\n  /**\n   * The source attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  source?: string;\n\n  /**\n   * The size of the avatar.\n   */\n  size?: number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue?: string;\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color?: 'automatic' | keyof IFillColors;\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials?: GetInitialsType;\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials?: boolean;\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter?: number;\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: ITheme;\n}\n\nexport const AvatarWithoutTheme = (props: IAvatarProps) => {\n  const {\n    theme,\n\n    source,\n    size = 40,\n    name,\n    isSolid = false,\n    hashValue,\n    getInitials = globalGetInitials,\n    color = 'automatic',\n    forceShowInitials = false,\n    sizeLimitOneCharacter = 20,\n    ...otherProps\n  } = props;\n\n  const { imageHasFailedLoading } = { imageHasFailedLoading: false };\n  const imageUnavailable = !source || imageHasFailedLoading;\n\n  let initials = getInitials(name);\n  if (size <= sizeLimitOneCharacter) {\n    initials = initials.substring(0, 1);\n  }\n\n  const { boxStyle, textStyle, imageStyle } = theme.getAvatarStyles({\n    color,\n    hashValue,\n    isSolid,\n    name,\n    size,\n    sizeLimitOneCharacter,\n  });\n\n  return (\n    <Box {...boxStyle} {...otherProps}>\n      {(imageUnavailable || forceShowInitials) && (\n        <Text\n          dangerouslySetInlineStyle={{\n            __style: textStyle,\n          }}\n        >\n          {initials}\n        </Text>\n      )}\n      {!imageUnavailable && (\n        <Image\n          source={{\n            uri: source,\n          }}\n          style={imageStyle}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport const Avatar = withTheme(AvatarWithoutTheme);\nexport default Avatar;\ntry {\n    // @ts-ignore\n    AvatarWithoutTheme.displayName = \"AvatarWithoutTheme\";\n    // @ts-ignore\n    AvatarWithoutTheme.__docgenInfo = { \"description\": \"\", \"displayName\": \"AvatarWithoutTheme\", \"props\": { \"source\": { \"defaultValue\": null, \"description\": \"The source attribute of the image.\\nWhen it's not available, render initials instead.\", \"name\": \"source\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"The size of the avatar.\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"name\": { \"defaultValue\": null, \"description\": \"The name used for the initials and title attribute.\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"hashValue\": { \"defaultValue\": null, \"description\": \"The value used for the hash function.\\nThe name is used as the hashValue by default.\\nWhen dealing with anonymous users you should use the id instead.\", \"name\": \"hashValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"When true, render a solid avatar.\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color used for the avatar.\\nWhen the value is `automatic`, use the hash function to determine the color.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"automatic\\\" | \\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"getInitials\": { \"defaultValue\": null, \"description\": \"Function to get the initials based on the name.\", \"name\": \"getInitials\", \"required\": false, \"type\": { \"name\": \"GetInitialsType\" } }, \"forceShowInitials\": { \"defaultValue\": null, \"description\": \"When true, force show the initials.\\nThis is useful in some cases when using Gravatar and transparent pngs.\", \"name\": \"forceShowInitials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"sizeLimitOneCharacter\": { \"defaultValue\": null, \"description\": \"When the size is smaller than this number, use a single initial for the avatar.\", \"name\": \"sizeLimitOneCharacter\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"Theme provided by ThemeProvider.\", \"name\": \"theme\", \"required\": true, \"type\": { \"name\": \"ITheme\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Avatar/Avatar.tsx#AvatarWithoutTheme\"] = { docgenInfo: AvatarWithoutTheme.__docgenInfo, name: \"AvatarWithoutTheme\", path: \"src/components/Avatar/Avatar.tsx#AvatarWithoutTheme\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    Avatar.displayName = \"Avatar\";\n    // @ts-ignore\n    Avatar.__docgenInfo = { \"description\": \"\", \"displayName\": \"Avatar\", \"props\": { \"source\": { \"defaultValue\": null, \"description\": \"The source attribute of the image.\\nWhen it's not available, render initials instead.\", \"name\": \"source\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"The size of the avatar.\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"name\": { \"defaultValue\": null, \"description\": \"The name used for the initials and title attribute.\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"hashValue\": { \"defaultValue\": null, \"description\": \"The value used for the hash function.\\nThe name is used as the hashValue by default.\\nWhen dealing with anonymous users you should use the id instead.\", \"name\": \"hashValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"When true, render a solid avatar.\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color used for the avatar.\\nWhen the value is `automatic`, use the hash function to determine the color.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"automatic\\\" | \\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"getInitials\": { \"defaultValue\": null, \"description\": \"Function to get the initials based on the name.\", \"name\": \"getInitials\", \"required\": false, \"type\": { \"name\": \"GetInitialsType\" } }, \"forceShowInitials\": { \"defaultValue\": null, \"description\": \"When true, force show the initials.\\nThis is useful in some cases when using Gravatar and transparent pngs.\", \"name\": \"forceShowInitials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"sizeLimitOneCharacter\": { \"defaultValue\": null, \"description\": \"When the size is smaller than this number, use a single initial for the avatar.\", \"name\": \"sizeLimitOneCharacter\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Avatar/Avatar.tsx#Avatar\"] = { docgenInfo: Avatar.__docgenInfo, name: \"Avatar\", path: \"src/components/Avatar/Avatar.tsx#Avatar\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    __class.displayName = \"__class\";\n    // @ts-ignore\n    __class.__docgenInfo = { \"description\": \"\", \"displayName\": \"__class\", \"props\": { \"source\": { \"defaultValue\": null, \"description\": \"The source attribute of the image.\\nWhen it's not available, render initials instead.\", \"name\": \"source\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"The size of the avatar.\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"name\": { \"defaultValue\": null, \"description\": \"The name used for the initials and title attribute.\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"hashValue\": { \"defaultValue\": null, \"description\": \"The value used for the hash function.\\nThe name is used as the hashValue by default.\\nWhen dealing with anonymous users you should use the id instead.\", \"name\": \"hashValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"When true, render a solid avatar.\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color used for the avatar.\\nWhen the value is `automatic`, use the hash function to determine the color.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"automatic\\\" | \\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"getInitials\": { \"defaultValue\": null, \"description\": \"Function to get the initials based on the name.\", \"name\": \"getInitials\", \"required\": false, \"type\": { \"name\": \"GetInitialsType\" } }, \"forceShowInitials\": { \"defaultValue\": null, \"description\": \"When true, force show the initials.\\nThis is useful in some cases when using Gravatar and transparent pngs.\", \"name\": \"forceShowInitials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"sizeLimitOneCharacter\": { \"defaultValue\": null, \"description\": \"When the size is smaller than this number, use a single initial for the avatar.\", \"name\": \"sizeLimitOneCharacter\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Avatar/Avatar.tsx#__class\"] = { docgenInfo: __class.__docgenInfo, name: \"__class\", path: \"src/components/Avatar/Avatar.tsx#__class\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}