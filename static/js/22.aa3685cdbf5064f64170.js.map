{"version":3,"sources":["webpack:///./src/components/Avatar/index.ts","webpack:///./src/components/ListItem/ListItem.mdx","webpack:///./src/components/ListItem/ListItem.styles.ts","webpack:///./src/components/ListItem/ListItem.tsx","webpack:///./src/icons/Icon.web.tsx","webpack:///./src/icons/index.ts"],"names":["_Avatar","_interopRequireWildcard","__webpack_require__","__class","displayName","__docgenInfo","description","props","source","defaultValue","name","required","type","size","hashValue","isSolid","color","getInitials","forceShowInitials","sizeLimitOneCharacter","getStyles","testID","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error","_react","_interopRequireDefault","_tag","_docz","_ListItem","_icons","MDXContent","_this","_classCallCheck2","default","this","_possibleConstructorReturn2","_getPrototypeOf2","call","layout","_this$props","components","_objectWithoutProperties2","createElement","MDXTag","id","parentName","Playground","__position","__code","__scope","ListItem","Icon","onPress","imageSource","uri","rightIcon","label","PropsTable","of","React","Component","_Text","getListItemVariables","theme","textSizes","getTextVariables","base","backgroundColor","colors","background","plain","borderBottomWidth","borderColor","border","justifyContent","disabled","focusBackgroundColor","tint1","selected","sizes","small","fontSize","height","controlHeights","paddingLeft","controlPaddings","paddingRight","medium","large","wrapper","alignItems","flexDirection","_ref","isDisabled","isSelected","selectListVariables","_sizes$size","sizeStyles","containerStyle","_objectSpread2","imageWrapperStyle","marginRight","leftWrapperStyle","textStyle","textWrapperStyle","wrapperStyle","fills","fontFamilies","fontWeights","headingSizes","paragraphSizes","elevations","controlBorderRadius","_reactNative","_theme","_mergeStyles2","_Typography","withTheme","memo","_props$isDisabled","_props$size","_props$rightIcon","avatarProps","accessibilityProps","_mergeStyles","mergeStyles","getListItemStyles","TouchableHighlight","_extends2","underlayColor","style","View","Avatar","Text","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","accessibilityHint","accessibilityComponentType","accessibilityLiveRegion","importantForAccessibility","accessibilityElementsHidden","accessibilityTraits","onAccessibilityTap","onMagicTap","accessibilityIgnoresInvertColors","Feather","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","Iconweb","_Icon","icons"],"mappings":"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","file":"static/js/22.35426ede.js","sourcesContent":["export { default as Avatar, AvatarProps } from './Avatar';\ntry {\n    // @ts-ignore\n    __class.displayName = \"__class\";\n    // @ts-ignore\n    __class.__docgenInfo = { \"description\": \"\", \"displayName\": \"__class\", \"props\": { \"source\": { \"defaultValue\": null, \"description\": \"The source attribute of the image.\\nWhen it's not available, render initials instead.\", \"name\": \"source\", \"required\": false, \"type\": { \"name\": \"ImageSourcePropType\" } }, \"size\": { \"defaultValue\": null, \"description\": \"The size of the avatar.\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"name\": { \"defaultValue\": null, \"description\": \"The name used for the initials and title attribute.\", \"name\": \"name\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"hashValue\": { \"defaultValue\": null, \"description\": \"The value used for the hash function.\\nThe name is used as the hashValue by default.\\nWhen dealing with anonymous users you should use the id instead.\", \"name\": \"hashValue\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"isSolid\": { \"defaultValue\": null, \"description\": \"When true, render a solid avatar.\", \"name\": \"isSolid\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"color\": { \"defaultValue\": null, \"description\": \"The color used for the avatar.\\nWhen the value is `automatic`, use the hash function to determine the color.\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"\\\"automatic\\\" | \\\"neutral\\\" | \\\"blue\\\" | \\\"red\\\" | \\\"orange\\\" | \\\"yellow\\\" | \\\"green\\\" | \\\"teal\\\" | \\\"purple\\\"\" } }, \"getInitials\": { \"defaultValue\": null, \"description\": \"Function to get the initials based on the name.\", \"name\": \"getInitials\", \"required\": false, \"type\": { \"name\": \"GetInitialsType\" } }, \"forceShowInitials\": { \"defaultValue\": null, \"description\": \"When true, force show the initials.\\nThis is useful in some cases when using Gravatar and transparent pngs.\", \"name\": \"forceShowInitials\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"sizeLimitOneCharacter\": { \"defaultValue\": null, \"description\": \"When the size is smaller than this number, use a single initial for the avatar.\", \"name\": \"sizeLimitOneCharacter\", \"required\": false, \"type\": { \"name\": \"number\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetAvatarStyles, DeepPartial<AvatarStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/Avatar/index.ts#__class\"] = { docgenInfo: __class.__docgenInfo, name: \"__class\", path: \"src/components/Avatar/index.ts#__class\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport ListItem from './ListItem';\nimport { Icon } from '../../icons';\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"usage\"}}>{`Usage`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"all-useful-props\"}}>{`All useful props`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For image, it composes `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Avatar`}</MDXTag>{`, you can pass `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`avatarProps`}</MDXTag>{` provide more specific customizations`}</MDXTag>\n<Playground __position={0} __code={'<ListItem\\n  onPress={() => null}\\n  imageSource={{ uri: \\'https://picsum.photos/200/200\\' }}\\n  rightIcon={<Icon color=\\\"#7e7e7e\\\" size={24} name=\\\"chevron-right\\\" />}\\n  label=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n/>'} __scope={{props: this ? this.props : props,ListItem,Icon}}>\n  <ListItem\n    onPress={() => null}\n    imageSource={{ uri: 'https://picsum.photos/200/200' }}\n    rightIcon={<Icon color=\"#7e7e7e\" size={24} name=\"chevron-right\" />}\n    label=\"Some label\"\n    description=\"Some description\"\n  />\n</Playground>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"props\"}}>{`Props`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Extends `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TouchableHighlightProps`}</MDXTag>{`. Read from `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`activeOpacity`}</MDXTag>{` and above for component specific props`}</MDXTag>\n<PropsTable of={ListItem} />\n           </MDXTag>\n  }\n}\n  ","import { TextStyle, ViewStyle } from 'react-native';\n\nimport { Theme } from '../../theme/ThemeInterface';\nimport { getTextVariables } from '../Typography/Text.styles';\n\nexport type SizeStyles = ViewStyle & {\n  fontSize: number;\n};\n\nexport interface ListItemSizes {\n  small: SizeStyles;\n  medium: SizeStyles;\n  large: SizeStyles;\n}\n\nexport interface TextSizes {\n  small: TextStyle;\n  medium: TextStyle;\n  large: TextStyle;\n}\n\nexport type ListItemSize = keyof ListItemSizes;\n\nexport interface ListItemVariables {\n  wrapper: ViewStyle;\n  base: ViewStyle;\n  disabled: ViewStyle;\n  selected: ViewStyle;\n  focusBackgroundColor: string;\n  sizes: ListItemSizes;\n  textSizes: TextSizes;\n}\n\nexport const getListItemVariables = (theme: Theme): ListItemVariables => {\n  const textSizes = getTextVariables(theme);\n\n  return {\n    base: {\n      backgroundColor: theme.colors.background.plain,\n      borderBottomWidth: 1,\n      borderColor: theme.colors.border.default,\n      justifyContent: 'center',\n    },\n    disabled: {\n      backgroundColor: theme.colors.background.disabled,\n    },\n    focusBackgroundColor: theme.colors.background.tint1,\n    selected: {},\n    sizes: {\n      small: {\n        fontSize: theme.textSizes.small,\n        height: theme.controlHeights.small,\n        paddingLeft: theme.controlPaddings.small,\n        paddingRight: theme.controlPaddings.small,\n      },\n\n      medium: {\n        fontSize: theme.textSizes.medium,\n        height: theme.controlHeights.medium,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n      },\n\n      large: {\n        fontSize: theme.textSizes.large,\n        height: theme.controlHeights.large,\n        paddingLeft: theme.controlPaddings.large,\n        paddingRight: theme.controlPaddings.large,\n      },\n    },\n    textSizes: textSizes.size,\n    wrapper: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n  };\n};\n\nexport interface ListItemStyles {\n  imageWrapperStyle: ViewStyle;\n  wrapperStyle: ViewStyle;\n  containerStyle: ViewStyle;\n  leftWrapperStyle: ViewStyle;\n  textWrapperStyle: ViewStyle;\n  focusBackgroundColor: string;\n  textStyle: TextStyle;\n}\n\nexport interface ListItemStylesProps {\n  size: ListItemSize;\n  isDisabled: boolean;\n  isSelected: boolean;\n}\n\nexport type GetListItemStyles = (\n  selectListStylesProps: ListItemStylesProps,\n  theme: Theme,\n) => ListItemStyles;\n\nexport const getListItemStyles: GetListItemStyles = (\n  { size, isDisabled, isSelected },\n  theme,\n) => {\n  const selectListVariables = getListItemVariables(theme);\n  const {\n    base,\n    disabled,\n    selected,\n    focusBackgroundColor,\n    sizes,\n    textSizes,\n  } = selectListVariables;\n\n  const { fontSize, ...sizeStyles } = sizes[size];\n\n  return {\n    containerStyle: {\n      ...base,\n      ...sizeStyles,\n      ...(isSelected ? selected : {}),\n      ...(isDisabled ? disabled : {}),\n    },\n    focusBackgroundColor,\n    imageWrapperStyle: {\n      marginRight: 8,\n    },\n    leftWrapperStyle: {\n      alignItems: 'center',\n      flexDirection: 'row',\n    },\n    textStyle: textSizes[size],\n    textWrapperStyle: {\n      height: '100%',\n    },\n    wrapperStyle: selectListVariables.wrapper,\n  };\n};\ntry {\n    // @ts-ignore\n    getListItemVariables.displayName = \"getListItemVariables\";\n    // @ts-ignore\n    getListItemVariables.__docgenInfo = { \"description\": \"\", \"displayName\": \"getListItemVariables\", \"props\": { \"colors\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"colors\", \"required\": true, \"type\": { \"name\": \"Colors\" } }, \"fills\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fills\", \"required\": true, \"type\": { \"name\": \"Fills\" } }, \"fontFamilies\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontFamilies\", \"required\": true, \"type\": { \"name\": \"FontFamilies\" } }, \"fontWeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"fontWeights\", \"required\": true, \"type\": { \"name\": \"FontWeights\" } }, \"headingSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"headingSizes\", \"required\": true, \"type\": { \"name\": \"HeadingSizes\" } }, \"paragraphSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"paragraphSizes\", \"required\": true, \"type\": { \"name\": \"ParagraphSizes\" } }, \"textSizes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"textSizes\", \"required\": true, \"type\": { \"name\": \"TextSizes\" } }, \"elevations\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"elevations\", \"required\": true, \"type\": { \"name\": \"ViewStyle[]\" } }, \"controlPaddings\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlPaddings\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlHeights\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlHeights\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } }, \"controlBorderRadius\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"controlBorderRadius\", \"required\": true, \"type\": { \"name\": \"ControlSizes\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.styles.ts#getListItemVariables\"] = { docgenInfo: getListItemVariables.__docgenInfo, name: \"getListItemVariables\", path: \"src/components/ListItem/ListItem.styles.ts#getListItemVariables\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport {\n  AccessibilityProps,\n  GestureResponderEvent,\n  ImageSourcePropType,\n  TouchableHighlight,\n  View,\n} from 'react-native';\nimport { DeepPartial } from 'ts-essentials';\n\nimport { Theme, withTheme } from '../../theme';\nimport { mergeStyles, ReplaceReturnType } from '../../utils/mergeStyles';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Text } from '../Typography';\nimport {\n  GetListItemStyles,\n  getListItemStyles,\n  ListItemSize,\n  ListItemStyles,\n} from './ListItem.styles';\n\nexport interface ListItemProps extends AccessibilityProps {\n  theme: Theme;\n  size?: ListItemSize;\n  isDisabled?: boolean;\n  label: string;\n  description?: string;\n  imageSource?: ImageSourcePropType;\n  avatarProps?: AvatarProps;\n  rightIcon?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  getStyles?: ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>;\n  testID?: string;\n}\n\nconst ListItemBase = (props: ListItemProps) => {\n  const {\n    getStyles,\n    isDisabled = false,\n    label,\n    description,\n    imageSource,\n    size = 'medium',\n    onPress,\n    rightIcon = null,\n    theme,\n    avatarProps,\n    testID,\n    ...accessibilityProps\n  } = props;\n\n  const {\n    imageWrapperStyle,\n    leftWrapperStyle,\n    textWrapperStyle,\n    containerStyle,\n    textStyle,\n    focusBackgroundColor,\n    wrapperStyle,\n  } = mergeStyles(getListItemStyles, getStyles)({ size, isDisabled }, theme);\n\n  return (\n    <TouchableHighlight\n      disabled={isDisabled}\n      underlayColor={focusBackgroundColor}\n      style={containerStyle}\n      testID={testID}\n      onPress={onPress}\n      {...accessibilityProps}\n    >\n      <View style={wrapperStyle}>\n        <View style={leftWrapperStyle}>\n          {(imageSource || avatarProps) && (\n            <View style={imageWrapperStyle}>\n              <Avatar\n                source={imageSource}\n                size={theme.controlHeights[size] - 8}\n                {...avatarProps}\n              />\n            </View>\n          )}\n          <View style={textWrapperStyle}>\n            <Text getStyles={() => ({ textStyle })}>{label}</Text>\n            <Text size=\"small\">{description}</Text>\n          </View>\n        </View>\n        {rightIcon}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport const ListItem = withTheme(React.memo(ListItemBase));\nexport default ListItem;\ntry {\n    // @ts-ignore\n    ListItem.displayName = \"ListItem\";\n    // @ts-ignore\n    ListItem.__docgenInfo = { \"description\": \"\", \"displayName\": \"ListItem\", \"props\": { \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"description\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"description\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"imageSource\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"imageSource\", \"required\": false, \"type\": { \"name\": \"ImageSourcePropType\" } }, \"avatarProps\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"avatarProps\", \"required\": false, \"type\": { \"name\": \"AvatarProps\" } }, \"rightIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"rightIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"onPress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onPress\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"button\\\" | \\\"none\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"button\\\" | \\\"header\\\" | \\\"link\\\" | \\\"summary\\\" | \\\"image\\\" | \\\"text\\\" | \\\"none\\\" | \\\"search\\\" | \\\"adjustable\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.tsx#ListItem\"] = { docgenInfo: ListItem.__docgenInfo, name: \"ListItem\", path: \"src/components/ListItem/ListItem.tsx#ListItem\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }try {\n    // @ts-ignore\n    __class.displayName = \"__class\";\n    // @ts-ignore\n    __class.__docgenInfo = { \"description\": \"\", \"displayName\": \"__class\", \"props\": { \"label\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"label\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"\\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\" } }, \"isDisabled\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isDisabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"description\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"description\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"imageSource\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"imageSource\", \"required\": false, \"type\": { \"name\": \"ImageSourcePropType\" } }, \"avatarProps\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"avatarProps\", \"required\": false, \"type\": { \"name\": \"AvatarProps\" } }, \"rightIcon\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"rightIcon\", \"required\": false, \"type\": { \"name\": \"ReactNode\" } }, \"onPress\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onPress\", \"required\": false, \"type\": { \"name\": \"(event: GestureResponderEvent) => void\" } }, \"getStyles\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getStyles\", \"required\": false, \"type\": { \"name\": \"ReplaceReturnType<GetListItemStyles, DeepPartial<ListItemStyles>>\" } }, \"testID\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"testID\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessible\": { \"defaultValue\": null, \"description\": \"When true, indicates that the view is an accessibility element.\\nBy default, all the touchable elements are accessible.\", \"name\": \"accessible\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityLabel\": { \"defaultValue\": null, \"description\": \"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.\", \"name\": \"accessibilityLabel\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityRole\": { \"defaultValue\": null, \"description\": \"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\", \"name\": \"accessibilityRole\", \"required\": false, \"type\": { \"name\": \"AccessibilityRole\" } }, \"accessibilityStates\": { \"defaultValue\": null, \"description\": \"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\", \"name\": \"accessibilityStates\", \"required\": false, \"type\": { \"name\": \"AccessibilityState[]\" } }, \"accessibilityHint\": { \"defaultValue\": null, \"description\": \"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\", \"name\": \"accessibilityHint\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"accessibilityComponentType\": { \"defaultValue\": null, \"description\": \"In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a \\u201Cbutton\\u201D).\\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\\nprovide a bit more context for TalkBack. To do so, you must specify the \\u2018accessibilityComponentType\\u2019 property\\nfor any UI component. For instances, we support \\u2018button\\u2019, \\u2018radiobutton_checked\\u2019 and \\u2018radiobutton_unchecked\\u2019 and so on.\\n@platform android\", \"name\": \"accessibilityComponentType\", \"required\": false, \"type\": { \"name\": \"\\\"button\\\" | \\\"none\\\" | \\\"radiobutton_checked\\\" | \\\"radiobutton_unchecked\\\"\" } }, \"accessibilityLiveRegion\": { \"defaultValue\": null, \"description\": \"Indicates to accessibility services whether the user should be notified when this view changes.\\nWorks for Android API >= 19 only.\\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\\n@platform android\", \"name\": \"accessibilityLiveRegion\", \"required\": false, \"type\": { \"name\": \"\\\"none\\\" | \\\"polite\\\" | \\\"assertive\\\"\" } }, \"importantForAccessibility\": { \"defaultValue\": null, \"description\": \"Controls how view is important for accessibility which is if it fires accessibility events\\nand if it is reported to accessibility services that query the screen.\\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\\n\\nPossible values:\\n      'auto' - The system determines whether the view is important for accessibility - default (recommended).\\n      'yes' - The view is important for accessibility.\\n      'no' - The view is not important for accessibility.\\n      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\", \"name\": \"importantForAccessibility\", \"required\": false, \"type\": { \"name\": \"\\\"auto\\\" | \\\"yes\\\" | \\\"no\\\" | \\\"no-hide-descendants\\\"\" } }, \"accessibilityElementsHidden\": { \"defaultValue\": null, \"description\": \"A Boolean value indicating whether the accessibility elements contained within this accessibility element\\nare hidden to the screen reader.\\n@platform ios\", \"name\": \"accessibilityElementsHidden\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"accessibilityTraits\": { \"defaultValue\": null, \"description\": \"Accessibility traits tell a person using VoiceOver what kind of element they have selected.\\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.\\n@platform ios\", \"name\": \"accessibilityTraits\", \"required\": false, \"type\": { \"name\": \"\\\"button\\\" | \\\"header\\\" | \\\"link\\\" | \\\"summary\\\" | \\\"image\\\" | \\\"text\\\" | \\\"none\\\" | \\\"search\\\" | \\\"adjustable\\\" | \\\"selected\\\" | \\\"disabled\\\" | \\\"plays\\\" | \\\"key\\\" | \\\"frequentUpdates\\\" | \\\"startsMedia\\\" | \\\"allowsDirectInteraction\\\" | \\\"pageTurn\\\" | AccessibilityTrait[]\" } }, \"onAccessibilityTap\": { \"defaultValue\": null, \"description\": \"When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\\n@platform ios\", \"name\": \"onAccessibilityTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"onMagicTap\": { \"defaultValue\": null, \"description\": \"When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\\n@platform ios\", \"name\": \"onMagicTap\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"accessibilityIgnoresInvertColors\": { \"defaultValue\": null, \"description\": \"https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\\n@platform ios\", \"name\": \"accessibilityIgnoresInvertColors\", \"required\": false, \"type\": { \"name\": \"boolean\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/components/ListItem/ListItem.tsx#__class\"] = { docgenInfo: __class.__docgenInfo, name: \"__class\", path: \"src/components/ListItem/ListItem.tsx#__class\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\ntry {\n    // @ts-ignore\n    Iconweb.displayName = \"Iconweb\";\n    // @ts-ignore\n    Iconweb.__docgenInfo = { \"description\": \"\", \"displayName\": \"Iconweb\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": true, \"type\": { \"name\": \"FeatherIconName\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/icons/Icon.web.tsx#Iconweb\"] = { docgenInfo: Iconweb.__docgenInfo, name: \"Iconweb\", path: \"src/icons/Icon.web.tsx#Iconweb\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","export { default as Icon } from './Icon';\ntry {\n    // @ts-ignore\n    icons.displayName = \"icons\";\n    // @ts-ignore\n    icons.__docgenInfo = { \"description\": \"\", \"displayName\": \"icons\", \"props\": { \"color\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"color\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"name\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"name\", \"required\": true, \"type\": { \"name\": \"FeatherIconName\" } }, \"size\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"number\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/icons/index.ts#icons\"] = { docgenInfo: icons.__docgenInfo, name: \"icons\", path: \"src/icons/index.ts#icons\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}