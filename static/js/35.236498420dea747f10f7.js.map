{"version":3,"sources":["/home/travis/build/WeTrustPlatform/paramount/src/components/Typography/BulletedList.mdx","/home/travis/build/WeTrustPlatform/paramount/src/icons/Icon.web.tsx","/home/travis/build/WeTrustPlatform/paramount/src/icons/index.ts"],"names":["_react2","_interopRequireDefault","__webpack_require__","_docz","_icons","_","layoutProps","MDXLayout","MDXContent","_ref","components","props","_objectWithoutProperties2","default","mdx","_extends2","mdxType","id","Playground","__position","__code","__scope","this","Props","Icon","BulletedList","BulletItem","icon","name","isMDXComponent","React","_interopRequireWildcard","Feather","color","size","IconTag","concat","result","replace","matches","toUpperCase","charAt","slice","convertToPascal","createElement","_Icon"],"mappings":"0YAEEA,GADAC,EAAAC,EAAA,kCACAA,EAAA,kDAEFC,EAAAD,EAAA,yCACAE,EAAAF,EAAA,wBACAG,EAAAH,EAAA,wCAOMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,GACF,EAAAC,EAAAC,SAAAJ,EAAA,gBACD,OAAO,EAAAT,EAAAc,KAACP,GAAD,EAAAQ,EAAAF,SAAA,GAAeP,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,eAE5E,EAAAhB,EAAAc,KAAA,KAAQ,CACNG,GAAM,gBADR,iBAGA,EAAAjB,EAAAc,KAACX,EAAAe,WAAD,CAAYC,WAAY,EAAGC,OAAQ,2RAA8RC,QAAS,CACxUV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,wBACAK,cACAC,YACAC,4BACAC,yBACCV,QAAQ,eACb,EAAAhB,EAAAc,KAACT,EAAAoB,aAAD,CAAcE,MAAM,EAAA3B,EAAAc,KAACV,EAAAoB,KAAD,CAAMI,KAAK,QAAQZ,QAAQ,SAAWA,QAAQ,iBAChE,EAAAhB,EAAAc,KAACT,EAAAqB,WAAD,CAAYV,QAAQ,cAApB,+BACA,EAAAhB,EAAAc,KAACT,EAAAqB,WAAD,CAAYV,QAAQ,cAApB,+BACA,EAAAhB,EAAAc,KAACT,EAAAqB,WAAD,CAAYV,QAAQ,cAApB,+BACA,EAAAhB,EAAAc,KAACT,EAAAqB,WAAD,CAAYV,QAAQ,cAApB,iOAMJR,EAAWqB,gBAAiB,2LC5C5B,IAAAC,EAAAC,EAAA7B,EAAA,kCACA8B,EAAAD,EAAA7B,EAAA,yDAae,SAAAO,GAAsC,IAAnCmB,EAAmCnB,EAAnCmB,KAAMK,EAA6BxB,EAA7BwB,MAAOC,EAAsBzB,EAAtByB,KAEvBC,EAAUH,EAAO,KAAAI,OAXzB,SAAyBR,GACvB,IAIMS,EAAST,EAAKU,QAAQ,UAJV,SAACC,GACjB,OAAOA,EAAQ,GAAGC,gBAIpB,OAAOH,EAAOI,OAAO,GAAGD,cAAgBH,EAAOK,MAAM,GAKxBC,CAAgBf,KAE7C,OAAOE,EAAAc,cAACT,EAAD,CAASF,MAAOA,EAAOC,KAAMA,yPClBtC,IAAAW,EAAA5C,EAAAC,EAAA","file":"static/js/35.676e5534.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Icon } from '../../icons';\nimport { BulletedList, BulletItem } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"bulletedlist\"\n    }}>{`BulletedList`}</h1>\n    <Playground __position={0} __code={'<BulletedList icon={<Icon name=\\\"check\\\" />}>\\n  <BulletItem>Lorem ipsum dolar set amet</BulletItem>\\n  <BulletItem>Lorem ipsum dolar set amet</BulletItem>\\n  <BulletItem>Lorem ipsum dolar set amet</BulletItem>\\n  <BulletItem>Lorem ipsum dolar set amet</BulletItem>\\n</BulletedList>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Icon,\n      BulletedList,\n      BulletItem\n    }} mdxType=\"Playground\">\n  <BulletedList icon={<Icon name=\"check\" mdxType=\"Icon\" />} mdxType=\"BulletedList\">\n    <BulletItem mdxType=\"BulletItem\">Lorem ipsum dolar set amet</BulletItem>\n    <BulletItem mdxType=\"BulletItem\">Lorem ipsum dolar set amet</BulletItem>\n    <BulletItem mdxType=\"BulletItem\">Lorem ipsum dolar set amet</BulletItem>\n    <BulletItem mdxType=\"BulletItem\">Lorem ipsum dolar set amet</BulletItem>\n  </BulletedList>\n    </Playground>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","import * as React from 'react';\nimport * as Feather from 'react-icons/fi';\n\nimport { IconProps } from './Icon';\n\nfunction convertToPascal(name: string) {\n  const converter = (matches: string, ...args: any[]) => {\n    return matches[1].toUpperCase();\n  };\n\n  const result = name.replace(/(\\-\\w)/g, converter);\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport default ({ name, color, size }: IconProps) => {\n  // @ts-ignore\n  const IconTag = Feather[`Fi${convertToPascal(name)}`];\n\n  return <IconTag color={color} size={size} />;\n};\n","export { default as Icon } from './Icon';\n"],"sourceRoot":""}