{"version":3,"sources":["webpack:///../docs/Layout.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kcAOO,IAAMA,EAAe,Q,iMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,sGAAqF,0BAAYC,WAAW,KAAvB,WAArF,KAA8I,0BAAYA,WAAW,KAAvB,kBAA9I,KAA8M,0BAAYA,WAAW,KAAvB,aAA9M,+BACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,sCADQ,WAApB,6DAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,6CADQ,yBAApB,6BAGA,kBAAIA,WAAW,MAAK,mBAAGA,WAAW,MAAS,CACvC,KAAQ,wCADQ,aAApB,wCAIF,iBAAQ,CACN,GAAM,QADR,QAGA,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,oEACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,0DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iDAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sMAaL,iBAAQ,CACN,GAAM,WADR,WAGA,qIAAoH,0BAAYA,WAAW,KAAvB,kBACpH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oS,wLA6BTJ,EAAWK,gBAAiB","file":"component---docs-layout-mdx-6fc76a1f8da8eba21d2c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/paramount/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"layout\"\n    }}>{`Layout`}</h1>\n    <p>{`Paramount provides building blocks to create responsive layout via components `}<inlineCode parentName=\"p\">{`Visible`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Row and Column`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Container`}</inlineCode>{` and convenience functions.`}</p>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/paramount/src-components-visible\"\n        }}>{`Visible`}</a>{` - Conditionally render children depending on screen size`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/paramount/src-components-row-and-column\"\n        }}>{`Row and Column (Grid)`}</a>{` - For doing grid layouts`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/paramount/src-components-container\"\n        }}>{`Container`}</a>{` - Keep children at contained width`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"hook\"\n    }}>{`Hook`}</h2>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useLayout`}</inlineCode>{` that you can import to make use of utility functions for layout`}</p>\n    <h3 {...{\n      \"id\": \"currentscreensize\"\n    }}>{`currentScreenSize`}</h3>\n    <p>{`Retrieves the current screen size`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { currentScreenSize } = useLayout();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"getresponsivevalue\"\n    }}>{`getResponsiveValue`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const { getResponsiveValue } = useLayout();\n\nconst color = getResponsiveValue({\n  xsmall: 'red',\n  large: 'blue',\n});\nconst number = getResponsiveValue({\n  xsmall: 0,\n  large: 1,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h2>\n    <p>{`These are all the available theme configuration options, as well as their default values. Pass the config to `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export const layout: Layout = {\n  breakpoints: {\n    small: 480,\n\n    medium: 768,\n\n    large: 992,\n\n    xlarge: 1200,\n  },\n  containerSizes: {\n    small: 540,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1200,\n  },\n  gridColumnCount: 12,\n  gutterWidth: 32,\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}