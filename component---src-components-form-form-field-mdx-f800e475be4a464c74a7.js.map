{"version":3,"sources":["webpack:///../src/components/Form/FormField.mdx","webpack:///../src/components/Typography/Label.tsx","webpack:///../src/components/Inputs/TextInput.tsx","webpack:///../src/components/Form/FormField.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","FormField","TextInput","label","description","error","of","isMDXComponent","Label","children","position","overrides","theme","useTheme","getOverrides","StyledRoot","dlv","Root","rootProps","StyledWrapper","Wrapper","wrapperProps","StyledLabelText","LabelText","labelTextProps","style","viewProps","wrapperStyle","flexDirection","alignItems","paddingRight","paddingBottom","textProps","textStyle","paddingLeft","getStyle","accessibilityRole","Platform","OS","size","isClearable","isDisabled","isInvalid","onClear","onValueChange","onChangeText","value","textInputProps","StyledInput","hasLeftIcon","LeftIcon","hasRightIcon","RightIcon","Input","inputProps","StyledLeftIconWrapper","LeftIconWrapper","leftIconWrapperProps","StyledLeftIcon","leftIconProps","StyledRightIconWrapper","RightIconWrapper","rightIconWrapperProps","StyledRightIcon","rightIconProps","numberOfLines","textContentType","placeholderTextColor","isControlSize","borderRadius","controlBorderRadius","minHeight","controlHeights","controlPaddings","textSize","textSizes","medium","backgroundColor","colors","background","greyLight","content","borderColor","border","default","borderWidth","color","text","muted","width","danger","paddingVertical","editable","name","display","height","justifyContent","left","paddingHorizontal","zIndex","right","onPress","labelPosition","LabelR","labelRProps","StyledDescription","Description","descriptionProps","StyledError","Error","ErrorR","errorProps"],"mappings":"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","file":"component---src-components-form-form-field-mdx-f800e475be4a464c74a7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { FormField } from './FormField';\nimport { TextInput } from '../Inputs';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"formfield\"\n    }}>{`FormField`}</h1>\n    <p>{`Enriches a field in a form to contain label, description or error messages.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<FormField\\n  label=\\\"Label\\\"\\n  description=\\\"Description for the field\\\"\\n  error=\\\"Error message\\\"\\n>\\n  <TextInput />\\n</FormField>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormField,\n      TextInput\n    }} mdxType=\"Playground\">\n  <FormField label=\"Label\" description=\"Description for the field\" error=\"Error message\" mdxType=\"FormField\">\n    <TextInput mdxType=\"TextInput\" />\n  </FormField>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={FormField} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import dlv from 'dlv';\nimport React from 'react';\nimport { Platform, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\n\nimport { Text, TextProps } from './Text';\n\nexport type LabelPosition = 'top' | 'left' | 'right';\n\ninterface LabelBaseProps {\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  position?: LabelPosition;\n\n  /** Content to wrap with. */\n  children?: React.ReactNode;\n}\n\nexport interface LabelOverrides {\n  Root: RootProps;\n  Wrapper: WrapperProps;\n  LabelText: LabelTextProps;\n}\n\nexport interface LabelProps\n  extends WithOverrides<LabelBaseProps, LabelOverrides> {}\n\nexport const Label = (props: LabelProps) => {\n  const { children, position = 'top', overrides = {}, label } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.Label.Root'),\n    overrides.Root,\n  );\n  const [Wrapper, wrapperProps] = getOverrides(\n    StyledWrapper,\n    props,\n    { position },\n    dlv(theme, 'overrides.Label.Wrapper'),\n    overrides.Wrapper,\n  );\n  const [LabelText, labelTextProps] = getOverrides(\n    StyledLabelText,\n    props,\n    { position, label },\n    dlv(theme, 'overrides.Label.LabelText'),\n    overrides.LabelText,\n  );\n\n  return (\n    <Root {...rootProps}>\n      {position === 'top' && <LabelText {...labelTextProps} />}\n      <Wrapper {...wrapperProps}>\n        {position === 'left' && <LabelText {...labelTextProps} />}\n        {children}\n        {position === 'right' && <LabelText {...labelTextProps} />}\n      </Wrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface WrapperProps extends ViewProps, PropsWithChildren {\n  position: LabelPosition;\n}\n\nconst StyledWrapper = (props: WrapperProps) => {\n  const { children, style, position, ...viewProps } = props;\n\n  let wrapperStyle: ViewStyle = {};\n\n  switch (position) {\n    case 'left':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingRight: 8,\n      };\n      break;\n    case 'right':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n      };\n      break;\n    case 'top':\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n    default:\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <View style={[wrapperStyle, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface LabelTextProps extends TextProps, PropsWithChildren {\n  label?: OptionalString;\n  position: LabelPosition;\n}\n\nconst StyledLabelText = (props: LabelTextProps) => {\n  const { label, position, style, ...textProps } = props;\n\n  if (!label) return null;\n\n  let textStyle: TextStyle = {};\n\n  switch (position) {\n    case 'left':\n      textStyle = { paddingRight: 8 };\n      break;\n    case 'right':\n      textStyle = { paddingLeft: 8 };\n      break;\n    case 'top':\n      textStyle = { paddingBottom: 4 };\n      break;\n    default:\n      textStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <Text\n      style={[textStyle, getStyle(props, style)]}\n      // @ts-ignore: Compat with web\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      {...textProps}\n    >\n      {label}\n    </Text>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { Icon } from '../Icon';\n\ninterface TextInputBaseProps extends RNTextInputProps {\n  /**\n   * Size of the text input.\n   * @default medium\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, text input is disabled\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, text input will be highlighted as invalid\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Alias for onChangeText, for API consistency\n   */\n  onValueChange?: (value: string) => void;\n\n  /**\n   * Called when clear icon is pressed.\n   */\n  onClear?: () => void;\n\n  /**\n   * When true, when value is not empty, a clear icon is displayed\n   */\n  isClearable?: boolean;\n}\n\nexport interface TextInputOverrides {\n  Root: RootProps;\n  LeftIconWrapper: LeftIconWrapperProps;\n  LeftIcon: StyledIconProps;\n  Input: InputProps;\n  RightIcon: StyledIconProps;\n  RightIconWrapper: RightIconWrapperProps;\n}\n\nexport interface TextInputProps\n  extends WithOverrides<TextInputBaseProps, TextInputOverrides> {}\n\nexport const TextInput = (props: TextInputProps) => {\n  const {\n    size = 'medium',\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    onClear = () => {\n      return;\n    },\n    onValueChange = () => {\n      return;\n    },\n    onChangeText = () => {\n      return;\n    },\n    value,\n    overrides = {},\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.Root'),\n    overrides.Root,\n  );\n  const [Input, inputProps] = getOverrides(\n    StyledInput,\n    props,\n    {\n      hasLeftIcon: !!overrides.LeftIcon,\n      hasRightIcon: !!(isClearable || overrides.RightIcon),\n      size,\n      isDisabled,\n      isInvalid,\n      onValueChange,\n      value,\n      onChangeText,\n      ...textInputProps,\n    },\n    dlv(theme, 'overrides.TextInput.Input'),\n    overrides.Input,\n  );\n  const [LeftIconWrapper, leftIconWrapperProps] = getOverrides(\n    StyledLeftIconWrapper,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.LeftIconWrapper'),\n    overrides.LeftIconWrapper,\n  );\n  const [LeftIcon, leftIconProps] = getOverrides(\n    StyledLeftIcon,\n    props,\n    {\n      isClearable,\n      onClear,\n      onValueChange,\n      value,\n      onChangeText,\n    },\n    dlv(theme, 'overrides.TextInput.LeftIcon'),\n    overrides.LeftIcon,\n  );\n  const [RightIconWrapper, rightIconWrapperProps] = getOverrides(\n    StyledRightIconWrapper,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.RightIconWrapper'),\n    overrides.RightIconWrapper,\n  );\n  const [RightIcon, rightIconProps] = getOverrides(\n    StyledRightIcon,\n    props,\n    {\n      isClearable,\n      onClear,\n      onValueChange,\n      value,\n      onChangeText,\n    },\n    dlv(theme, 'overrides.TextInput.RightIcon'),\n    overrides.RightIcon,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <LeftIconWrapper {...leftIconWrapperProps}>\n        <LeftIcon {...leftIconProps} />\n      </LeftIconWrapper>\n      <Input {...inputProps} />\n      <RightIconWrapper {...rightIconWrapperProps}>\n        <RightIcon {...rightIconProps} />\n      </RightIconWrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface InputProps extends RNTextInputProps {\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n  onValueChange: (value: string) => void;\n  onChangeText: (value: string) => void;\n}\n\nconst StyledInput = (props: InputProps) => {\n  const {\n    isDisabled,\n    isInvalid,\n    onValueChange,\n    onChangeText,\n    size,\n    style,\n    numberOfLines,\n    textContentType,\n    hasLeftIcon,\n    hasRightIcon,\n    placeholderTextColor,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    borderRadius,\n    minHeight,\n    paddingLeft,\n    paddingRight,\n    textSize,\n  } = isControlSize(size)\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        minHeight: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size],\n        paddingRight: theme.controlPaddings[size],\n        textSize: theme.textSizes[size],\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        minHeight: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n        textSize: theme.textSizes.medium,\n      };\n\n  return (\n    // @ts-ignore\n    <RNTextInput\n      style={[\n        {\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderRadius,\n          borderWidth: 1,\n          color: isDisabled\n            ? theme.colors.text.muted\n            : theme.colors.text.default,\n          minHeight,\n          paddingLeft,\n          paddingRight,\n          width: '100%',\n          ...textSize,\n          ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n          ...(numberOfLines\n            ? {\n                minHeight: numberOfLines * minHeight,\n                paddingVertical: 16,\n              }\n            : {}),\n          ...(hasLeftIcon && { paddingLeft: 40 }),\n          ...(hasRightIcon && { paddingRight: 40 }),\n        },\n        style,\n      ]}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor || theme.colors.text.muted}\n      name={textContentType}\n      numberOfLines={numberOfLines}\n      textContentType={textContentType}\n      onChangeText={text => {\n        onValueChange(text);\n        onChangeText(text);\n      }}\n      {...textInputProps}\n    />\n  );\n};\n\ninterface LeftIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledLeftIconWrapper = (props: LeftIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          left: 0,\n          paddingHorizontal: 8,\n          position: 'absolute',\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface RightIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRightIconWrapper = (props: RightIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          paddingHorizontal: 8,\n          position: 'absolute',\n          right: 0,\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface StyledIconProps {\n  onValueChange: (value: string) => void;\n  onChangeText: (text: string) => void;\n  value?: string;\n  isClearable: boolean;\n  onClear: () => void;\n}\n\nconst StyledLeftIcon = (props: StyledIconProps) => {\n  return <></>;\n};\n\nconst StyledRightIcon = (props: StyledIconProps) => {\n  const { isClearable, onClear, onValueChange, onChangeText, value } = props;\n  const theme = useTheme();\n\n  if (!value || !isClearable) return null;\n\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        onChangeText('');\n        onValueChange('');\n        onClear();\n      }}\n    >\n      <Icon name=\"x\" color={theme.colors.text.default} />\n    </TouchableOpacity>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport {\n  Label,\n  LabelPosition,\n  LabelProps,\n  Text,\n  TextProps,\n} from '../Typography';\n\ninterface FormFieldBaseProps {\n  /**\n   * Error message of the field\n   */\n  error?: OptionalString;\n\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: LabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: OptionalString;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n}\n\nexport interface FormFieldOverrides {\n  Root: RootProps;\n  Label: LabelProps;\n  Description: DescriptionProps;\n  Error: ErrorProps;\n}\n\nexport interface FormFieldProps\n  extends WithOverrides<FormFieldBaseProps, FormFieldOverrides> {}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.FormField.Root'),\n    overrides.Root,\n  );\n  const [LabelR, labelRProps] = getOverrides(\n    Label,\n    props,\n    { label, position: labelPosition },\n    dlv(theme, 'overrides.FormField.Label'),\n    overrides.Label,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    { description },\n    dlv(theme, 'overrides.FormField.Description'),\n    overrides.Description,\n  );\n  const [ErrorR, errorProps] = getOverrides(\n    StyledError,\n    props,\n    { error },\n    dlv(theme, 'overrides.FormField.Error'),\n    overrides.Error,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <LabelR {...labelRProps}>{children}</LabelR>\n      <Description {...descriptionProps} />\n      <ErrorR {...errorProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps, PropsWithChildren {\n  description?: OptionalString;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { children, style, description, ...viewProps } = props;\n\n  if (!description) return null;\n\n  return (\n    <Text\n      color=\"muted\"\n      style={[\n        {\n          paddingBottom: 4,\n        },\n        getStyle(props, style),\n      ]}\n      {...viewProps}\n    >\n      {description}\n    </Text>\n  );\n};\n\ninterface ErrorProps extends TextProps, PropsWithChildren {\n  error?: OptionalString;\n}\n\nconst StyledError = (props: ErrorProps) => {\n  const { children, style, error, ...viewProps } = props;\n\n  if (!error) return null;\n\n  return (\n    <Text style={[getStyle(props, style)]} color=\"danger\" {...viewProps}>\n      {error}\n    </Text>\n  );\n};\n"],"sourceRoot":""}