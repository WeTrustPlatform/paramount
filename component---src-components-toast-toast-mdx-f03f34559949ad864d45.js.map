{"version":3,"sources":["webpack:///../src/components/Toast/Toast.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","ToastContext","ToastProvider","Toast","Box","Button","Consumer","notify","onPress","title","description","duration","of","isMDXComponent"],"mappings":"6eAWO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,SADR,SAGA,yCAAwB,0BAAYC,WAAW,KAAvB,iBAAxB,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gDAIL,iBAAQ,CACN,GAAM,SADR,SAGA,6DAA4C,0BAAYA,WAAW,KAAvB,YAA5C,mEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qfAA0fC,QAAS,CACpiBL,QACAH,kBACAS,eACAC,UACAC,iBACAC,kBACAC,UACAC,QACAC,YACCX,QAAQ,cACb,YAAC,IAAD,CAAeA,QAAQ,iBAOrB,YAAC,IAAaY,SAAd,MACG,gBACKC,EADL,EACKA,OADL,OAES,YAAC,IAAD,CAAQC,QAAS,kBAAMD,EAAO,CAClCE,MAAO,QACPC,YAAa,cACbC,SAAU,OACRF,MAAM,aAAaf,QAAQ,gBAIrC,iBAAQ,CACN,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAOkB,GAAIT,IAAOT,QAAQ,W,uMAK9BH,EAAWsB,gBAAiB","file":"component---src-components-toast-toast-mdx-f03f34559949ad864d45.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/paramount/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { ToastContext, ToastProvider } from './ToastProvider';\nimport { Toast } from './Toast';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"toast\"\n    }}>{`Toast`}</h1>\n    <h2 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h2>\n    <p>{`Make sure to use `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` at the top-level component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<ThemeProvider>{children}</ThemeProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Paramount exposes a convenience hook `}<inlineCode parentName=\"p\">{`useToast`}</inlineCode>{` you can use to create toasts from anywhere in the application.`}</p>\n    <Playground __position={0} __code={'<ToastProvider>\\n  {/*\\n    We use `ToastContext.Consumer` here due to limitations in docs\\n    Use `const { notify } = useToast()` inside your function component\\n   */}\\n  <ToastContext.Consumer>\\n    {({ notify }) => (\\n      <Button\\n        onPress={() =>\\n          notify({\\n            title: \\'Title\\',\\n            description: \\'Description\\',\\n            duration: 5000,\\n          })\\n        }\\n        title=\\\"Open toast\\\"\\n      />\\n    )}\\n  </ToastContext.Consumer>\\n</ToastProvider>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ToastContext,\n      ToastProvider,\n      Toast,\n      Box,\n      Button\n    }} mdxType=\"Playground\">\n  <ToastProvider mdxType=\"ToastProvider\">\n    {\n          /*\n           We use `ToastContext.Consumer` here due to limitations in docs\n           Use `const { notify } = useToast()` inside your function component\n          */\n        }\n    <ToastContext.Consumer>\n      {({\n            notify\n          }) => <Button onPress={() => notify({\n            title: 'Title',\n            description: 'Description',\n            duration: 5000\n          })} title=\"Open toast\" mdxType=\"Button\" />}\n    </ToastContext.Consumer>\n  </ToastProvider>\n    </Playground>\n    <h2 {...{\n      \"id\": \"toast-options\"\n    }}>{`Toast Options`}</h2>\n    <Props of={Toast} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}