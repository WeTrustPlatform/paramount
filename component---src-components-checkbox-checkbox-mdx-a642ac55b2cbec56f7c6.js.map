{"version":3,"sources":["webpack:///../src/components/Checkbox/Checkbox.mdx","webpack:///../src/components/Helpers/Toggle.tsx","webpack:///../src/components/Typography/Label.tsx","webpack:///../src/components/Checkbox/Checkbox.tsx","webpack:///../src/components/Form/FormField.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Checkbox","FormField","Toggle","initial","on","toggle","shape","value","onValueChange","label","size","of","isMDXComponent","children","React","useState","isOn","setIsOn","handleToggle","useCallback","handleSet","set","Label","position","overrides","theme","useTheme","getOverrides","StyledRoot","dlv","Root","rootProps","StyledWrapper","Wrapper","wrapperProps","StyledLabelText","LabelText","labelTextProps","style","viewProps","wrapperStyle","flexDirection","alignItems","paddingRight","paddingBottom","textProps","textStyle","paddingLeft","getStyle","accessibilityRole","Platform","OS","labelPosition","isDisabled","testID","StyledTouchable","onPress","Touchable","touchableProps","StyledCheck","Check","checkProps","containerShapes","disabled","sizeValue","isControlSize","controlHeights","backgroundColor","colors","background","content","borderColor","border","default","borderWidth","height","justifyContent","width","primaryDefault","greyDark","name","color","text","white","error","description","LabelR","labelRProps","StyledDescription","Description","descriptionProps","StyledError","Error","ErrorR","errorProps"],"mappings":"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","file":"component---src-components-checkbox-checkbox-mdx-a642ac55b2cbec56f7c6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Checkbox } from './Checkbox';\nimport { FormField } from '../Form';\nimport { Toggle } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`Checkbox for boolean values`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Checkbox\\n      shape=\\\"circle\\\"\\n      value={on}\\n      onValueChange={toggle}\\n      label=\\\"Checkbox label\\\"\\n      size=\\\"medium\\\"\\n    />\\n  )}\\n</Toggle>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Checkbox,\n      FormField,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Checkbox shape=\"circle\" value={on} onValueChange={toggle} label=\"Checkbox label\" size=\"medium\" mdxType=\"Checkbox\" />}\n  </Toggle>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport { Platform, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\n\nimport { Text, TextProps } from './Text';\n\nexport type LabelPosition = 'top' | 'left' | 'right';\n\ninterface LabelBaseProps {\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  position?: LabelPosition;\n\n  /** Content to wrap with. */\n  children?: React.ReactNode;\n}\n\nexport interface LabelOverrides {\n  Root: RootProps;\n  Wrapper: WrapperProps;\n  LabelText: LabelTextProps;\n}\n\nexport interface LabelProps\n  extends WithOverrides<LabelBaseProps, LabelOverrides> {}\n\nexport const Label = (props: LabelProps) => {\n  const { children, position = 'top', overrides = {}, label } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.Label.Root'),\n    overrides.Root,\n  );\n  const [Wrapper, wrapperProps] = getOverrides(\n    StyledWrapper,\n    props,\n    { position },\n    dlv(theme, 'overrides.Label.Wrapper'),\n    overrides.Wrapper,\n  );\n  const [LabelText, labelTextProps] = getOverrides(\n    StyledLabelText,\n    props,\n    { position, label },\n    dlv(theme, 'overrides.Label.LabelText'),\n    overrides.LabelText,\n  );\n\n  return (\n    <Root {...rootProps}>\n      {position === 'top' && <LabelText {...labelTextProps} />}\n      <Wrapper {...wrapperProps}>\n        {position === 'left' && <LabelText {...labelTextProps} />}\n        {children}\n        {position === 'right' && <LabelText {...labelTextProps} />}\n      </Wrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface WrapperProps extends ViewProps, PropsWithChildren {\n  position: LabelPosition;\n}\n\nconst StyledWrapper = (props: WrapperProps) => {\n  const { children, style, position, ...viewProps } = props;\n\n  let wrapperStyle: ViewStyle = {};\n\n  switch (position) {\n    case 'left':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingRight: 8,\n      };\n      break;\n    case 'right':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n      };\n      break;\n    case 'top':\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n    default:\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <View style={[wrapperStyle, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface LabelTextProps extends TextProps, PropsWithChildren {\n  label?: OptionalString;\n  position: LabelPosition;\n}\n\nconst StyledLabelText = (props: LabelTextProps) => {\n  const { label, position, style, ...textProps } = props;\n\n  if (!label) return null;\n\n  let textStyle: TextStyle = {};\n\n  switch (position) {\n    case 'left':\n      textStyle = { paddingRight: 8 };\n      break;\n    case 'right':\n      textStyle = { paddingLeft: 8 };\n      break;\n    case 'top':\n      textStyle = { paddingBottom: 4 };\n      break;\n    default:\n      textStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <Text\n      style={[textStyle, getStyle(props, style)]}\n      // @ts-ignore: Compat with web\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      {...textProps}\n    >\n      {label}\n    </Text>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Icon } from '../Icon';\nimport { Label, LabelPosition, LabelProps } from '../Typography';\n\ninterface CheckboxBaseProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"right\"\n   */\n  labelPosition?: LabelPosition;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CheckboxOverrides {\n  Touchable: TouchableProps;\n  Label: LabelProps;\n  Check: CheckProps;\n}\n\nexport interface CheckboxProps\n  extends WithOverrides<CheckboxBaseProps, CheckboxOverrides> {}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    size = 'medium',\n    shape = 'rounded',\n    value = false,\n    label,\n    labelPosition = 'right',\n    isDisabled = false,\n    onValueChange = () => {\n      return;\n    },\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      size,\n      shape,\n      isDisabled,\n      testID,\n      onPress: () => onValueChange(!value),\n    },\n    dlv(theme, 'overrides.Checkbox.Touchable'),\n    overrides.Touchable,\n  );\n  const [Check, checkProps] = getOverrides(\n    StyledCheck,\n    props,\n    { value, size, shape, isDisabled },\n    dlv(theme, 'overrides.Checkbox.Check'),\n    overrides.Check,\n  );\n\n  return (\n    <Touchable {...touchableProps}>\n      <Label label={label} position={labelPosition}>\n        <Check\n          value={value}\n          size={size}\n          shape={shape}\n          isDisabled={isDisabled}\n          {...checkProps}\n        />\n      </Label>\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { size, shape, isDisabled, children, style, ...touchableProps } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={[theme.containerShapes[shape], style]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface CheckProps extends ViewProps {\n  size: ControlSize | number;\n  value: boolean;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledCheck = (props: CheckProps) => {\n  const { size, shape, value, isDisabled, style, ...viewProps } = props;\n  const theme = useTheme();\n\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderWidth: 1,\n          height: sizeValue,\n          justifyContent: 'center',\n          width: sizeValue,\n          ...(value\n            ? {\n                backgroundColor: theme.colors.background.primaryDefault,\n                borderColor: 'transparent',\n              }\n            : {}),\n          ...(isDisabled\n            ? {\n                backgroundColor: theme.colors.background.greyDark,\n                borderColor: theme.colors.border.default,\n              }\n            : {}),\n          ...theme.containerShapes[shape],\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon name=\"check\" size=\"xsmall\" color={theme.colors.text.white} />\n      ) : null}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport {\n  Label,\n  LabelPosition,\n  LabelProps,\n  Text,\n  TextProps,\n} from '../Typography';\n\ninterface FormFieldBaseProps {\n  /**\n   * Error message of the field\n   */\n  error?: OptionalString;\n\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  labelPosition?: LabelPosition;\n\n  /**\n   * Description of the field.\n   */\n  description?: OptionalString;\n\n  /** Content to wrap FormField with. */\n  children?: React.ReactNode;\n}\n\nexport interface FormFieldOverrides {\n  Root: RootProps;\n  Label: LabelProps;\n  Description: DescriptionProps;\n  Error: ErrorProps;\n}\n\nexport interface FormFieldProps\n  extends WithOverrides<FormFieldBaseProps, FormFieldOverrides> {}\n\nexport const FormField = (props: FormFieldProps) => {\n  const {\n    label,\n    error,\n    children,\n    description,\n    labelPosition = 'top',\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.FormField.Root'),\n    overrides.Root,\n  );\n  const [LabelR, labelRProps] = getOverrides(\n    Label,\n    props,\n    { label, position: labelPosition },\n    dlv(theme, 'overrides.FormField.Label'),\n    overrides.Label,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    { description },\n    dlv(theme, 'overrides.FormField.Description'),\n    overrides.Description,\n  );\n  const [ErrorR, errorProps] = getOverrides(\n    StyledError,\n    props,\n    { error },\n    dlv(theme, 'overrides.FormField.Error'),\n    overrides.Error,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <LabelR {...labelRProps}>{children}</LabelR>\n      <Description {...descriptionProps} />\n      <ErrorR {...errorProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps, PropsWithChildren {\n  description?: OptionalString;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { children, style, description, ...viewProps } = props;\n\n  if (!description) return null;\n\n  return (\n    <Text\n      color=\"muted\"\n      style={[\n        {\n          paddingBottom: 4,\n        },\n        getStyle(props, style),\n      ]}\n      {...viewProps}\n    >\n      {description}\n    </Text>\n  );\n};\n\ninterface ErrorProps extends TextProps, PropsWithChildren {\n  error?: OptionalString;\n}\n\nconst StyledError = (props: ErrorProps) => {\n  const { children, style, error, ...viewProps } = props;\n\n  if (!error) return null;\n\n  return (\n    <Text style={[getStyle(props, style)]} color=\"danger\" {...viewProps}>\n      {error}\n    </Text>\n  );\n};\n"],"sourceRoot":""}