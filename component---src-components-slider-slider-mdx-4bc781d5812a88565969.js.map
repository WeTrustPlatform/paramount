{"version":3,"sources":["webpack:///../src/components/Slider/Slider.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Slider","size","value","onValueChange","console","log","onSlidingComplete","onSlidingStart","parentName","step","minimumValue","maximumValue","of","isMDXComponent"],"mappings":"mdAQO,IAAMA,EAAe,Q,kNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,UADR,UAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,yPAAgQC,QAAS,CAC1SJ,QACAH,kBACAQ,eACAC,UACAC,YACCN,QAAQ,cACb,YAAC,IAAD,CAAQO,KAAK,QAAQC,MAAO,GAAKC,cAAe,SAAAD,GAAK,OAAIE,QAAQC,IAAI,gBAAiBH,IAAQI,kBAAmB,SAAAJ,GAAK,OAAIE,QAAQC,IAAI,oBAAqBH,IAAQK,eAAgB,SAAAL,GAAK,OAAIE,QAAQC,IAAI,iBAAkBH,IAAQR,QAAQ,YAExO,iBAAQ,CACN,GAAM,cADR,cAGA,iCAAgB,0BAAYc,WAAW,KAAvB,SAAhB,mBAAqF,0BAAYA,WAAW,KAAvB,oBAArF,qGACA,YAAC,IAAD,CAAYb,WAAY,EAAGC,OAAQ,kSAAySC,QAAS,CACnVJ,QACAH,kBACAQ,eACAC,UACAC,YACCN,QAAQ,cACb,YAAC,IAAD,CAAQQ,MAAO,CAAC,GAAI,IAAKO,KAAM,EAAGC,aAAc,EAAGC,aAAc,IAAKR,cAAe,SAAAD,GAAK,OAAIE,QAAQC,IAAI,gBAAiBH,IAAQI,kBAAmB,SAAAJ,GAAK,OAAIE,QAAQC,IAAI,oBAAqBH,IAAQK,eAAgB,SAAAL,GAAK,OAAIE,QAAQC,IAAI,iBAAkBH,IAAQR,QAAQ,YAE7Q,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOkB,GAAIZ,IAAQN,QAAQ,W,yMAK/BH,EAAWsB,gBAAiB","file":"component---src-components-slider-slider-mdx-4bc781d5812a88565969.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/paramount/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Slider } from './Slider';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Slider\\n  size=\\\"small\\\"\\n  value={0.3}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider size=\"small\" value={0.3} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"with-range\"\n    }}>{`With Range`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` as an array of `}<inlineCode parentName=\"p\">{`[number, number]`}</inlineCode>{`, it will automatically transform into a range slider. The minimum range is the value of the step`}</p>\n    <Playground __position={1} __code={'<Slider\\n  value={[30, 60]}\\n  step={5}\\n  minimumValue={0}\\n  maximumValue={100}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider value={[30, 60]} step={5} minimumValue={0} maximumValue={100} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}