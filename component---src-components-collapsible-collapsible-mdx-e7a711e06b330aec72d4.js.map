{"version":3,"sources":["webpack:///../src/components/Collapsible/Collapsible.tsx","webpack:///../src/components/Collapsible/Collapsible.mdx","webpack:///../src/components/Helpers/Toggle.tsx"],"names":["Collapsible","props","title","children","initialIsOpen","isOpen","testID","onOpen","onClose","overrides","theme","useTheme","React","useState","isOpened","setIsOpened","isControlledUsage","isFinalOpened","handlePress","useCallback","getOverrides","StyledTouchable","onPress","dlv","Touchable","touchableProps","StyledTitle","Title","titleProps","StyledContent","Content","contentProps","StyledIconOpen","IconOpen","iconOpenProps","StyledIconClose","IconClose","iconCloseProps","style","TouchableOpacity","alignItems","display","flexDirection","textProps","Text","size","getStyle","viewProps","View","paddingLeft","StyledIcon","showOpen","name","color","colors","text","default","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Box","Toggle","initial","on","toggle","marginVertical","justifyContent","height","backgroundColor","of","isMDXComponent","isOn","setIsOn","handleToggle","handleSet","set"],"mappings":"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","file":"component---src-components-collapsible-collapsible-mdx-e7a711e06b330aec72d4.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Icon } from '../Icon';\nimport { Text, TextProps } from '../Typography';\n\ninterface CollapsibleBaseProps {\n  /** Title of the collapsible */\n  title?: OptionalString;\n\n  /** Content revealed when collapsible is opened */\n  children?: React.ReactNode;\n\n  /**\n   * Set whether it is opened initially, for uncontrolled usage.\n   * @default false\n   */\n  initialIsOpen?: boolean;\n\n  /**\n   * When true, content of Collapsible is revealed\n   * @default false\n   */\n  isOpen?: boolean;\n\n  /** Called when header is pressed to open collapsible */\n  onOpen?: () => void;\n\n  /** Called when header is pressed to close collapsible */\n  onClose?: () => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CollapsibleOverrides {\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  IconOpen: IconProps;\n  IconClose: IconProps;\n  Content: ContentProps;\n}\n\nexport interface CollapsibleProps\n  extends WithOverrides<CollapsibleBaseProps, CollapsibleOverrides> {}\n\nexport const Collapsible = (props: CollapsibleProps) => {\n  const {\n    title,\n    children,\n    initialIsOpen = false,\n    isOpen,\n    testID,\n    onOpen = () => {\n      return;\n    },\n    onClose = () => {\n      return;\n    },\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n  const [isOpened, setIsOpened] = React.useState(initialIsOpen);\n\n  const isControlledUsage = typeof isOpen === 'boolean';\n  const isFinalOpened = isControlledUsage ? isOpen : isOpened;\n\n  const handlePress = React.useCallback(() => {\n    if (isControlledUsage) {\n      if (isOpen) {\n        onClose();\n      } else {\n        onOpen();\n      }\n    } else {\n      if (isOpened) {\n        setIsOpened(false);\n        onClose();\n      } else {\n        setIsOpened(true);\n        onOpen();\n      }\n    }\n  }, [isControlledUsage, isOpen, onClose, onOpen, isOpened]);\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    { testID, onPress: handlePress },\n    dlv(theme, 'overrides.Collapsible.Touchable'),\n    overrides.Touchable,\n  );\n\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    { title },\n    dlv(theme, 'overrides.Collapsible.Title'),\n    overrides.Title,\n  );\n  const [Content, contentProps] = getOverrides(\n    StyledContent,\n    props,\n    { isOpened: !!isFinalOpened },\n    dlv(theme, 'overrides.Collapsible.Content'),\n    overrides.Content,\n  );\n  const [IconOpen, iconOpenProps] = getOverrides(\n    StyledIconOpen,\n    props,\n    {},\n    dlv(theme, 'overrides.Collapsible.IconOpen'),\n    overrides.IconOpen,\n  );\n  const [IconClose, iconCloseProps] = getOverrides(\n    StyledIconClose,\n    props,\n    {},\n    dlv(theme, 'overrides.Collapsible.IconClose'),\n    overrides.IconClose,\n  );\n\n  return (\n    <>\n      <Touchable {...touchableProps}>\n        <Title {...titleProps} />\n        {isFinalOpened ? (\n          <IconClose {...iconCloseProps} />\n        ) : (\n          <IconOpen {...iconOpenProps} />\n        )}\n      </Touchable>\n      <Content {...contentProps}>{children}</Content>\n    </>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { style, children, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n        },\n        style,\n      ]}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: OptionalString;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text size=\"large\" style={[{}, getStyle(props, style)]} {...textProps}>\n      {title}\n    </Text>\n  );\n};\n\ninterface ContentProps extends ViewProps {\n  children?: React.ReactNode;\n  isOpened: boolean;\n}\n\nconst StyledContent = (props: ContentProps) => {\n  const { children, style, isOpened, ...viewProps } = props;\n\n  return (\n    <View style={[{ paddingLeft: 4 }, style]} {...viewProps}>\n      {isOpened && children}\n    </View>\n  );\n};\n\ninterface StyledIconProps {\n  showOpen?: boolean;\n}\n\nconst StyledIcon = (props: StyledIconProps) => {\n  const { showOpen } = props;\n  const theme = useTheme();\n\n  return (\n    <View style={{ paddingLeft: 4 }}>\n      <Icon\n        size=\"large\"\n        name={showOpen ? 'chevron-up' : 'chevron-down'}\n        color={theme.colors.text.default}\n      />\n    </View>\n  );\n};\n\ninterface IconProps {}\n\nconst StyledIconOpen = () => <StyledIcon showOpen={false} />;\n\nconst StyledIconClose = () => <StyledIcon showOpen={true} />;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Collapsible } from './Collapsible';\nimport { Box } from '../Box';\nimport { Toggle } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"collapsible\"\n    }}>{`Collapsible`}</h1>\n    <p>{`Component to reveal and hide content`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Toggle initial={false}>\\n  {({ on, toggle }) => (\\n    <Collapsible\\n      title={\\n        on ? \\'Close controlled collapsible\\' : \\'Open controlled collapsible\\'\\n      }\\n      isOpen={on}\\n      onOpen={toggle}\\n      onClose={toggle}\\n    >\\n      <Box\\n        marginVertical={16}\\n        justifyContent=\\\"center\\\"\\n        alignItems=\\\"center\\\"\\n        height={300}\\n        backgroundColor=\\\"#67c6bb\\\"\\n      />\\n    </Collapsible>\\n  )}\\n</Toggle>\\n<Collapsible title=\\\"Uncontrolled collapsible\\\">\\n  <Box\\n    marginVertical={16}\\n    justifyContent=\\\"center\\\"\\n    alignItems=\\\"center\\\"\\n    height={300}\\n    backgroundColor=\\\"#67c6bb\\\"\\n  />\\n</Collapsible>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Collapsible,\n      Box,\n      Toggle\n    }} mdxType=\"Playground\">\n  <Toggle initial={false} mdxType=\"Toggle\">\n    {({\n          on,\n          toggle\n        }) => <Collapsible title={on ? 'Close controlled collapsible' : 'Open controlled collapsible'} isOpen={on} onOpen={toggle} onClose={toggle} mdxType=\"Collapsible\">\n        <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n      </Collapsible>}\n  </Toggle>\n  <Collapsible title=\"Uncontrolled collapsible\" mdxType=\"Collapsible\">\n    <Box marginVertical={16} justifyContent=\"center\" alignItems=\"center\" height={300} backgroundColor=\"#67c6bb\" mdxType=\"Box\" />\n  </Collapsible>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Collapsible} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface ToggleRenderProps {\n  on: boolean;\n  toggle: () => void;\n  set: (on: boolean) => void;\n}\n\nexport interface ToggleProps {\n  initial?: boolean;\n  children: (props: ToggleRenderProps) => JSX.Element;\n}\n\nexport const Toggle = (props: ToggleProps) => {\n  const { children, initial = false } = props;\n  const [isOn, setIsOn] = React.useState(initial);\n\n  const handleToggle = React.useCallback(() => {\n    setIsOn(!isOn);\n  }, [isOn]);\n\n  const handleSet = React.useCallback((on: boolean) => {\n    setIsOn(on);\n  }, []);\n\n  return children({ on: isOn, toggle: handleToggle, set: handleSet });\n};\n"],"sourceRoot":""}