{"version":3,"sources":["webpack:///../src/components/Inputs/TextInput.mdx","webpack:///../src/components/Helpers/State.tsx","webpack:///../src/components/Inputs/TextInput.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","TextInput","Box","Icon","State","initial","value","state","setState","placeholder","size","onValueChange","isInvalid","isClearable","onClear","console","log","of","isMDXComponent","children","React","useState","useCallback","newState","isDisabled","onChangeText","overrides","textInputProps","theme","useTheme","getOverrides","StyledRoot","dlv","Root","rootProps","StyledInput","hasLeftIcon","LeftIcon","hasRightIcon","RightIcon","Input","inputProps","StyledLeftIconWrapper","LeftIconWrapper","leftIconWrapperProps","StyledLeftIcon","leftIconProps","StyledRightIconWrapper","RightIconWrapper","rightIconWrapperProps","StyledRightIcon","rightIconProps","style","viewProps","numberOfLines","textContentType","placeholderTextColor","isControlSize","borderRadius","controlBorderRadius","minHeight","controlHeights","paddingLeft","controlPaddings","paddingRight","textSize","textSizes","medium","backgroundColor","colors","background","greyLight","content","borderColor","border","default","borderWidth","color","text","muted","width","danger","paddingVertical","editable","name","alignItems","display","height","justifyContent","left","paddingHorizontal","position","zIndex","right","onPress"],"mappings":"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","file":"component---src-components-inputs-text-input-mdx-273ca3676488719cd82f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { TextInput } from './TextInput';\nimport { Box } from '../Box';\nimport { Icon } from '../Icon';\nimport { State } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"textinput\"\n    }}>{`TextInput`}</h1>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: \\'\\' }}>\\n  {({ state, setState }) => (\\n    <TextInput\\n      value={state.value}\\n      placeholder=\\\"Placeholder\\\"\\n      size=\\\"large\\\"\\n      onValueChange={value => setState({ value })}\\n      isInvalid={false}\\n      isClearable\\n      onClear={() => console.log(\\'Cleared!\\')} // Only triggered with `isClearable`\\n    />\\n  )}\\n</State>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextInput,\n      Box,\n      Icon,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ''\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <TextInput value={state.value} placeholder=\"Placeholder\" size=\"large\" onValueChange={value => setState({\n          value\n        })} isInvalid={false} isClearable onClear={() => console.log('Cleared!')} // Only triggered with `isClearable`\n        mdxType=\"TextInput\" />}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={TextInput} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { Icon } from '../Icon';\n\ninterface TextInputBaseProps extends RNTextInputProps {\n  /**\n   * Size of the text input.\n   * @default medium\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, text input is disabled\n   */\n  isDisabled?: boolean;\n\n  /**\n   * When true, text input will be highlighted as invalid\n   */\n  isInvalid?: boolean;\n\n  /**\n   * Alias for onChangeText, for API consistency\n   */\n  onValueChange?: (value: string) => void;\n\n  /**\n   * Called when clear icon is pressed.\n   */\n  onClear?: () => void;\n\n  /**\n   * When true, when value is not empty, a clear icon is displayed\n   */\n  isClearable?: boolean;\n}\n\nexport interface TextInputOverrides {\n  Root: RootProps;\n  LeftIconWrapper: LeftIconWrapperProps;\n  LeftIcon: StyledIconProps;\n  Input: InputProps;\n  RightIcon: StyledIconProps;\n  RightIconWrapper: RightIconWrapperProps;\n}\n\nexport interface TextInputProps\n  extends WithOverrides<TextInputBaseProps, TextInputOverrides> {}\n\nexport const TextInput = (props: TextInputProps) => {\n  const {\n    size = 'medium',\n    isClearable = false,\n    isDisabled = false,\n    isInvalid = false,\n    onClear = () => {\n      return;\n    },\n    onValueChange = () => {\n      return;\n    },\n    onChangeText = () => {\n      return;\n    },\n    value,\n    overrides = {},\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.Root'),\n    overrides.Root,\n  );\n  const [Input, inputProps] = getOverrides(\n    StyledInput,\n    props,\n    {\n      hasLeftIcon: !!overrides.LeftIcon,\n      hasRightIcon: !!(isClearable || overrides.RightIcon),\n      size,\n      isDisabled,\n      isInvalid,\n      onValueChange,\n      value,\n      onChangeText,\n      ...textInputProps,\n    },\n    dlv(theme, 'overrides.TextInput.Input'),\n    overrides.Input,\n  );\n  const [LeftIconWrapper, leftIconWrapperProps] = getOverrides(\n    StyledLeftIconWrapper,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.LeftIconWrapper'),\n    overrides.LeftIconWrapper,\n  );\n  const [LeftIcon, leftIconProps] = getOverrides(\n    StyledLeftIcon,\n    props,\n    {\n      isClearable,\n      onClear,\n      onValueChange,\n      value,\n      onChangeText,\n    },\n    dlv(theme, 'overrides.TextInput.LeftIcon'),\n    overrides.LeftIcon,\n  );\n  const [RightIconWrapper, rightIconWrapperProps] = getOverrides(\n    StyledRightIconWrapper,\n    props,\n    {},\n    dlv(theme, 'overrides.TextInput.RightIconWrapper'),\n    overrides.RightIconWrapper,\n  );\n  const [RightIcon, rightIconProps] = getOverrides(\n    StyledRightIcon,\n    props,\n    {\n      isClearable,\n      onClear,\n      onValueChange,\n      value,\n      onChangeText,\n    },\n    dlv(theme, 'overrides.TextInput.RightIcon'),\n    overrides.RightIcon,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <LeftIconWrapper {...leftIconWrapperProps}>\n        <LeftIcon {...leftIconProps} />\n      </LeftIconWrapper>\n      <Input {...inputProps} />\n      <RightIconWrapper {...rightIconWrapperProps}>\n        <RightIcon {...rightIconProps} />\n      </RightIconWrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface InputProps extends RNTextInputProps {\n  size: ControlSize | number;\n  isDisabled: boolean;\n  isInvalid: boolean;\n  hasLeftIcon: boolean;\n  hasRightIcon: boolean;\n  onValueChange: (value: string) => void;\n  onChangeText: (value: string) => void;\n}\n\nconst StyledInput = (props: InputProps) => {\n  const {\n    isDisabled,\n    isInvalid,\n    onValueChange,\n    onChangeText,\n    size,\n    style,\n    numberOfLines,\n    textContentType,\n    hasLeftIcon,\n    hasRightIcon,\n    placeholderTextColor,\n    ...textInputProps\n  } = props;\n  const theme = useTheme();\n\n  const {\n    borderRadius,\n    minHeight,\n    paddingLeft,\n    paddingRight,\n    textSize,\n  } = isControlSize(size)\n    ? {\n        borderRadius: theme.controlBorderRadius[size],\n        minHeight: theme.controlHeights[size],\n        paddingLeft: theme.controlPaddings[size],\n        paddingRight: theme.controlPaddings[size],\n        textSize: theme.textSizes[size],\n      }\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        minHeight: size,\n        paddingLeft: theme.controlPaddings.medium,\n        paddingRight: theme.controlPaddings.medium,\n        textSize: theme.textSizes.medium,\n      };\n\n  return (\n    // @ts-ignore\n    <RNTextInput\n      style={[\n        {\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderRadius,\n          borderWidth: 1,\n          color: isDisabled\n            ? theme.colors.text.muted\n            : theme.colors.text.default,\n          minHeight,\n          paddingLeft,\n          paddingRight,\n          width: '100%',\n          ...textSize,\n          ...(isInvalid ? { borderColor: theme.colors.border.danger } : {}),\n          ...(numberOfLines\n            ? {\n                minHeight: numberOfLines * minHeight,\n                paddingVertical: 16,\n              }\n            : {}),\n          ...(hasLeftIcon && { paddingLeft: 40 }),\n          ...(hasRightIcon && { paddingRight: 40 }),\n        },\n        style,\n      ]}\n      editable={!isDisabled}\n      placeholderTextColor={placeholderTextColor || theme.colors.text.muted}\n      name={textContentType}\n      numberOfLines={numberOfLines}\n      textContentType={textContentType}\n      onChangeText={text => {\n        onValueChange(text);\n        onChangeText(text);\n      }}\n      {...textInputProps}\n    />\n  );\n};\n\ninterface LeftIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledLeftIconWrapper = (props: LeftIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          left: 0,\n          paddingHorizontal: 8,\n          position: 'absolute',\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface RightIconWrapperProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRightIconWrapper = (props: RightIconWrapperProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          display: 'flex',\n          height: '100%',\n          justifyContent: 'center',\n          paddingHorizontal: 8,\n          position: 'absolute',\n          right: 0,\n          zIndex: 1,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface StyledIconProps {\n  onValueChange: (value: string) => void;\n  onChangeText: (text: string) => void;\n  value?: string;\n  isClearable: boolean;\n  onClear: () => void;\n}\n\nconst StyledLeftIcon = (props: StyledIconProps) => {\n  return <></>;\n};\n\nconst StyledRightIcon = (props: StyledIconProps) => {\n  const { isClearable, onClear, onValueChange, onChangeText, value } = props;\n  const theme = useTheme();\n\n  if (!value || !isClearable) return null;\n\n  return (\n    <TouchableOpacity\n      onPress={() => {\n        onChangeText('');\n        onValueChange('');\n        onClear();\n      }}\n    >\n      <Icon name=\"x\" color={theme.colors.text.default} />\n    </TouchableOpacity>\n  );\n};\n"],"sourceRoot":""}