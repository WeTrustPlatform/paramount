(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1212:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return d}));t(17),t(6),t(5),t(4),t(7),t(10),t(3);var r=t(142),a=t(1173);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/Customization.mdx"}});var l={_frontmatter:i},s=a.a;function d(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(r.b)(s,o({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"customization"},"Customization"),Object(r.b)("p",null,"Paramount UI provides full customizability of components."),Object(r.b)("h2",{id:"look-and-feel"},"Look and Feel"),Object(r.b)("p",null,"For general look and feel customization, you can tweak the tokens in the theme. Pass a ",Object(r.b)("inlineCode",{parentName:"p"},"Theme")," object to ",Object(r.b)("inlineCode",{parentName:"p"},"ThemeProvider"),".\nFor all available options, ",Object(r.b)("a",o({parentName:"p"},{href:"#options"}),"refer to Options")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-ts"}),"import { ThemeProvider } from 'paramount-ui'\n\n<ThemeProvider\n  value={{\n    // Colors\n    colors: Colors;\n    fills: Fills;\n\n    // Layout\n    layout: Layout;\n    spacing: SpacingSizes;\n\n    // Typography\n    fontFamilies: FontFamilies;\n    fontWeights: FontWeights;\n\n    headingSizes: HeadingSizes;\n    paragraphSizes: ParagraphSizes;\n    textSizes: TextSizes;\n\n    // Elevations\n    elevations: Elevations;\n\n    // Controls - Buttons, Pickers, Inputs etc.\n    controlPaddings: ControlSizes;\n    controlHeights: ControlSizes;\n    controlBorderRadius: ControlSizes;\n\n    // Containers\n    containerShapes: ContainerShapes;\n  }}\n>\n  ...\n</ThemeProvider>\n\n")),Object(r.b)("p",null,"You can also import theme values from a convenience hook ",Object(r.b)("inlineCode",{parentName:"p"},"useTheme")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-ts"}),"const MyComponent = () => {\n  const { colors, fills, ...theme } = useTheme();\n\n  ...\n}\n")),Object(r.b)("h2",{id:"components"},"Components"),Object(r.b)("p",null,'For more granular level of component customization, we use "Overrides" approach inspired by ',Object(r.b)("a",o({parentName:"p"},{href:"https://baseweb.design/"}),"Base UI by Uber")),Object(r.b)("p",null,"Overrides can be applied either ",Object(r.b)("a",o({parentName:"p"},{href:"#per-component"}),"per component")," or from ",Object(r.b)("a",o({parentName:"p"},{href:"#from-themeprovider"}),"ThemeProvider")),Object(r.b)("h3",{id:"per-component"},"Per component"),Object(r.b)("p",null,"Components with more than one React Node, expose ",Object(r.b)("inlineCode",{parentName:"p"},"overrides")," prop, through which you can customize the style or even its children props. Each component has a corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"Overrides API")," section, through which you can see available options."),Object(r.b)("p",null,"For example (taken from ",Object(r.b)("inlineCode",{parentName:"p"},"Picker.tsx"),"):"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-ts"}),"import { Button } from 'paramount-ui';\n\nconst CustomButton = () => {\n  const { isSelected, value, onSelect } = props;\n  const theme = useTheme();\n\n  return (\n    <Button\n      color={isSelected ? 'primary' : 'default'}\n      overrides={{\n        Touchable: {\n          style: {\n            backgroundColor: isSelected ? 'white' : 'transparent',\n            paddingLeft: 0,\n            paddingRight: 0,\n          },\n        },\n        Title: {\n          style: {\n            color: isSelected\n              ? theme.colors.text.primary\n              : theme.colors.text.muted,\n          },\n        },\n      }}\n      title={typeof value === 'string' ? value : 'Invalid value'}\n      onPress={onSelect}\n    />\n  );\n};\n")),Object(r.b)("h3",{id:"from-themeprovider"},"From ThemeProvider"),Object(r.b)("p",null,"In the same ",Object(r.b)("inlineCode",{parentName:"p"},"ThemeProvider")," as above, use ",Object(r.b)("inlineCode",{parentName:"p"},"components")," option to apply the overrides"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-ts"}),"export interface ThemeOverrides {\n  Alert: Overrides<any, AlertOverrides>;\n  Avatar: Overrides<any, AvatarOverrides>;\n  Badge: Overrides<any, BadgeOverrides>;\n  Button: Overrides<any, ButtonOverrides>;\n  Checkbox: Overrides<any, CheckboxOverrides>;\n  Collapsible: Overrides<any, CollapsibleOverrides>;\n  Column: ColumnOverride;\n  Container: ContainerOverride;\n  Counter: Overrides<any, CounterOverrides>;\n  Dialog: Overrides<any, DialogOverrides>;\n  Divider: DividerOverride;\n  Drawer: Overrides<any, DrawerOverrides>;\n  FormField: Overrides<any, FormFieldOverrides>;\n  Heading: HeadingOverride;\n  Label: Overrides<any, LabelOverrides>;\n  ListItem: Overrides<any, ListItemOverrides>;\n  ListPicker: Overrides<any, ListPickerOverrides<any>>;\n  NativePicker: Overrides<any, NativePickerOverrides>;\n  Overlay: OverlayOverride;\n  Popover: Overrides<any, PopoverOverrides>;\n  Positioner: Overrides<any, PositionerOverrides>;\n  ProgressBar: Overrides<any, ProgressBarOverrides>;\n  Rating: Overrides<any, RatingOverrides>;\n  Row: RowOverride;\n  Slider: Overrides<any, SliderOverrides>;\n  Spacing: SpacingOverride;\n  Switch: Overrides<any, SwitchOverrides>;\n  Picker: Overrides<any, PickerOverrides<any, any, any>>;\n  Text: TextOverride;\n  TextInput: Overrides<any, TextInputOverrides>;\n  WheelPicker: Overrides<any, WheelPickerOverrides<any>>;\n}\n")),Object(r.b)("h2",{id:"options"},"Options"),Object(r.b)("p",null,"These are all the available theme configuration options, as well as their default values"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-ts"}),"const controlPaddings: ControlSizes = {\n  small: 8,\n\n  medium: 16,\n\n  large: 24,\n};\n\nconst controlHeights: ControlSizes = {\n  small: 40,\n\n  medium: 48,\n\n  large: 56,\n};\n\nconst controlBorderRadius: ControlSizes = {\n  small: 4,\n\n  medium: 4,\n\n  large: 4,\n};\n\nconst spacing: { [size in SpacingSize]: number } = {\n  xsmall: 4,\n  small: 8,\n  medium: 16,\n  large: 24,\n  xlarge: 32,\n  xxlarge: 40,\n  xxxlarge: 48,\n};\n\nconst colors: Colors = {\n  background: {\n    base: 'white',\n    content: 'white',\n\n    greyLight: palette.neutral.lightest,\n    greyDefault: '#F5F6F7',\n    greyDark: palette.neutral.light,\n\n    primaryLight: palette.teal.lightest,\n    primaryDefault: palette.teal.base,\n    primaryDark: palette.teal.dark,\n\n    secondaryLight: palette.orange.lightest,\n    secondaryDefault: palette.orange.base,\n    secondaryDark: palette.orange.dark,\n\n    dangerLight: palette.red.lightest,\n    dangerDefault: palette.red.base,\n    dangerDark: palette.red.dark,\n\n    infoLight: palette.blue.lightest,\n    infoDefault: palette.blue.base,\n    infoDark: palette.blue.dark,\n\n    successLight: palette.green.lightest,\n    successDefault: palette.green.base,\n    successDark: palette.green.dark,\n\n    warningLight: palette.orange.lightest,\n    warningDefault: palette.orange.base,\n    warningDark: palette.orange.dark,\n  },\n\n  border: {\n    default: palette.neutral.light,\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n\n  button: {\n    disabled: palette.neutral.light,\n    disabledText: palette.neutral.darkest,\n\n    default: palette.neutral.lightest,\n    defaultText: palette.neutral.darkest,\n\n    primary: palette.teal.base,\n    primaryText: 'white',\n\n    secondary: palette.orange.base,\n    secondaryText: 'white',\n\n    danger: palette.red.base,\n    dangerText: 'white',\n  },\n\n  text: {\n    link: palette.teal.darkest,\n    default: palette.neutral.darkest,\n    muted: palette.neutral.dark,\n    white: 'white',\n    selected: 'white',\n\n    primary: palette.teal.darkest,\n    secondary: palette.orange.darkest,\n\n    danger: palette.red.darkest,\n    info: palette.blue.darkest,\n    success: palette.green.darkest,\n    warning: palette.orange.darkest,\n  },\n};\n\nconst elevations: Elevations = [\n  {\n    elevation: 0,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0,\n    shadowRadius: 0,\n  },\n  {\n    elevation: 1,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 1, height: 1 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 2,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 2, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 10,\n  },\n  {\n    elevation: 3,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 3, height: 3 },\n    shadowOpacity: 0.25,\n    shadowRadius: 12,\n  },\n  {\n    elevation: 4,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 4, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n  },\n  {\n    elevation: 5,\n    shadowColor: palette.neutral.dark,\n    shadowOffset: { width: 5, height: 5 },\n    shadowOpacity: 0.35,\n    shadowRadius: 8,\n  },\n];\n\nconst fills: Fills = {\n  solid: {\n    neutral: {\n      backgroundColor: palette.neutral.base,\n      color: 'white',\n    },\n\n    blue: {\n      backgroundColor: palette.blue.base,\n      color: 'white',\n    },\n\n    red: {\n      backgroundColor: palette.red.base,\n      color: 'white',\n    },\n\n    orange: {\n      backgroundColor: palette.orange.base,\n      color: 'white',\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.base,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.base,\n      color: 'white',\n    },\n\n    teal: {\n      backgroundColor: palette.teal.base,\n      color: 'white',\n    },\n\n    purple: {\n      backgroundColor: palette.purple.base,\n      color: 'white',\n    },\n  },\n\n  subtle: {\n    neutral: {\n      backgroundColor: palette.neutral.light,\n      color: palette.neutral.darkest,\n    },\n\n    blue: {\n      backgroundColor: palette.blue.light,\n      color: palette.blue.darkest,\n    },\n\n    red: {\n      backgroundColor: palette.red.light,\n      color: palette.red.darkest,\n    },\n\n    orange: {\n      backgroundColor: palette.orange.light,\n      color: palette.orange.darkest,\n    },\n\n    yellow: {\n      backgroundColor: palette.yellow.light,\n      color: palette.yellow.darkest,\n    },\n\n    green: {\n      backgroundColor: palette.green.light,\n      color: palette.green.darkest,\n    },\n\n    teal: {\n      backgroundColor: palette.teal.light,\n      color: palette.teal.darkest,\n    },\n\n    purple: {\n      backgroundColor: palette.purple.light,\n      color: palette.purple.darkest,\n    },\n  },\n};\n\n// Use system font on the Web\nconst fontFamilies: FontFamilies =\n  Platform.OS === 'web'\n    ? {\n        heading: `\"SF UI Display\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n        mono: `\"SF Mono\", \"Monaco\", \"Inconsolata\", \"Fira Mono\", \"Droid Sans Mono\", \"Source Code Pro\", monospace`,\n        text: `\"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"`,\n      }\n    : {\n        heading: 'System',\n        mono: 'System',\n        text: 'System',\n      };\n\nconst fontWeights: FontWeights = {\n  bold: 'bold',\n  light: '300',\n  normal: 'normal',\n};\n\nconst headingSizes: HeadingSizes = {\n  xxxlarge: {\n    fontSize: 35,\n    letterSpacing: -0.2,\n    lineHeight: 40,\n  },\n\n  xxlarge: {\n    fontSize: 29,\n    letterSpacing: -0.2,\n    lineHeight: 32,\n  },\n\n  xlarge: {\n    fontSize: 24,\n    letterSpacing: -0.07,\n    lineHeight: 28,\n  },\n\n  large: {\n    fontSize: 20,\n    letterSpacing: -0.07,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n\n  small: {\n    fontSize: 14,\n    letterSpacing: -0.05,\n    lineHeight: 20,\n  },\n};\n\nconst paragraphSizes: ParagraphSizes = {\n  small: {\n    fontSize: 14,\n    lineHeight: 24,\n  },\n\n  medium: {\n    fontSize: 16,\n    lineHeight: 21,\n  },\n\n  large: {\n    fontSize: 18,\n    lineHeight: 18,\n  },\n};\n\nconst textSizes: TextSizes = {\n  large: {\n    fontSize: 20,\n  },\n  medium: {\n    fontSize: 16,\n  },\n  small: {\n    fontSize: 14,\n  },\n  xsmall: {\n    fontSize: 12,\n  },\n};\n\nconst containerShapes: ContainerShapes = {\n  circle: {\n    borderRadius: 999,\n  },\n  pill: {\n    borderRadius: 999,\n  },\n  rounded: {\n    borderRadius: controlBorderRadius.medium,\n  },\n  roundedBottom: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderBottomRightRadius: controlBorderRadius.medium,\n  },\n  roundedLeft: {\n    borderBottomLeftRadius: controlBorderRadius.medium,\n    borderTopLeftRadius: controlBorderRadius.medium,\n  },\n  roundedRight: {\n    borderBottomRightRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  roundedTop: {\n    borderTopLeftRadius: controlBorderRadius.medium,\n    borderTopRightRadius: controlBorderRadius.medium,\n  },\n  square: {\n    borderRadius: 0,\n  },\n};\n\nexport const layout: Layout = {\n  breakpoints: {\n    small: 480,\n\n    medium: 768,\n\n    large: 992,\n\n    xlarge: 1200,\n  },\n  containerSizes: {\n    small: 540,\n\n    medium: 720,\n\n    large: 960,\n\n    xlarge: 1200,\n  },\n  gridColumnCount: 12,\n  gutterWidth: 32,\n};\n\nexport const defaultTheme: Theme = {\n  colors,\n  fills,\n\n  spacing,\n  layout,\n\n  fontFamilies,\n  fontWeights,\n\n  headingSizes,\n  paragraphSizes,\n  textSizes,\n\n  elevations,\n\n  controlBorderRadius,\n  controlHeights,\n  controlPaddings,\n\n  containerShapes,\n};\n")))}d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/Customization.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-customization-mdx-9ff14d15da1a955da7b0.js.map