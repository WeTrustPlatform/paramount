{"version":3,"sources":["webpack:///../src/components/ProgressBar/ProgressBar.tsx","webpack:///../src/components/ProgressBar/ProgressBar.mdx","webpack:///../src/components/Helpers/State.tsx","webpack:///../src/components/Counter/Counter.tsx"],"names":["AnimatedView","animated","View","ProgressBar","props","percent","size","overrides","theme","useTheme","getOverrides","StyledRoot","dlv","Root","rootProps","StyledProgress","Progress","progressProps","children","style","viewProps","minHeight","isControlSize","controlHeights","backgroundColor","colors","background","greyDefault","borderRadius","overflow","boundPercent","Math","max","min","width","useSpring","config","springDefaultConfig","from","accessibilityRole","Platform","OS","primaryDefault","height","interpolate","w","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","Box","Counter","State","initial","value","state","setState","onValueChange","step","of","isMDXComponent","React","useState","useCallback","newState","isDecrementDisabled","isIncrementDisabled","handleIncrement","handleDecrement","StyledTouchable","isDisabled","onPress","Decrement","decrementProps","Increment","incrementProps","StyledCount","Count","countProps","StyledIconPlus","IconPlus","iconPlusProps","StyledIconMinus","IconMinus","iconMinusProps","display","flexDirection","alignItems","textProps","align","paddingHorizontal","minWidth","getStyle","touchableProps","borderColor","border","primary","borderWidth","justifyContent","default","disabled","undefined","StyledIcon","name","iconProps","color","text","muted"],"mappings":"olBAUA,IAAMA,EAAeC,mBAASC,K,ktBAwBvB,IAAMC,EAAc,SAACC,GAA4B,MACGA,EAAjDC,eAD8C,MACpC,EADoC,IACGD,EAApCE,YADiC,MAC1B,SAD0B,IACGF,EAAnBG,iBADgB,MACJ,GADI,EAEhDC,EAAQC,cAFwC,EAI5BC,YACxBC,EACAP,EACA,CAAEE,QACFM,IAAIJ,EAAO,8BACXD,EAAUM,MALLA,EAJ+C,KAIzCC,EAJyC,OAWpBJ,YAChCK,EACAX,EACA,CAAEC,WACFO,IAAIJ,EAAO,kCACXD,EAAUS,UALLA,EAX+C,KAWrCC,EAXqC,KAmBtD,OACE,YAACJ,EAASC,EACR,YAACE,EAAaC,U,2NAUpB,IAAMN,EAAa,SAACP,GAAqB,IAC/Bc,EAAwCd,EAAxCc,SAAUC,EAA8Bf,EAA9Be,MAAOb,EAAuBF,EAAvBE,KAASc,EADK,EACShB,EADT,6BAEjCI,EAAQC,cAERY,EAAYC,YAAchB,GAC5BE,EAAMe,eAAejB,GAAQ,GAC7BA,EAEJ,OACE,YAACJ,EAAA,EAAD,GACEiB,MAAO,CACL,CACEK,gBAAiBhB,EAAMiB,OAAOC,WAAWC,YACzCC,aAAc,IACdP,YACAQ,SAAU,UAEZV,IAEEC,GAEHF,IAUDH,EAAiB,SAACX,GAAyB,IACvCC,EAA2CD,EAA3CC,QAAmBc,GAAwBf,EAAlCc,SAAkCd,EAAxBe,OAAUC,EADU,EACIhB,EADJ,gCAEzCI,EAAQC,cAERqB,EAAeC,KAAKC,IAAID,KAAKE,IAAI5B,EAAS,KAAM,GAE9C6B,EAAUC,oBAAU,CAC1BC,OAAQC,IACRC,KAAM,CAAEJ,MAAOJ,GACfI,MAAOJ,IAHDI,MAMR,OACE,YAAClC,EAAD,GAEEuC,kBAAmC,QAAhBC,IAASC,GAAe,WAAa,OAExDtB,MAAO,CACL,CACEK,gBAAiBhB,EAAMiB,OAAOC,WAAWgB,eACzCd,aAAc,IACde,OAAQ,OACRT,MAAOA,EAAMU,aAAY,SAAAC,GAAC,OAAOA,EAAP,QAE5B1B,IAEEC,K,kUC/GH,IAAM0B,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACG/C,E,oIACF,mBACD,OAAO,YAAC4C,EAAD,KAAeD,EAAiB3C,EAAhC,CAAuC+C,WAAYA,EAAYC,QAAQ,cAK5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qUAAwUC,QAAS,CAClXnD,QACA6C,kBACAO,eACAC,UACAtD,cACAuD,QACAC,YACAC,WACCR,QAAQ,cACb,YAACQ,EAAA,EAAD,CAAOC,QAAS,CACVC,MAAO,GACNV,QAAQ,UACZ,gBACKW,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAACN,EAAA,EAAD,CAAKN,QAAQ,OACnB,YAAC,EAAD,CAAa/C,QAAS0D,EAAMD,MAAOxD,KAAK,QAAQ8C,QAAQ,gBACxD,YAACO,EAAA,EAAD,CAASG,MAAOC,EAAMD,MAAOG,cAAe,SAAAH,GAAK,OAAIE,EAAS,CAC1DF,WACE7B,IAAK,EAAGD,IAAK,IAAKkC,KAAM,GAAId,QAAQ,iBAI9C,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOe,GAAIhE,EAAaiD,QAAQ,W,mNAKpCF,EAAWkB,gBAAiB,G,4sBCzDrB,IAAMR,EAAQ,SAACxD,GAAsB,IAClCc,EAA8Bd,EAA9Bc,SADkC,EACJd,EAApByD,eADwB,WAEhBQ,IAAMC,SAAST,GAAlCE,EAFmC,KAE5BC,EAF4B,KAQ1C,OAAO9C,EAAS,CAAE6C,QAAOC,SAJLK,IAAME,aAAY,SAAAC,GACpCR,EAASQ,KACR,Y,ozDCmCE,IAAMb,EAAU,SAACvD,GAAwB,MAU1CA,EARF0D,aAF4C,MAEpC,EAFoC,IAU1C1D,EAPF8D,YAH4C,MAGrC,EAHqC,EAI5ClC,EAME5B,EANF4B,IACAC,EAKE7B,EALF6B,IAL4C,EAU1C7B,EAJF6D,qBAN4C,MAM5B,aAN4B,IAU1C7D,EADFG,iBAT4C,MAShC,GATgC,EAWxCC,EAAQC,cAERgE,EAAsBxC,IAAQ6B,EAC9BY,EAAsB1C,IAAQ8B,EAE9Ba,EAAkBN,IAAME,aAAY,WACxCN,EAAcH,EAAQI,KACrB,CAACD,EAAeC,EAAMJ,IAEnBc,EAAkBP,IAAME,aAAY,WACxCN,EAAcH,EAAQI,KACrB,CAACD,EAAeC,EAAMJ,IAtBqB,EAwBpBpD,YACxBC,EACAP,EACA,GACAQ,IAAIJ,EAAO,0BACXD,EAAUM,MALLA,EAxBuC,KAwBjCC,EAxBiC,OA+BVJ,YAClCmE,EACAzE,EACA,CACE0E,WAAYL,EACZM,QAASH,GAEXhE,IAAIJ,EAAO,+BACXD,EAAUyE,WARLA,EA/BuC,KA+B5BC,EA/B4B,OAyCVvE,YAClCmE,EACAzE,EACA,CACE0E,WAAYJ,EACZK,QAASJ,GAEX/D,IAAIJ,EAAO,+BACXD,EAAU2E,WARLA,EAzCuC,KAyC5BC,EAzC4B,OAmDlBzE,YAC1B0E,EACAhF,EACA,CAAE0D,SACFlD,IAAIJ,EAAO,2BACXD,EAAU8E,OALLA,EAnDuC,KAmDhCC,EAnDgC,OA0DZ5E,YAChC6E,EACAnF,EACA,CAAE0E,WAAYJ,GACd9D,IAAIJ,EAAO,8BACXD,EAAUiF,UALLA,EA1DuC,KA0D7BC,EA1D6B,OAiEV/E,YAClCgF,EACAtF,EACA,CAAE0E,WAAYL,GACd7D,IAAIJ,EAAO,+BACXD,EAAUoF,WALLA,EAjEuC,KAiE5BC,EAjE4B,KAyE9C,OACE,YAAC/E,EAASC,EACR,YAACkE,EAAcC,EACb,YAACU,EAAcC,IAEjB,YAACP,EAAUC,GACX,YAACJ,EAAcC,EACb,YAACK,EAAaC,W,+MAYtB,IAAM9E,EAAa,SAACP,GAAqB,IAC/Bc,EAAkCd,EAAlCc,SAAUC,EAAwBf,EAAxBe,MAAUC,EADW,EACGhB,EADH,sBAGvC,OACE,YAAC,IAAD,GACEe,MAAO,CACL,CACE0E,QAAS,OACTC,cAAe,MACfC,WAAY,UAEd5E,IAEEC,GAEHF,IASDkE,EAAc,SAAChF,GAAsB,IACjC0D,EAA+B1D,EAA/B0D,MAAO3C,EAAwBf,EAAxBe,MAAU6E,EADgB,EACF5F,EADE,mBAGzC,OACE,YAAC,IAAD,GACE6F,MAAM,SACN9E,MAAO,CAAC,CAAE+E,kBAAmB,GAAIC,SAAU,IAAMC,YAAShG,EAAOe,KAC7D6E,GAEHlC,IASDe,EAAkB,SAACzE,GAA0B,IAE/Cc,EAKEd,EALFc,SACAC,EAIEf,EAJFe,MAH+C,EAO7Cf,EAHF0E,kBAJ+C,SAK/CC,EAEE3E,EAFF2E,QACGsB,EAN4C,EAO7CjG,EAP6C,6CAQ3CI,EAAQC,cAEd,OACE,YAAC,IAAD,GACEU,MAAO,CAAC,EAAD,CAEH4E,WAAY,SACZO,YAAa9F,EAAMiB,OAAO8E,OAAOC,QACjC5E,aAAc,IACd6E,YAAa,EACbZ,QAAS,OACTlD,OAAQ,GACR+D,eAAgB,SAChBxE,MAAO,IACH4C,GAAc,CAAEwB,YAAa9F,EAAMiB,OAAO8E,OAAOI,UAEvDxF,GAEFyF,SAAU9B,EACVC,QAAUD,OAAuB+B,EAAV9B,GACnBsB,GAEHnF,IASD4F,EAAa,SAAC1G,GAA2B,IACrC0E,EAAmC1E,EAAnC0E,WAAYiC,EAAuB3G,EAAvB2G,KAASC,EADgB,EACF5G,EADE,uBAEvCI,EAAQC,cAEd,OACE,YAAC,IAAD,GACEsG,KAAMA,EACNzG,KAAK,SACL2G,MAAOnC,EAAatE,EAAMiB,OAAOyF,KAAKC,MAAQ3G,EAAMiB,OAAOyF,KAAKV,SAC5DQ,KASJzB,EAAiB,SAACnF,GAAD,OACrB,YAAC0G,EAAD,GAAYC,KAAK,QAAW3G,KAExBsF,EAAkB,SAACtF,GAAD,OACtB,YAAC0G,EAAD,GAAYC,KAAK,SAAY3G","file":"component---src-components-progress-bar-progress-bar-mdx-9e8356563bbee07bc5f0.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { Platform, View, ViewProps } from 'react-native';\nimport { animated, useSpring } from 'react-spring/native.cjs';\n\nimport { springDefaultConfig } from '../../constants/Animation';\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\n\nconst AnimatedView = animated(View);\n\ninterface ProgressBarBaseProps {\n  /**\n   * Percentage of the progress bar. From 0 to 1\n   * @default 0\n   */\n  percent?: number;\n\n  /**\n   * The size of the progress bar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n}\n\nexport interface ProgressBarOverrides {\n  Root: RootProps;\n  Progress: ProgressProps;\n}\n\nexport interface ProgressBarProps\n  extends WithOverrides<ProgressBarBaseProps, ProgressBarOverrides> {}\n\nexport const ProgressBar = (props: ProgressBarProps) => {\n  const { percent = 0, size = 'medium', overrides = {} } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { size },\n    dlv(theme, 'overrides.ProgressBar.Root'),\n    overrides.Root,\n  );\n  const [Progress, progressProps] = getOverrides(\n    StyledProgress,\n    props,\n    { percent },\n    dlv(theme, 'overrides.ProgressBar.Progress'),\n    overrides.Progress,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Progress {...progressProps} />\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n  size: ControlSize | number;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, size, ...viewProps } = props;\n  const theme = useTheme();\n\n  const minHeight = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.greyDefault,\n          borderRadius: 999,\n          minHeight,\n          overflow: 'hidden',\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface ProgressProps extends ViewProps {\n  children?: React.ReactNode;\n  percent: number;\n}\n\nconst StyledProgress = (props: ProgressProps) => {\n  const { percent, children, style, ...viewProps } = props;\n  const theme = useTheme();\n\n  const boundPercent = Math.max(Math.min(percent, 100), 0);\n\n  const { width } = useSpring({\n    config: springDefaultConfig,\n    from: { width: boundPercent },\n    width: boundPercent,\n  });\n\n  return (\n    <AnimatedView\n      // @ts-ignore\n      accessibilityRole={Platform.OS === 'web' ? 'progress' : 'none'}\n      // @ts-ignore\n      style={[\n        {\n          backgroundColor: theme.colors.background.primaryDefault,\n          borderRadius: 999,\n          height: '100%',\n          width: width.interpolate(w => `${w}%`),\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { ProgressBar } from './ProgressBar';\nimport { Box } from '../Box';\nimport { Counter } from '../Counter';\nimport { State } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"progressbar\"\n    }}>{`ProgressBar`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: 0 }}>\\n  {({ state, setState }) => (\\n    <Box>\\n      <ProgressBar percent={state.value} size=\\\"large\\\" />\\n      <Counter\\n        value={state.value}\\n        onValueChange={value => setState({ value })}\\n        min={0}\\n        max={100}\\n        step={10}\\n      />\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ProgressBar,\n      Box,\n      Counter,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 0\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box mdxType=\"Box\">\n        <ProgressBar percent={state.value} size=\"large\" mdxType=\"ProgressBar\" />\n        <Counter value={state.value} onValueChange={value => setState({\n            value\n          })} min={0} max={100} step={10} mdxType=\"Counter\" />\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ProgressBar} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { Icon, IconProps } from '../Icon';\nimport { Text, TextProps } from '../Typography';\n\ninterface CounterBaseProps {\n  /**\n   * Count to be displayed.\n   */\n  value?: number;\n\n  /**\n   * Minimum value for the counter. Upon reaching the limit, it will disable decrement button.\n   */\n  min?: number;\n\n  /**\n   * Maximum value for the counter. Upon reaching the limit, it will disable increment button.\n   */\n  max?: number;\n\n  /**\n   * Interval between counts\n   */\n  step?: number;\n\n  /**\n   * Called when either buttons are pressed.\n   */\n  onValueChange?: (value: number) => void;\n}\n\nexport interface CounterOverrides {\n  Root: RootProps;\n  Increment: TouchableProps;\n  Decrement: TouchableProps;\n  Count: CountProps;\n  IconPlus: CounterIconProps;\n  IconMinus: CounterIconProps;\n}\n\nexport interface CounterProps\n  extends WithOverrides<CounterBaseProps, CounterOverrides> {}\n\nexport const Counter = (props: CounterProps) => {\n  const {\n    value = 0,\n    step = 1,\n    max,\n    min,\n    onValueChange = () => {\n      return;\n    },\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const isDecrementDisabled = min === value;\n  const isIncrementDisabled = max === value;\n\n  const handleIncrement = React.useCallback(() => {\n    onValueChange(value + step);\n  }, [onValueChange, step, value]);\n\n  const handleDecrement = React.useCallback(() => {\n    onValueChange(value - step);\n  }, [onValueChange, step, value]);\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.Counter.Root'),\n    overrides.Root,\n  );\n  const [Decrement, decrementProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      isDisabled: isDecrementDisabled,\n      onPress: handleDecrement,\n    },\n    dlv(theme, 'overrides.Counter.Decrement'),\n    overrides.Decrement,\n  );\n  const [Increment, incrementProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      isDisabled: isIncrementDisabled,\n      onPress: handleIncrement,\n    },\n    dlv(theme, 'overrides.Counter.Increment'),\n    overrides.Increment,\n  );\n  const [Count, countProps] = getOverrides(\n    StyledCount,\n    props,\n    { value },\n    dlv(theme, 'overrides.Counter.Count'),\n    overrides.Count,\n  );\n  const [IconPlus, iconPlusProps] = getOverrides(\n    StyledIconPlus,\n    props,\n    { isDisabled: isIncrementDisabled },\n    dlv(theme, 'overrides.Counter.IconPlus'),\n    overrides.IconPlus,\n  );\n  const [IconMinus, iconMinusProps] = getOverrides(\n    StyledIconMinus,\n    props,\n    { isDisabled: isDecrementDisabled },\n    dlv(theme, 'overrides.Counter.IconMinus'),\n    overrides.IconMinus,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Decrement {...decrementProps}>\n        <IconMinus {...iconMinusProps} />\n      </Decrement>\n      <Count {...countProps} />\n      <Increment {...incrementProps}>\n        <IconPlus {...iconPlusProps} />\n      </Increment>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        {\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface CountProps extends TextProps {\n  value: number;\n}\n\nconst StyledCount = (props: CountProps) => {\n  const { value, style, ...textProps } = props;\n\n  return (\n    <Text\n      align=\"center\"\n      style={[{ paddingHorizontal: 16, minWidth: 56 }, getStyle(props, style)]}\n      {...textProps}\n    >\n      {value}\n    </Text>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps, PropsWithChildren {\n  isDisabled: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const {\n    children,\n    style,\n    isDisabled = false,\n    onPress,\n    ...touchableProps\n  } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          alignItems: 'center',\n          borderColor: theme.colors.border.primary,\n          borderRadius: 999,\n          borderWidth: 1,\n          display: 'flex',\n          height: 40,\n          justifyContent: 'center',\n          width: 40,\n          ...(isDisabled && { borderColor: theme.colors.border.default }),\n        },\n        style,\n      ]}\n      disabled={isDisabled}\n      onPress={!isDisabled ? onPress : undefined}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface StyledIconProps extends IconProps {\n  isDisabled: boolean;\n}\n\nconst StyledIcon = (props: StyledIconProps) => {\n  const { isDisabled, name, ...iconProps } = props;\n  const theme = useTheme();\n\n  return (\n    <Icon\n      name={name}\n      size=\"xsmall\"\n      color={isDisabled ? theme.colors.text.muted : theme.colors.text.primary}\n      {...iconProps}\n    />\n  );\n};\n\ninterface CounterIconProps {\n  isDisabled: boolean;\n}\n\nconst StyledIconPlus = (props: CounterIconProps) => (\n  <StyledIcon name=\"plus\" {...props} />\n);\nconst StyledIconMinus = (props: CounterIconProps) => (\n  <StyledIcon name=\"minus\" {...props} />\n);\n"],"sourceRoot":""}