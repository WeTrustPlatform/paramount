{"version":3,"sources":["webpack:///../src/components/ListItem/ListItem.mdx","webpack:///../src/components/Avatar/Avatar.tsx","webpack:///../src/components/ListItem/ListItem.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","ListItem","onPress","console","log","source","uri","title","description","of","isMDXComponent","Avatar","name","size","isSolid","color","testID","overrides","theme","useTheme","React","useState","hasImageFailedLoading","setHasImageFailedLoading","isImageUnavailable","getOverrides","StyledRoot","dlv","Root","rootProps","StyledInitials","Initials","initialsProps","StyledImage","onError","Image","ImageR","imageProps","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","avatarScale","large","medium","small","children","style","appearances","fills","keys","Object","controlSize","isControlSize","controlHeights","alignItems","backgroundColor","borderRadius","display","height","justifyContent","overflow","position","width","textProps","initials","fallback","replace","split","slice","map","v","toUpperCase","join","getInitials","fontSize","lineHeight","getStyle","isDisabled","getControlHeight","useControlSizeUtils","StyledTouchable","Touchable","touchableProps","StyledTextWrapper","hasAvatar","TextWrapper","textWrapperProps","StyledTitle","Title","titleProps","StyledDescription","Description","descriptionProps","StyledAction","Action","rightIconProps","StyledAvatar","AvatarR","avatarProps","viewProps","flexDirection","minHeight","colors","background","greyLight","content","flex","disabled","paddingLeft","getSmallerHeightControlSize"],"mappings":"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","file":"component---src-components-list-item-list-item-mdx-1ab2c4f9172592bb2dbe.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { ListItem } from './ListItem';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"listitem\"\n    }}>{`ListItem`}</h1>\n    <p>{`For image, it composes `}<inlineCode parentName=\"p\">{`Avatar`}</inlineCode>{`, use overrides API to override its look`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<ListItem\\n  onPress={() => console.log(\\'Press\\')}\\n  source={{ uri: \\'https://picsum.photos/200/200\\' }}\\n  title=\\\"Some label\\\"\\n  description=\\\"Some description\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ListItem\n    }} mdxType=\"Playground\">\n  <ListItem onPress={() => console.log('Press')} source={{\n        uri: 'https://picsum.photos/200/200'\n      }} title=\"Some label\" description=\"Some description\" mdxType=\"ListItem\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ListItem} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor, FillColors } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { Text, TextProps } from '../Typography';\n\ninterface AvatarBaseProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"auto\"\n   */\n  color?: 'auto' | FillColor;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface AvatarOverrides {\n  Root: RootProps;\n  Initials: InitialsProps;\n  Image: ImageProps;\n}\n\nexport interface AvatarProps\n  extends WithOverrides<AvatarBaseProps, AvatarOverrides> {}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    size = 'medium',\n    isSolid = false,\n    color = 'auto',\n    testID,\n    overrides = {},\n  } = props;\n\n  const theme = useTheme();\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const isImageUnavailable = !source || hasImageFailedLoading;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { name, size, isSolid, color, testID },\n    dlv(theme, 'overrides.Avatar.Root'),\n    overrides.Root,\n  );\n  const [Initials, initialsProps] = getOverrides(\n    StyledInitials,\n    props,\n    { name, size, isSolid, color },\n    dlv(theme, 'overrides.Avatar.Initial'),\n    overrides.Initials,\n  );\n\n  if (!isImageUnavailable && !!source) {\n    const [ImageR, imageProps] = getOverrides(\n      StyledImage,\n      props,\n      {\n        onError: () => setHasImageFailedLoading(true),\n        source,\n      },\n      dlv(theme, 'overrides.Avatar.Image'),\n      overrides.Image,\n    );\n\n    return (\n      <Root {...rootProps}>\n        <ImageR {...imageProps} />\n      </Root>\n    );\n  }\n\n  return (\n    <Root {...rootProps}>\n      <Initials {...initialsProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { testID, children, name, size, isSolid, color, style } = props;\n  const theme = useTheme();\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].backgroundColor,\n          borderRadius: 9999,\n          display: 'flex',\n          height: controlSize,\n          justifyContent: 'center',\n          overflow: 'hidden',\n          position: 'relative',\n          width: controlSize,\n        },\n        style,\n      ]}\n      testID={testID}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst getInitials = (name?: string, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\ninterface InitialsProps extends TextProps {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledInitials = (props: InitialsProps) => {\n  const { name, size, isSolid, color, style, ...textProps } = props;\n  const theme = useTheme();\n\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  const initials = getInitials(name);\n\n  return (\n    <Text\n      {...textProps}\n      style={[\n        {\n          color:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].color,\n          fontSize: controlSize / 2,\n          lineHeight: controlSize,\n        },\n        getStyle(props, style),\n      ]}\n    >\n      {initials}\n    </Text>\n  );\n};\n\nconst StyledImage = (props: ImageProps) => {\n  const { style, ...imageProps } = props;\n\n  return (\n    <Image\n      style={[\n        {\n          height: '100%',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...imageProps}\n    />\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  ImageSourcePropType,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme, ControlSize } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Text, TextProps } from '../Typography';\nimport { useControlSizeUtils } from '../../utils/ControlSize';\n\ninterface ListItemBaseProps {\n  /**\n   * Title of the list item\n   */\n  title?: OptionalString;\n\n  /**\n   * Description of the list item\n   */\n  description?: OptionalString;\n\n  /**\n   * Source of the avatar\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Size of the ListItem.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ListItemOverrides {\n  Root: RootProps;\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  TextWrapper: TextWrapperProps;\n  Description: DescriptionProps;\n  Action: ActionProps;\n  Avatar: AvatarProps;\n}\n\nexport interface ListItemProps\n  extends WithOverrides<ListItemBaseProps, ListItemOverrides> {}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    isDisabled = false,\n    title,\n    description,\n    size = 'medium',\n    onPress,\n    testID,\n    source,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n  const { getControlHeight } = useControlSizeUtils();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { isDisabled, size },\n    dlv(theme, 'overrides.ListItem.Root'),\n    overrides.Root,\n  );\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    { onPress, testID, isDisabled },\n    dlv(theme, 'overrides.ListItem.Touchable'),\n    overrides.Touchable,\n  );\n  const [TextWrapper, textWrapperProps] = getOverrides(\n    StyledTextWrapper,\n    props,\n    {\n      hasAvatar:\n        !!source ||\n        !!overrides.Avatar ||\n        !!dlv(theme, 'overrides.ListItem.Avatar'),\n    },\n    dlv(theme, 'overrides.ListItem.TextWrapper'),\n    overrides.TextWrapper,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    { title, size, isDisabled },\n    dlv(theme, 'overrides.ListItem.Title'),\n    overrides.Title,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    { description, size, isDisabled },\n    dlv(theme, 'overrides.ListItem.Description'),\n    overrides.Description,\n  );\n  const [Action, rightIconProps] = getOverrides(\n    StyledAction,\n    props,\n    { isDisabled },\n    dlv(theme, 'overrides.ListItem.Action'),\n    overrides.Action,\n  );\n  const [AvatarR, avatarProps] = getOverrides(\n    StyledAvatar,\n    props,\n    { source, size: getControlHeight(size) - 8 },\n    dlv(theme, 'overrides.ListItem.Avatar'),\n    overrides.Avatar,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Touchable {...touchableProps}>\n        <AvatarR {...avatarProps} />\n        <TextWrapper {...textWrapperProps}>\n          <Title {...titleProps} />\n          <Description {...descriptionProps} />\n        </TextWrapper>\n      </Touchable>\n      <Action {...rightIconProps} />\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n  isDisabled: boolean;\n  size: ControlSize | number;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, isDisabled, size, ...viewProps } = props;\n  const theme = useTheme();\n  const { getControlHeight } = useControlSizeUtils();\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          flexDirection: 'row',\n          minHeight: getControlHeight(size) + 8,\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  isDisabled: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { style, children, isDisabled, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          flex: 1,\n          flexDirection: 'row',\n          alignItems: 'center',\n        },\n        style,\n      ]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: OptionalString;\n  size: ControlSize | number;\n  isDisabled: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, size, isDisabled, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      size={size}\n      color={isDisabled ? 'muted' : 'default'}\n      style={[{}, getStyle(props, style)]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface TextWrapperProps extends ViewProps {\n  children?: React.ReactNode;\n  hasAvatar: boolean;\n}\n\nconst StyledTextWrapper = (props: TextWrapperProps) => {\n  const { children, style, hasAvatar = false, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        { flex: 1, justifyContent: 'center', paddingLeft: hasAvatar ? 8 : 0 },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps {\n  description?: OptionalString;\n  size: ControlSize | number;\n  isDisabled: boolean;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { style, description, size, isDisabled, ...viewProps } = props;\n  const { getSmallerHeightControlSize } = useControlSizeUtils();\n\n  if (!description) return null;\n\n  return (\n    <Text\n      size={getSmallerHeightControlSize(size)}\n      color=\"muted\"\n      style={[{}, getStyle(props, style)]}\n      {...viewProps}\n    >\n      {description}\n    </Text>\n  );\n};\n\ninterface ActionProps {\n  isDisabled: boolean;\n}\n\nconst StyledAction = (props: ActionProps) => {\n  return <></>;\n};\n\nconst StyledAvatar = (props: AvatarProps) => {\n  const { source, name } = props;\n\n  if (!source && !name) return null;\n\n  return <Avatar {...props} />;\n};\n"],"sourceRoot":""}