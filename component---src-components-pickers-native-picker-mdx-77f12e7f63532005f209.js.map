{"version":3,"sources":["webpack:///../src/components/Pickers/NativePicker.tsx","webpack:///../src/components/Pickers/NativePicker.mdx","webpack:///../src/components/Helpers/State.tsx"],"names":["NativePicker","props","size","options","value","testID","onValueChange","overrides","theme","useTheme","getOverrides","StyledPicker","selectedValue","dlv","Picker","pickerProps","map","option","Item","key","label","children","itemStyle","style","controlSizeStyles","isControlSize","small","borderRadius","controlBorderRadius","height","controlHeights","medium","large","textSizeStyles","textSizes","backgroundColor","borderColor","colors","border","default","borderWidth","width","color","text","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","State","initial","state","setState","itemValue","itemIndex","of","isMDXComponent","React","useState","useCallback","newState"],"mappings":"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","file":"component---src-components-pickers-native-picker-mdx-77f12e7f63532005f209.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { Picker as RNPicker, PickerProps as RNPickerProps } from 'react-native';\n\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\n\nexport interface NativePickerOption<TValue extends string | number> {\n  label: string;\n  value: TValue;\n}\n\ninterface NativePickerBaseProps<TValue extends string | number> {\n  /**\n   * The size of the picker.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * List of NativePickerItem items.\n   */\n  options?: NativePickerOption<TValue>[];\n\n  /**\n   * Callback invoked when a item is picked\n   */\n  onValueChange?: (itemValue: TValue, itemPosition: number) => void;\n\n  /**\n   * Value of the picker\n   */\n  value?: TValue | null;\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: string;\n}\n\nexport interface NativePickerOverrides {\n  Picker: PickerProps;\n}\n\nexport interface NativePickerProps<TValue extends string | number>\n  extends WithOverrides<NativePickerBaseProps<TValue>, NativePickerOverrides> {}\n\nexport const NativePicker = <TValue extends string | number>(\n  props: NativePickerProps<TValue>,\n) => {\n  const {\n    size = 'medium',\n    options = [],\n    value,\n    testID,\n    onValueChange,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Picker, pickerProps] = getOverrides(\n    StyledPicker,\n    props,\n    {\n      selectedValue: value,\n      testID,\n      size,\n      onValueChange,\n    },\n    dlv(theme, 'overrides.NativePicker.Picker'),\n    overrides.Picker,\n  );\n\n  return (\n    <Picker {...pickerProps}>\n      {options.map(option => (\n        <RNPicker.Item\n          key={`${option.value}`}\n          value={option.value}\n          label={option.label}\n        />\n      ))}\n    </Picker>\n  );\n};\n\ninterface PickerProps extends RNPickerProps {\n  size: ControlSize | number;\n  children?: React.ReactNode;\n}\n\nconst StyledPicker = (props: PickerProps) => {\n  const { size, children, itemStyle, style, ...pickerProps } = props;\n  const theme = useTheme();\n\n  const controlSizeStyles = isControlSize(size)\n    ? {\n        small: {\n          borderRadius: theme.controlBorderRadius.small,\n          height: theme.controlHeights.small,\n        },\n\n        medium: {\n          borderRadius: theme.controlBorderRadius.medium,\n          height: theme.controlHeights.medium,\n        },\n\n        large: {\n          borderRadius: theme.controlBorderRadius.large,\n          height: theme.controlHeights.large,\n        },\n      }[size]\n    : {\n        borderRadius: theme.controlBorderRadius.medium,\n        height: size,\n      };\n\n  const textSizeStyles = isControlSize(size)\n    ? theme.textSizes[size]\n    : theme.textSizes.medium;\n\n  return (\n    <RNPicker\n      itemStyle={[\n        {\n          ...textSizeStyles,\n          ...controlSizeStyles,\n        },\n        itemStyle,\n      ]}\n      style={[\n        {\n          backgroundColor: 'transparent',\n          borderColor: theme.colors.border.default,\n          borderWidth: 1,\n          width: '100%',\n          // @ts-ignore\n          color: theme.colors.text.default,\n          ...controlSizeStyles,\n        },\n        style,\n      ]}\n      {...pickerProps}\n    >\n      {children}\n    </RNPicker>\n  );\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { NativePicker } from './NativePicker';\nimport { State } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"nativepicker\"\n    }}>{`NativePicker`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Composes React Native's `}<inlineCode parentName=\"p\">{`Picker`}</inlineCode></p>\n    <Playground __position={0} __code={'<State initial={{ value: \\'js\\' }}>\\n  {({ state, setState }) => (\\n    <NativePicker\\n      value={state.value}\\n      onValueChange={(itemValue, itemIndex) => setState({ value: itemValue })}\\n      size=\\\"large\\\"\\n      options={[\\n        { label: \\'C\\', value: \\'c\\' },\\n        { label: \\'C#\\', value: \\'c#\\' },\\n        { label: \\'C++\\', value: \\'c++\\' },\\n        { label: \\'CSS\\', value: \\'css\\' },\\n        { label: \\'Elixir\\', value: \\'elixir\\' },\\n        { label: \\'Elm\\', value: \\'elm\\' },\\n        { label: \\'Erlang\\', value: \\'erlang\\' },\\n        { label: \\'Go\\', value: \\'go\\' },\\n        { label: \\'Haskell\\', value: \\'haskell\\' },\\n        { label: \\'HTML\\', value: \\'html\\' },\\n        { label: \\'Java\\', value: \\'java\\' },\\n        { label: \\'JavaScript\\', value: \\'js\\' },\\n        { label: \\'Lua\\', value: \\'lua\\' },\\n        { label: \\'Python\\', value: \\'python\\' },\\n        { label: \\'R\\', value: \\'r\\' },\\n        { label: \\'Ruby\\', value: \\'ruby\\' },\\n        { label: \\'Rust\\', value: \\'rust\\' },\\n        { label: \\'Switft\\', value: \\'swift\\' },\\n        { label: \\'Typescript\\', value: \\'typescript\\' },\\n      ]}\\n    />\\n  )}\\n</State>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NativePicker,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: 'js'\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <NativePicker value={state.value} onValueChange={(itemValue, itemIndex) => setState({\n          value: itemValue\n        })} size=\"large\" options={[{\n          label: 'C',\n          value: 'c'\n        }, {\n          label: 'C#',\n          value: 'c#'\n        }, {\n          label: 'C++',\n          value: 'c++'\n        }, {\n          label: 'CSS',\n          value: 'css'\n        }, {\n          label: 'Elixir',\n          value: 'elixir'\n        }, {\n          label: 'Elm',\n          value: 'elm'\n        }, {\n          label: 'Erlang',\n          value: 'erlang'\n        }, {\n          label: 'Go',\n          value: 'go'\n        }, {\n          label: 'Haskell',\n          value: 'haskell'\n        }, {\n          label: 'HTML',\n          value: 'html'\n        }, {\n          label: 'Java',\n          value: 'java'\n        }, {\n          label: 'JavaScript',\n          value: 'js'\n        }, {\n          label: 'Lua',\n          value: 'lua'\n        }, {\n          label: 'Python',\n          value: 'python'\n        }, {\n          label: 'R',\n          value: 'r'\n        }, {\n          label: 'Ruby',\n          value: 'ruby'\n        }, {\n          label: 'Rust',\n          value: 'rust'\n        }, {\n          label: 'Switft',\n          value: 'swift'\n        }, {\n          label: 'Typescript',\n          value: 'typescript'\n        }]} mdxType=\"NativePicker\" />}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"nativepicker-props\"\n    }}>{`NativePicker Props`}</h2>\n    <p>{`Extends native `}<inlineCode parentName=\"p\">{`Picker`}</inlineCode></p>\n    <Props of={NativePicker} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n"],"sourceRoot":""}