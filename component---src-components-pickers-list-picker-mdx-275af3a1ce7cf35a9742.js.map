{"version":3,"sources":["webpack:///../src/components/Pickers/ListPicker.tsx","webpack:///../src/components/Pickers/ListPicker.mdx","webpack:///../src/components/Helpers/State.tsx","webpack:///../src/components/Typography/Label.tsx","webpack:///../src/components/Avatar/Avatar.tsx","webpack:///../src/components/Pickers/usePicker.tsx","webpack:///../src/components/Checkbox/Checkbox.tsx","webpack:///../src/components/ListItem/ListItem.tsx"],"names":["ListPicker","props","data","value","onValueChange","keyExtractor","isMulti","overrides","theme","useTheme","usePicker","items","handleSelect","getOverrides","StyledRoot","dlv","Root","rootProps","map","item","key","isSelected","index","label","description","StyledListPickerItem","onPress","ListPickerItem","ListPickerItemR","listPickerItemProps","children","style","viewProps","View","isDisabled","ListItem","title","Touchable","paddingRight","Action","component","Box","justifyContent","alignItems","Checkbox","shape","ListItemR","listItemRProps","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","State","initial","state","setState","height","newValue","itemIndex","of","isMDXComponent","React","useState","useCallback","newState","Label","position","StyledWrapper","Wrapper","wrapperProps","StyledLabelText","LabelText","labelTextProps","wrapperStyle","flexDirection","paddingBottom","textProps","textStyle","paddingLeft","getStyle","accessibilityRole","Platform","OS","Avatar","source","name","size","isSolid","color","testID","hasImageFailedLoading","setHasImageFailedLoading","isImageUnavailable","StyledInitials","Initials","initialsProps","StyledImage","onError","Image","ImageR","imageProps","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","avatarScale","large","medium","small","appearances","fills","keys","Object","controlSize","isControlSize","controlHeights","backgroundColor","borderRadius","display","overflow","width","initials","fallback","replace","split","slice","v","toUpperCase","join","getInitials","fontSize","lineHeight","Array","isArray","itemValue","filter","val","concat","some","selVal","labelPosition","StyledTouchable","touchableProps","StyledCheck","Check","checkProps","containerShapes","disabled","sizeValue","colors","background","content","borderColor","border","default","borderWidth","primaryDefault","greyDark","text","white","getControlHeight","useControlSizeUtils","StyledTextWrapper","hasAvatar","TextWrapper","textWrapperProps","StyledTitle","Title","titleProps","StyledDescription","Description","descriptionProps","StyledAction","rightIconProps","StyledAvatar","AvatarR","avatarProps","minHeight","greyLight","flex","getSmallerHeightControlSize"],"mappings":"swDAkDO,IAAMA,EAAa,SAKxBC,GACG,MAUCA,EARFC,YAFC,MAEM,GAFN,EAGDC,EAOEF,EAPFE,MAHC,EAUCF,EANFG,qBAJC,MAIe,aAJf,EAODC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,QARC,EAUCL,EADFM,iBATC,MASW,GATX,EAWGC,EAAQC,cAXX,EAa6BC,YAAU,CACxCP,QACAC,gBACAF,OACAI,UACAD,iBALMM,EAbL,EAaKA,MAAOC,EAbZ,EAaYA,aAbZ,EAqBuBC,YACxBC,EACAb,EACA,GACAc,IAAIP,EAAO,6BACXD,EAAUS,MALLA,EArBJ,KAqBUC,EArBV,KA6BH,OACE,YAACD,EAASC,EACPN,EAAMO,KAAI,SAAAC,GAAQ,IACTC,EAAsDD,EAAtDC,IAAKC,EAAiDF,EAAjDE,WAAYC,EAAqCH,EAArCG,MAAOnB,EAA8BgB,EAA9BhB,MAAOoB,EAAuBJ,EAAvBI,MAAOC,EAAgBL,EAAhBK,YAD7B,EAG8BX,YAC7CY,EACAxB,EACA,CACEmB,MACAC,aACAC,QACAnB,QACAoB,QACAC,cACAE,QAAS,kBACPd,EAAaO,EAAKhB,MAAOgB,EAAKG,MAAOH,EAAKE,cAE9CN,IAAIP,EAAO,uCACXD,EAAUoB,gBAdLC,EAHU,KAGOC,EAHP,KAoBjB,OAAO,YAACD,EAAD,GAAiBR,IAAKA,GAASS,c,oLAU9C,IAAMf,EAAa,SAACb,GAAqB,IAC/B6B,EAAkC7B,EAAlC6B,SAAUC,EAAwB9B,EAAxB8B,MAAUC,E,oIADW,CACG/B,EADH,sBAGvC,OACE,YAACgC,EAAA,EAAD,GAAMF,MAAO,CAAC,GAAIA,IAAYC,GAC3BF,I,yTAgBP,IAAML,EAAuB,SAC3BxB,GACG,MAYCA,EAVFqB,aAFC,MAEO,EAFP,IAYCrB,EATFoB,kBAHC,SAIDE,EAQEtB,EARFsB,MAJC,EAYCtB,EAPFyB,eALC,MAKS,aALT,EAQDvB,EAIEF,EAJFE,MACAqB,EAGEvB,EAHFuB,YATC,EAYCvB,EAFFM,iBAVC,MAUW,GAVX,EAWD2B,EACEjC,EADFiC,WAXC,EAyBiCrB,YAAasB,IAAUlC,EAAO,CAChEyB,QAAS,kBAAMA,EAAQvB,EAAOmB,EAAOD,IACrCe,MAAOb,EACPC,cACAU,aACA3B,UAAW,EAAF,GACJA,EADI,CAEP8B,UAAW,EAAF,CACPN,MAAO,CACLO,aAAc,IAEb/B,EAAU8B,WAEfE,OAAQ,EAAF,CACJC,UAzBS,kBACb,YAACC,EAAA,EAAD,CAAKC,eAAe,SAASC,WAAW,UACtC,YAACC,EAAA,EAAD,CACExC,cAAe,kBAAMsB,EAAQvB,EAAOmB,EAAOD,IAC3CwB,MAAM,SACN1C,MAAOkB,EACPa,WAAYA,OAoBT3B,EAAUgC,YAfZO,EAzBJ,KAyBeC,EAzBf,KA6CH,OAAO,YAACD,EAAcC,I,8SC/KjB,IAAMC,EAAe,Q,sLAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGpD,E,oIACF,mBACD,OAAO,YAACiD,EAAD,KAAeD,EAAiBhD,EAAhC,CAAuCoD,WAAYA,EAAYC,QAAQ,cAK5E,iBAAQ,CACN,GAAM,cADR,cAGA,4GACA,qBAAG,0BAAYC,WAAW,KAAvB,cAAH,aAAuE,0BAAYA,WAAW,KAAvB,YAAvE,YAAwI,0BAAYA,WAAW,KAAvB,OAAxI,YAAoM,0BAAYA,WAAW,KAAvB,qBAApM,YACA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ohDAA2mDC,QAAS,CACrpDzD,QACAkD,kBACAQ,eACAC,UACA5D,aACAyC,QACAoB,WACCP,QAAQ,cACb,YAACO,EAAA,EAAD,CAAOC,QAAS,CACV3D,MAAO,CAAC,IAAK,KAAM,OAClBmD,QAAQ,UACZ,gBACKS,EADL,EACKA,MACAC,EAFL,EAEKA,SAFL,OAGS,YAACvB,EAAA,EAAD,CAAKwB,OAAQ,IAAKX,QAAQ,OAChC,YAAC,EAAD,CAAYhD,SAAO,EAACH,MAAO4D,EAAM5D,MAAOC,cAAe,SAAC8D,EAAUC,GAAX,OAAyBH,EAAS,CACrF7D,MAAO+D,KACLhE,KAAM,CAAC,CACTqB,MAAO,IACPpB,MAAO,IACPqB,YAAa,uIACZ,CACDD,MAAO,KACPpB,MAAO,KACPqB,YAAa,iEACZ,CACDD,MAAO,MACPpB,MAAO,MACP+B,YAAY,GACX,CACDX,MAAO,MACPpB,MAAO,OACN,CACDoB,MAAO,SACPpB,MAAO,UACN,CACDoB,MAAO,MACPpB,MAAO,OACN,CACDoB,MAAO,SACPpB,MAAO,UACN,CACDoB,MAAO,KACPpB,MAAO,MACN,CACDoB,MAAO,UACPpB,MAAO,WACN,CACDoB,MAAO,OACPpB,MAAO,QACN,CACDoB,MAAO,OACPpB,MAAO,QACN,CACDoB,MAAO,aACPpB,MAAO,MACN,CACDoB,MAAO,MACPpB,MAAO,OACN,CACDoB,MAAO,SACPpB,MAAO,UACN,CACDoB,MAAO,IACPpB,MAAO,KACN,CACDoB,MAAO,OACPpB,MAAO,QACN,CACDoB,MAAO,OACPpB,MAAO,QACN,CACDoB,MAAO,SACPpB,MAAO,SACN,CACDoB,MAAO,aACPpB,MAAO,eACLmD,QAAQ,oBAIlB,iBAAQ,CACN,GAAM,oBADR,oBAGA,YAAC,IAAD,CAAOc,GAAIpE,EAAYsD,QAAQ,W,6KAKnCF,EAAWiB,gBAAiB,G,knBCpHrB,IAAMR,EAAQ,SAAC5D,GAAsB,IAClC6B,EAA8B7B,EAA9B6B,SADkC,EACJ7B,EAApB6D,eADwB,WAEhBQ,IAAMC,SAAST,GAAlCC,EAFmC,KAE5BC,EAF4B,KAQ1C,OAAOlC,EAAS,CAAEiC,QAAOC,SAJLM,IAAME,aAAY,SAAAC,GACpCT,EAASS,KACR,Y,28CCmBE,IAAMC,EAAQ,SAACzE,GAAsB,IAClC6B,EAAsD7B,EAAtD6B,SADkC,EACoB7B,EAA5C0E,gBADwB,MACb,MADa,IACoB1E,EAA1BM,iBADM,MACM,GADN,EACUgB,EAAUtB,EAAVsB,MAC9Cf,EAAQC,cAF4B,EAIhBI,YACxBC,EACAb,EACA,GACAc,IAAIP,EAAO,wBACXD,EAAUS,MALLA,EAJmC,KAI7BC,EAJ6B,OAWVJ,YAC9B+D,EACA3E,EACA,CAAE0E,YACF5D,IAAIP,EAAO,2BACXD,EAAUsE,SALLA,EAXmC,KAW1BC,EAX0B,OAkBNjE,YAClCkE,EACA9E,EACA,CAAE0E,WAAUpD,SACZR,IAAIP,EAAO,6BACXD,EAAUyE,WALLA,EAlBmC,KAkBxBC,EAlBwB,KA0B1C,OACE,YAACjE,EAASC,EACM,QAAb0D,GAAsB,YAACK,EAAcC,GACtC,YAACJ,EAAYC,EACG,SAAbH,GAAuB,YAACK,EAAcC,GACtCnD,EACa,UAAb6C,GAAwB,YAACK,EAAcC,W,6KAYhD,IAAMnE,EAAa,SAACb,GAAqB,IAC/B6B,EAAkC7B,EAAlC6B,SAAUC,EAAwB9B,EAAxB8B,MAAUC,EADW,EACG/B,EADH,sBAGvC,OACE,YAAC,IAAD,GAAM8B,MAAO,CAACA,IAAYC,GACvBF,IASD8C,EAAgB,SAAC3E,GAAwB,IACrC6B,EAA4C7B,EAA5C6B,SAAUC,EAAkC9B,EAAlC8B,MAAO4C,EAA2B1E,EAA3B0E,SAAa3C,EADO,EACO/B,EADP,iCAGzCiF,EAA0B,GAE9B,OAAQP,GACN,IAAK,OACHO,EAAe,CACbC,cAAe,MACfxC,WAAY,SACZL,aAAc,GAEhB,MACF,IAAK,QACH4C,EAAe,CACbC,cAAe,MACfxC,WAAY,UAEd,MACF,IAAK,MAGL,QACEuC,EAAe,CAAEE,cAAe,GAIpC,OACE,YAAC,IAAD,GAAMrD,MAAO,CAACmD,EAAcnD,IAAYC,GACrCF,IAUDiD,EAAkB,SAAC9E,GAA0B,IACzCsB,EAAyCtB,EAAzCsB,MAAOoD,EAAkC1E,EAAlC0E,SAAU5C,EAAwB9B,EAAxB8B,MAAUsD,EADc,EACApF,EADA,8BAGjD,IAAKsB,EAAO,OAAO,KAEnB,IAAI+D,EAAuB,GAE3B,OAAQX,GACN,IAAK,OACHW,EAAY,CAAEhD,aAAc,GAC5B,MACF,IAAK,QACHgD,EAAY,CAAEC,YAAa,GAC3B,MACF,IAAK,MAGL,QACED,EAAY,CAAEF,cAAe,GAIjC,OACE,YAAC,IAAD,GACErD,MAAO,CAACuD,EAAWE,YAASvF,EAAO8B,IAEnC0D,kBAAmC,QAAhBC,IAASC,GAAe,QAAU,QACjDN,GAEH9D,K,ikCC3GA,IAAMqE,EAAS,SAAC3F,GAAuB,IAE1C4F,EAOE5F,EAPF4F,OACAC,EAME7F,EANF6F,KAH0C,EASxC7F,EALF8F,YAJ0C,MAInC,SAJmC,IASxC9F,EAJF+F,eAL0C,WASxC/F,EAHFgG,aAN0C,MAMlC,OANkC,EAO1CC,EAEEjG,EAFFiG,OAP0C,EASxCjG,EADFM,iBAR0C,MAQ9B,GAR8B,EAWtCC,EAAQC,cAX8B,EAYc6D,IAAMC,UAC9D,GADK4B,EAZqC,KAYdC,EAZc,KAetCC,GAAsBR,GAAUM,EAfM,EAiBlBtF,YACxBC,EACAb,EACA,CAAE6F,OAAMC,OAAMC,UAASC,QAAOC,UAC9BnF,IAAIP,EAAO,yBACXD,EAAUS,MALLA,EAjBqC,KAiB/BC,EAjB+B,OAwBVJ,YAChCyF,EACArG,EACA,CAAE6F,OAAMC,OAAMC,UAASC,SACvBlF,IAAIP,EAAO,4BACXD,EAAUgG,UALLA,EAxBqC,KAwB3BC,EAxB2B,KAgC5C,IAAKH,GAAwBR,EAAQ,OACNhF,YAC3B4F,EACAxG,EACA,CACEyG,QAAS,kBAAMN,GAAyB,IACxCP,UAEF9E,IAAIP,EAAO,0BACXD,EAAUoG,OARLC,EAD4B,KACpBC,EADoB,KAYnC,OACE,YAAC7F,EAASC,EACR,YAAC2F,EAAWC,IAKlB,OACE,YAAC7F,EAASC,EACR,YAACsF,EAAaC,U,2KASb,IAAMM,EAAW,SAACC,GACvB,IAAMC,EAAMC,OAAOF,GACfG,EAAO,EAEX,GAA0B,IAAtBF,EAAIG,OAAOC,OAAc,OAAOF,EACpC,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAE9BH,GAAQA,GAAQ,GAAKA,EADdF,EAAIM,WAAWD,GAGtBH,GAAQA,EAEV,OAAOK,KAAKC,IAAIN,I,kaAKlB,IAAMO,EAAiD,CACrDC,MAAO,EACPC,OAAQ,IACRC,MAAO,GAUH9G,EAAa,SAACb,GAAqB,IAC/BiG,EAAwDjG,EAAxDiG,OAAQpE,EAAgD7B,EAAhD6B,SAAUgE,EAAsC7F,EAAtC6F,KAAMC,EAAgC9F,EAAhC8F,KAAMC,EAA0B/F,EAA1B+F,QAASC,EAAiBhG,EAAjBgG,MAAOlE,EAAU9B,EAAV8B,MAChDvB,EAAQC,cACRoH,EAAcrH,EAAMsH,MAAM9B,EAAU,QAAU,UAC9C+B,EAAOC,OAAOD,KAAKF,GAEnBI,EAAcC,YAAcnC,GAC9BvF,EAAM2H,eAAepC,GAAQ0B,EAAY1B,GACzCA,EAEJ,OACE,YAAC,IAAD,CACEhE,MAAO,CACL,CACEY,WAAY,SACZyF,gBACEP,EACY,SAAV5B,EACK8B,EAAKjB,EAAShB,GAAQiC,EAAKX,QAC5BnB,GACJmC,gBACJC,aAAc,KACdC,QAAS,OACTrE,OAAQgE,EACRvF,eAAgB,SAChB6F,SAAU,SACV5D,SAAU,WACV6D,MAAOP,GAETlG,GAEFmE,OAAQA,GAEPpE,IAuBDwE,EAAiB,SAACrG,GAAyB,IACvC6F,EAAoD7F,EAApD6F,KAAMC,EAA8C9F,EAA9C8F,KAAMC,EAAwC/F,EAAxC+F,QAASC,EAA+BhG,EAA/BgG,MAAOlE,EAAwB9B,EAAxB8B,MAAUsD,EADC,EACapF,EADb,2CAEzCO,EAAQC,cAERoH,EAAcrH,EAAMsH,MAAM9B,EAAU,QAAU,UAC9C+B,EAAOC,OAAOD,KAAKF,GAEnBI,EAAcC,YAAcnC,GAC9BvF,EAAM2H,eAAepC,GAAQ0B,EAAY1B,GACzCA,EAEE0C,EA7BY,SAAC3C,EAAe4C,GAClC,YADqD,IAAnBA,MAAW,KACxC5C,EAEEA,EACJ6C,QAAQ,MAAO,KACfC,MAAM,KACNC,MAAM,EAAG,GACT3H,KAAI,SAAA4H,GAAC,OAAIA,GAAKA,EAAE,GAAGC,iBACnBC,KAAK,IAPUN,EA4BDO,CAAYnD,GAE7B,OACE,YAAC,IAAD,KACMT,EADN,CAEEtD,MAAO,CACL,CACEkE,MACE4B,EACY,SAAV5B,EACK8B,EAAKjB,EAAShB,GAAQiC,EAAKX,QAC5BnB,GACJA,MACJiD,SAAUjB,EAAc,EACxBkB,WAAYlB,GAEdzC,YAASvF,EAAO8B,MAGjB0G,IAKDhC,EAAc,SAACxG,GAAsB,IACjC8B,EAAyB9B,EAAzB8B,MAAU8E,EADuB,EACR5G,EADQ,WAGzC,OACE,YAAC,IAAD,GACE8B,MAAO,CACL,CACEkC,OAAQ,OACRuE,MAAO,QAETzG,IAEE8E,M,ihCClMV,IAAMvG,EAAU,SACdH,GADc,OAEQiJ,MAAMC,QAAQlJ,IAEzBO,EAAY,SAKvBT,GACG,IAEDE,EAMEF,EANFE,MAFC,EAQCF,EALFG,qBAHC,MAGe,aAHf,IAQCH,EAFFC,YANC,MAMM,GANN,EAODG,EACEJ,EADFI,aAwCF,MAAO,CACLO,aAtCmB0D,eACnB,SAACgF,EAAmBnF,EAAmB9C,GACjCf,EAAQH,GAERC,EADEiB,EAGAlB,EAAMoJ,QAAO,SAAAC,GAAG,OAAIA,IAAQF,KAK5BnJ,EAAMsJ,OAAOH,GAJbnF,GASJ/D,EAAckJ,EAAsCnF,KAGxD,CAAChE,EAAOC,IAoBRO,MAjBYT,EAAKgB,KAAI,SAACC,EAAMG,GAC5B,IAAMD,EAAcf,EAAQH,GAGxBA,EAAMuJ,MAAK,SAAAC,GAAM,OAAIA,IAAWxI,EAAKhB,SACrCA,IAAUgB,EAAKhB,MAEnB,O,sUAAA,IACKgB,EADL,CAEEC,IAAKf,EAAeA,EAAac,GAAQA,EAAKC,KAAL,GAAeE,EACxDA,QACAD,yB,6sDCvCC,IAAMuB,EAAW,SAAC3C,GAAyB,MAa5CA,EAXF8F,YAF8C,MAEvC,SAFuC,IAa5C9F,EAVF4C,aAH8C,MAGtC,UAHsC,IAa5C5C,EATFE,aAJ8C,SAK9CoB,EAQEtB,EARFsB,MAL8C,EAa5CtB,EAPF2J,qBAN8C,MAM9B,QAN8B,IAa5C3J,EANFiC,kBAP8C,WAa5CjC,EALFG,qBAR8C,MAQ9B,aAR8B,EAW9C8F,EAEEjG,EAFFiG,OAX8C,EAa5CjG,EADFM,iBAZ8C,MAYlC,GAZkC,EAc1CC,EAAQC,cAdkC,EAgBZI,YAClCgJ,EACA5J,EACA,CACE8F,OACAlD,QACAX,aACAgE,SACAxE,QAAS,kBAAMtB,GAAeD,KAEhCY,IAAIP,EAAO,gCACXD,EAAU8B,WAXLA,EAhByC,KAgB9ByH,EAhB8B,OA6BpBjJ,YAC1BkJ,EACA9J,EACA,CAAEE,QAAO4F,OAAMlD,QAAOX,cACtBnB,IAAIP,EAAO,4BACXD,EAAUyJ,OALLA,EA7ByC,KA6BlCC,EA7BkC,KAqChD,OACE,YAAC5H,EAAcyH,EACb,YAAC,IAAD,CAAOvI,MAAOA,EAAOoD,SAAUiF,GAC7B,YAACI,EAAD,GACE7J,MAAOA,EACP4F,KAAMA,EACNlD,MAAOA,EACPX,WAAYA,GACR+H,Y,iLAcd,IAAMJ,EAAkB,SAAC5J,GACiDA,EAAhE8F,KADyC,IACnClD,EAA0D5C,EAA1D4C,MAAOX,EAAmDjC,EAAnDiC,WAAYJ,EAAuC7B,EAAvC6B,SAAUC,EAA6B9B,EAA7B8B,MAAU+H,EADJ,EACuB7J,EADvB,kDAE3CO,EAAQC,cAEd,OACE,YAAC,IAAD,GACEsB,MAAO,CAACvB,EAAM0J,gBAAgBrH,GAAQd,GACtCoI,SAAUjI,GACN4H,GAEHhI,IAYDiI,EAAc,SAAC9J,GAAsB,IACjC8F,EAAwD9F,EAAxD8F,KAAMlD,EAAkD5C,EAAlD4C,MAAO1C,EAA2CF,EAA3CE,MAAO+B,EAAoCjC,EAApCiC,WAAYH,EAAwB9B,EAAxB8B,MAAUC,EADT,EACuB/B,EADvB,+CAEnCO,EAAQC,cAER2J,EAAYlC,YAAcnC,GAC5BvF,EAAM2H,eAAepC,GAAQ,GAC7BA,EAEJ,OACE,YAAC,IAAD,GACEhE,MAAO,CAAC,EAAD,CAEHY,WAAY,SACZyF,gBAAiB5H,EAAM6J,OAAOC,WAAWC,QACzCC,YAAahK,EAAM6J,OAAOI,OAAOC,QACjCC,YAAa,EACb1G,OAAQmG,EACR1H,eAAgB,SAChB8F,MAAO4B,GACHjK,EACA,CACEiI,gBAAiB5H,EAAM6J,OAAOC,WAAWM,eACzCJ,YAAa,eAEf,GACAtI,EACA,CACEkG,gBAAiB5H,EAAM6J,OAAOC,WAAWO,SACzCL,YAAahK,EAAM6J,OAAOI,OAAOC,SAEnC,GACDlK,EAAM0J,gBAAgBrH,IAE3Bd,IAEEC,GAEH7B,EACC,YAAC,IAAD,CAAM2F,KAAK,QAAQC,KAAK,SAASE,MAAOzF,EAAM6J,OAAOS,KAAKC,QACxD,Q,mmCC1HH,IAAM5I,EAAW,SAAClC,GAAyB,MAU5CA,EARFiC,kBAF8C,SAG9CE,EAOEnC,EAPFmC,MACAZ,EAMEvB,EANFuB,YAJ8C,EAU5CvB,EALF8F,YAL8C,MAKvC,SALuC,EAM9CrE,EAIEzB,EAJFyB,QACAwE,EAGEjG,EAHFiG,OACAL,EAEE5F,EAFF4F,OAR8C,EAU5C5F,EADFM,iBAT8C,MASlC,GATkC,EAW1CC,EAAQC,cACNuK,EAAqBC,cAArBD,iBAZwC,EActBnK,YACxBC,EACAb,EACA,CAAEiC,aAAY6D,QACdhF,IAAIP,EAAO,2BACXD,EAAUS,MALLA,EAdyC,KAcnCC,EAdmC,OAqBZJ,YAClCgJ,EACA5J,EACA,CAAEyB,UAASwE,SAAQhE,cACnBnB,IAAIP,EAAO,gCACXD,EAAU8B,WALLA,EArByC,KAqB9ByH,EArB8B,OA4BRjJ,YACtCqK,EACAjL,EACA,CACEkL,YACItF,KACAtF,EAAUqF,UACV7E,IAAIP,EAAO,8BAEjBO,IAAIP,EAAO,kCACXD,EAAU6K,aAVLA,EA5ByC,KA4B5BC,EA5B4B,OAwCpBxK,YAC1ByK,EACArL,EACA,CAAEmC,QAAO2D,OAAM7D,cACfnB,IAAIP,EAAO,4BACXD,EAAUgL,OALLA,EAxCyC,KAwClCC,EAxCkC,OA+CR3K,YACtC4K,EACAxL,EACA,CAAEuB,cAAauE,OAAM7D,cACrBnB,IAAIP,EAAO,kCACXD,EAAUmL,aALLA,EA/CyC,KA+C5BC,EA/C4B,OAsDf9K,YAC/B+K,EACA3L,EACA,CAAEiC,cACFnB,IAAIP,EAAO,6BACXD,EAAUgC,QALLA,EAtDyC,KAsDjCsJ,EAtDiC,OA6DjBhL,YAC7BiL,EACA7L,EACA,CAAE4F,SAAQE,KAAMiF,EAAiBjF,GAAQ,GACzChF,IAAIP,EAAO,6BACXD,EAAUqF,QALLmG,EA7DyC,KA6DhCC,EA7DgC,KAqEhD,OACE,YAAChL,EAASC,EACR,YAACoB,EAAcyH,EACb,YAACiC,EAAYC,GACb,YAACZ,EAAgBC,EACf,YAACE,EAAUC,GACX,YAACE,EAAgBC,KAGrB,YAACpJ,EAAWsJ,U,iLAWlB,IAAM/K,EAAa,SAACb,GAAqB,IAC/B6B,EAAoD7B,EAApD6B,SAAUC,EAA0C9B,EAA1C8B,MAAOG,EAAmCjC,EAAnCiC,WAAY6D,EAAuB9F,EAAvB8F,KAAS/D,EADP,EACqB/B,EADrB,0CAEjCO,EAAQC,cACNuK,EAAqBC,cAArBD,iBAER,OACE,YAAC,IAAD,GACEjJ,MAAO,CACL,CACEY,WAAY,SACZwC,cAAe,MACf8G,UAAWjB,EAAiBjF,GAAQ,EACpCqC,gBAAiBlG,EACb1B,EAAM6J,OAAOC,WAAW4B,UACxB1L,EAAM6J,OAAOC,WAAWC,SAE9BxI,IAEEC,GAEHF,IAUD+H,EAAkB,SAAC5J,GAA0B,IACzC8B,EAAmD9B,EAAnD8B,MAAOD,EAA4C7B,EAA5C6B,SAAUI,EAAkCjC,EAAlCiC,WAAe4H,EADS,EACU7J,EADV,mCAGjD,OACE,YAAC,IAAD,GACE8B,MAAO,CACL,CACEoK,KAAM,EACNhH,cAAe,MACfxC,WAAY,UAEdZ,GAEFoI,SAAUjI,GACN4H,GAEHhI,IAWDwJ,EAAc,SAACrL,GAAsB,IACjCmC,EAAiDnC,EAAjDmC,MAAOL,EAA0C9B,EAA1C8B,MAAOgE,EAAmC9F,EAAnC8F,KAAM7D,EAA6BjC,EAA7BiC,WAAemD,EADF,EACgBpF,EADhB,uCAGzC,OAAKmC,EAGH,YAAC,IAAD,GACE2D,KAAMA,EACNE,MAAO/D,EAAa,QAAU,UAC9BH,MAAO,CAAC,GAAIyD,YAASvF,EAAO8B,KACxBsD,GAEHjD,GATc,MAmBf8I,EAAoB,SAACjL,GAA4B,IAC7C6B,EAAqD7B,EAArD6B,SAAUC,EAA2C9B,EAA3C8B,MADmC,EACQ9B,EAApCkL,iBAD4B,SACNnJ,EADM,EACQ/B,EADR,kCAGrD,OACE,YAAC,IAAD,GACE8B,MAAO,CACL,CAAEoK,KAAM,EAAGzJ,eAAgB,SAAU6C,YAAa4F,EAAY,EAAI,GAClEpJ,IAEEC,GAEHF,IAWD2J,EAAoB,SAACxL,GAA4B,IAC7C8B,EAAuD9B,EAAvD8B,MAAOP,EAAgDvB,EAAhDuB,YAAauE,EAAmC9F,EAAnC8F,KAAqB/D,GAAc/B,EAA7BiC,WADmB,EACUjC,EADV,8CAE7CmM,EAAgCnB,cAAhCmB,4BAER,OAAK5K,EAGH,YAAC,IAAD,GACEuE,KAAMqG,EAA4BrG,GAClCE,MAAM,QACNlE,MAAO,CAAC,GAAIyD,YAASvF,EAAO8B,KACxBC,GAEHR,GAToB,MAkBrBoK,EAAe,SAAC3L,GACpB,OAAO,gCAGH6L,EAAe,SAAC7L,GAAuB,IACnC4F,EAAiB5F,EAAjB4F,OAAQC,EAAS7F,EAAT6F,KAEhB,OAAKD,GAAWC,EAET,YAAC,IAAW7F,GAFU","file":"component---src-components-pickers-list-picker-mdx-275af3a1ce7cf35a9742.js","sourcesContent":["import dlv from 'dlv';\nimport React from 'react';\nimport { ViewProps, View } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Box } from '../Box';\nimport { Checkbox } from '../Checkbox';\nimport { ListItem, ListItemOverrides } from '../ListItem';\n\nimport {\n  PickerItem,\n  PickerItemProps,\n  usePicker,\n  UsePickerProps,\n} from './usePicker';\n\nexport interface ListPickerItem<TValue extends any> extends PickerItem<TValue> {\n  label: string;\n  description?: OptionalString;\n  isDisabled?: boolean;\n}\n\nexport interface ListPickerOverrides<TValue extends any> {\n  Root: RootProps;\n  ListPickerItem: ListPickerItemProps<TValue>;\n}\n\ninterface ListPickerBaseProps<\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>\n  extends UsePickerProps<\n    TValue,\n    TPickerItem & ListPickerItem<TValue>,\n    TIsMulti\n  > {}\n\nexport interface ListPickerProps<\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>\n  extends WithOverrides<\n    ListPickerBaseProps<TValue, TPickerItem, TIsMulti>,\n    ListPickerOverrides<TValue>\n  > {}\n\nexport const ListPicker = <\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>(\n  props: ListPickerProps<TValue, TPickerItem, TIsMulti>,\n) => {\n  const {\n    data = [],\n    value,\n    onValueChange = () => {\n      return;\n    },\n    keyExtractor,\n    isMulti,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const { items, handleSelect } = usePicker({\n    value,\n    onValueChange,\n    data,\n    isMulti,\n    keyExtractor,\n  });\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.ListPicker.List'),\n    overrides.Root,\n  );\n\n  return (\n    <Root {...rootProps}>\n      {items.map(item => {\n        const { key, isSelected, index, value, label, description } = item;\n\n        const [ListPickerItemR, listPickerItemProps] = getOverrides(\n          StyledListPickerItem,\n          props,\n          {\n            key,\n            isSelected,\n            index,\n            value,\n            label,\n            description,\n            onPress: () =>\n              handleSelect(item.value, item.index, item.isSelected),\n          },\n          dlv(theme, 'overrides.ListPicker.ListPickerItem'),\n          overrides.ListPickerItem,\n        );\n\n        return <ListPickerItemR key={key} {...listPickerItemProps} />;\n      })}\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[{}, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface ListPickerItemBaseProps<TValue extends any> extends PickerItemProps {\n  onPress: (value: TValue, index: number, isSelected: boolean) => void;\n  value: TValue;\n  label: string;\n  description?: OptionalString;\n  isDisabled?: boolean;\n}\n\nexport interface ListPickerItemProps<TValue extends any>\n  extends WithOverrides<ListPickerItemBaseProps<TValue>, ListItemOverrides> {}\n\nconst StyledListPickerItem = <TValue extends any = any>(\n  props: ListPickerItemProps<TValue>,\n) => {\n  const {\n    index = 0,\n    isSelected = false,\n    label,\n    onPress = () => {\n      return;\n    },\n    value,\n    description,\n    overrides = {},\n    isDisabled,\n  } = props;\n\n  const Action = () => (\n    <Box justifyContent=\"center\" alignItems=\"center\">\n      <Checkbox\n        onValueChange={() => onPress(value, index, isSelected)}\n        shape=\"circle\"\n        value={isSelected}\n        isDisabled={isDisabled}\n      />\n    </Box>\n  );\n\n  const [ListItemR, listItemRProps] = getOverrides(ListItem, props, {\n    onPress: () => onPress(value, index, isSelected),\n    title: label,\n    description,\n    isDisabled,\n    overrides: {\n      ...overrides,\n      Touchable: {\n        style: {\n          paddingRight: 8,\n        },\n        ...overrides.Touchable,\n      },\n      Action: {\n        component: Action,\n        ...overrides.Action,\n      },\n    },\n  });\n\n  return <ListItemR {...listItemRProps} />;\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { ListPicker } from './ListPicker';\nimport { Box } from '../Box';\nimport { State } from '../Helpers';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"listpicker\"\n    }}>{`ListPicker`}</h1>\n    <p>{`ListPicker that supports single value or multiple values selected at the same item.`}</p>\n    <p><inlineCode parentName=\"p\">{`ListPicker`}</inlineCode>{` composes `}<inlineCode parentName=\"p\">{`FlatList`}</inlineCode>{`. To use `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`, import `}<inlineCode parentName=\"p\">{`ListPickerWithRef`}</inlineCode>{` instead`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<State initial={{ value: [\\'c\\', \\'js\\', \\'go\\'] }}>\\n  {({ state, setState }) => (\\n    <Box height={300}>\\n      <ListPicker\\n        isMulti\\n        value={state.value}\\n        onValueChange={(newValue, itemIndex) => setState({ value: newValue })}\\n        data={[\\n          {\\n            label: \\'C\\',\\n            value: \\'c\\',\\n            description:\\n              \\'C is a general-purpose, procedural computer programming language. C is a general-purpose, procedural computer programming language.\\',\\n          },\\n          {\\n            label: \\'C#\\',\\n            value: \\'c#\\',\\n            description:\\n              \\'C# is a general-purpose, multi-paradigm programming language.\\',\\n          },\\n          { label: \\'C++\\', value: \\'c++\\', isDisabled: true },\\n          { label: \\'CSS\\', value: \\'css\\' },\\n          { label: \\'Elixir\\', value: \\'elixir\\' },\\n          { label: \\'Elm\\', value: \\'elm\\' },\\n          { label: \\'Erlang\\', value: \\'erlang\\' },\\n          { label: \\'Go\\', value: \\'go\\' },\\n          { label: \\'Haskell\\', value: \\'haskell\\' },\\n          { label: \\'HTML\\', value: \\'html\\' },\\n          { label: \\'Java\\', value: \\'java\\' },\\n          { label: \\'JavaScript\\', value: \\'js\\' },\\n          { label: \\'Lua\\', value: \\'lua\\' },\\n          { label: \\'Python\\', value: \\'python\\' },\\n          { label: \\'R\\', value: \\'r\\' },\\n          { label: \\'Ruby\\', value: \\'ruby\\' },\\n          { label: \\'Rust\\', value: \\'rust\\' },\\n          { label: \\'Switft\\', value: \\'swift\\' },\\n          { label: \\'Typescript\\', value: \\'typescript\\' },\\n        ]}\\n      />\\n    </Box>\\n  )}\\n</State>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      ListPicker,\n      Box,\n      State\n    }} mdxType=\"Playground\">\n  <State initial={{\n        value: ['c', 'js', 'go']\n      }} mdxType=\"State\">\n    {({\n          state,\n          setState\n        }) => <Box height={300} mdxType=\"Box\">\n        <ListPicker isMulti value={state.value} onValueChange={(newValue, itemIndex) => setState({\n            value: newValue\n          })} data={[{\n            label: 'C',\n            value: 'c',\n            description: 'C is a general-purpose, procedural computer programming language. C is a general-purpose, procedural computer programming language.'\n          }, {\n            label: 'C#',\n            value: 'c#',\n            description: 'C# is a general-purpose, multi-paradigm programming language.'\n          }, {\n            label: 'C++',\n            value: 'c++',\n            isDisabled: true\n          }, {\n            label: 'CSS',\n            value: 'css'\n          }, {\n            label: 'Elixir',\n            value: 'elixir'\n          }, {\n            label: 'Elm',\n            value: 'elm'\n          }, {\n            label: 'Erlang',\n            value: 'erlang'\n          }, {\n            label: 'Go',\n            value: 'go'\n          }, {\n            label: 'Haskell',\n            value: 'haskell'\n          }, {\n            label: 'HTML',\n            value: 'html'\n          }, {\n            label: 'Java',\n            value: 'java'\n          }, {\n            label: 'JavaScript',\n            value: 'js'\n          }, {\n            label: 'Lua',\n            value: 'lua'\n          }, {\n            label: 'Python',\n            value: 'python'\n          }, {\n            label: 'R',\n            value: 'r'\n          }, {\n            label: 'Ruby',\n            value: 'ruby'\n          }, {\n            label: 'Rust',\n            value: 'rust'\n          }, {\n            label: 'Switft',\n            value: 'swift'\n          }, {\n            label: 'Typescript',\n            value: 'typescript'\n          }]} mdxType=\"ListPicker\" />\n      </Box>}\n  </State>\n    </Playground>\n    <h2 {...{\n      \"id\": \"listpicker-props\"\n    }}>{`ListPicker Props`}</h2>\n    <Props of={ListPicker} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\n\nexport interface StateRenderProps<TState = any> {\n  state: TState;\n  setState: (state: TState) => void;\n}\n\nexport interface StateProps<TState = any> {\n  initial?: TState;\n  children: (props: StateRenderProps) => JSX.Element;\n}\n\nexport const State = (props: StateProps) => {\n  const { children, initial = false } = props;\n  const [state, setState] = React.useState(initial);\n\n  const handleState = React.useCallback(newState => {\n    setState(newState);\n  }, []);\n\n  return children({ state, setState: handleState });\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport { Platform, TextStyle, View, ViewProps, ViewStyle } from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\n\nimport { Text, TextProps } from './Text';\n\nexport type LabelPosition = 'top' | 'left' | 'right';\n\ninterface LabelBaseProps {\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"top\"\n   */\n  position?: LabelPosition;\n\n  /** Content to wrap with. */\n  children?: React.ReactNode;\n}\n\nexport interface LabelOverrides {\n  Root: RootProps;\n  Wrapper: WrapperProps;\n  LabelText: LabelTextProps;\n}\n\nexport interface LabelProps\n  extends WithOverrides<LabelBaseProps, LabelOverrides> {}\n\nexport const Label = (props: LabelProps) => {\n  const { children, position = 'top', overrides = {}, label } = props;\n  const theme = useTheme();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    {},\n    dlv(theme, 'overrides.Label.Root'),\n    overrides.Root,\n  );\n  const [Wrapper, wrapperProps] = getOverrides(\n    StyledWrapper,\n    props,\n    { position },\n    dlv(theme, 'overrides.Label.Wrapper'),\n    overrides.Wrapper,\n  );\n  const [LabelText, labelTextProps] = getOverrides(\n    StyledLabelText,\n    props,\n    { position, label },\n    dlv(theme, 'overrides.Label.LabelText'),\n    overrides.LabelText,\n  );\n\n  return (\n    <Root {...rootProps}>\n      {position === 'top' && <LabelText {...labelTextProps} />}\n      <Wrapper {...wrapperProps}>\n        {position === 'left' && <LabelText {...labelTextProps} />}\n        {children}\n        {position === 'right' && <LabelText {...labelTextProps} />}\n      </Wrapper>\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\ninterface RootProps extends ViewProps, PropsWithChildren {}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, ...viewProps } = props;\n\n  return (\n    <View style={[style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface WrapperProps extends ViewProps, PropsWithChildren {\n  position: LabelPosition;\n}\n\nconst StyledWrapper = (props: WrapperProps) => {\n  const { children, style, position, ...viewProps } = props;\n\n  let wrapperStyle: ViewStyle = {};\n\n  switch (position) {\n    case 'left':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingRight: 8,\n      };\n      break;\n    case 'right':\n      wrapperStyle = {\n        flexDirection: 'row',\n        alignItems: 'center',\n      };\n      break;\n    case 'top':\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n    default:\n      wrapperStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <View style={[wrapperStyle, style]} {...viewProps}>\n      {children}\n    </View>\n  );\n};\n\ninterface LabelTextProps extends TextProps, PropsWithChildren {\n  label?: OptionalString;\n  position: LabelPosition;\n}\n\nconst StyledLabelText = (props: LabelTextProps) => {\n  const { label, position, style, ...textProps } = props;\n\n  if (!label) return null;\n\n  let textStyle: TextStyle = {};\n\n  switch (position) {\n    case 'left':\n      textStyle = { paddingRight: 8 };\n      break;\n    case 'right':\n      textStyle = { paddingLeft: 8 };\n      break;\n    case 'top':\n      textStyle = { paddingBottom: 4 };\n      break;\n    default:\n      textStyle = { paddingBottom: 4 };\n      break;\n  }\n\n  return (\n    <Text\n      style={[textStyle, getStyle(props, style)]}\n      // @ts-ignore: Compat with web\n      accessibilityRole={Platform.OS === 'web' ? 'label' : 'none'}\n      {...textProps}\n    >\n      {label}\n    </Text>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor, FillColors } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { Text, TextProps } from '../Typography';\n\ninterface AvatarBaseProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"auto\"\n   */\n  color?: 'auto' | FillColor;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface AvatarOverrides {\n  Root: RootProps;\n  Initials: InitialsProps;\n  Image: ImageProps;\n}\n\nexport interface AvatarProps\n  extends WithOverrides<AvatarBaseProps, AvatarOverrides> {}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    size = 'medium',\n    isSolid = false,\n    color = 'auto',\n    testID,\n    overrides = {},\n  } = props;\n\n  const theme = useTheme();\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const isImageUnavailable = !source || hasImageFailedLoading;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { name, size, isSolid, color, testID },\n    dlv(theme, 'overrides.Avatar.Root'),\n    overrides.Root,\n  );\n  const [Initials, initialsProps] = getOverrides(\n    StyledInitials,\n    props,\n    { name, size, isSolid, color },\n    dlv(theme, 'overrides.Avatar.Initial'),\n    overrides.Initials,\n  );\n\n  if (!isImageUnavailable && !!source) {\n    const [ImageR, imageProps] = getOverrides(\n      StyledImage,\n      props,\n      {\n        onError: () => setHasImageFailedLoading(true),\n        source,\n      },\n      dlv(theme, 'overrides.Avatar.Image'),\n      overrides.Image,\n    );\n\n    return (\n      <Root {...rootProps}>\n        <ImageR {...imageProps} />\n      </Root>\n    );\n  }\n\n  return (\n    <Root {...rootProps}>\n      <Initials {...initialsProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { testID, children, name, size, isSolid, color, style } = props;\n  const theme = useTheme();\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].backgroundColor,\n          borderRadius: 9999,\n          display: 'flex',\n          height: controlSize,\n          justifyContent: 'center',\n          overflow: 'hidden',\n          position: 'relative',\n          width: controlSize,\n        },\n        style,\n      ]}\n      testID={testID}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst getInitials = (name?: string, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\ninterface InitialsProps extends TextProps {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledInitials = (props: InitialsProps) => {\n  const { name, size, isSolid, color, style, ...textProps } = props;\n  const theme = useTheme();\n\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  const initials = getInitials(name);\n\n  return (\n    <Text\n      {...textProps}\n      style={[\n        {\n          color:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].color,\n          fontSize: controlSize / 2,\n          lineHeight: controlSize,\n        },\n        getStyle(props, style),\n      ]}\n    >\n      {initials}\n    </Text>\n  );\n};\n\nconst StyledImage = (props: ImageProps) => {\n  const { style, ...imageProps } = props;\n\n  return (\n    <Image\n      style={[\n        {\n          height: '100%',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...imageProps}\n    />\n  );\n};\n","import * as React from 'react';\n\ntype Value<\n  TValue extends any,\n  TIsMulti extends boolean = false\n> = TIsMulti extends true ? TValue[] : TValue;\n\nexport interface PickerItem<TValue extends any> {\n  value: TValue;\n  key?: string;\n}\n\nexport interface PickerItemProps {\n  key: string;\n  isSelected: boolean;\n  index: number;\n}\n\nexport interface UsePickerProps<\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n> {\n  /**\n   * Set whether it should allow multiple selections. You should specify the value to get proper type-checking.\n   * @default false\n   */\n  isMulti?: TIsMulti;\n\n  /**\n   * Select item or items.\n   * For single-select use single string.\n   * For multi-select use string array\n   *\n   * *This is a controlled component*; Value will reflect selected items\n   */\n  value?: Value<TValue, TIsMulti> | null;\n\n  /**\n   * Called when a select list item is pressed\n   */\n  onValueChange?: (value: Value<TValue, TIsMulti>, index: number) => void;\n\n  /**\n   * List of data\n   */\n  data?: Array<TPickerItem>;\n\n  /**\n   * Used to extract a unique key for a given item at the specified index.\n   * Key is used for caching and as the react key to track item re-ordering.\n   * The default extractor checks item.key, then falls back to using the index, like React does.\n   */\n  keyExtractor?: (item: TPickerItem) => string;\n}\n\nconst isMulti = <TValue extends any>(\n  value: TValue | TValue[],\n): value is TValue[] => Array.isArray(value);\n\nexport const usePicker = <\n  TValue extends any,\n  TPickerItem extends PickerItem<TValue>,\n  TIsMulti extends boolean = false\n>(\n  props: UsePickerProps<TValue, TPickerItem, TIsMulti>,\n) => {\n  const {\n    value,\n    onValueChange = () => {\n      return;\n    },\n    data = [],\n    keyExtractor,\n  } = props;\n\n  const handleSelect = React.useCallback(\n    (itemValue: TValue, itemIndex: number, isSelected: boolean) => {\n      if (isMulti(value)) {\n        if (isSelected) {\n          onValueChange(\n            // @ts-ignore: TODO: make this work\n            value.filter(val => val !== itemValue) as Value<TValue, TIsMulti>,\n            itemIndex,\n          );\n        } else {\n          onValueChange(\n            value.concat(itemValue) as Value<TValue, TIsMulti>,\n            itemIndex,\n          );\n        }\n      } else {\n        onValueChange(itemValue as Value<TValue, TIsMulti>, itemIndex);\n      }\n    },\n    [value, onValueChange],\n  );\n\n  const items = data.map((item, index) => {\n    const isSelected = (isMulti(value)\n      ? //\n        // @ts-ignore: TODO: make this work\n        value.some(selVal => selVal === item.value)\n      : value === item.value) as boolean;\n\n    return {\n      ...item,\n      key: keyExtractor ? keyExtractor(item) : item.key || `${index}`,\n      index,\n      isSelected,\n    };\n  }) as (TPickerItem & PickerItemProps)[];\n\n  return {\n    handleSelect,\n    items,\n  };\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { ContainerShape, ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Icon } from '../Icon';\nimport { Label, LabelPosition, LabelProps } from '../Typography';\n\ninterface CheckboxBaseProps {\n  /**\n   * The size of the checkbox.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * When true, will display as checked.\n   * @default false\n   */\n  value: boolean;\n\n  /**\n   * Label of the field.\n   */\n  label?: OptionalString;\n\n  /**\n   * Position of the field.\n   * @default \"right\"\n   */\n  labelPosition?: LabelPosition;\n\n  /**\n   * When true, the checkbox is disabled.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Shape of the checkbox.\n   * @default \"rounded\"\n   */\n  shape?: ContainerShape;\n\n  /**\n   * Called when checkbox is pressed.\n   */\n  onValueChange?: (value: boolean) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface CheckboxOverrides {\n  Touchable: TouchableProps;\n  Label: LabelProps;\n  Check: CheckProps;\n}\n\nexport interface CheckboxProps\n  extends WithOverrides<CheckboxBaseProps, CheckboxOverrides> {}\n\nexport const Checkbox = (props: CheckboxProps) => {\n  const {\n    size = 'medium',\n    shape = 'rounded',\n    value = false,\n    label,\n    labelPosition = 'right',\n    isDisabled = false,\n    onValueChange = () => {\n      return;\n    },\n    testID,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    {\n      size,\n      shape,\n      isDisabled,\n      testID,\n      onPress: () => onValueChange(!value),\n    },\n    dlv(theme, 'overrides.Checkbox.Touchable'),\n    overrides.Touchable,\n  );\n  const [Check, checkProps] = getOverrides(\n    StyledCheck,\n    props,\n    { value, size, shape, isDisabled },\n    dlv(theme, 'overrides.Checkbox.Check'),\n    overrides.Check,\n  );\n\n  return (\n    <Touchable {...touchableProps}>\n      <Label label={label} position={labelPosition}>\n        <Check\n          value={value}\n          size={size}\n          shape={shape}\n          isDisabled={isDisabled}\n          {...checkProps}\n        />\n      </Label>\n    </Touchable>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  size: ControlSize | number;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { size, shape, isDisabled, children, style, ...touchableProps } = props;\n  const theme = useTheme();\n\n  return (\n    <TouchableOpacity\n      style={[theme.containerShapes[shape], style]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface CheckProps extends ViewProps {\n  size: ControlSize | number;\n  value: boolean;\n  isDisabled: boolean;\n  shape: ContainerShape;\n}\n\nconst StyledCheck = (props: CheckProps) => {\n  const { size, shape, value, isDisabled, style, ...viewProps } = props;\n  const theme = useTheme();\n\n  const sizeValue = isControlSize(size)\n    ? theme.controlHeights[size] - 16\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.default,\n          borderWidth: 1,\n          height: sizeValue,\n          justifyContent: 'center',\n          width: sizeValue,\n          ...(value\n            ? {\n                backgroundColor: theme.colors.background.primaryDefault,\n                borderColor: 'transparent',\n              }\n            : {}),\n          ...(isDisabled\n            ? {\n                backgroundColor: theme.colors.background.greyDark,\n                borderColor: theme.colors.border.default,\n              }\n            : {}),\n          ...theme.containerShapes[shape],\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {value ? (\n        <Icon name=\"check\" size=\"xsmall\" color={theme.colors.text.white} />\n      ) : null}\n    </View>\n  );\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  ImageSourcePropType,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme, ControlSize } from '../../theme';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { OptionalString } from '../../utils/types';\nimport { Avatar, AvatarProps } from '../Avatar';\nimport { Text, TextProps } from '../Typography';\nimport { useControlSizeUtils } from '../../utils/ControlSize';\n\ninterface ListItemBaseProps {\n  /**\n   * Title of the list item\n   */\n  title?: OptionalString;\n\n  /**\n   * Description of the list item\n   */\n  description?: OptionalString;\n\n  /**\n   * Source of the avatar\n   */\n  source?: ImageSourcePropType;\n\n  /**\n   * When true, list item will not be able to be pressed.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Size of the ListItem.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Called when pressing list item\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface ListItemOverrides {\n  Root: RootProps;\n  Touchable: TouchableProps;\n  Title: TitleProps;\n  TextWrapper: TextWrapperProps;\n  Description: DescriptionProps;\n  Action: ActionProps;\n  Avatar: AvatarProps;\n}\n\nexport interface ListItemProps\n  extends WithOverrides<ListItemBaseProps, ListItemOverrides> {}\n\nexport const ListItem = (props: ListItemProps) => {\n  const {\n    isDisabled = false,\n    title,\n    description,\n    size = 'medium',\n    onPress,\n    testID,\n    source,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n  const { getControlHeight } = useControlSizeUtils();\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { isDisabled, size },\n    dlv(theme, 'overrides.ListItem.Root'),\n    overrides.Root,\n  );\n  const [Touchable, touchableProps] = getOverrides(\n    StyledTouchable,\n    props,\n    { onPress, testID, isDisabled },\n    dlv(theme, 'overrides.ListItem.Touchable'),\n    overrides.Touchable,\n  );\n  const [TextWrapper, textWrapperProps] = getOverrides(\n    StyledTextWrapper,\n    props,\n    {\n      hasAvatar:\n        !!source ||\n        !!overrides.Avatar ||\n        !!dlv(theme, 'overrides.ListItem.Avatar'),\n    },\n    dlv(theme, 'overrides.ListItem.TextWrapper'),\n    overrides.TextWrapper,\n  );\n  const [Title, titleProps] = getOverrides(\n    StyledTitle,\n    props,\n    { title, size, isDisabled },\n    dlv(theme, 'overrides.ListItem.Title'),\n    overrides.Title,\n  );\n  const [Description, descriptionProps] = getOverrides(\n    StyledDescription,\n    props,\n    { description, size, isDisabled },\n    dlv(theme, 'overrides.ListItem.Description'),\n    overrides.Description,\n  );\n  const [Action, rightIconProps] = getOverrides(\n    StyledAction,\n    props,\n    { isDisabled },\n    dlv(theme, 'overrides.ListItem.Action'),\n    overrides.Action,\n  );\n  const [AvatarR, avatarProps] = getOverrides(\n    StyledAvatar,\n    props,\n    { source, size: getControlHeight(size) - 8 },\n    dlv(theme, 'overrides.ListItem.Avatar'),\n    overrides.Avatar,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <Touchable {...touchableProps}>\n        <AvatarR {...avatarProps} />\n        <TextWrapper {...textWrapperProps}>\n          <Title {...titleProps} />\n          <Description {...descriptionProps} />\n        </TextWrapper>\n      </Touchable>\n      <Action {...rightIconProps} />\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewProps {\n  children?: React.ReactNode;\n  isDisabled: boolean;\n  size: ControlSize | number;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { children, style, isDisabled, size, ...viewProps } = props;\n  const theme = useTheme();\n  const { getControlHeight } = useControlSizeUtils();\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          flexDirection: 'row',\n          minHeight: getControlHeight(size) + 8,\n          backgroundColor: isDisabled\n            ? theme.colors.background.greyLight\n            : theme.colors.background.content,\n        },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface TouchableProps extends TouchableOpacityProps {\n  children?: React.ReactNode;\n  isDisabled: boolean;\n}\n\nconst StyledTouchable = (props: TouchableProps) => {\n  const { style, children, isDisabled, ...touchableProps } = props;\n\n  return (\n    <TouchableOpacity\n      style={[\n        {\n          flex: 1,\n          flexDirection: 'row',\n          alignItems: 'center',\n        },\n        style,\n      ]}\n      disabled={isDisabled}\n      {...touchableProps}\n    >\n      {children}\n    </TouchableOpacity>\n  );\n};\n\ninterface TitleProps extends TextProps {\n  title?: OptionalString;\n  size: ControlSize | number;\n  isDisabled: boolean;\n}\n\nconst StyledTitle = (props: TitleProps) => {\n  const { title, style, size, isDisabled, ...textProps } = props;\n\n  if (!title) return null;\n\n  return (\n    <Text\n      size={size}\n      color={isDisabled ? 'muted' : 'default'}\n      style={[{}, getStyle(props, style)]}\n      {...textProps}\n    >\n      {title}\n    </Text>\n  );\n};\n\ninterface TextWrapperProps extends ViewProps {\n  children?: React.ReactNode;\n  hasAvatar: boolean;\n}\n\nconst StyledTextWrapper = (props: TextWrapperProps) => {\n  const { children, style, hasAvatar = false, ...viewProps } = props;\n\n  return (\n    <View\n      style={[\n        { flex: 1, justifyContent: 'center', paddingLeft: hasAvatar ? 8 : 0 },\n        style,\n      ]}\n      {...viewProps}\n    >\n      {children}\n    </View>\n  );\n};\n\ninterface DescriptionProps extends TextProps {\n  description?: OptionalString;\n  size: ControlSize | number;\n  isDisabled: boolean;\n}\n\nconst StyledDescription = (props: DescriptionProps) => {\n  const { style, description, size, isDisabled, ...viewProps } = props;\n  const { getSmallerHeightControlSize } = useControlSizeUtils();\n\n  if (!description) return null;\n\n  return (\n    <Text\n      size={getSmallerHeightControlSize(size)}\n      color=\"muted\"\n      style={[{}, getStyle(props, style)]}\n      {...viewProps}\n    >\n      {description}\n    </Text>\n  );\n};\n\ninterface ActionProps {\n  isDisabled: boolean;\n}\n\nconst StyledAction = (props: ActionProps) => {\n  return <></>;\n};\n\nconst StyledAvatar = (props: AvatarProps) => {\n  const { source, name } = props;\n\n  if (!source && !name) return null;\n\n  return <Avatar {...props} />;\n};\n"],"sourceRoot":""}