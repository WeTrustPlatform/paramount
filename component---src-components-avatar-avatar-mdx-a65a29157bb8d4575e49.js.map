{"version":3,"sources":["webpack:///../src/components/Avatar/Avatar.mdx","webpack:///../src/components/Avatar/Avatar.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Avatar","Box","source","uri","width","height","name","size","of","isMDXComponent","isSolid","color","testID","overrides","theme","useTheme","React","useState","hasImageFailedLoading","setHasImageFailedLoading","isImageUnavailable","getOverrides","StyledRoot","dlv","Root","rootProps","StyledInitials","Initials","initialsProps","StyledImage","onError","Image","ImageR","imageProps","hashCode","s","str","String","hash","trim","length","i","charCodeAt","Math","abs","avatarScale","large","medium","small","children","style","appearances","fills","keys","Object","controlSize","isControlSize","controlHeights","alignItems","backgroundColor","borderRadius","display","justifyContent","overflow","position","textProps","initials","fallback","replace","split","slice","map","v","toUpperCase","join","getInitials","fontSize","lineHeight","getStyle"],"mappings":"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","file":"component---src-components-avatar-avatar-mdx-a65a29157bb8d4575e49.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Avatar } from './Avatar';\nimport { Box } from '../Box';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"avatar\"\n    }}>{`Avatar`}</h1>\n    <p>{`Display avatar image, with default for name initials`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Avatar\\n  source={{ uri: \\'https://picsum.photos/200/200\\', width: 200, height: 200 }}\\n  name=\\\"Bill Gates\\\"\\n  size=\\\"large\\\"\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Avatar,\n      Box\n    }} mdxType=\"Playground\">\n  <Avatar source={{\n        uri: 'https://picsum.photos/200/200',\n        width: 200,\n        height: 200\n      }} name=\"Bill Gates\" size=\"large\" mdxType=\"Avatar\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Avatar} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import dlv from 'dlv';\nimport React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  View,\n  ViewProps,\n} from 'react-native';\n\nimport { useTheme } from '../../theme';\nimport { ControlSize, FillColor, FillColors } from '../../theme/Theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, getStyle, WithOverrides } from '../../utils/Overrides';\nimport { Text, TextProps } from '../Typography';\n\ninterface AvatarBaseProps {\n  /** The source attribute of the image. When it's not available, render initials instead. */\n  source?: ImageSourcePropType;\n\n  /**\n   * The size of the avatar.\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name?: string;\n\n  /**\n   * When true, render a solid background when initials are used.\n   * @default false\n   */\n  isSolid?: boolean;\n\n  /**\n   * The color used for the avatar.\n   * @default \"auto\"\n   */\n  color?: 'auto' | FillColor;\n\n  /** Used to locate this view in end-to-end tests. */\n  testID?: string;\n}\n\nexport interface AvatarOverrides {\n  Root: RootProps;\n  Initials: InitialsProps;\n  Image: ImageProps;\n}\n\nexport interface AvatarProps\n  extends WithOverrides<AvatarBaseProps, AvatarOverrides> {}\n\nexport const Avatar = (props: AvatarProps) => {\n  const {\n    source,\n    name,\n    size = 'medium',\n    isSolid = false,\n    color = 'auto',\n    testID,\n    overrides = {},\n  } = props;\n\n  const theme = useTheme();\n  const [hasImageFailedLoading, setHasImageFailedLoading] = React.useState(\n    false,\n  );\n  const isImageUnavailable = !source || hasImageFailedLoading;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { name, size, isSolid, color, testID },\n    dlv(theme, 'overrides.Avatar.Root'),\n    overrides.Root,\n  );\n  const [Initials, initialsProps] = getOverrides(\n    StyledInitials,\n    props,\n    { name, size, isSolid, color },\n    dlv(theme, 'overrides.Avatar.Initial'),\n    overrides.Initials,\n  );\n\n  if (!isImageUnavailable && !!source) {\n    const [ImageR, imageProps] = getOverrides(\n      StyledImage,\n      props,\n      {\n        onError: () => setHasImageFailedLoading(true),\n        source,\n      },\n      dlv(theme, 'overrides.Avatar.Image'),\n      overrides.Image,\n    );\n\n    return (\n      <Root {...rootProps}>\n        <ImageR {...imageProps} />\n      </Root>\n    );\n  }\n\n  return (\n    <Root {...rootProps}>\n      <Initials {...initialsProps} />\n    </Root>\n  );\n};\n\ninterface PropsWithChildren {\n  children?: React.ReactNode;\n}\n\nexport const hashCode = (s?: string) => {\n  const str = String(s);\n  let hash = 0;\n  let char;\n  if (str.trim().length === 0) return hash;\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    // Convert to 32bit integer\n    hash &= hash;\n  }\n  return Math.abs(hash);\n};\n\nexport type AvatarColor = 'automatic' | keyof FillColors;\n\nconst avatarScale: { [size in ControlSize]: number } = {\n  large: 2,\n  medium: 1.5,\n  small: 1,\n};\n\ninterface RootProps extends ViewProps, PropsWithChildren {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { testID, children, name, size, isSolid, color, style } = props;\n  const theme = useTheme();\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  return (\n    <View\n      style={[\n        {\n          alignItems: 'center',\n          backgroundColor:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].backgroundColor,\n          borderRadius: 9999,\n          display: 'flex',\n          height: controlSize,\n          justifyContent: 'center',\n          overflow: 'hidden',\n          position: 'relative',\n          width: controlSize,\n        },\n        style,\n      ]}\n      testID={testID}\n    >\n      {children}\n    </View>\n  );\n};\n\nconst getInitials = (name?: string, fallback = '?') => {\n  if (!name) return fallback;\n\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('');\n};\n\ninterface InitialsProps extends TextProps {\n  size: ControlSize | number;\n  name?: string;\n  isSolid: boolean;\n  color: 'auto' | FillColor;\n}\n\nconst StyledInitials = (props: InitialsProps) => {\n  const { name, size, isSolid, color, style, ...textProps } = props;\n  const theme = useTheme();\n\n  const appearances = theme.fills[isSolid ? 'solid' : 'subtle'];\n  const keys = Object.keys(appearances);\n\n  const controlSize = isControlSize(size)\n    ? theme.controlHeights[size] * avatarScale[size]\n    : size;\n\n  const initials = getInitials(name);\n\n  return (\n    <Text\n      {...textProps}\n      style={[\n        {\n          color:\n            appearances[\n              color === 'auto'\n                ? (keys[hashCode(name) % keys.length] as keyof FillColors)\n                : color\n            ].color,\n          fontSize: controlSize / 2,\n          lineHeight: controlSize,\n        },\n        getStyle(props, style),\n      ]}\n    >\n      {initials}\n    </Text>\n  );\n};\n\nconst StyledImage = (props: ImageProps) => {\n  const { style, ...imageProps } = props;\n\n  return (\n    <Image\n      style={[\n        {\n          height: '100%',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...imageProps}\n    />\n  );\n};\n"],"sourceRoot":""}