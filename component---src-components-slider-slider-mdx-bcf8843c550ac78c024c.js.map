{"version":3,"sources":["webpack:///../src/hooks/usePrevious.ts","webpack:///../src/components/Slider/Slider.tsx","webpack:///../src/components/Slider/Slider.mdx","webpack:///../src/hooks/useMeasure.ts","webpack:///../src/components/Helpers/ViewMeasure.tsx"],"names":["usePrevious","value","ref","React","useRef","useEffect","current","initialMeasurements","height","pageX","pageY","width","x","y","getBoundedValueBase","maximumValue","minimumValue","isRangeValue","Array","isArray","getLeftValue","getRightValue","Slider","props","initialValue","onSlidingStart","onSlidingComplete","onValueChange","step","size","isRange","overrides","theme","useTheme","finalInitialValue","useState","setValue","isSliding","setIsSliding","trackMeasurements","setTrackMeasurements","prevIsSliding","valuePerPixel","pixelPerValue","isRangeSlider","handleLeftSlide","useCallback","dx","leftValue","roundedLeftValue","Math","round","finalLeftValue","updatedValue","previousValue","setLeftValue","handleRightSlide","rightValue","roundedRightValue","finalRightValue","setRightValue","makeThumbRef","handler","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","onPanResponderMove","_","onPanResponderRelease","leftThumbRef","rightThumbRef","left","right","getOverrides","StyledRoot","onMeasure","dlv","Root","rootProps","StyledUnselectedTrack","UnselectedTrack","unselectedTrackProps","StyledSelectedTrack","SelectedTrack","selectedTrackProps","StyledThumb","position","panHandlers","LeftThumb","leftThumbProps","RightThumb","rightThumbProps","style","viewMeasureProps","controlSize","isControlSize","controlHeights","ViewMeasure","justifyContent","viewProps","View","backgroundColor","colors","background","greyDark","borderRadius","primaryDefault","cursor","accessible","content","borderColor","border","primary","borderWidth","zIndex","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","__position","__code","__scope","Playground","Props","console","log","parentName","of","isMDXComponent","adjustPageY","Platform","OS","window","scrollY","useMeasure","measurements","setMeasurements","handleMeasure","layout","handle","findNodeHandle","prevMeasurements","UIManager","measure","newMeasurements","handleLayout","e","nativeEvent","handleResize","Dimensions","addEventListener","removeEventListener","onLayout","children","isRenderProp"],"mappings":"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","file":"component---src-components-slider-slider-mdx-bcf8843c550ac78c024c.js","sourcesContent":["import React from 'react';\n\nexport const usePrevious = <TValue = any>(value: TValue) => {\n  const ref = React.useRef<TValue>(value);\n\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n};\n","import dlv from 'dlv';\nimport React from 'react';\nimport { PanResponder, View, ViewProps } from 'react-native';\n\nimport { usePrevious } from '../../hooks';\nimport { ControlSize, useTheme } from '../../theme';\nimport { isControlSize } from '../../utils/ControlSize';\nimport { getOverrides, WithOverrides } from '../../utils/Overrides';\nimport { ViewMeasure, ViewMeasureProps } from '../Helpers';\n\ntype RangeValue = [number, number];\ntype SliderValue = number | RangeValue;\ntype Value<TIsRange extends boolean> = TIsRange extends true\n  ? [number, number]\n  : number;\n\ninterface SliderBaseProps<TIsRange extends boolean> {\n  /**\n   * Set whether it should slide a range. You should specify the value to get proper type-checking.\n   * However, if initialValue is set, it will take precedence over this prop\n   * @default false\n   */\n  isRange?: TIsRange;\n\n  /**\n   * Size of the thumb, and thus the whole slider\n   * @default \"medium\"\n   */\n  size?: ControlSize | number;\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue; which default to 0 and 1 respectively.\n   *\n   * *This is not a controlled component*; you don't need to update the\n   * value during dragging.\n   * @default 0\n   */\n  value?: Value<TIsRange>;\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * @default 0\n   */\n  step?: number;\n\n  /**\n   * Initial minimum value of the slider.\n   * @default 0\n   */\n  minimumValue?: number;\n\n  /**\n   * Initial maximum value of the slider.\n   * @default 1\n   */\n  maximumValue?: number;\n\n  /**\n   * If true the user won't be able to move the slider.\n   * @default false\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback that is called when the user releases the slider;\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: (value: Value<TIsRange>) => void;\n\n  /**\n   * Callback called when the user starts changing the value.\n   */\n  onSlidingStart?: (value: Value<TIsRange>) => void;\n\n  testID?: string;\n}\n\nexport interface SliderOverrides {\n  Root: RootProps;\n  UnselectedTrack: UnselectedTrackProps;\n  SelectedTrack: SelectedTrackProps;\n  LeftThumb: ThumbProps;\n  RightThumb: ThumbProps;\n}\n\nexport interface SliderProps<TIsRange extends boolean>\n  extends WithOverrides<SliderBaseProps<TIsRange>, SliderOverrides> {}\n\nconst initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst getBoundedValueBase = ({\n  maximumValue,\n  minimumValue,\n}: {\n  maximumValue: number;\n  minimumValue: number;\n}) => (value: number) =>\n  value > maximumValue\n    ? maximumValue\n    : value < minimumValue\n    ? minimumValue\n    : value;\n\nconst isRangeValue = (value: SliderValue): value is [number, number] =>\n  Array.isArray(value);\n\nconst getLeftValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[0];\n  return value;\n};\n\nconst getRightValue = (value: SliderValue): number => {\n  if (isRangeValue(value)) return value[1];\n  return value;\n};\n\nconst setLeftValue = (\n  previousValue: SliderValue,\n  leftValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [leftValue, previousValue[1]]\n    : leftValue;\n};\n\nconst setRightValue = (\n  previousValue: SliderValue,\n  rightValue: number,\n): SliderValue => {\n  return isRangeValue(previousValue)\n    ? [previousValue[0], rightValue]\n    : rightValue;\n};\n\nexport const Slider = <TIsRange extends boolean>(\n  props: SliderProps<TIsRange>,\n) => {\n  const {\n    value: initialValue = 0,\n    onSlidingStart = () => undefined,\n    onSlidingComplete = () => undefined,\n    onValueChange = () => undefined,\n    minimumValue = 0,\n    maximumValue = 1,\n    step = 0,\n    size = 'medium' as const,\n    isRange = false,\n    overrides = {},\n  } = props;\n  const theme = useTheme();\n\n  const finalInitialValue =\n    initialValue || (isRange ? [minimumValue, maximumValue] : minimumValue);\n\n  const [value, setValue] = React.useState(finalInitialValue);\n  const [isSliding, setIsSliding] = React.useState(false);\n  const [trackMeasurements, setTrackMeasurements] = React.useState(\n    initialMeasurements,\n  );\n  const prevIsSliding = usePrevious(isSliding);\n  const valuePerPixel = (maximumValue - minimumValue) / trackMeasurements.width;\n  const pixelPerValue = trackMeasurements.width / (maximumValue - minimumValue);\n  const isRangeSlider = isRangeValue(value);\n\n  const handleLeftSlide = React.useCallback(\n    (dx: number) => {\n      const leftValue = getLeftValue(value) + dx * valuePerPixel;\n      const roundedLeftValue = step\n        ? Math.round(leftValue / step) * step\n        : leftValue;\n\n      const finalLeftValue = getBoundedValueBase({\n        maximumValue: isRangeSlider\n          ? getRightValue(value) - step\n          : maximumValue,\n        minimumValue,\n      })(getLeftValue(roundedLeftValue));\n      const updatedValue = setLeftValue(value, finalLeftValue);\n\n      setValue(updatedValue);\n      onValueChange(updatedValue as Value<TIsRange>);\n    },\n    [\n      isRangeSlider,\n      maximumValue,\n      minimumValue,\n      onValueChange,\n      step,\n      value,\n      valuePerPixel,\n    ],\n  );\n\n  const handleRightSlide = React.useCallback(\n    (dx: number) => {\n      const rightValue = getRightValue(value) + dx * valuePerPixel;\n      const roundedRightValue = step\n        ? Math.round(rightValue / step) * step\n        : rightValue;\n\n      const finalRightValue = getBoundedValueBase({\n        maximumValue,\n        minimumValue: getLeftValue(value) + step,\n      })(getRightValue(roundedRightValue));\n\n      const updatedValue = setRightValue(value, finalRightValue);\n\n      setValue(updatedValue);\n      onValueChange(updatedValue as Value<TIsRange>);\n    },\n    [maximumValue, onValueChange, step, value, valuePerPixel],\n  );\n\n  const makeThumbRef = React.useCallback(\n    (handler: (dx: number) => void) =>\n      PanResponder.create({\n        onStartShouldSetPanResponder: () => {\n          onSlidingStart(value as Value<TIsRange>);\n          return true;\n        },\n\n        onPanResponderGrant: () => {\n          setIsSliding(true);\n        },\n\n        onPanResponderMove: (_, { dx }) => handler(dx),\n\n        onPanResponderRelease: () => {\n          setIsSliding(false);\n        },\n      }),\n    [onSlidingStart, value],\n  );\n\n  const leftThumbRef = React.useRef(makeThumbRef(handleLeftSlide));\n  const rightThumbRef = React.useRef(makeThumbRef(handleRightSlide));\n\n  React.useEffect(() => {\n    // We need to update the callback `onPanResponderMove` because it uses memoized `value`\n    leftThumbRef.current = makeThumbRef(handleLeftSlide);\n    rightThumbRef.current = makeThumbRef(handleRightSlide);\n\n    // We need to callback here because we need latest value instead of memoized one\n    if (prevIsSliding && !isSliding) {\n      onSlidingComplete(value as Value<TIsRange>);\n    }\n\n    // We diff valuePerPixel because on loading the component it may be NaN as it is calculating the measurements of the track\n  }, [\n    handleLeftSlide,\n    handleRightSlide,\n    isSliding,\n    makeThumbRef,\n    onSlidingComplete,\n    prevIsSliding,\n    value,\n    valuePerPixel,\n  ]);\n\n  const left = getLeftValue(value) * pixelPerValue;\n  const right = getRightValue(value) * pixelPerValue;\n\n  const [Root, rootProps] = getOverrides(\n    StyledRoot,\n    props,\n    { size, onMeasure: setTrackMeasurements },\n    dlv(theme, 'overrides.Slider.Root'),\n    overrides.Root,\n  );\n  const [UnselectedTrack, unselectedTrackProps] = getOverrides(\n    StyledUnselectedTrack,\n    props,\n    { size },\n    dlv(theme, 'overrides.Slider.UnselectedTrack'),\n    overrides.UnselectedTrack,\n  );\n  const [SelectedTrack, selectedTrackProps] = getOverrides(\n    StyledSelectedTrack,\n    props,\n    { isRangeSlider, left, right, size },\n    dlv(theme, 'overrides.Slider.SelectedTrack'),\n    overrides.SelectedTrack,\n  );\n  const [LeftThumb, leftThumbProps] = getOverrides(\n    StyledThumb,\n    props,\n    {\n      size,\n      position: left,\n      isSliding,\n      value: getLeftValue(value),\n      ...leftThumbRef.current.panHandlers,\n    },\n    dlv(theme, 'overrides.Slider.LeftThumb'),\n    overrides.LeftThumb,\n  );\n  const [RightThumb, rightThumbProps] = getOverrides(\n    StyledThumb,\n    props,\n    {\n      size,\n      position: right,\n      isSliding,\n      value: getRightValue(value),\n      ...rightThumbRef.current.panHandlers,\n    },\n    dlv(theme, 'overrides.Slider.RightThumb'),\n    overrides.RightThumb,\n  );\n\n  return (\n    <Root {...rootProps}>\n      <UnselectedTrack {...unselectedTrackProps} />\n      <SelectedTrack {...selectedTrackProps} />\n      <LeftThumb {...leftThumbProps} />\n      {isRangeSlider && <RightThumb {...rightThumbProps} />}\n    </Root>\n  );\n};\n\ninterface RootProps extends ViewMeasureProps {\n  size: ControlSize | number;\n}\n\nconst StyledRoot = (props: RootProps) => {\n  const { style, size, ...viewMeasureProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <ViewMeasure\n      style={[\n        {\n          height: controlSize,\n          justifyContent: 'center',\n        },\n        style,\n      ]}\n      {...viewMeasureProps}\n    />\n  );\n};\n\ninterface UnselectedTrackProps extends ViewProps {\n  size: ControlSize | number;\n}\n\nconst StyledUnselectedTrack = (props: UnselectedTrackProps) => {\n  const { style, size, ...viewProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.greyDark,\n          borderRadius: 8,\n          height: controlSize / 4,\n          position: 'absolute',\n          width: '100%',\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\ninterface SelectedTrackProps extends ViewProps {\n  size: ControlSize | number;\n  left: number;\n  right: number;\n  isRangeSlider: boolean;\n}\n\nconst StyledSelectedTrack = (props: SelectedTrackProps) => {\n  const {\n    style,\n    size,\n    left = 0,\n    right = 0,\n    isRangeSlider,\n    ...viewProps\n  } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: theme.colors.background.primaryDefault,\n          borderRadius: 8,\n          height: controlSize / 4,\n          position: 'absolute',\n          width: '100%',\n          ...(isRangeSlider ? { left, width: right - left } : { width: left }),\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n\ninterface ThumbProps extends ViewProps {\n  size: ControlSize | number;\n  isSliding: boolean;\n  position: number;\n  value: number;\n}\n\nconst StyledThumb = (props: ThumbProps) => {\n  const { style, size, isSliding = false, position = 0, ...viewProps } = props;\n  const theme = useTheme();\n\n  const controlSize = isControlSize(size) ? theme.controlHeights[size] : size;\n  const cursor = isSliding ? 'grabbing' : 'grab';\n\n  return (\n    <View\n      accessible\n      style={[\n        {\n          backgroundColor: theme.colors.background.content,\n          borderColor: theme.colors.border.primary,\n          borderRadius: 999,\n          borderWidth: 3,\n          height: controlSize,\n          position: 'absolute',\n          width: controlSize,\n          zIndex: 1,\n          left: position - controlSize / 2,\n          // @ts-ignore\n          cursor,\n        },\n        style,\n      ]}\n      {...viewProps}\n    />\n  );\n};\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/WeTrustPlatform/paramount/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Slider } from './Slider';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={0} __code={'<Slider\\n  size=\\\"small\\\"\\n  value={0.3}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider size=\"small\" value={0.3} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"with-range\"\n    }}>{`With Range`}</h3>\n    <p>{`By using `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` as an array of `}<inlineCode parentName=\"p\">{`[number, number]`}</inlineCode>{`, it will automatically transform into a range slider. The minimum range is the value of the step`}</p>\n    <Playground __position={1} __code={'<Slider\\n  value={[30, 60]}\\n  step={5}\\n  minimumValue={0}\\n  maximumValue={100}\\n  onValueChange={value => console.log(\\'onValueChange\\', value)}\\n  onSlidingComplete={value => console.log(\\'onSlidingComplete\\', value)}\\n  onSlidingStart={value => console.log(\\'onSlidingStart\\', value)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Slider\n    }} mdxType=\"Playground\">\n  <Slider value={[30, 60]} step={5} minimumValue={0} maximumValue={100} onValueChange={value => console.log('onValueChange', value)} onSlidingComplete={value => console.log('onSlidingComplete', value)} onSlidingStart={value => console.log('onSlidingStart', value)} mdxType=\"Slider\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport {\n  Dimensions,\n  findNodeHandle,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  UIManager,\n} from 'react-native';\n\nexport interface Measurements {\n  height: number;\n  pageX: number;\n  pageY: number;\n  width: number;\n  x: number;\n  y: number;\n}\nexport interface UseMeasureProps {\n  onMeasure?: (props: Measurements) => void;\n  ref: React.MutableRefObject<any>;\n}\n\nexport const initialMeasurements = {\n  height: 0,\n  pageX: 0,\n  pageY: 0,\n  width: 0,\n  x: 0,\n  y: 0,\n};\n\nconst adjustPageY = (pageY: number) => {\n  // On the web, when scroll position is restored (e.g. User is scrolled down and refreshes the page)\n  // We need to adjust pageY accordingly. Required to correct behavior of positioner\n  return Platform.OS === 'web' ? pageY + window.scrollY : pageY;\n};\n\n/**\n * A render prop to measure given node by passing `onLayout` and `ref` handlers. This differs from `ViewMeasure` in that it does not create any node in the tree\n */\nexport const useMeasure = (props: UseMeasureProps) => {\n  const { onMeasure, ref } = props;\n  const [measurements, setMeasurements] = React.useState(initialMeasurements);\n\n  const handleMeasure = React.useCallback(\n    (layout?: LayoutRectangle) => {\n      const handle = findNodeHandle(ref.current);\n      const prevMeasurements = measurements;\n\n      if (handle) {\n        UIManager.measure(handle, (x, y, width, height, pageX, pageY) => {\n          const newMeasurements = {\n            ...prevMeasurements,\n            ...layout,\n            pageX,\n            pageY: adjustPageY(pageY),\n          };\n\n          setMeasurements(newMeasurements);\n\n          if (onMeasure) onMeasure(newMeasurements);\n        });\n      }\n    },\n    [measurements, onMeasure, ref],\n  );\n\n  const handleLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      // Use the value from here, isntead of inside UIManager.measure callback\n      // Async behavior will nullify nativeEvent\n      const layout = e.nativeEvent.layout;\n      handleMeasure(layout);\n    },\n    [handleMeasure],\n  );\n\n  const handleResize = React.useCallback(() => {\n    handleMeasure();\n  }, [handleMeasure]);\n\n  React.useEffect(() => {\n    Dimensions.addEventListener('change', handleResize);\n\n    return () => Dimensions.removeEventListener('change', handleResize);\n  }, [handleResize, measurements]);\n\n  return {\n    measurements,\n    onLayout: handleLayout,\n    onMeasure: handleMeasure,\n  };\n};\n","import React from 'react';\nimport { View, ViewProps } from 'react-native';\n\nimport { Measurements, useMeasure } from '../../hooks/useMeasure';\n\nexport type ViewMeasureRenderProp = (props: Measurements) => JSX.Element;\n\nexport interface ViewMeasureProps extends ViewProps {\n  onMeasure?: (props: Measurements) => void;\n  children?: React.ReactNode | ViewMeasureRenderProp;\n}\n\n/**\n * Wraps content in a `View` with which the measurements are calculated\n */\n\nexport const ViewMeasure = (props: ViewMeasureProps) => {\n  const { onMeasure, children, ...viewProps } = props;\n  const isRenderProp = typeof children === 'function';\n  const ref = React.useRef<View>(null);\n  const { measurements, onLayout } = useMeasure({ onMeasure, ref });\n\n  return (\n    <View ref={ref} onLayout={onLayout} {...viewProps}>\n      {/*\n      //\n      // @ts-ignore */}\n      {isRenderProp ? children(measurements) : children}\n    </View>\n  );\n};\n"],"sourceRoot":""}